<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-16T06:33:46+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">Software Design - Introduction to Evolutionary Design</title><link href="http://localhost:4000/blog/SwDesignLesson13" rel="alternate" type="text/html" title="Software Design - Introduction to Evolutionary Design" /><published>2019-10-15T11:51:00+00:00</published><updated>2019-10-15T11:51:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson13</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson13">&lt;p&gt;With extreme programming and agile, the focus is being lean and doing just in time design. In this context, how do you ensure that your design remains good and evolves along with the application requirements?&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is Evolutionary Design?&lt;/li&gt;
  &lt;li&gt;Why is it important?&lt;/li&gt;
  &lt;li&gt;How can you use Evolutionary Design in the best way possible?&lt;/li&gt;
  &lt;li&gt;What Are The Advantages Of Evolutionary Design?&lt;/li&gt;
  &lt;li&gt;How does Evolutionary Design fit in with agile?&lt;/li&gt;
  &lt;li&gt;What are the best practices with Evolutionary Design?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;waterfall-model-in-perspective&quot;&gt;Waterfall Model In Perspective&lt;/h3&gt;

&lt;p&gt;One of the first software implementation model was the &lt;strong&gt;Waterfall Model&lt;/strong&gt;. Before we start with Evolutionary Design, lets look at how design was done in a Waterfall Model.&lt;/p&gt;

&lt;p&gt;The Waterfall Model typically involves the following project stages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Architecture&lt;/li&gt;
  &lt;li&gt;Design&lt;/li&gt;
  &lt;li&gt;Programming/Coding&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The duration of each of these phases could be a month, two months or even three months.&lt;/p&gt;

&lt;p&gt;Before you can get to the programming step, you need to be involved for a long time in the architecture and design phases. The result of this is that you have the components of your program fully specified - the classes, methods among others - before you even start coding.&lt;/p&gt;

&lt;p&gt;This model assumes that you can design software just like you design your buildings or bridges.&lt;/p&gt;

&lt;p&gt;However, there were several problems with this approach and we quickly moved on to other design approaches as new sotware development models evolved.&lt;/p&gt;

&lt;h3 id=&quot;introducing-evolutionary-design&quot;&gt;Introducing Evolutionary Design&lt;/h3&gt;

&lt;p&gt;In the waterfall model, we architect and design the entire system before we even start coding.&lt;/p&gt;

&lt;p&gt;Evolutionary Design adopts a radically different approach. It focuses on having a simple design that works to start with. Now, what is simple design?&lt;/p&gt;

&lt;p&gt;A software application is said to have a simple design if it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Runs all tests&lt;/strong&gt; : There are good unit tests and all tests succeed all the time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contains no duplication&lt;/strong&gt; : There is no duplication of code or intent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expresses intent of programmers&lt;/strong&gt; : Code is clear, easy to read and simple.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minimizes number of classes and methods&lt;/strong&gt; : Architecture and Design are as simple as possible to get things dones. Classes and Methods are as small as possible without losing clarity or performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thought process behind Evolution Design is that once the design is simple, you can enhance it easily to meet future needs.&lt;/p&gt;

&lt;h3 id=&quot;evolutionary-design-and-agile&quot;&gt;Evolutionary Design and Agile&lt;/h3&gt;

&lt;p&gt;Evolution design fits very well with the agile way of working.&lt;/p&gt;

&lt;p&gt;Agile focuses on getting things done in small cycles. You design a little. You code a little. You test a little. You move your code to production often. Focusing on 4 principles of Simple Design helps you in keeping the design simple and evolve design over a period of time instead of a one time design.&lt;/p&gt;

&lt;h3 id=&quot;architecture-vs-design&quot;&gt;Architecture vs Design&lt;/h3&gt;

&lt;p&gt;While the focus of agile is on just in time design, it is important to distinguish between design decisions and architectural decisions.&lt;/p&gt;

&lt;p&gt;Some decision are difficult to change, once you made the choice. For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What frameworks to use to build your application?&lt;/li&gt;
  &lt;li&gt;How do you integrate with other applications?&lt;/li&gt;
  &lt;li&gt;What is the boundary of the application you are building?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These decisions are what I call - architectural decisions. It is important to take time while making architectural decisions and involve your architecture team as well.&lt;/p&gt;

&lt;h3 id=&quot;how-evolutionary-design-works&quot;&gt;How Evolutionary Design Works&lt;/h3&gt;

&lt;p&gt;In Evolutionary design, we follow an iterative approach:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Does your feature involve an architectural decision? If not, go to next step. Otherwise, get your architecture team involved and possibly do a prototype to test your architecural decision.&lt;/li&gt;
  &lt;li&gt;Code the feature&lt;/li&gt;
  &lt;li&gt;Refactor code to meet 4 Principles of Simple Design&lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-are-the-advantages-of-evolutionary-design&quot;&gt;What Are The Advantages Of Evolutionary Design?&lt;/h3&gt;

&lt;p&gt;The following are the stand-out advantages of Evolutionary Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Avoids over-design&lt;/strong&gt; : When we follow older design methods, we tend to prepare our software to handle future requirements. This is a classic case of over-design.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoids wastage of effort&lt;/strong&gt;: This could happen when we design for future requirements that never happen&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Designs just-in-time&lt;/strong&gt;: It follows an iterative cycle of development, where the focus is on current requirements, delivering current value, and incorporating relevant feedback.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-challenges-arise-with-evolutionary-design&quot;&gt;What Challenges Arise With Evolutionary Design?&lt;/h3&gt;

&lt;p&gt;The following are the significant challenges posed by Evolutionary Design:&lt;/p&gt;

&lt;h4 id=&quot;needs-a-clear-separation-between-architecture-and-design&quot;&gt;Needs a clear separation between Architecture and Design&lt;/h4&gt;

&lt;p&gt;All design cannot be done in the nick of time; architecture decisions are difficult to change and time must be devoted to those. You may want to create a separate category of user story, or even a separate process sprint to cover the architecture decisions. Also, everyone in the project needs to be clear about these two kinds of decisions for the project.&lt;/p&gt;

&lt;h4 id=&quot;need-for-skilled-and-experienced-architects-and-developers&quot;&gt;Need for skilled and experienced architects and developers&lt;/h4&gt;

&lt;p&gt;A group of inexperienced or less experienced developers cannot pull off a well-designed software application, using evolutionary design. You need guidance from experienced people.&lt;/p&gt;

&lt;h4 id=&quot;need-for-continuous-integration&quot;&gt;Need for Continuous Integration&lt;/h4&gt;

&lt;p&gt;Continuous Integration is essential for Evolutionary Design is effective:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To be sure your tests are running regularly&lt;/li&gt;
  &lt;li&gt;To ensure that code quality is under check&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;needs-high-quality-tests&quot;&gt;Needs High Quality Tests&lt;/h4&gt;

&lt;p&gt;Your unit tests need to be really top-class. If these unit tests are not good, then refactoring the code is out of question. This leads to the design getting stagnated, as the 
developers are reluctant to refactor the code. Now, the design is no longer evolutionary!&lt;/p&gt;

&lt;h3 id=&quot;understanding-the-best-practices&quot;&gt;Understanding The Best Practices&lt;/h3&gt;

&lt;p&gt;The two major points to stress on here are:&lt;/p&gt;

&lt;h4 id=&quot;use-test-driven-development-tdd&quot;&gt;Use Test-Driven Development (TDD)&lt;/h4&gt;

&lt;p&gt;This is the best way to ensure that your low-level design is good. With TDD, your focus before you write any code is how you will go about testing it. For example, you start thinking about how someone will use your class and its methods, before you write the method. You thus have an &lt;em&gt;outside-in&lt;/em&gt; perspective, and that’s always good to have as a developer. This results in the software having a good and robust API.&lt;/p&gt;

&lt;p&gt;Another things that results from TDD is you have great unit tests!&lt;/p&gt;

&lt;p&gt;When following TDD, you first write a unit test, make it fail, and then write the code to make it pass. So, you have more reliable tests.&lt;/p&gt;

&lt;h4 id=&quot;use-continuous-integration&quot;&gt;Use Continuous Integration&lt;/h4&gt;

&lt;p&gt;As we saw a short while ago, we need to make sure we keep running the tests we write, regularly. This ensures you get immediate feedback if something has gone wrong.&lt;/p&gt;

&lt;h3 id=&quot;how-to-learn-evolutionary-design&quot;&gt;How To Learn Evolutionary Design?&lt;/h3&gt;

&lt;p&gt;The best way to learn this is by using &lt;strong&gt;pair programming&lt;/strong&gt;: pair with good, experienced programmers. This will give you insights into how to evolve your program’s design, over a period of time.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we gave you an insight into Evolutionary Design. Evolutionary Design helps us avoid over design and keeps our design simple.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson12&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson13&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">With extreme programming and agile, the focus is being lean and doing just in time design. In this context, how do you ensure that your design remains good and evolves along with the application requirements?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - Coupling - with examples</title><link href="http://localhost:4000/blog/SwDesignLesson11" rel="alternate" type="text/html" title="Software Design - Coupling - with examples" /><published>2019-10-15T11:36:00+00:00</published><updated>2019-10-15T11:36:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson11</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson11">&lt;p&gt;Software architects and programmers love low coupling. What is coupling? Why is coupling important? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What is coupling?&lt;/li&gt;
  &lt;li&gt;What are common examples of coupling in software?&lt;/li&gt;
  &lt;li&gt;How can we reduce the amount of coupling between classes, between components, and the like?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-of-couping&quot;&gt;Example of Couping&lt;/h3&gt;

&lt;p&gt;Let’s start with an example.&lt;/p&gt;

&lt;p&gt;Let’s say a friend of mine is developing a Java component, in the form of a JAR file, for me to use. However, there is an implicit constraint imposed here - I need to use Java (or a JVM Based language) to use the utility JAR file! In other words, developing the component as a Java JAR has &lt;strong&gt;coupled&lt;/strong&gt; me to using Java as well. To break free, I need to &lt;strong&gt;decouple&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;how-to-decouple-an-example&quot;&gt;How to Decouple? An Example:&lt;/h4&gt;

&lt;p&gt;Instead of providing me with a JAR, I could ask my friend to create a web service interface for me to access the same functionality. The concept would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-06-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The web service is created around the JAR, and can be accessed from a Java, a PHP, or a .NET application. We can use any kind of application to invoke the web service.&lt;/p&gt;

&lt;p&gt;This implies we have effectively decoupled from the underlying technology of the component. We are no longer affected by the fact that the component was developed in Java.&lt;/p&gt;

&lt;h3 id=&quot;another-example-for-low-coupling---spring-framework&quot;&gt;Another Example for Low Coupling - Spring Framework&lt;/h3&gt;

&lt;p&gt;Spring Framework has a highly modular structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-06-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Suppose we want to use a specific module from this framework; for instance, the Spring JDBC module.&lt;/p&gt;

&lt;p&gt;What would happen if Spring tells you that you can only use Spring JDBC if you also use the Beans and Context modules?&lt;/p&gt;

&lt;p&gt;You would probably not use it at all, because it introduces additional dependencies such as configuration etc.&lt;/p&gt;

&lt;p&gt;Spring does get this right; it does not force you to use Beans or Context along with JDBC. In other words, Spring modules are not coupled with the other ones.&lt;/p&gt;

&lt;h3 id=&quot;class-level-coupling---the-order-class&quot;&gt;Class-level coupling - The &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class&lt;/h3&gt;

&lt;p&gt;Let’s now go one level deeper. Let’s look at Coupling at the level of classes.&lt;/p&gt;

&lt;p&gt;Let’s look at a simple shopping cart example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salesTax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salexTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;orderTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You would observe that &lt;code class=&quot;highlighter-rouge&quot;&gt;orderTotalPrice()&lt;/code&gt; knows the internal details of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It accesses the &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; field of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; directly&lt;/li&gt;
  &lt;li&gt;It accesses the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt; fields of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt;, also directly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scenario : Try and imagine a situation where we change the name of the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; field of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt;, to something else.&lt;/p&gt;

&lt;p&gt;Approach : Code within &lt;code class=&quot;highlighter-rouge&quot;&gt;orderTotalPrice()&lt;/code&gt; would also need to change.&lt;/p&gt;

&lt;p&gt;If you change the type of the &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; array (possibly to a list) within &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt;, that would also lead to a change within &lt;code class=&quot;highlighter-rouge&quot;&gt;orderTotalPrice()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class is &lt;strong&gt;tightly coupled&lt;/strong&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; classes.&lt;/p&gt;

&lt;p&gt;How do we decouple them?&lt;/p&gt;

&lt;h4 id=&quot;decoupling-the-order-class-example&quot;&gt;Decoupling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class Example&lt;/h4&gt;

&lt;p&gt;Here is one way of achieving this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CartContents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;item:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;CartContents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CartContents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salesTax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the following points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of making the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt; fields accessible, &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; now makes a method named &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; available to &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt; class does something very similar, by also providing a &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; method for &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; to use.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class now only invokes the &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; methhod exposed by &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt;, to compute the total cart value in &lt;code class=&quot;highlighter-rouge&quot;&gt;totalPrice()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; field in &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; has its name changed, only &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; within the same class would be affected&lt;/li&gt;
  &lt;li&gt;If the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; within &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt; is changed from an array to a list, again only the &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; method needs to be altered.&lt;/li&gt;
  &lt;li&gt;The code within &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; is not affected by either of these changes at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have now completely decoupled &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; from both &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;another-coupling-example-with-spring-framework&quot;&gt;Another Coupling Example with Spring Framework&lt;/h3&gt;

&lt;p&gt;Consider the following body of code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorthm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You would notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class is directly dependent on the &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt; class. If we need to change the actual sort algorithm, to use quicksort for instance, then a lot of code within &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; needs to change.&lt;/p&gt;

&lt;p&gt;We can solve this issue by making use of &lt;strong&gt;interfaces&lt;/strong&gt;. Here is how our modified code would look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intrface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you use the Spring framework, you could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; annotation with the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class, to automatically fetch an implementation of an available sort algorithm:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BinarySearchImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we have achieved here is reduce the coupling between &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySeacrhImpl&lt;/code&gt; and a specific sort algorithm.&lt;/p&gt;

&lt;h3 id=&quot;a-practical-viewpoint-of-coupling&quot;&gt;A Practical Viewpoint of Coupling&lt;/h3&gt;

&lt;p&gt;A good way of thinking about coupling, is if you change the inner details of a class or a component, do you need to make changes elsewhere as well?&lt;/p&gt;

&lt;p&gt;Such dependencies are not desirable. If you intend to reuse code from one place to another, the related dependencies should be as few as possible.&lt;/p&gt;

&lt;p&gt;Coupling can occur at multiple levels in an application:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Class-level&lt;/li&gt;
  &lt;li&gt;API-level&lt;/li&gt;
  &lt;li&gt;Component-level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at an example of coupling at component level:&lt;/p&gt;

&lt;h3 id=&quot;component-level-coupling&quot;&gt;Component-Level Coupling&lt;/h3&gt;

&lt;p&gt;Consider the following organization of an enterprise web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the Security component were coupled with the Logging component, then wherever we need Security, we would also need to access Logging. That’s not good.&lt;/p&gt;

&lt;h3 id=&quot;coupling-with-layers&quot;&gt;Coupling With Layers&lt;/h3&gt;

&lt;p&gt;Let’s look at an example of a layered web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-06-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is organized into these three layers. Also assume that from the Web layer Controller, I need to call multiple methods from the Business layer. Let’s say five different methods need to be called for a single such requirement. This is a clear case of coupling.&lt;/p&gt;

&lt;p&gt;A very effective way to avoid such layer-to-layer coupling is to use the &lt;strong&gt;Facade Pattern&lt;/strong&gt;. You can create a Facade component on top of the Business layer, that manages calls to these five methods. The web layer can then make do with calling a  single method from the Facade component.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All in all, decoupling makes the code more reusable and testable.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the concept of coupling at multiple levels: at the class, the component, the API and the layer level. We also looked at how to get around this factor through decoupling, at each of these levels. We identified the key question to ask about coupling:  “If something changes at a particular place, would other things need to change as well? And If I use something, would I be forced to use something else as well?”&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson10&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson12&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Software architects and programmers love low coupling. What is coupling? Why is coupling important? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - Cohesion - with examples</title><link href="http://localhost:4000/blog/SwDesignLesson12" rel="alternate" type="text/html" title="Software Design - Cohesion - with examples" /><published>2019-10-15T11:36:00+00:00</published><updated>2019-10-15T11:36:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson12</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson12">&lt;p&gt;High Cohesion is one of the important aims when your architect and design your software. What is it all about?&lt;/p&gt;

&lt;h1 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;What is Cohesion?&lt;/li&gt;
  &lt;li&gt;Why is Cohesion important?&lt;/li&gt;
  &lt;li&gt;What are the different parts of applications that need high Cohesion?&lt;/li&gt;
  &lt;li&gt;How do we acheive high cohesion?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-cohesion&quot;&gt;What Is Cohesion?&lt;/h3&gt;

&lt;p&gt;Cohesion is all about grouping related things in your software, together, at one place.&lt;/p&gt;

&lt;p&gt;Drawing from a real-life example, there would be a thousand things in your home. But if asked to fetch your tennis racket, you can get it in a matter of minutes, if not seconds. If you are asked to get a cooking utensil, you immediate go the the kitchen. How is it that you are able to retreive things quickly? Because you have organized them in a highly cohesive way. You have put all the related things together.&lt;/p&gt;

&lt;p&gt;That is cohesion at play in real life.&lt;/p&gt;

&lt;h3 id=&quot;levels-of-cohesion&quot;&gt;Levels Of Cohesion&lt;/h3&gt;

&lt;p&gt;Cohesion in software is applicable at multiple levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Methods: We group related methods together to create a class&lt;/li&gt;
  &lt;li&gt;Classes: We group related classes and create a package&lt;/li&gt;
  &lt;li&gt;Packages: We group related packages to probably create a component&lt;/li&gt;
  &lt;li&gt;Components&lt;/li&gt;
  &lt;li&gt;Applications&lt;/li&gt;
  &lt;li&gt;Microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cohesion-a-first-example&quot;&gt;Cohesion: A First Example&lt;/h3&gt;

&lt;p&gt;Have a look at the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadAndStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFromInternet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doEverything&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;downloadFromInternet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DownloadAndStore&lt;/code&gt; has the responsibility of doing three tasks, and has methods to do each one of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;downloadFromInternet()&lt;/code&gt; connects to a server and downloads a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parseData()&lt;/code&gt; needs an understanding of the data format to get the data from this file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;saveToDatabase()&lt;/code&gt; needs to talk to a database server to save the data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To perform them at one go, it defines another method, aptly named &lt;code class=&quot;highlighter-rouge&quot;&gt;doEverything()&lt;/code&gt; to call the other three.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DownloadAndStore&lt;/code&gt; is a prime example of a class that has &lt;strong&gt;very low cohesion&lt;/strong&gt;. Each of the listed three methods is doing something totally unrelated to the others.&lt;/p&gt;

&lt;h4 id=&quot;an-improved-solution&quot;&gt;An Improved Solution&lt;/h4&gt;

&lt;p&gt;A better solution would be to have an implementation like the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InternetDownloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFromInternet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseStorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadAndStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doEverything&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetDownloader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;downloadFromInternet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DatabaseStorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;storeToDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this code organization:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Classes named &lt;code class=&quot;highlighter-rouge&quot;&gt;InternetDownloader&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DataParser&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DatabaseStorer&lt;/code&gt; are defined, each with a single important thing to do&lt;/li&gt;
  &lt;li&gt;Methods of these classes are invoked to accomplish what is needed, within an external class, &lt;code class=&quot;highlighter-rouge&quot;&gt;DownloadAndStore&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a better solution, because it increases the possibilities of code reuse. Let’s explore this a little further.&lt;/p&gt;

&lt;h3 id=&quot;layered-architecture-and-cohesion&quot;&gt;Layered Architecture And Cohesion&lt;/h3&gt;

&lt;p&gt;Consider a simple web application, that is organized into three layers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/12/Capture-08-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Organizing an application into layers helps to allocate responsibility clearly and separately. Here,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All the UI logic would be confined to the Web layer&lt;/li&gt;
  &lt;li&gt;All the business logic would be the responsibility of the Business layer&lt;/li&gt;
  &lt;li&gt;All the data storage and retrieval would be taken up by the Data layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is an example of cohesion at the application layer level. Each layer is highly cohesive, because it does one specific thing, whether large or small.&lt;/p&gt;

&lt;h3 id=&quot;component-level-cohesion&quot;&gt;Component-Level Cohesion&lt;/h3&gt;

&lt;p&gt;Another instance where cohesion comes into play when you design components to be used in an enterprise application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/12/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Authorization and Authentication approaches might be similar across the microservices in your enterprise. Hence, you could define a common security component. The security component only bothers about whether a given user has the right access and the right credentials - nothing else. It can be easily reused across multiple microservices. It is highly cohesive. It does security and it does it very well.&lt;/p&gt;

&lt;p&gt;Note that if you try to enhance the features of the Security component by adding a logging capability as well, then its reusability goes down greatly. Both security and logging are better off implemented separately, as  independent cohesive reusable components.&lt;/p&gt;

&lt;h3 id=&quot;example-the-spring-framework&quot;&gt;Example: The Spring Framework&lt;/h3&gt;

&lt;p&gt;One of the best examples of cohesion popularly in use is the Spring Framework:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/12/Capture-06-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The framework is not implemented as one big component. It is organized as a set of modules, each one of which can be composed of smaller components. Here is how it is organized, in brief:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Core Container&lt;/strong&gt;: The core feature of Spring is &lt;strong&gt;&lt;em&gt;Dependency Injection&lt;/em&gt;&lt;/strong&gt;. This module is composed of core components such as Beans, Core, Context, and SpEL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AOP, Aspects, Instrumentation and Messaging&lt;/strong&gt; are separate, smaller components&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Spring MVC Framework&lt;/strong&gt; is a separate module with components that handle web application needs&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Data Access and Integration&lt;/strong&gt; module has components such as JDBC, ORM, Transactions and others&lt;/li&gt;
  &lt;li&gt;With the evolution of microservices, &lt;strong&gt;Spring Cloud&lt;/strong&gt; is an additional module that has been designed to contain a set of cohesive components&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;leveraging-cohesion-in-spring&quot;&gt;Leveraging Cohesion In Spring&lt;/h4&gt;

&lt;p&gt;Each component has its own boundary; it is concerned with taking up a single responsibility, and doing it well. The more cohesive a component is, the more reusable it becomes.&lt;/p&gt;

&lt;p&gt;The modular structure of the Spring framework enables a programmer to pull in only those components that she actually needs. If she needs just the core functionality, the Core components sufficient. If database integration is necessary, then she can make use of the JDBC components, for instance.&lt;/p&gt;

&lt;h3 id=&quot;how-to-make-software-more-cohesive&quot;&gt;How To Make Software More Cohesive?&lt;/h3&gt;

&lt;p&gt;The guiding light that you need to follow to improve the cohesion in your software, is the &lt;strong&gt;Single Responsibility Principle (SRP)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When you look at your method/class/package/component, take to a minute to also think about its &lt;strong&gt;responsibility&lt;/strong&gt;. If you can describe it in a single phrase or sentence, then you’ve done a good job defining it.&lt;/p&gt;

&lt;p&gt;However, if you end up joining together many phrases and sentences with several “and”s, then you violate the SRP. Your software could end up have low cohesion.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this video, we talked about cohesion in significant detail. Cohesion is all about grouping related things together. Cohesion is applicable at multiple levels in a single application, such as method/class/package/component/application. You group related methods into a class, related classes into a package, and related packages perhaps into a component.&lt;/p&gt;

&lt;p&gt;We also examined the fact that cohesive classes and components are highly reusable. In addition, organizing an application into multiple layers also improves their cohesion. Then, we observed how the Spring Framework is organized into cohesive modules, each with a single responsibility. Finally, we looked at how Single Responsibility Principle can be used to build cohesive software.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson11&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson13&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">High Cohesion is one of the important aims when your architect and design your software. What is it all about?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - Encapsulation - with examples</title><link href="http://localhost:4000/blog/SwDesignLesson10" rel="alternate" type="text/html" title="Software Design - Encapsulation - with examples" /><published>2019-10-15T11:24:00+00:00</published><updated>2019-10-15T11:24:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson10</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson10">&lt;p&gt;Encapsulation is one of the important goals of Software Design. What is Encapsulation? Why is it important? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What does Encapsulation mean?&lt;/li&gt;
  &lt;li&gt;What are the advantages of building encapsulated software?&lt;/li&gt;
  &lt;li&gt;Is encapsulation restricted to Object Oriented Design?&lt;/li&gt;
  &lt;li&gt;How can encapsulation be followed in other programming approaches?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;encapsulation-at-the-basic-level-level-1&quot;&gt;Encapsulation At The Basic Level (Level-1)&lt;/h3&gt;

&lt;p&gt;Let’s look at two implementations of a &lt;code class=&quot;highlighter-rouge&quot;&gt;CricketScorer&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CricketScorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re not familiar the sport of cricket, you could imagine a &lt;code class=&quot;highlighter-rouge&quot;&gt;FootballScorer&lt;/code&gt; class instead. Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;CricketScorer&lt;/code&gt; provides its users with two methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;setScore()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;getScore()&lt;/code&gt;. These form the class interface.&lt;/p&gt;

&lt;p&gt;Let’s next make use of this class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;CrickerScorer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CricketScorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The user here gets to call both &lt;code class=&quot;highlighter-rouge&quot;&gt;getScore()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setScore()&lt;/code&gt;. Let’s say a boundary is scored in the cricket match, which should result in the score getting incremented by &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;. The user is responsible for retrieving the current the current score, incrementing it by &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;, and then setting it.&lt;/p&gt;

&lt;p&gt;There are a few important things to note here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;score&lt;/code&gt; is declared &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, which means users of &lt;code class=&quot;highlighter-rouge&quot;&gt;CricketScorer&lt;/code&gt; cannot access it directly. We are hiding the implementation of ```score`` from the class users. This is what &lt;strong&gt;encapsulation&lt;/strong&gt; is all about.&lt;/li&gt;
  &lt;li&gt;The various Java language keywords such as &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt; are the most basic level of implementing encapsulation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;method-level-encapsulation-level-2&quot;&gt;Method-Level Encapsulation (Level-2)&lt;/h3&gt;

&lt;p&gt;To avoid putting the onus of getting and setting the score on the user, we could define a method such as:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;four&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;CrickerScorer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CricketScorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;four&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All the user does is call this &lt;code class=&quot;highlighter-rouge&quot;&gt;four()&lt;/code&gt; method, and no longer needs to explicitly manipulate the stored score. Here we have introduced a &lt;code class=&quot;highlighter-rouge&quot;&gt;four()&lt;/code&gt; method to encapsulate the process of getting and setting the score. This is the next level of encapsulation, at the logical level. The user now no longer needs to know how to manipulate the score.&lt;/p&gt;

&lt;h3 id=&quot;abstraction-and-encapsulation&quot;&gt;Abstraction And Encapsulation&lt;/h3&gt;

&lt;p&gt;Abstraction is all about hiding complexity. How do you hide that complexity? By using Encapsulation. Apart from the two levels we saw just now, there are more ways to go with encapsulation. Let’s look at them next.&lt;/p&gt;

&lt;h3 id=&quot;encapsulation-at-the-class-level&quot;&gt;Encapsulation At The Class Level&lt;/h3&gt;

&lt;h4 id=&quot;the-factory-pattern&quot;&gt;The Factory Pattern&lt;/h4&gt;

&lt;p&gt;Have a look at the following example of code.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactoryPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Strinf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;//So on...&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
			&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	
			&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;male&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Robinhood&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	
			&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;female&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mary&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Suppose we have a set of classes to represent and create different kinds of persons. Also, we would need a way to do the same in code as well. Also, we would not like the users of the class not to know, that there are underlying implementations of &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; named &lt;code class=&quot;highlighter-rouge&quot;&gt;Male&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Female&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can abstract that detail away by using the &lt;strong&gt;Factory Pattern&lt;/strong&gt;. As we see in the code above, the user creates a male person by passing in a name and a string “M” to the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPerson()&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt;. He has no idea that there are classes called &lt;code class=&quot;highlighter-rouge&quot;&gt;Male&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Female&lt;/code&gt; hidden away from him.&lt;/p&gt;

&lt;h4 id=&quot;the-strategy-pattern&quot;&gt;The Strategy Pattern&lt;/h4&gt;

&lt;p&gt;This is another good example of encapsulation. Consider the following piece of code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrategyPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//Ideally, the bubble sort is implemented completely here&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
			&lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAComplexThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;//... logic...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//...logic...&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complexClassInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//This can also be a setter&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;complexClassInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAComplexThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, we created an &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt;. Any class that needs sorting behavior, such as:&lt;/p&gt;

&lt;p&gt;The user of the interface, &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt;, only directly calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; method on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt; interface. It does not worry about what the underlying class that implements &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortbale&lt;/code&gt;, actually is. It does not worry about whether that is a &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSort&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	static class BubbleSort implements Sortable {
			@Override
			public int[] sort(int[] numbers) {
				//Ideally, the bubble sort is implemented completely here
				return numbers;
			}
		}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or a &lt;code class=&quot;highlighter-rouge&quot;&gt;QuickSort&lt;/code&gt;. Whoever uses the class &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt;, needs to create an instance of it, provide an instance of the sorting algorithm, and out class can make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; by accessing the interface.&lt;/p&gt;

&lt;h3 id=&quot;an-interface-example&quot;&gt;An Interface Example&lt;/h3&gt;

&lt;p&gt;We are very much in the habit of playing games, especially those that involve using gaming consoles. How would a computer game allow you to play it? By allowing the console to use it like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Interfaces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarioGame&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jump&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Goes Into A Hole&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
	
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Go Forward&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChessGame&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move Piece Up&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move Piece Down&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move Piece Left&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move Piece Right&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;games&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarioGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
									&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ChessGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;game:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This shows use of one such console with four buttons: up, down, right and left. We are representing it by an interface, named &lt;code class=&quot;highlighter-rouge&quot;&gt;GamingConsole&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Whoever uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;GamingConsole&lt;/code&gt;, can play a game attached to it, irrespective of what the actual game is. It could be a &lt;code class=&quot;highlighter-rouge&quot;&gt;MarioGame&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessGame&lt;/code&gt;, or whatever. The user knows he can call the &lt;code class=&quot;highlighter-rouge&quot;&gt;up()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;down()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;left()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;right()&lt;/code&gt; operations with ease. The actual game implementations are hidden away. How a &lt;code class=&quot;highlighter-rouge&quot;&gt;MarioGame&lt;/code&gt; reacts to the console, is different from how a &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessGame&lt;/code&gt; responds.&lt;/p&gt;

&lt;p&gt;The fact that we have created a &lt;code class=&quot;highlighter-rouge&quot;&gt;GamingConsole&lt;/code&gt; interface, means the &lt;code class=&quot;highlighter-rouge&quot;&gt;Game&lt;/code&gt; implementations can be hidden away.&lt;/p&gt;

&lt;h3 id=&quot;an-abstract-class-example&quot;&gt;An Abstract Class Example&lt;/h3&gt;

&lt;p&gt;The same high-level concept can be applied by using abstract classes as well. Consider the following abstract class definition:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractRecipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;getReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;doTheDish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTheDish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleasnup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AbstractRecipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTheDish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeWithMicrowave&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AbstractRecipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTheDish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Recipe1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;recipe1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;RecipeWithMicrowave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeWithMicrowave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeWithMicrowave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;recipeWithMicrowave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are implementing a &lt;strong&gt;Template Method Pattern&lt;/strong&gt; in here. For every recipe that we end up creating, we want to make sure it has three steps: getting things ready, doing the dishes, and cleaning up. We are creating an abstract class &lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractRecipe&lt;/code&gt;. Any user who ants to use a recipe, does not need to worry about the fact that an &lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractRecipe&lt;/code&gt; exists. They just create an instance of the particular recipe, and call &lt;code class=&quot;highlighter-rouge&quot;&gt;execute()&lt;/code&gt; on it.&lt;/p&gt;

&lt;p&gt;Underneath all that, is the recipe implementation:&lt;/p&gt;

&lt;h3 id=&quot;our-journey-with-encapsulation-thus-far&quot;&gt;Our Journey With Encapsulation Thus Far&lt;/h3&gt;

&lt;p&gt;We looked at a few examples of how encapsulation is implemented. We saw that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At the very basic level, we achieve that by using built-in keywords such as &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt; around member variables&lt;/li&gt;
  &lt;li&gt;The next level involves defining utility methods, to achieve encapsulation at a more logical level, to hide variable-level operations&lt;/li&gt;
  &lt;li&gt;The next level of abstraction involves creating the appropriate interfaces, or abstract classes&lt;/li&gt;
  &lt;li&gt;Another level involves the use of patterns such as Factory Pattern and Strategy Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thing is, encapsulation does not end at the code level. Let’s look at a few more instances of the same.&lt;/p&gt;

&lt;h3 id=&quot;encapsulation-in-layered-architecture&quot;&gt;Encapsulation In Layered Architecture&lt;/h3&gt;

&lt;p&gt;When we build enterprise web applications, we normally like to structure them in layers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/10/Capture-019-16.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind doing so is that, for example, you do NOT want:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Business layer to be too involved with storing and retrieving data&lt;/li&gt;
  &lt;li&gt;The Web layer to know this, and also how business logic deals with data&lt;/li&gt;
  &lt;li&gt;The Data layer to be bothered about how the application manages communication with other applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We achieve this be creating an interface in each layer. For example, the Data layer exposes an interface which is used by the Business Layer. Similarly, other layers can also expose interfaces.&lt;/p&gt;

&lt;h4 id=&quot;a-specific-example-jpa-and-hibernate&quot;&gt;A Specific Example: JPA And Hibernate&lt;/h4&gt;

&lt;p&gt;Another good example of layered encapsulation is that of JPA and Hibernate. JPA is the interface, and Hibernate is the implementation. An application can make use of the JPA  annotations, without worrying about the fact that underneath that interface, lies a Hibernate implementation.&lt;/p&gt;

&lt;h3 id=&quot;microservices-common-components&quot;&gt;Microservices: Common Components&lt;/h3&gt;

&lt;p&gt;Another example of encapsulation comes from the domain of microservices architecture. Have a look at the following architecture diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/10/Capture-019-17.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Such architectures make heavy use of common components.&lt;/p&gt;

&lt;h4 id=&quot;security-example&quot;&gt;Security Example&lt;/h4&gt;

&lt;p&gt;For example, look at security. Implementation of authentication and authorization  is essentially the same across different microservices. By creating a common security component, you can abstract away how you store the security details of a user. It could be a database, or an LDAP server setup, or whatever.&lt;/p&gt;

&lt;p&gt;The microservice will just end up using the interface that the Security component provides. The microservice will use the mechanism to ask whether a particular user is authorized to perform an action, but the implementation details are abstracted away.&lt;/p&gt;

&lt;h4 id=&quot;web-services&quot;&gt;Web Services&lt;/h4&gt;

&lt;p&gt;This is another scenario where encapsulation is very much used. Suppose we implement one such service using REST. We expose a URL, as an access point for consumers of this service. We would also specify the formats of the messages to be exchanged with users. How the service is implemented underneath - what language and framework is made use of - does not matter to the consumer. All that matters is the interface.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we tried to answer the main question of what Encapsulation is all about. We saw that it is all about hiding the implementation, and providing the right interface to the user. That user might be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A class using your class&lt;/li&gt;
  &lt;li&gt;A component using your component&lt;/li&gt;
  &lt;li&gt;A layer using your layer&lt;/li&gt;
  &lt;li&gt;An end-user calling your service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We looked at encapsulation in great detail, at many different levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At a basic level with member variables&lt;/li&gt;
  &lt;li&gt;At a method level for better utility&lt;/li&gt;
  &lt;li&gt;At an interface or abstract class level&lt;/li&gt;
  &lt;li&gt;At a pattern level&lt;/li&gt;
  &lt;li&gt;At a application layer level&lt;/li&gt;
  &lt;li&gt;At a service component level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In particular, we saw how enterprise applications hide away things behind a component, and provide an interface to it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson9&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson11&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Encapsulation is one of the important goals of Software Design. What is Encapsulation? Why is it important? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - What is Abstraction?</title><link href="http://localhost:4000/blog/SwDesignLesson9" rel="alternate" type="text/html" title="Software Design - What is Abstraction?" /><published>2019-10-15T11:12:00+00:00</published><updated>2019-10-15T11:12:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson9</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson9">&lt;p&gt;Abstraction is one of the fundamental concepts of software engineering. It is all about hiding complexity in building various parts of your application.&lt;/p&gt;

&lt;h1 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h1&gt;

&lt;p&gt;In this guide, we look at:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is Abstraction?&lt;/li&gt;
  &lt;li&gt;A few examples of abstraction&lt;/li&gt;
  &lt;li&gt;Why is Abstraction Important in Software Design?&lt;/li&gt;
  &lt;li&gt;How can you introduce good abstractions?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-abstraction&quot;&gt;What Is Abstraction?&lt;/h3&gt;

&lt;p&gt;Abstraction is one of the fundamental concepts of software engineering.&lt;/p&gt;

&lt;h4 id=&quot;an-example-of-abstraction&quot;&gt;An Example Of Abstraction&lt;/h4&gt;

&lt;p&gt;Consider a real-world analogy. Let’s say you want to ride a motor bike. All you need to start the motor bike is to put the key on, push the start button, and use the accelerator. While riding, you may need to use the brake as well.&lt;/p&gt;

&lt;p&gt;You are not really concerned about how the engine, accelerator and brake are working during the ride. All that is &lt;strong&gt;abstract&lt;/strong&gt; to you, and you are not concerned with it (unless you are mechanic).&lt;/p&gt;

&lt;h4 id=&quot;another-example&quot;&gt;Another Example&lt;/h4&gt;

&lt;p&gt;Take another example - printing a document from your computer. You just open the document, click on the “print” command, and in a short while, the printed document is ready. You are not really bothered about how the computer stores the document in 0s and 1s, nor about hoe it is transferred to the printer.&lt;/p&gt;

&lt;h3 id=&quot;abstraction-in-your-application&quot;&gt;Abstraction In Your Application&lt;/h3&gt;

&lt;p&gt;Whenever we build applications, we do so in layers. Here is the layered architecture of a simple web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/9/Capture-012-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An advantage of doing so is that the Web layer does not need to know anything about the Data layer. It is &lt;strong&gt;abstracted away&lt;/strong&gt; from the Data layer. All that it needs to be concerned with, is that it can delegate requests to the Business layer, and the business layer would take care of rest of the flow. Layering in an application is, in a way, abstracting away complexity.&lt;/p&gt;

&lt;h3 id=&quot;abstraction-in-programming&quot;&gt;Abstraction In Programming&lt;/h3&gt;

&lt;p&gt;Let’s go one level deeper and look at what happens underneath the hood when we write computer programs.&lt;/p&gt;

&lt;h4 id=&quot;programming-in-high-level-languages&quot;&gt;Programming In High-Level Languages&lt;/h4&gt;

&lt;p&gt;Have you ever written an assembly language program? Those funny ones with 1s and 0s. Actually, thats the only language that your computer would understand.&lt;/p&gt;

&lt;p&gt;If you want to develop a web service, will we use Assembly Language? Far from it. We would instead use a high-level language such as Java or Python, to do that. These are human readable languages, that spare us the task of programming in 0s and 1s.&lt;/p&gt;

&lt;p&gt;The high level programming languages are an abstraction on top of machine or assembly language.&lt;/p&gt;

&lt;h4 id=&quot;writing-sql-queries&quot;&gt;Writing SQL Queries&lt;/h4&gt;

&lt;p&gt;Think of how you write SQL queries to interact with a database. You just write what data you are concerned with, without paying heed to how it is stored in, or retrieved from the database. We expect the database to take care of all that.&lt;/p&gt;

&lt;p&gt;SQL is an abstraction layer for retrieving data from your database.&lt;/p&gt;

&lt;h4 id=&quot;calling-built-in-methods&quot;&gt;Calling Built-In Methods&lt;/h4&gt;

&lt;p&gt;In a high level programming language, calling built in utility methods available in its packages is another example of abstraction. Here is an example in Python:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we call the built-in utility &lt;code class=&quot;highlighter-rouge&quot;&gt;endswith()&lt;/code&gt;, we are not concerned with how it is implemented. We only care about the fact that when called with &lt;code class=&quot;highlighter-rouge&quot;&gt;World&lt;/code&gt; as a parameter on &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt;, it returns &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Same is the case with &lt;code class=&quot;highlighter-rouge&quot;&gt;islower()&lt;/code&gt;.Their implementations are abstracted away from you.&lt;/p&gt;

&lt;h3 id=&quot;abstraction-in-microservices&quot;&gt;Abstraction In Microservices&lt;/h3&gt;

&lt;p&gt;Consider the following enterprise application architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/9/Capture-012-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is quite common in such architectures to have common components for security, logging and archetype. The reason we have them is that we want them to take care of a specific responsibility.&lt;/p&gt;

&lt;p&gt;Let’s say you want to handle authorization and authentication. By using a specific Security component to handle this functionality, you are abstracting away this logic from the rest of the application. The higher level microservices shown only need to know how to integrate with the security component. It does not need to know the inner details of the security component.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we had a look at what abstraction is, and understood that it is the basic pillar used to hide complexity. We also saw that abstraction takes up different forms at different levels. We looked at a number of examples to explore the same.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson8&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson10&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Abstraction is one of the fundamental concepts of software engineering. It is all about hiding complexity in building various parts of your application.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Design Patterns For Beginners - with Java Examples</title><link href="http://localhost:4000/blog/SwDesignLesson8" rel="alternate" type="text/html" title="Design Patterns For Beginners - with Java Examples" /><published>2019-10-15T09:32:00+00:00</published><updated>2019-10-15T09:32:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson8</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson8">&lt;p&gt;In this guide, we give you an introduction to the world of design patterns.For each pattern, we understand 1) the pattern a2) the context in which it is applicable -  with a real-world example.&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What are Design Patterns?&lt;/li&gt;
  &lt;li&gt;Why do you use Design Patterns?&lt;/li&gt;
  &lt;li&gt;What are the different types of Design Patterns?&lt;/li&gt;
  &lt;li&gt;When do you use Design Patterns?&lt;/li&gt;
  &lt;li&gt;How do you implement different Design Patterns in Java?&lt;/li&gt;
  &lt;li&gt;What are the real world examples for Design Patterns?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-are-design-patterns&quot;&gt;What Are Design Patterns?&lt;/h3&gt;

&lt;p&gt;We have been building object-oriented software for over 40 years now, starting with Smalltalk, which was the first object-oriented language.&lt;/p&gt;

&lt;p&gt;The programming world has encountered a large number of problems, and a variety of solution have been proposed to tackle them.&lt;/p&gt;

&lt;p&gt;An attempt was made by a group of four people, famously called the “Gang-Of-Four” or GoF, to come up with a set of common problems and solutions for them, in the given context.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This catalog of common problems and their solutions is labeled as GOF (Gang of Four) Design Patterns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;why-design-patterns&quot;&gt;Why Design Patterns?&lt;/h3&gt;

&lt;p&gt;The advantages of design patterns are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To provide standard terminology that everybody understands&lt;/li&gt;
  &lt;li&gt;Not to repeat the same mistakes over and over again&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-are-the-types-of-design-patterns&quot;&gt;What Are The Types Of Design Patterns?&lt;/h3&gt;

&lt;p&gt;The design patterns we talk about here, are from the perspective of an object-oriented world. There are mainly three different kinds of design patterns:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creational Patterns&lt;/li&gt;
  &lt;li&gt;Structural Patterns&lt;/li&gt;
  &lt;li&gt;Behavioral Patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;creational&quot;&gt;Creational&lt;/h4&gt;

&lt;p&gt;Creational patterns deal with the creation of objects.&lt;/p&gt;

&lt;h4 id=&quot;structural&quot;&gt;Structural&lt;/h4&gt;

&lt;p&gt;Structural patterns deal with the composition of objects.&lt;/p&gt;

&lt;p&gt;It deals with questions such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What does a class contain?&lt;/li&gt;
  &lt;li&gt;What are the relationships of a class with other classes? Is it inheritance or composition?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;behavioral&quot;&gt;Behavioral&lt;/h4&gt;

&lt;p&gt;Behavioral patterns focus more on the behavior of objects, or more precisely, interactions between objects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How does an object communicate with another object?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;exploring-creational-design-patterns&quot;&gt;Exploring Creational Design Patterns&lt;/h3&gt;

&lt;p&gt;We explore the following creational design patterns:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-prototype-pattern&quot;&gt;The Prototype Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Prototype represents a fully initialized instance, to be copied or cloned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s take an example:&lt;/p&gt;

&lt;p&gt;Let’s consider the design of a Chess game. Every game of Chess has the same initial setup - The King, Queen, Rook, Bishop, Knight and the Pawns all have their specific places. Let’s say we want to build software to model a Chess game.&lt;/p&gt;

&lt;p&gt;Every time a new Chess game is played, we need to create the initial board layout.&lt;/p&gt;

&lt;p&gt;Instead of repeating the creation of chess board each time&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We can create an object that contains the initial setup&lt;/li&gt;
  &lt;li&gt;Clone from it - each time a new Chess game is played.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The object with the initial setup of the chess board is the prototype. And, we are using the prototype pattern.&lt;/p&gt;

&lt;p&gt;Isn’t it simple?&lt;/p&gt;

&lt;p&gt;In the Prototype pattern, you have a fully initialized instance - here, the initial board layout - that is readily available.&lt;/p&gt;

&lt;p&gt;Whenever a new Chess game is started - for example, in any of the numerous online Chess portals - this initialized instance is merely copied, or cloned.&lt;/p&gt;

&lt;h4 id=&quot;the-builder-pattern&quot;&gt;The Builder Pattern&lt;/h4&gt;

&lt;p&gt;The Builder Pattern separates object construction from its representation. What does that mean?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-05.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Assume that you go out for a multi-course dinner to a Restaurant. Such a dinner would have many options, such as Starters, Main course and Desserts. You would probably choose two or three out of the presented options. A particular client may want to have dinner with the first two options only, leaving out the Desserts option. Yet another would prefer the Main course and Desserts, skipping the Starters entirely.&lt;/p&gt;

&lt;p&gt;Similar situations might arise in designing software. You may need to build an object using a subset of the options that are available - or, create the object in multiple ways. This is where the Builder pattern comes in handy.&lt;/p&gt;

&lt;p&gt;To understand it further, let’s look at a small piece of code.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuilderPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sugar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;milk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sugar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;milk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Coffee [type=%s, sugar=%s, milk=%s, size=%s]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuilderPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mocha&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Large&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say you’re writing software for a machine that prepares coffee. The main ingredients of coffee are coffee, milk and sugar.&lt;/p&gt;

&lt;p&gt;Depending from which part of the world you are from, you choose whether or not you have sugar and milk.&lt;/p&gt;

&lt;p&gt;The Builder pattern steps in to provide these Coffee creation options for you.&lt;/p&gt;

&lt;p&gt;Have a look at the code inside &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What we have inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;Coffee&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Builder&lt;/code&gt;, to which we pass the &lt;em&gt;mandatory&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; of the coffee.  Chained to that call, we make other calls adding in our preferences of the other ingredients.&lt;/p&gt;

&lt;p&gt;Someone else who wants a different coffee can easily build it. This leads to a huge amount of flexibility in building objects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Other approaches to solving this problem, such as the use of setters, have many inherent problems. These solutions lead to code that is difficult to read, and also behave erratically in multithreaded programs. The Builder pattern solves all those problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The advantages of using the Builder pattern are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It simplifies object creation&lt;/li&gt;
  &lt;li&gt;Leads to more readable code&lt;/li&gt;
  &lt;li&gt;Does not allow the values to be modified&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-singleton-pattern&quot;&gt;The Singleton Pattern&lt;/h4&gt;

&lt;p&gt;The Singleton pattern is the most famous among all the design patterns. What this pattern does is very clear from its name - allow only one instance of a class per JVM at any point in time.&lt;/p&gt;

&lt;p&gt;A good real-world comparison would probably be the President of a Nation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-06.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there is a disclaimer here - there can only be one instance of that class, &lt;strong&gt;per JVM&lt;/strong&gt;. If you have a Java application that runs as part of a cluster of application servers, each server runs a separate JVM instance. Therefore, you are allowed to have one instance of the Singleton created on each application server, at any given point of time.&lt;/p&gt;

&lt;p&gt;There are a few things to remember whenever you create a Singleton class.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The constructor needs to be &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, to prevent the possibility of other objects creating instances of your class.&lt;/li&gt;
  &lt;li&gt;In Java, build a Singleton using a &lt;code class=&quot;highlighter-rouge&quot;&gt;Enum&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;JEE 7 has a built-in annotation named &lt;code class=&quot;highlighter-rouge&quot;&gt;@Singleton&lt;/code&gt;, along with other related annotations.&lt;/li&gt;
  &lt;li&gt;The main disadvantage of using the Singleton pattern is that the resulting code is difficult to unit test. Make a clear decision as to where you absolutely need to use a Singleton, and where you don’t.&lt;/li&gt;
  &lt;li&gt;In frameworks such as Spring, the objects that are managed are called beans, and beans are Singletons by default. What Spring does well is to ensure all this is in the background.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-factory-method-pattern&quot;&gt;The Factory Method Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-07.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The intent of the Factory Method pattern is to create a family of object types. Let’s look at a code example.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactoryPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// So on&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Male&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Female&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Miss/Mrs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;male&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Robinhood&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;female&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mary&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code implements a &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt;. This class has a static method named &lt;code class=&quot;highlighter-rouge&quot;&gt;getPerson()&lt;/code&gt; that accepts a person’s name and gender as parameters. Depending on the gender &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; passed in, it either returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Male&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;Female&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If somebody wants to create a male person, they invoke the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPerson()&lt;/code&gt; method on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt; with a gender argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;M&quot;&lt;/code&gt;. Similarly, you can create a female person by invoking the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPerson()&lt;/code&gt; method on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt; with a gender argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;F&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are passing in an  identifier of the type of object we need, at the time of creation, while still referring to the generic type, &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Male&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Female&lt;/code&gt; classes are hidden behind the &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt; implementation.&lt;/p&gt;

&lt;p&gt;The advantage of using the Abstract Method pattern is that you can add additional types to the factory, without much change in the other classes using this class. In our example, you can add more types of gender, without affecting the existing code that deals with other genders, which all use &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What about the complexity involved in creating an object?&lt;/p&gt;

&lt;p&gt;It greatly simplifies the task of object creation. The &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt; makes the decision of what object to create, and delivers it to us.&lt;/p&gt;

&lt;h3 id=&quot;structural-design-patterns&quot;&gt;Structural Design Patterns&lt;/h3&gt;

&lt;p&gt;Let us now have a look at the structural design patterns we want to explore.&lt;/p&gt;

&lt;h4 id=&quot;the-proxy-pattern&quot;&gt;The Proxy Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-08.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Proxy is an object that represents another object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s look at a real-world example.&lt;/p&gt;

&lt;p&gt;Your debit card is a proxy for your bank account.  Whenever you make a transaction using a debit card, the corresponding money is deducted from the bank account.&lt;/p&gt;

&lt;p&gt;The debit card is a proxy for your bank account, which is the actual object.&lt;/p&gt;

&lt;p&gt;Similar to that, in programming, you might have to program interactions with remote objects. In such situations, you create a proxy object that takes care of all external communications. You would communicate with the proxy as if it were residing on your local machine.&lt;/p&gt;

&lt;p&gt;Good examples are the EJB Home and Remote interfaces.&lt;/p&gt;

&lt;p&gt;A proxy hides the complexity involved in communicating with the real object.&lt;/p&gt;

&lt;h4 id=&quot;the-decorator-pattern&quot;&gt;The Decorator Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Decorator pattern allows us to add responsibilities to objects, dynamically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-09.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In object-oriented programming, we typically use a lot of inheritance.&lt;/p&gt;

&lt;h5 id=&quot;example-1&quot;&gt;Example 1&lt;/h5&gt;

&lt;p&gt;Let’s say a particular Pizza outlet has ten types of pizza. Our implementation has ten classes for these Pizza types.&lt;/p&gt;

&lt;p&gt;Now there is a requirement to make these pizzas available with three types of toppings. If we would want to create individual classes for each pizza and topping combination, we have a total of 30 classes to manage.&lt;/p&gt;

&lt;p&gt;Instead of doing this, can we make the pizza-topping relationship dynamic? Can we add a topping on top of an existing pizza?&lt;/p&gt;

&lt;p&gt;We need to use a topping as a decorator on top of any pizza.&lt;/p&gt;

&lt;h5 id=&quot;example-2&quot;&gt;Example 2&lt;/h5&gt;

&lt;p&gt;Another example would be adding a discount on a pizza order.&lt;/p&gt;

&lt;p&gt;Let’s say, you have an order, and based on some criteria, you want to offer a discount to the customer. There might be a variety of discounts which might be applicable at different times. If you add a different type of a discount to every kind of order, then in a static relationship, you need to maintain hundreds of classes.&lt;/p&gt;

&lt;p&gt;Treating a discount as a decorator on order makes the relationship dynamic.&lt;/p&gt;

&lt;h5 id=&quot;example-3&quot;&gt;Example 3&lt;/h5&gt;

&lt;p&gt;A perfect example where the Decorator pattern is implemented in Java is the Java I/O packages. This is reflected in the way we create an input stream in an I/O program:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LineNumberInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You have a &lt;code class=&quot;highlighter-rouge&quot;&gt;FileInputStream&lt;/code&gt;. If you want to make it buffered, then add a decorator to it in the form of a &lt;code class=&quot;highlighter-rouge&quot;&gt;BufferedInputStream&lt;/code&gt;. If you want the buffered &lt;code class=&quot;highlighter-rouge&quot;&gt;FileInputStream&lt;/code&gt; to have line numbers also, then add a decorator for a &lt;code class=&quot;highlighter-rouge&quot;&gt;LineNumberInputStream&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;summary&quot;&gt;Summary&lt;/h5&gt;

&lt;p&gt;Decorator Pattern enables you to add behavior to existing objects, at run time. This allows the user of the interface to decide, how he/she wants to create the objects.&lt;/p&gt;

&lt;p&gt;The drawback of this approach is the complexity involved in creating objects. The user needs to understand a lot of classes and their relationships before being able to use the power of the Decorator.&lt;/p&gt;

&lt;h4 id=&quot;the-facade-pattern&quot;&gt;The Facade Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-10.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Facade is a single class that represents an entire subsystem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s take the example of an event manager. An event manager is a go-to person when you want to organize an event. He/She would handle several aspects of an event such as the decorations, the food, sending out invitations to guests, the music arrangements, and similar things.  The event manager acts as the facade of the event organization subsystem.&lt;/p&gt;

&lt;p&gt;Consider the case of a distributed system. You typically have the need for multiple calls, across layers.&lt;/p&gt;

&lt;p&gt;Take for instance, a system that offers the service for online book orders. Whenever an order comes in, several things need to be taken care of, such as checking for the stock, reserving the order, accepting the payment, updating the stock, and generating the invoice.&lt;/p&gt;

&lt;p&gt;We can create a single facade, such as the order interface, which would manage all incoming orders and provide an interface to the customer.&lt;/p&gt;

&lt;p&gt;The advantage of using the Facade pattern is that it reduces the number of network calls, as well as reduces coupling among classes.&lt;/p&gt;

&lt;p&gt;It succeeds in establishing a transaction boundary between communicating objects. Facades, like services, are good hubs to implement transactions.&lt;/p&gt;

&lt;p&gt;As long as the interface of the facade remains the same, the implementation details of the subsystem can change.&lt;/p&gt;

&lt;h4 id=&quot;the-adapter-pattern&quot;&gt;The Adapter Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;An Adapter is used to match interfaces of different classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-11.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take the real world example of power adapters.&lt;/p&gt;

&lt;p&gt;Problem : If you buy a mobile phone in India, it comes with a charger that only works with power sockets used in India. If you take the same charger to the US for example, it will not work, as it will not fit into sockets there.&lt;/p&gt;

&lt;p&gt;Solution : The solution is to use a travel adapter, to use with your charger when you travel. You can plug in your charger into the travel adapter, and the travel adapter is used to connect to the socket in a particular country.&lt;/p&gt;

&lt;p&gt;Similarly, when you try to talk to a system that uses a different message format or a language, you need an adapter to translate messages.&lt;/p&gt;

&lt;p&gt;An interesting example is a communication between a Java program and a web service. Before sending out the data to the service, we need to convert the object into XML or JSON format. We are implementing the Adapter pattern!&lt;/p&gt;

&lt;h4 id=&quot;the-flyweight-pattern&quot;&gt;The Flyweight Pattern&lt;/h4&gt;

&lt;p&gt;Let’s consider a few scenarios&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creation of an object takes a lot of time and involves multiple instances&lt;/li&gt;
  &lt;li&gt;Each instance of an object occupies a lot of memory&lt;/li&gt;
  &lt;li&gt;Some objects might be used several times across the same application with the same values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In these scenarios, you might not want to create a new instance every time it is needed.&lt;/p&gt;

&lt;p&gt;How about caching an instance and reusing it when needed?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Flyweight represents creating a fine-grained instance, that is being used for efficient sharing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-12.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;example-1-1&quot;&gt;Example 1&lt;/h5&gt;

&lt;p&gt;A really good real work example is the public switched telephone network (PSTN).&lt;/p&gt;

&lt;p&gt;In the PSTN, there are always a limited number of lines, and for simplicity, let’s assume this number is 10. However, there are thousands of customers that use these lines. Since all 1000 customers would not make calls at about the same time, it is possible to efficiently switch calls coming in, among the existing 10 lines.&lt;/p&gt;

&lt;h5 id=&quot;example-2-1&quot;&gt;Example 2&lt;/h5&gt;

&lt;p&gt;In the software world, a good example of a Flyweight pattern is JDBC connections.&lt;/p&gt;

&lt;p&gt;A connection pool is a set of connections to the database. The application may be firing a lot of queries, but we don’t create a new connection whenever a new query comes in. As soon as a query comes in, we match it to an available connection, and the query gets fired. Once query execution is done, the connection is released back into the pool.&lt;/p&gt;

&lt;p&gt;Using such a pool allows us to avoid the cost involved in creating and closing a connection.&lt;/p&gt;

&lt;h3 id=&quot;behavioral-design-patterns&quot;&gt;Behavioral Design Patterns&lt;/h3&gt;

&lt;p&gt;Let us now have a look at the behavioral design patterns.&lt;/p&gt;

&lt;h4 id=&quot;the-chain-of-responsibility-pattern&quot;&gt;The Chain Of Responsibility Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-13.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Chain Of Responsibility Pattern represents a way of passing a request between a chain of objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;example-1-2&quot;&gt;Example 1&lt;/h5&gt;

&lt;p&gt;The best example of this pattern can be seen in the exception handling mechanism of most programming languages.&lt;/p&gt;

&lt;p&gt;Suppose you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;method1()&lt;/code&gt; calling &lt;code class=&quot;highlighter-rouge&quot;&gt;method2()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;method2()&lt;/code&gt; in turn calls &lt;code class=&quot;highlighter-rouge&quot;&gt;method3()&lt;/code&gt;. Assume that &lt;code class=&quot;highlighter-rouge&quot;&gt;method3()&lt;/code&gt; throws an exception.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;method3()&lt;/code&gt; has no exception handling, then the exception is passed on to &lt;code class=&quot;highlighter-rouge&quot;&gt;method2()&lt;/code&gt; to handle it. If again &lt;code class=&quot;highlighter-rouge&quot;&gt;method2()&lt;/code&gt; has no exception handling inside it, then the exception is passed on to &lt;code class=&quot;highlighter-rouge&quot;&gt;method1()&lt;/code&gt;. If even &lt;code class=&quot;highlighter-rouge&quot;&gt;method1()&lt;/code&gt; cannot handle it, it gets thrown out of &lt;code class=&quot;highlighter-rouge&quot;&gt;method1()&lt;/code&gt; as well.&lt;/p&gt;

&lt;h5 id=&quot;example-2-2&quot;&gt;Example 2&lt;/h5&gt;

&lt;p&gt;Consider a real-world example of a loan approval process.&lt;/p&gt;

&lt;p&gt;A bank clerk has permissions to approve loans within a certain amount. If the amount goes above that, then it goes to the supervisor. The supervisor has a similar, albeit larger loan approval limit set for him. If the loan amount exceeds that limit, then it goes to his supervisor, and so on.&lt;/p&gt;

&lt;h5 id=&quot;summary-1&quot;&gt;Summary&lt;/h5&gt;

&lt;p&gt;With Chain Of Responsibility, we have a chain of objects already ready, that wait to process requests. When a new request enters the system, it goes to the first object in the chain to attempt processing. Depending on the processing condition, the request travels up the chain and gets fully processed at some level, or maybe not processed at all.&lt;/p&gt;

&lt;h4 id=&quot;the-iterator-pattern&quot;&gt;The Iterator Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-14.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Iterator pattern is one of the most simple design patterns. You have a set of elements arranged in a collection, and you want to access those elements sequentially. A good example of an Iterator is a TV remote, which has the “next” and “previous” buttons to surf TV channels. Pressing the “next” button takes me one channel in the forward direction, and pressing the “previous” button takes me one channel in the backward direction.&lt;/p&gt;

&lt;p&gt;In the programming works, examples of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator&lt;/code&gt; class and the enhanced &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop in Java are examples of the Iterator pattern.&lt;/p&gt;

&lt;h4 id=&quot;the-state-pattern&quot;&gt;The State Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The State Pattern is used to alter an object’s behavior when its state changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-15.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take a look at this Java example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StatePattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fan Wall Control [current = %s]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;speedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Off&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel3&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take the example of a fan wall control. The fan wall control controls the speed with a fan rotates. It has speed levels ranging from 0 to 5. When it is at level 0, the fan does not rotate, and it rotates the fastest at level 5.&lt;/p&gt;

&lt;p&gt;When you rotate the knob of the fan control, the level changes, and this causes the speed of the fan to change as well. This is a classic case of a change in state (level) causing a change in behavior (speed).&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;FanwallControl&lt;/code&gt; object is composed of a &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel&lt;/code&gt; object. &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel&lt;/code&gt; is an interface that has four different implementations. Initially, the level is at &lt;code class=&quot;highlighter-rouge&quot;&gt;Off&lt;/code&gt;, and when you click rotate at that time, the new speed is at &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel1&lt;/code&gt;. The happens successively, and if you rotate at &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel3&lt;/code&gt;, the level returns to &lt;code class=&quot;highlighter-rouge&quot;&gt;Off&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In case you need to define an additional speed level, just add in a new class that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel&lt;/code&gt; interface, and implement its rotate method.&lt;/p&gt;

&lt;p&gt;This is an excellent example that highlights the advantages of an extensible class.&lt;/p&gt;

&lt;h4 id=&quot;the-strategy-pattern&quot;&gt;The Strategy Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-16.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The strategy has the task of encapsulating an algorithm inside a class. Let’s look at a Java code example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrategyPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//sort using bubble sort algorithm&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSort&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; 
                &lt;span class=&quot;c1&quot;&gt;//sort using quicksort algorithm&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAComplexThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//logic...&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//logic...&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complexClassInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;complexClassInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAComplexThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The class &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt; intends to perform a lot of complex logic within it. One part of that logic is to sort a set of values. One direct way would be to implement the entire sorting logic within &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt;. This would make it very inflexible, since if you wanted to change the sorting logic tomorrow, that entire code needs to change.&lt;/p&gt;

&lt;p&gt;When we use the Strategy pattern, we separate the algorithm of how the sorting is done, from &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We define an interface named &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt;, which has a method named &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;. Any actual sort algorithm is an implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt;, and needs to override &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt; is given a particular &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt; implementation as a constructor argument. &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithm&lt;/code&gt; does not care what exact sorting algorithm is being used; it is happy that that object implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A lot of flexibility results due to the use of the Strategy pattern. You can dynamically change the strategy, and pass in the right one according to the context.&lt;/p&gt;

&lt;h4 id=&quot;the-observer-pattern&quot;&gt;The Observer Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Observer pattern is a way of notifying a change, to a number of classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-17.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are a fan of cricket, you may want to know whenever Sachin Tendulkar scores a century, so that you can celebrate.&lt;/p&gt;

&lt;p&gt;All such similar people would register themselves to the event of Sachin scoring a century. Each of these people is now an Observer for that event. Whenever Sachin does score a century, a centralized program will notify each observer.&lt;/p&gt;

&lt;p&gt;Another example is that of online bidding. A group of bidders at an auction register themselves to receive notifications when a higher bid is placed. As soon as a bid higher than the current one is placed, all the registered bidders get to know about it.&lt;/p&gt;

&lt;p&gt;There are two main parts to implementing the Observer design pattern.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Registration - where the interested objects register themselves with the centralized program to receive notifications&lt;/li&gt;
  &lt;li&gt;Notification - where the registered observers receive notifications from the centralized program&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a simple implementation of the Observer pattern:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinCenturyNotifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
            
            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sachinScoredACentury&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fan:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;fan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;announce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            
            &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;announce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; notified&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;SachinCenturyNotifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinCenturyNotifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ranga&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ramya&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Veena&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sachinScoredACentury&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have created an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;SachinCenturyNotifier&lt;/code&gt;, and registered three fans with it.&lt;/p&gt;

&lt;p&gt;Whenever Sachin scores a century, the call &lt;code class=&quot;highlighter-rouge&quot;&gt;notifier.sachinScoredACentury()&lt;/code&gt; would be made, and all three fans would be notified.&lt;/p&gt;

&lt;h4 id=&quot;the-visitor-pattern&quot;&gt;The Visitor Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Visitor pattern allows us to add a new operation to a class, without changing the class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-18.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of scenarios when designing frameworks, where we don’t want other people to modify the code in the framework. We want others to extend the functionality without touching the framework code. They are allowed to add new operations, but not to change the existing operations.&lt;/p&gt;

&lt;p&gt;The Visitor pattern allows you to do this.&lt;/p&gt;

&lt;p&gt;A good real-world example of the Visitor pattern is the operation of a taxi company.&lt;/p&gt;

&lt;p&gt;As soon as a person calls a taxi company, and a cab is dispatched, the company accepts a visitor. Once the visitor, or customer enters the taxi, he is no longer in control of where he is going. The cab driver is now in control.&lt;/p&gt;

&lt;p&gt;If we look at it as object-oriented code, the driver class is in control of the customer class. The driver class can add new operations on top of the customer/visitor.&lt;/p&gt;

&lt;h4 id=&quot;the-template-method-pattern&quot;&gt;The Template Method Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Template Method pattern is used to defer the exact steps of an algorithm, to a subclass.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-19.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A good real-world example of this pattern is how we go about creating a house plan. Any good house plan consists of a floor plan, the foundation, plumbing, framing and wiring. Such a plan is almost identical for each house.&lt;/p&gt;

&lt;p&gt;If you were to model this in software, you could create a template class with this standard behavior defined. A subclass could extend this and give actual implementations. Such details could include the wooden flooring type, the wall paint colors, and any added wings as required.&lt;/p&gt;

&lt;p&gt;A good example of the Template Method pattern is within the Spring framework, in the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractController&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;checkRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prepareResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;synchronizeOnSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;ObjectMutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSessionMutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
                &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequestInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequestInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handleRequest()&lt;/code&gt; merely takes care of the basic things. However, it leaves the lions to share for the implementation to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;handleRequestInternal()&lt;/code&gt;. This method is defined by subclasses, where more specific logic can be implemented.&lt;/p&gt;

&lt;p&gt;The Template Method pattern is all about doing the high-level steps, and leaving the low-level details to the subclasses. The subclasses can override the low steps and provide their own implementation.&lt;/p&gt;

&lt;h4 id=&quot;the-command-pattern&quot;&gt;The Command Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Command pattern encapsulates a command request as an object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-20.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a real-world example.&lt;/p&gt;

&lt;p&gt;Consider the scenario when a customer goes to a restaurant and wants to place an order for a meal. The writer merely writes the order he gets on a piece of paper, and passes it on to the chef. The chef executes the order, and then prepares the meal. He passes the piece of paper to the manager.&lt;/p&gt;

&lt;p&gt;The verbal order from the customer has now become a paper object. This piece of paper is the command object. The command object contains all the details needed to execute the request.&lt;/p&gt;

&lt;p&gt;Similarly in object-oriented programming, we can encapsulate all the details of a request into an object, and pass that object to execute it.&lt;/p&gt;

&lt;p&gt;In web applications, when a user types in the details on a form, these details are captured in a single request object, which is then passed across.&lt;/p&gt;

&lt;p&gt;The interface &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Runnable&lt;/code&gt; is also a good example of how this pattern is implemented. We create threads in Java by extending the &lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt; interface, which has all the logic for execution in its &lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt; method. When we want to create and start a thread, we pass this class to the &lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt; method.&lt;/p&gt;

&lt;h4 id=&quot;the-memento-method&quot;&gt;The Memento Method&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Memento pattern captures and later restores an object’s internal state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-21.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A lot of games that we play offer the option of performing an intermediate save. At a certain point in the game, you can save it and later come back to it.&lt;/p&gt;

&lt;p&gt;To implement this, we need to save the internal states of the game objects, and restore them at a certain point in time.&lt;/p&gt;

&lt;p&gt;This save-revert functionality can be implemented by using serialization in a language such as Java.&lt;/p&gt;

&lt;p&gt;The memento pattern is very useful for implementing undo/redo operations.&lt;/p&gt;

&lt;p&gt;For example, if you are working on a text document in a word processor. If at a certain point, you decide to undo changes, you can see each undo until you reach a point where you are satisfied. You have now reverted to an earlier saved state of the document.&lt;/p&gt;

&lt;h4 id=&quot;the-mediator-pattern&quot;&gt;The Mediator Pattern&lt;/h4&gt;

&lt;p&gt;The Mediator pattern is used to define simplified communication between classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-22.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take the example of an Air Traffic Controller (ATC). Let’s say that at any point of time in India, we have about 500 flights in the air. We need to decide the routes that each of these flights needs to take. This also includes deciding the times at which each of these flights takes off and lands. It will be a highly complex situation if each of these 500 flights needs to talk with each other and arrive at an acceptable schedule of routes.&lt;/p&gt;

&lt;p&gt;That’s why we have the concept of an ATC. The flights communicate with the ATC, and having assimilated the information from all the flights, the ATC makes the decisions and communicates them back the flights.&lt;/p&gt;

&lt;p&gt;In the software world, a good example of the Mediator pattern is the ESB (Enterprise Service Bus). In a distributed system, instead of letting the applications talk to each other, an application drops in a message to the ESB. The ESB routes the request to the application that needs to handle the request. It acts as the Mediator.&lt;/p&gt;

&lt;h3 id=&quot;summary-2&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we had a quick look over a variety of design patterns.&lt;/p&gt;

&lt;p&gt;A design pattern is an approach to solve a problem in a given context. We focused on understanding the context in which a particular pattern may be applicable with real-world examples.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson7&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson9&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this guide, we give you an introduction to the world of design patterns.For each pattern, we understand 1) the pattern a2) the context in which it is applicable - with a real-world example.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - How do you keep your design simple?</title><link href="http://localhost:4000/blog/SwDesignLesson7" rel="alternate" type="text/html" title="Software Design - How do you keep your design simple?" /><published>2019-10-15T09:14:00+00:00</published><updated>2019-10-15T09:14:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson7</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson7">&lt;p&gt;With extreme programming and agile, the focus is being lean and keeping your design simple. In this context, how do you ensure that your design remains good and evolves along with the application requirements? Here are a five tips you can focus on.&lt;/p&gt;

&lt;h4 id=&quot;the-four-principle-of-simple-design&quot;&gt;The Four Principle Of Simple Design&lt;/h4&gt;

&lt;p&gt;These are the foundation for keeping your design simple. When you try to learn the ropes using Extreme Programming, you really need to focus on these principles.&lt;/p&gt;

&lt;p&gt;A software application is said to have a simple design if it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Runs all tests&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contains no duplication&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expresses intent of programmers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minimizes number of classes and methods&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about it &lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;solid-principles&quot;&gt;SOLID Principles&lt;/h4&gt;

&lt;p&gt;This represents a good aim to have when designing Object Object Software. The term SOLID is an acronym for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single Responsibility Principle&lt;/li&gt;
  &lt;li&gt;Open-Closed Principle&lt;/li&gt;
  &lt;li&gt;Liskov Substitution Principle&lt;/li&gt;
  &lt;li&gt;Interface Segregation Principle&lt;/li&gt;
  &lt;li&gt;Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about it &lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;appropriate-patterns&quot;&gt;Appropriate Patterns&lt;/h4&gt;

&lt;p&gt;Be choosy about the design pattern you use. Do not fill up your design with patterns, just because they are available. Understand the context of your application and the context of the design pattern. Make sure they make the right match before implementing design pattern.&lt;/p&gt;

&lt;h4 id=&quot;simple-hand-drawn-diagrams&quot;&gt;Simple Hand-drawn Diagrams&lt;/h4&gt;

&lt;p&gt;Simple, hand-drawn diagrams are quite sufficient to communicate the initial design to the stakeholders and your peers. Trying to produce stunning, intricate diagrams only leads to a wastage of precious time.&lt;/p&gt;

&lt;p&gt;Once the design is stabilized, you can work on more concrete diagrams.&lt;/p&gt;

&lt;h4 id=&quot;great-unit-tests&quot;&gt;Great Unit Tests&lt;/h4&gt;

&lt;p&gt;This is a very important requirement for a simple design. Tests help to keep your design evolving, because they give you feed back on how correct your code is. If that is not the case, you won;t be confident of changing your design, and  the design would no longer evolve.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we discussed a few tips on simple design.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson7&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson8&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">With extreme programming and agile, the focus is being lean and keeping your design simple. In this context, how do you ensure that your design remains good and evolves along with the application requirements? Here are a five tips you can focus on.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">6. Software Design - What is Dependency Inversion Principle?</title><link href="http://localhost:4000/blog/SwDesignLesson6" rel="alternate" type="text/html" title="6. Software Design - What is Dependency Inversion Principle?" /><published>2019-10-14T11:05:00+00:00</published><updated>2019-10-14T11:05:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson6</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson6">&lt;p&gt;Dependency Inversion Principle is one of the important SOLID Principles. Dependency Inversion Principle is implemented by one of the most popular Java frameworks - Spring. What is it all about? How does it help you design good applications?&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will Learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is Dependency Inversion Principle?&lt;/li&gt;
  &lt;li&gt;How are Dependency Inversion Principle and Spring Framework related?&lt;/li&gt;
  &lt;li&gt;A few examples of Dependency Inversion Principle in action&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-dependency-inversion-principle-dip&quot;&gt;What Is Dependency Inversion principle (DIP)?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Depend Upon Abstractions (interfaces), not Implementations (concrete classes)”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this statement mean? Let’s try understanding that with an example:&lt;/p&gt;

&lt;p&gt;Let’s look at an example of what this means:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class OutputDevice {
	void copy(String device) {
		Keyboard keyboard = new Keyboard();
		int character;
		while ((character = keyboard.read()) != -1) {
			if (device.equals(&quot;Printer&quot;)) {
				writeToPrinter(character);
			} else {
				writeToDevice(character);
			}
		}
	}

	private void writeToDevice(int character) {
		// TODO Auto-generated method stub
		
	}

	private void writeToPrinter(int c) {
		// TODO Auto-generated method stub
		
	}
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What does the &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method do?&lt;/p&gt;

&lt;p&gt;It reads a character from the keyboard, and then decides where this character needs to go. If it’s a printer, write to the printer. Else, send it to the disk.&lt;/p&gt;

&lt;p&gt;The problem here is that as the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;OutputDevice&lt;/code&gt; types increase, the logic of &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; needs to change every single time.&lt;/p&gt;

&lt;p&gt;Let’s look at an alternate implementation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public interface Reader {
		public char read();
	}

	public interface Writer {
		public void write(char ch);
	}

	void copy(Reader r, Writer w) {
		int c;

		while((c = r.read()) != EOF) {
			w.write(c);
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we have done here is define two separate interfaces, one to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;, and the other to define the &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;The responsibility of the &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method is quite clear here: it reads from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt;, and writes whatever it gets to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; now focuses only on the actual operation, and it does so by identifying everything else as its dependencies.&lt;/p&gt;

&lt;p&gt;It can now work with any implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; interfaces.&lt;/p&gt;

&lt;h3 id=&quot;dip-and-the-spring-framework&quot;&gt;DIP and The Spring Framework&lt;/h3&gt;

&lt;p&gt;DIP is one of the core principles that the Spring Framework enables. Have a look at this example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorthm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; directly creates an instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt;. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt; is a dependency of &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt;, and as we saw in our previous example, directly accessing it is not a great idea. If you want to switch from a bubble-sort to a quicksort algorithm later, you need to change quite a lot of code inside &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Better Approach for &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; is to make use of an interface - sort algorithm. Here is how our modified code would look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intrface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BinarySearchImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;User of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class, can also pass in a specific implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt;, such as a bubble-sort or a quick-sort implementation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; is &lt;strong&gt;decoupled&lt;/strong&gt; from which &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you use the Spring framework, you could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; annotation with the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class, to automatically auto wire an implementation of an available sort algorithm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;By applying the DIP, you make your code more testable. The test code could pass in dependency mocks to properly test the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Dependency Inversion is about identifying dependencies and externalizing them. You can use a framework like Spring to simplify Dependency Inversion. DIP makes your code more maintainable, reusable and testable.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson5&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson6&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Dependency Inversion Principle is one of the important SOLID Principles. Dependency Inversion Principle is implemented by one of the most popular Java frameworks - Spring. What is it all about? How does it help you design good applications?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">5. Software Design - Open Closed Principle Principle</title><link href="http://localhost:4000/blog/SwDesignLesson5" rel="alternate" type="text/html" title="5. Software Design - Open Closed Principle Principle" /><published>2019-10-14T11:00:00+00:00</published><updated>2019-10-14T11:00:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson5</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson5">&lt;p&gt;Open Closed Principle is one of the SOLID Principles. You want your code to be extensible. How do you achieve it with minimum fuss? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is the Open Closed Principle?&lt;/li&gt;
  &lt;li&gt;How do you apply this principle in developing and designing software applications?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-closed-principle&quot;&gt;Open Closed Principle&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your classes should be open to extension, but closed to modification&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean? Let’s look at a simple example to understand what this means.&lt;/p&gt;

&lt;h3 id=&quot;an-example-of-poor-design&quot;&gt;An example of Poor Design&lt;/h3&gt;

&lt;p&gt;Let’s take a quick look at the calculateArea method in the Shape class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Shape {
	public double calculateArea(Shape[] shapes) {
		double area = 0;
		for(Shape shape:shapes) {
			if(shape instanceof Rectangle) {
				//Calculate Area of Rectange
			}
			else if(shape instanceof Circle) {
				//Calculate Area of Circle
			}
		}
		return area;
	}
}

class Rectangle extends Shape {
	
}

class Circle extends Shape {
	
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is there a problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method?&lt;/p&gt;

&lt;p&gt;What if we add a new shape? What if we remove a shape? What if we want to change the area algorithm for one of the shapes.&lt;/p&gt;

&lt;p&gt;For all these modifications, &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method needs to change.&lt;/p&gt;

&lt;p&gt;How can we make it better?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parts of the above code below pseudo code, for ease of explanation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class Shape {

	
    abstract double area();
}

class Rectangle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

class Circle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A better solution would be to allow each of the shapes, to define their own &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method. We have created an abstract class called &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; (which could also have been an interface), and have each of the different shapes extend it. Each shape also overrides &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt;’s abstract &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method, to compute its specific area.&lt;/p&gt;

&lt;p&gt;The standalone &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method would now look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;abstract class Shape {
	
	
	public double calculateArea(Shape[] shapes)
	{
		double area = 0;
		for(Shape shape:shapes) {
			area += shape.area();
		}
		return area;
	}
	
    abstract double area();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is now responsible just for looping around the shapes, and invoking the &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method of individual shapes.&lt;/p&gt;

&lt;p&gt;This is a very good example of the OCP.&lt;/p&gt;

&lt;p&gt;If you now want to add another shape, then you need to extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class, and override its &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method:. That’s it.&lt;/p&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class is open to extension, and &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is closed to modification.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we focused on Open Closed Principle.&lt;/p&gt;

&lt;p&gt;Design should be open for extension, but closed for modification.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson4&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson6&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Open Closed Principle is one of the SOLID Principles. You want your code to be extensible. How do you achieve it with minimum fuss? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">4. Software Design - Single Responsibility Principle</title><link href="http://localhost:4000/blog/SwDesignLesson4" rel="alternate" type="text/html" title="4. Software Design - Single Responsibility Principle" /><published>2019-10-14T10:55:00+00:00</published><updated>2019-10-14T10:55:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson4</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson4">&lt;p&gt;For me, Single Responsibility Principle (SRP) is the most important design principle.&lt;/p&gt;

&lt;p&gt;What is Single Responsibility Principle? How do you use it? How does it help with making your software better? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is the Single Responsibility Principle?&lt;/li&gt;
  &lt;li&gt;How do you apply this principle in developing and designing software applications?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-the-single-responsibility-principle-srp&quot;&gt;What Is The Single Responsibility Principle (SRP)?&lt;/h2&gt;

&lt;p&gt;As the term says, this principle is all about having single responsibility.&lt;/p&gt;

&lt;p&gt;In any software system, this principle is applicable at multiple levels&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a variable&lt;/li&gt;
  &lt;li&gt;a method&lt;/li&gt;
  &lt;li&gt;a class&lt;/li&gt;
  &lt;li&gt;a package&lt;/li&gt;
  &lt;li&gt;a component&lt;/li&gt;
  &lt;li&gt;application layers or&lt;/li&gt;
  &lt;li&gt;the entire application itself&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;srp-for-methods&quot;&gt;SRP For Methods&lt;/h2&gt;

&lt;p&gt;Any method that you write should have a single responsibility -  it should either be a high-level method, or a low-level one. Only when a method has a single responsibility, you will be able to give it an appropriate name.&lt;/p&gt;

&lt;h2 id=&quot;srp-for-classes&quot;&gt;SRP For Classes&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A class should have one, and only one reason to change”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s now have a look at a few examples of classes that violate this principle, and then look at how to correct the violation.&lt;/p&gt;

&lt;h3 id=&quot;example-1-the-task-class&quot;&gt;Example 1: The &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; class&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Strign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseTheFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;persistTheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Does the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; adhere to the single responsibility principle? Not at all, because it does a lot of different things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;downloadFile()&lt;/code&gt; downloads the file, by communicating over the internet&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parseTheFile()&lt;/code&gt; parses the file contents&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;persistTheData()&lt;/code&gt; saves the data into a database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A better solution would be to have separate classes for each of the responsibilities currently taken up by &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;. Here is one such solution.&lt;/p&gt;

&lt;h4 id=&quot;identifying-the-low-level-classes&quot;&gt;Identifying The Low-level Classes&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileDownloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseStorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FileDownloader&lt;/code&gt; only downloads the file from the internet&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DataParser&lt;/code&gt; only parses the downloaded file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DatabaseStorer&lt;/code&gt; only stores the parsed data, into the database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are all low-level classes here.&lt;/p&gt;

&lt;h4 id=&quot;adding-a-high-level-class&quot;&gt;Adding A High-Level Class&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadAndStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doEverything&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileDownloader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DatabaseStorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, you can create a high-level class such as &lt;code class=&quot;highlighter-rouge&quot;&gt;DownloadAndStore&lt;/code&gt; that invokes the functionality of these low-level classes to perform the complete task. Such an organization ensures that the low-level classes are reusable.&lt;/p&gt;

&lt;h3 id=&quot;example-2-the-employee-class&quot;&gt;Example 2: The Employee Class&lt;/h3&gt;

&lt;p&gt;Consider next, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; class shown below:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reportHours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; concerns itself with not just calculating the pay of an employee, but also reporting hours for work, and saving these details to the database.&lt;/p&gt;

&lt;p&gt;I will leave it as an exercise to fix the Employee class to adhere to SRP.&lt;/p&gt;

&lt;h2 id=&quot;srp-for-components&quot;&gt;SRP For Components&lt;/h2&gt;

&lt;p&gt;Every enterprise application has parts of its functionality organized as Components. For example, have a look at the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/4/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, the following components are of note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Security component  takes care of user authentication and authorization. Designing such a component helps abstract applications from the low-level security details. All microservices can interact with this component to find out if a user has access.&lt;/li&gt;
  &lt;li&gt;The Logging component - does the low level logging functionality&lt;/li&gt;
  &lt;li&gt;The Archetype component - Can be used to create new microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these components have a single responsibility. If the Security component takes care of logging, it would become less reusable. Therefore, at the component level, a well-defined single responsibility is highly desirable.&lt;/p&gt;

&lt;h3 id=&quot;using-srp-for-common-infrastructure&quot;&gt;Using SRP For Common Infrastructure&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/4/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the diagram shown above, you can identify the following infrastructure components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Naming Service - Has the responsibility to retrieve the service location based on its name&lt;/li&gt;
  &lt;li&gt;API Gateway - All requests go through the API Gateway. Common features like authentication, logging, rate limiting can be implemented in an API Gateway.&lt;/li&gt;
  &lt;li&gt;Centralized Logging - Centralized store for logs from all microservices so that we can easily debug problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with these sub-systems, a single responsibility for each of them is most desirable.&lt;/p&gt;

&lt;h3 id=&quot;using-srp-for-application-layering&quot;&gt;Using SRP For Application Layering&lt;/h3&gt;

&lt;p&gt;Single responsibility is also an important factor in how you layer your application. Have a look at the following conceptual layers in a web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/4/Capture-05-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Layer: All functionality concerned with direct user interaction sits here&lt;/li&gt;
  &lt;li&gt;Business Layer: Houses the core business logic&lt;/li&gt;
  &lt;li&gt;Data layer: All the functionality dealing with storing and retrieving data goes here&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you had the need to talk to other systems, there would have been an additional Enterprise Messaging Layer added onto this setup.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we talked about the Single Responsibility Principle. It is applicable at multiple levels to the parts of an application. This includes methods, classes, packages, components and application layers. With regards to classes, at a low level it means a class has only one reason to change.&lt;/p&gt;

&lt;p&gt;In general, &lt;strong&gt;Single Responsibility ensures high cohesion, low coupling and enhanced reusability&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson3&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson5&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">For me, Single Responsibility Principle (SRP) is the most important design principle.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry></feed>