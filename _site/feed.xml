<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-12T08:59:58+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">5.Variable Scope</title><link href="http://localhost:4000/blog/Lesson5" rel="alternate" type="text/html" title="5.Variable Scope" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson5</id><content type="html" xml:base="http://localhost:4000/blog/Lesson5">&lt;section class=&quot;ts_tutorial5&quot;&gt;
    &lt;p&gt;In this lesson, we will cover a different type of variables and scopes.&lt;/p&gt;
    &lt;ol&gt;
        &lt;li&gt;Replace the content of the &lt;code&gt;onStartup()&lt;/code&gt; function:&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Counted: '&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
   &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;li&gt;And start our application, what you will see?&lt;/li&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/5/img/01.png&quot;
            alt=&quot;Function output.&quot;&gt;
        &lt;p&gt;Note that although our &lt;code&gt;i&lt;/code&gt; variable was declared inside a &lt;code&gt;for&lt;/code&gt; loop, it is accessible
            to the &lt;code&gt;console.log()&lt;/code&gt; function which is outside of &lt;code&gt;our&lt;/code&gt; code block. Why?&lt;/p&gt;
        &lt;p&gt;This is because we have declared our variable as &lt;code&gt;var&lt;/code&gt;. In JavaScript, all variables declared like
            that have scope to the nearest function, which in our case is &lt;code&gt;count()&lt;/code&gt;.&lt;/p&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/5/img/02.png&quot;
            alt=&quot;var variable scope.&quot;&gt;
        &lt;li&gt;Let's change &lt;code&gt;var&lt;/code&gt;, to &lt;code&gt;let&lt;/code&gt;:&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;Now the scope of our variable is changed to local:&lt;/p&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/5/img/03.png&quot;
            alt=&quot;let variable scope.&quot;&gt;
        &lt;li&gt;Let's have a look at the error which occurred in line 22 after we change the scope of our variable:&lt;/li&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/5/img/04.png&quot;
            alt=&quot;Error.&quot;&gt;
        &lt;p&gt;and if we save the file, we will see an error in the console during compilation:&lt;/p&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;app&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;component&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; error &lt;span class=&quot;token constant&quot;&gt;TS2304&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Cannot find name &lt;span class=&quot;token string&quot;&gt;'i'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;Remember when we talked about compile-time errors? This is a beautiful example, the compiler spots this error
            and informs us that we are trying to access a variable which isn't accessible within the current scope
            &lt;strong&gt;before we even tried to run our code in a browser&lt;/strong&gt;. Actually, thanks to Visual Studio
            &lt;strong&gt;we can see an error even before we request the CLI to compile our project&lt;/strong&gt;. The editor shows
            us errors in real-time. That's a really awesome feature which will save you a lot of time.&lt;/p&gt;
    &lt;/ol&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson4&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson6&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">In this lesson, we will cover a different type of variables and scopes. Replace the content of the onStartup() function: onStartup(){ function count(){ for (var i = 0; i &amp;lt; 9; i++){ console.log(i); } console.log('Counted: ' , i); } count();} }</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/angular_logo.png" /></entry><entry><title type="html">4.Type Any</title><link href="http://localhost:4000/blog/Lesson4" rel="alternate" type="text/html" title="4.Type Any" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson4</id><content type="html" xml:base="http://localhost:4000/blog/Lesson4">&lt;section class=&quot;ts_tutorial4&quot;&gt;
    &lt;h3&gt;Type: any&lt;/h3&gt;
    &lt;p&gt;You could ask — what if I don't know what kind of value my variable will have?&lt;/p&gt;
    &lt;ol&gt;
        &lt;li&gt;Let's flush our function code and type ine the following: &lt;/li&gt;
        &lt;pre class=&quot;code-toolbar&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  let myVar;
 
   myVar = 1;      //number
   myVar = true;   //boolean
   myVar = 'mdb';  //string
 &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;The TypeScript compiler doesn't complain. Why!?&lt;/p&gt;
        &lt;li&gt;Hover over the &lt;code&gt;myVar&lt;/code&gt; declaration, what do you see?&lt;/li&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/4/img/01.png&quot;
            alt=&quot;Any type&quot;&gt;
        &lt;p&gt;TypeScript allows you to use a special type &lt;code&gt;any&lt;/code&gt;. It allows you to use dynamic typing but
            importantly — it requires you to use it consciously.&lt;/p&gt;
        &lt;li&gt;What is actually type of the variable &lt;code&gt;myVar&lt;/code&gt;? Let's check it:&lt;/li&gt;
        &lt;pre class=&quot;code-toolbar&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;  myVar = 1;     //number
   console.log(typeof(myVar));
   myVar = true;  //boolean
   console.log(typeof(myVar));
   myVar = 'mdb'; //string
   console.log(typeof(myVar));
 &lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;The output:&lt;/p&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/4/img/02.png&quot;
            alt=&quot;Dynamic type&quot;&gt;
        &lt;li&gt;Now let's add an explicit type, cast after the var declaration:&lt;/li&gt;
        &lt;pre class=&quot;code-toolbar&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;  let myVar: number;&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;Immediately, the compiler will show two errors regarding the second, and third assignments&lt;/p&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/4/img/03.gif&quot;
            alt=&quot;Error &quot;&gt;
    &lt;/ol&gt;
    &lt;h3&gt;Other types:&lt;/h3&gt;
    &lt;p&gt;We used already four different types of variables (&lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;
        and &lt;code&gt;any&lt;/code&gt;). Are there any others? Yes, there are.&lt;/p&gt;
    &lt;pre class=&quot;code-toolbar&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  let a: number;                    //numeric type
   let b: string;                    //string
   let c: boolean;                   //true or false
   let d: any;                       //any (dynamic)
   let e: number[] = [1,2,3];        //array of numbers
   let f: string[] = ['a','b','c'];  //array of strings
   let g: any[] = [true, 1, 'a'];    //array of any
   &lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;As you can see, except for basic types which we already covered you can also create arrays of different types
        including the &lt;code&gt;any&lt;/code&gt; type. There is also one more type of variable — &lt;code&gt;enum&lt;/code&gt; but we will
        cover it in the future. &lt;/p&gt;
    &lt;!--     &lt;h3&gt;Enums:&lt;/h3&gt;
       TODO
       --&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson3&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson5&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Type: any You could ask — what if I don't know what kind of value my variable will have? Let's flush our function code and type ine the following: let myVar; myVar = 1; //number myVar = true; //boolean myVar = 'mdb'; //string The TypeScript compiler doesn't complain. Why!? Hover over the myVar declaration, what do you see? TypeScript allows you to use a special type any. It allows you to use dynamic typing but importantly — it requires you to use it consciously. What is actually type of the variable myVar? Let's check it: myVar = 1; //number console.log(typeof(myVar)); myVar = true; //boolean console.log(typeof(myVar)); myVar = 'mdb'; //string console.log(typeof(myVar)); The output: Now let's add an explicit type, cast after the var declaration: let myVar: number; Immediately, the compiler will show two errors regarding the second, and third assignments Other types: We used already four different types of variables (number, string, boolean and any). Are there any others? Yes, there are. let a: number; //numeric type let b: string; //string let c: boolean; //true or false let d: any; //any (dynamic) let e: number[] = [1,2,3]; //array of numbers let f: string[] = ['a','b','c']; //array of strings let g: any[] = [true, 1, 'a']; //array of any As you can see, except for basic types which we already covered you can also create arrays of different types including the any type. There is also one more type of variable — enum but we will cover it in the future. Previous Lesson Next Lesson</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/angular_logo.png" /></entry><entry><title type="html">3.Static vs dynamic typing</title><link href="http://localhost:4000/blog/Lesson3" rel="alternate" type="text/html" title="3.Static vs dynamic typing" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson3</id><content type="html" xml:base="http://localhost:4000/blog/Lesson3">&lt;section class=&quot;ts_tutorial3&quot;&gt;
    &lt;h3&gt;Static vs dynamic typing&lt;/h3&gt;
    &lt;ol&gt;
        &lt;li&gt;First, let's replace the content of the &lt;code&gt;onStartup&lt;/code&gt; function:&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; test &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'mdb'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
test &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;You will see that TypeScript complains about the second assignment of test:&lt;/p&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;app&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;component&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; error &lt;span class=&quot;token constant&quot;&gt;TS2322&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Type &lt;span class=&quot;token string&quot;&gt;'5'&lt;/span&gt; is not assignable to type &lt;span class=&quot;token string&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;This code would work perfectly fine in JavaScript which allows dynamic change of types. You might think, that
            this approach is better, however, although it might look easier for a developer &lt;strong&gt;it is not.&lt;/strong&gt;
            Imagine that there you are working on a project with a team of developers and one of them by mistake changes
            the type of your variable from &lt;code&gt;number&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt;. All logic based on that variable
            will be broken now (as it would be comparing a variable to a number).&lt;/p&gt;
        &lt;li&gt;Let's now surround number 5 with quotes: &lt;code&gt;'5'&lt;/code&gt;&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;test &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'5'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;This time the compiler won't complain because we have cast our 5 from a number to a string. As a result we
            can assign it to our variable, however, we have to remember that it will be treated as a &lt;code&gt;string&lt;/code&gt;
            and not a &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;
        &lt;li&gt;Let's try another test, copy the following condition into your code, but before you paste it think for a
            moment and try to guess what will be the output: &lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'equals'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'not equals'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;Once you paste the following condition into your code, TypeScript generates an error:&lt;/p&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-markup&quot;&gt;&lt;code class=&quot; language-markup&quot;&gt;ERROR in src/app/app.component.ts(20,5): error TS2365: Operator '===' cannot be applied to types 'string' and 'number'.&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;Once again, this condition would execute in plain JavaScript and could lead us to an error. By looking at the
            code you might think that result of the comparison will be true, but due to different types, it would
            evaluate to &lt;code&gt;false&lt;/code&gt;. TypeScript protects you from making such mistakes warning that you are
            trying to compare different types. &lt;/p&gt;
    &lt;/ol&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson2&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson4&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Static vs dynamic typing First, let's replace the content of the onStartup function: onStartup(){ let test = 'mdb'; test = 5; }</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/angular_logo.png" /></entry><entry><title type="html">2.Our first TypeScript code</title><link href="http://localhost:4000/blog/Lesson2" rel="alternate" type="text/html" title="2.Our first TypeScript code" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson2</id><content type="html" xml:base="http://localhost:4000/blog/Lesson2">&lt;section class=&quot;ts_tutorial2&quot;&gt;
    &lt;h3&gt;Our first TypeScript code&lt;/h3&gt;
    &lt;blockquote class=&quot;blockquote bq-warning&quot;&gt;
        &lt;p class=&quot;bq-title&quot;&gt;Before you start:&lt;/p&gt;
        &lt;p&gt;Make sure that you have installed TypeScript — if you haven't check &lt;a target=&quot;_blank&quot;
                href=&quot;https://girishgodage.github.io/blog/Installerlesson2&quot;&gt;this lesson&lt;/a&gt; first.&lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;Let's write our first line of TypeScript code. Before we will do it let me clarify one thing. TypeScript is
        independent of Angular, therefore you can use TypeScript without using Angular. Let's see how to do that. &lt;/p&gt;
    &lt;ol&gt;
        &lt;li&gt;Open a terminal and create a file &lt;code&gt;main.ts&lt;/code&gt;:&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello TS World&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;li&gt;Now run following command:&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;tsc main&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ts&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;This will run TypeScript compiler and compile TypeScript to JavaScript. If you run &lt;code&gt;ls&lt;/code&gt;
            (macOS/unix) or &lt;code&gt;dir&lt;/code&gt; (Windows) command. You should see 2 files:&lt;/p&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;rw&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;r&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; Dawid  staff  &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt; Feb  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt; main&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js
 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;rw&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;r&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;r&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; Dawid  staff  &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt; Feb  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt; main&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ts&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;Our TypeScript code (main.ts) was compiled to JavaScript (main.js).&lt;/p&gt;
        &lt;li&gt;Let's run our js code using node:&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;node main&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;You should see:&lt;/p&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;Hello &lt;span class=&quot;token constant&quot;&gt;TS&lt;/span&gt; World&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;And again step by step:&lt;/p&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/2/img/01.gif&quot;
            alt=&quot;TS superset of JS&quot;&gt;
        &lt;p&gt;That confirms what we I have stated before:&lt;/p&gt;
        &lt;blockquote class=&quot;blockquote bq-primary&quot;&gt;
            &lt;p&gt;Any valid JavaScript code is also a valid TypeScript code.&lt;/p&gt;
        &lt;/blockquote&gt;
    &lt;/ol&gt;
    &lt;h3&gt;Visual Studio Code&lt;/h3&gt;
    &lt;p&gt;Now you understand that TypeScript is independent of Angular, however, Angular cannot work without TypeScript.
        Therefore whenever you are running &lt;code&gt;ng serve&lt;/code&gt;, or &lt;code&gt;ng build&lt;/code&gt;, Angular CLI is calling the
        TypeScript compiler under the hood, so to compile the code of our application to JavaScript that can be used by
        browsers.&lt;/p&gt;
    &lt;p&gt;While working with Angular you will hardly use the &lt;code&gt;tsc&lt;/code&gt; command and stand-alone files, therefore we
        will switch to Visual Studio Code now.&lt;/p&gt;
    &lt;ol&gt;
        &lt;li&gt;Open Visual Studio Code&lt;/li&gt;
        &lt;li&gt; Open our recent project &lt;code&gt;/my-app&lt;/code&gt; (if you missed that check previous tutorial where we set up
            our project).&lt;/li&gt;
        &lt;li&gt; Replace the content of &lt;code&gt;/src/app/app.component.ts&lt;/code&gt; file with the following: &lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'@angular/core'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
   @&lt;span class=&quot;token function&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     selector&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'app-root'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     templateUrl&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'app.component.html'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     styleUrls&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'app.component.css'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 
   &lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppComponent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 
     &lt;span class=&quot;token keyword&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
   &lt;span class=&quot;token function&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Hello TS World'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;li&gt;Save the file, then run &lt;code&gt;ng serve -o&lt;/code&gt;. When the CLI opens a new tab/window with our project, open
            the developer console. You will see:&lt;/li&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/2/img/02.png&quot;
            alt=&quot;Console .log&quot;&gt;
        &lt;p&gt;As you noticed we have created a function — &lt;code&gt;onStartup()&lt;/code&gt; — and added it to the constructor of our
            &lt;code&gt;AppComponent&lt;/code&gt;. Whenever an instance of our component is created, it will call our
            &lt;code&gt;onStartup&lt;/code&gt; function.&lt;/p&gt;
    &lt;/ol&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson3&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Our first TypeScript code Before you start: Make sure that you have installed TypeScript — if you haven't check this lesson first. Let's write our first line of TypeScript code. Before we will do it let me clarify one thing. TypeScript is independent of Angular, therefore you can use TypeScript without using Angular. Let's see how to do that. Open a terminal and create a file main.ts: console.log(&quot;Hello TS World&quot;);</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/angular_logo.png" /></entry><entry><title type="html">1.TypeScript Fundamental</title><link href="http://localhost:4000/blog/Lesson1" rel="alternate" type="text/html" title="1.TypeScript Fundamental" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson1</id><content type="html" xml:base="http://localhost:4000/blog/Lesson1">&lt;section class=&quot;ts_tutorial&quot;&gt;
    &lt;h2&gt;Fundamentals&lt;/h2&gt;
    &lt;p&gt;In order to create Angular apps, you have to know Typescript. Within thenext few lessons I will teach you its
        basic concepts, by covering the following subjects: &lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;Type annotations&lt;/li&gt;
        &lt;li&gt;Arrow functions&lt;/li&gt;
        &lt;li&gt;Interfaces&lt;/li&gt;
        &lt;li&gt;Classes&lt;/li&gt;
        &lt;li&gt;Constructors&lt;/li&gt;
        &lt;li&gt;Access modifiers&lt;/li&gt;
        &lt;li&gt;Properties&lt;/li&gt;
        &lt;li&gt;Modules&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;If you are familiar with these concepts you can skip this tutorial and navigate to the next part, however if you
        are new to TypeScript then follow it carefully.&lt;/p&gt;
    &lt;h3&gt;What is TypeScript?&lt;/h3&gt;
    &lt;p&gt;At a first glance you might confuse TypeScript with JavaScript. Especially that any valid JavaScript code is also
        a valid TypeScript code, however, it doesn't work another way around. TypeScript is a superset of JavaScript.
    &lt;/p&gt;
    &lt;img class=&quot;img-fluid&quot;
        src=&quot;http://localhost:4000/img/typescript/1/img/01.png&quot;
        alt=&quot;TS superset of JS&quot;&gt;
    &lt;p&gt;&lt;i&gt;Image taken from https://angular2buch.de&lt;/i&gt;&lt;/p&gt;
    &lt;blockquote class=&quot;blockquote bq-primary&quot;&gt;
        &lt;p class=&quot;bq-title&quot;&gt;Remember:&lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;TypeScript is a superset of JavaScript&lt;/strong&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;That means that &lt;strong&gt;TypeScript extends JavaScript with extra functionality&lt;/strong&gt; which is not present in
        the current version of JavaScript supported by most browsers. So what are those features? &lt;/p&gt;
    &lt;h4&gt;Strong typing&lt;/h4&gt;
    &lt;p&gt;If you are familiar with languages like Java or C# you probably know that &lt;strong&gt;each variable requires a type
            and this type has to be declared upfront&lt;/strong&gt;. JavaScript is a loosely typed or a dynamically typed
        language. Variables in JavaScript are not directly associated with any particular value type, and any variable
        can be assigned (and re-assigned) values of all types:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre class=&quot;code-toolbar language-markup&quot;&gt;&lt;code class=&quot; language-markup&quot;&gt;var foo = 42;    // foo is now a Number
var foo = 'bar'; // foo is now a String
var foo = true;  // foo is now a Boolean&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;
    &lt;p&gt;In a weakly typed language, the type of a &lt;strong&gt;value depends on how it is used&lt;/strong&gt;. For example, if I can
        pass a string to the addition operator and it will AutoMagically be interpreted as a number &lt;strong&gt;or cause an
            error if the contents of the string cannot be translated into a number&lt;/strong&gt;. Similarly, I can
        concatenate strings and numbers or use strings as booleans, etc.&lt;/p&gt;
    &lt;p&gt;In a strongly typed language, &lt;strong&gt;a variable has a type and that type cannot change&lt;/strong&gt;. What you can do
        to a variable depends on its type. If we try to compile the above code in TypeScript we will get the sfollowing
        error:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ts&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Subsequent variable declarations must have the same &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
Variable &lt;span class=&quot;token string&quot;&gt;'foo'&lt;/span&gt; must be &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'number'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; but here has &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'boolean'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
        
    &lt;/div&gt;
    &lt;p&gt;The advantage of a strongly typed language is that &lt;strong&gt;you are forced to make the behavior of your program
            explicit&lt;/strong&gt;. If you want to add a number and a string your code, you must translate the string into a
        number to be used as an operand of the addition operator. &lt;strong&gt;This makes code easier to understand because
            there is no (or less) hidden behavior&lt;/strong&gt;. This also makes your code more verbose.&lt;/p&gt;
    &lt;blockquote class=&quot;blockquote bq-primary&quot;&gt;
        &lt;p class=&quot;bq-title&quot;&gt;Remember:&lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Strong typing is optional in TypeScript but using this feature makes your application more
                predictable and make it easier to debug so you should definitely make use of it.&lt;/strong&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;h4&gt;Object-oriented&lt;/h4&gt;
    &lt;p&gt;Object-oriented programming (OOP) is an old concept used by multiple languages like Java or C# to help developer
        associate together data and methods within one &quot;object&quot;. In &lt;code&gt;OOP&lt;/code&gt; object are created and are able to
        interact with each other using one another's public facing methods. &lt;strong&gt;JavaScript itself is not an
            object-oriented language&lt;/strong&gt; in the way that C++, C#, or Java are. &lt;strong&gt;TypeScript, on the other
            hand, can be treated as an object-oriented language&lt;/strong&gt; because of the language constructs it
        introduces on top of JavaScript closures. &lt;/p&gt;
    &lt;p&gt;TypeScript brings many object-oriented features which we missed in JavaScript for a very long time. We have
        explicit concepts of:&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;Classes&lt;/li&gt;
        &lt;li&gt;Interfaces&lt;/li&gt;
        &lt;li&gt;Constructors&lt;/li&gt;
        &lt;li&gt;Access modifiers (public and private)&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;We will learn all of that in the later sections.&lt;/p&gt;
    &lt;h4&gt;Compile-time error&lt;/h4&gt;
    &lt;p&gt;Let me explain first what &lt;code&gt;run-time error&lt;/code&gt; is as this is a common case. We are talking about the
        &lt;code&gt;run-time error&lt;/code&gt; when we face any issue while using our application. In other words — if you make a
        mistake when you create your website and write some code, you will see it only while using the
        application/website. For example, if you make a typo in an webpage file your browser console will show you an
        error when you load that page. &lt;/p&gt;
    &lt;p&gt;Due to weak typing in JavaScript, it often happens that we try to perform operations on a variable with a
        different type. If our application logic is complex we might not spot that we are trying to assign elements of a
        different type to each other. In JavaScript, we will get to know about the error &lt;strong&gt;only when someone
            triggers code and it fails&lt;/strong&gt;. In contrast, TypeScript can provide us with compile-time errors, which
        means, it can spot errors while compiling code to JavaScript, and fix it before deploying to production. Of
        course it won't catch them all, but still a lot.&lt;/p&gt;
    &lt;h4&gt;Awesome tool-set&lt;/h4&gt;
    &lt;p&gt;I won't write much about this. Along with this course you will see how many useful tools come with Angular.&lt;/p&gt;
    &lt;p&gt;Let's don't waste time and start coding!&lt;/p&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson2&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Fundamentals In order to create Angular apps, you have to know Typescript. Within thenext few lessons I will teach you its basic concepts, by covering the following subjects: Type annotations Arrow functions Interfaces Classes Constructors Access modifiers Properties Modules If you are familiar with these concepts you can skip this tutorial and navigate to the next part, however if you are new to TypeScript then follow it carefully. What is TypeScript? At a first glance you might confuse TypeScript with JavaScript. Especially that any valid JavaScript code is also a valid TypeScript code, however, it doesn't work another way around. TypeScript is a superset of JavaScript. Image taken from https://angular2buch.de Remember: TypeScript is a superset of JavaScript That means that TypeScript extends JavaScript with extra functionality which is not present in the current version of JavaScript supported by most browsers. So what are those features? Strong typing If you are familiar with languages like Java or C# you probably know that each variable requires a type and this type has to be declared upfront. JavaScript is a loosely typed or a dynamically typed language. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types: var foo = 42; // foo is now a Number var foo = 'bar'; // foo is now a String var foo = true; // foo is now a Boolean In a weakly typed language, the type of a value depends on how it is used. For example, if I can pass a string to the addition operator and it will AutoMagically be interpreted as a number or cause an error if the contents of the string cannot be translated into a number. Similarly, I can concatenate strings and numbers or use strings as booleans, etc. In a strongly typed language, a variable has a type and that type cannot change. What you can do to a variable depends on its type. If we try to compile the above code in TypeScript we will get the sfollowing error: [ts] Subsequent variable declarations must have the same type. Variable 'foo' must be of type 'number', but here has type 'boolean'. The advantage of a strongly typed language is that you are forced to make the behavior of your program explicit. If you want to add a number and a string your code, you must translate the string into a number to be used as an operand of the addition operator. This makes code easier to understand because there is no (or less) hidden behavior. This also makes your code more verbose. Remember: Strong typing is optional in TypeScript but using this feature makes your application more predictable and make it easier to debug so you should definitely make use of it. Object-oriented Object-oriented programming (OOP) is an old concept used by multiple languages like Java or C# to help developer associate together data and methods within one &quot;object&quot;. In OOP object are created and are able to interact with each other using one another's public facing methods. JavaScript itself is not an object-oriented language in the way that C++, C#, or Java are. TypeScript, on the other hand, can be treated as an object-oriented language because of the language constructs it introduces on top of JavaScript closures. TypeScript brings many object-oriented features which we missed in JavaScript for a very long time. We have explicit concepts of: Classes Interfaces Constructors Access modifiers (public and private) We will learn all of that in the later sections. Compile-time error Let me explain first what run-time error is as this is a common case. We are talking about the run-time error when we face any issue while using our application. In other words — if you make a mistake when you create your website and write some code, you will see it only while using the application/website. For example, if you make a typo in an webpage file your browser console will show you an error when you load that page. Due to weak typing in JavaScript, it often happens that we try to perform operations on a variable with a different type. If our application logic is complex we might not spot that we are trying to assign elements of a different type to each other. In JavaScript, we will get to know about the error only when someone triggers code and it fails. In contrast, TypeScript can provide us with compile-time errors, which means, it can spot errors while compiling code to JavaScript, and fix it before deploying to production. Of course it won't catch them all, but still a lot. Awesome tool-set I won't write much about this. Along with this course you will see how many useful tools come with Angular. Let's don't waste time and start coding!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/angular_logo.png" /></entry><entry><title type="html">3.Python JSON</title><link href="http://localhost:4000/blog/PythonJSON" rel="alternate" type="text/html" title="3.Python JSON" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonJSON</id><content type="html" xml:base="http://localhost:4000/blog/PythonJSON">&lt;section class=&quot;Ptutorial31&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python JSON: Encode(dump), Decode(load) json Data &amp;amp; File (Example) &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is JSON?&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;JSON &lt;/strong&gt;is a standard format for data exchange, which is inspired by JavaScript. Generally,
                JSON is in string or text format. &lt;strong&gt;JSON &lt;/strong&gt;stands for&lt;strong&gt;
                    J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation. &lt;/p&gt;
            &lt;p&gt;The syntax of JSON: JSON is written as key and value pair. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         {
                 &quot;Key&quot;:  &quot;Value&quot;,
                 &quot;Key&quot;:  &quot;Value&quot;,
         } 
         &lt;/pre&gt;
            &lt;p&gt;JSON is very similar to&lt;strong&gt; &lt;/strong&gt;Python dictionary. Python supports JSON, and it has an inbuilt
                library as a JSON. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;JSON Library in Python &lt;/h2&gt;
            &lt;p&gt;'&lt;strong&gt;marshal&lt;/strong&gt;' and '&lt;strong&gt;pickle' &lt;/strong&gt;external modules of Python maintain a version of
                &lt;strong&gt;JSON&lt;/strong&gt; library. To perform JSON related operations like encoding and decoding in Python
                you need first to &lt;strong&gt;import &lt;/strong&gt;JSON library and for that in your &lt;strong&gt;.py&lt;/strong&gt; file,
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import json
         &lt;/pre&gt;
            &lt;p&gt;Following methods are available in the JSON module &lt;/p&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;th width=&quot;50%&quot;&gt;Method &lt;/th&gt;
                        &lt;th&gt;Description &lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;dumps() &lt;/td&gt;
                        &lt;td&gt;encoding to JSON objects &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;dump() &lt;/td&gt;
                        &lt;td&gt;encoded string writing on file &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;loads() &lt;/td&gt;
                        &lt;td&gt;Decode the JSON string &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;load() &lt;/td&gt;
                        &lt;td&gt;Decode while JSON file read &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;div class=&quot;toc_container&quot;&gt;
                &lt;center&gt;&lt;span&gt;&lt;strong&gt;&lt;p&gt;What You Will Learn:&lt;/p&gt;&lt;/strong&gt; &lt;span class=&quot;toc_toggle&quot;&gt;[&lt;a id=&quot;toggler&quot;
                                onclick=&quot;showme('widget', this.id);&quot; style=&quot;cursor: pointer;&quot;&gt;hide&lt;/a&gt;]&lt;/span&gt;&lt;/span&gt;
                &lt;/center&gt;
                &lt;div id=&quot;widget&quot; style=&quot;display:block;&quot;&gt;
                    &lt;ul&gt;
                        &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is JSON? &lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;JSON Library in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Python to JSON (Encoding) &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;JSON to Python (Decoding) &lt;/a&gt; &lt;/li&gt;
                        &lt;ul&gt;
                            &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Decoding JSON File or Parsing JSON file in Python &lt;/a&gt; &lt;/li&gt;
                            &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Compact Encoding in Python &lt;/a&gt; &lt;/li&gt;
                            &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Format JSON code (Pretty print) &lt;/a&gt; &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Complex Object encoding of Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Complex JSON object decoding in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;Overview of JSON Serialization class JSONEncoder &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#11&quot;&gt;Overview of JSON Deserialization class JSONDecoder &lt;/a&gt; &lt;/li&gt;
                        &lt;ul&gt;
                            &lt;li&gt;&lt;a href=&quot;#12&quot;&gt;Decoding JSON data from URL: Real Life Example. &lt;/a&gt; &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;li&gt;&lt;a href=&quot;#13&quot;&gt;Exceptions Related to JSON Library in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#14&quot;&gt;Infinite and NaN Numbers in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#15&quot;&gt;Repeated key in JSON String &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#16&quot;&gt;CLI (Command Line Interface) with JSON in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#17&quot;&gt;Advantages of JSON in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#18&quot;&gt;Implementation limitation of JSON in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#19&quot;&gt;Cheat Code &lt;/a&gt; &lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Python to JSON (Encoding)&lt;/h2&gt;
            &lt;p&gt; JSON Library of Python performs following translation of Python objects into JSON objects by default
            &lt;/p&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td width=&quot;50%&quot;&gt;&lt;strong&gt;Python&lt;/strong&gt; &lt;/td&gt;
                        &lt;td&gt;&lt;strong&gt;JSON&lt;/strong&gt; &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;dict &lt;/td&gt;
                        &lt;td&gt;Object &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;list &lt;/td&gt;
                        &lt;td&gt;Array &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;unicode &lt;/td&gt;
                        &lt;td&gt;String &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;number - int, long &lt;/td&gt;
                        &lt;td&gt;number – int &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;float &lt;/td&gt;
                        &lt;td&gt;number – real &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;True &lt;/td&gt;
                        &lt;td&gt;True &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;False &lt;/td&gt;
                        &lt;td&gt;False &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;None &lt;/td&gt;
                        &lt;td&gt;Null &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p&gt;Converting Python data to JSON is called an Encoding operation. Encoding is done with the help of JSON
                library method – &lt;strong&gt;dumps()&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;dumps() &lt;/strong&gt;method converts dictionary object of python into JSON string data format. &lt;/p&gt;
            &lt;p&gt;Now lets we perform our first encoding example with Python. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         
         x = {
           &quot;name&quot;: &quot;Ken&quot;,
           &quot;age&quot;: 45,
           &quot;married&quot;: True,
           &quot;children&quot;: (&quot;Alice&quot;,&quot;Bob&quot;),
           &quot;pets&quot;: ['Dog'],
           &quot;cars&quot;: [
             {&quot;model&quot;: &quot;Audi A1&quot;, &quot;mpg&quot;: 15.1},
             {&quot;model&quot;: &quot;Zeep Compass&quot;, &quot;mpg&quot;: 18.1}
           ]
         }
         # sorting result in asscending order by keys:
         sorted_string = json.dumps(x, indent=4, sort_keys=True)
         print(sorted_string)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{&quot;person&quot;: {&quot;name&quot;: &quot;Kenn&quot;, &quot;sex&quot;: &quot;male&quot;, &quot;age&quot;: 28}})
         &lt;/pre&gt;
            &lt;p&gt;Let's create a JSON file of the dictionary using the same function &lt;strong&gt;dump() &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         # here we create new data_file.json file with write mode using file i/o operation 
         with open('json_file.json', &quot;w&quot;) as file_write:
         # write json data into file
         json.dump(person_data, file_write)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p&gt; Nothing to show…In your system json_file.json is created you can check that file. &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE1.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;JSON to Python (Decoding)&lt;/h2&gt;
            &lt;p&gt;JSON string decoding is done with the help of inbuilt method &lt;strong&gt;loads()&lt;/strong&gt; &amp;amp;
                &lt;strong&gt;load() &lt;/strong&gt;of JSON library in Python. Here translation table show example of JSON objects
                to Python objects which are helpful to perform decoding in Python of JSON string. &lt;/p&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td width=&quot;50%&quot;&gt;&lt;strong&gt;JSON&lt;/strong&gt; &lt;/td&gt;
                        &lt;td&gt;&lt;strong&gt;Python&lt;/strong&gt; &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Object &lt;/td&gt;
                        &lt;td&gt;dict &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Array &lt;/td&gt;
                        &lt;td&gt;list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;String &lt;/td&gt;
                        &lt;td&gt;unicode &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;number – int &lt;/td&gt;
                        &lt;td&gt;number - int, long &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;number – real &lt;/td&gt;
                        &lt;td&gt;float &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;True &lt;/td&gt;
                        &lt;td&gt;True &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;False &lt;/td&gt;
                        &lt;td&gt;False &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Null &lt;/td&gt;
                        &lt;td&gt;None &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p&gt;Let's see a basic example of decoding in Python with the help of &lt;strong&gt;json.loads()&lt;/strong&gt; function,
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import json  # json library imported
         # json data string
         person_data = '{  &quot;person&quot;:  { &quot;name&quot;:  &quot;Kenn&quot;,  &quot;sex&quot;:  &quot;male&quot;,  &quot;age&quot;:  28}}'
         # Decoding or converting JSON format in dictionary using loads()
         dict_obj = json.loads(person_data)
         print(dict_obj)
         # check type of dict_obj
         print(&quot;Type of dict_obj&quot;, type(dict_obj))
         # get human object details
         print(&quot;Person......&quot;,  dict_obj.get('person'))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         {'person': {'name': 'Kenn', 'sex': 'male', 'age': 28}}
         Type of dict_obj &amp;lt;class 'dict'&amp;gt;
         Person...... {'name': 'John', 'sex': 'male'}
         &lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE2.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;h3&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Decoding JSON File or Parsing JSON file in Python&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;NOTE: &lt;/strong&gt;Decoding JSON file is File Input /Output (I/O) related operation. The JSON file
                must exist on your system at specified the location that you mention in your program.&lt;strong&gt; &lt;/strong&gt;
            &lt;/p&gt;
            &lt;p&gt;Example,&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;import json
         #File I/O Open function for read data from JSON File
         with open('X:/json_file.json') as file_object:
                 # store file data in object
                 data = json.load(file_object)
         print(data)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here data&lt;/strong&gt; is a dictionary object of Python. &lt;/p&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{'person': {'name': 'Kenn', 'sex': 'male', 'age': 28}}&lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE3.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h3&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Compact Encoding in Python&lt;/h3&gt;
            &lt;p&gt;When you need to reduce the size of your JSON file, you can use compact encoding in Python. &lt;/p&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         # Create a List that contains dictionary
         lst = ['a', 'b', 'c',{'4': 5, '6': 7}]
         # separator used for compact representation of JSON.
         # Use of ',' to identify list items
         # Use of ':' to identify key and value in dictionary
         compact_obj = json.dumps(lst, separators=(',', ':'))
         print(compact_obj)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre
                class=&quot;code-toolbar&quot;&gt;'[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, {&quot;4&quot;: 5, &quot;6&quot;: 7}]'
         
         ** Here output of JSON is represented in a single line which is the most compact representation by removing the space character from compact_obj **  &lt;/pre&gt;
            &lt;h3&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Format JSON code (Pretty print)&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;The aim is to write well-formatted code for human understanding. With the help of pretty printing,
                    anyone can easily understand the code.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Example,&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         dic = { 'a': 4, 'b': 5 }
         ''' To format the code use of indent and 4 shows number of space and use of separator is not necessary but standard way to write code of particular function. '''
         formatted_obj = json.dumps(dic, indent=4, separators=(',', ': '))
         print(formatted_obj)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{
            &quot;a&quot; : 4,
            &quot;b&quot; : 5
         }
         &lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE4.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;To better understand this, change indent to 40 and observe the output- &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE5.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Ordering the JSON code:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;sort_keys&lt;/strong&gt; attribute in dumps() function's argument will sort the key in JSON in
                ascending order. The sort_keys argument is a Boolean attribute. When it's true sorting is allowed
                otherwise not &lt;/p&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         
         x = {
           &quot;name&quot;: &quot;Ken&quot;,
           &quot;age&quot;: 45,
           &quot;married&quot;: True,
           &quot;children&quot;: (&quot;Alice&quot;, &quot;Bob&quot;),
           &quot;pets&quot;: [ 'Dog' ],
           &quot;cars&quot;: [
             {&quot;model&quot;: &quot;Audi A1&quot;, &quot;mpg&quot;: 15.1},
             {&quot;model&quot;: &quot;Zeep Compass&quot;, &quot;mpg&quot;: 18.1}
               ],
         }
         # sorting result in asscending order by keys:
         sorted_string = json.dumps(x, indent=4, sort_keys=True)
         print(sorted_string)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         {
             &quot;age&quot;: 45,
             &quot;cars&quot;: [ {
                 &quot;model&quot;: &quot;Audi A1&quot;, 
                 &quot;mpg&quot;: 15.1
             },
             {
                 &quot;model&quot;: &quot;Zeep Compass&quot;, 
                 &quot;mpg&quot;: 18.1
             }
             ],
             &quot;children&quot;: [ &quot;Alice&quot;,
                   &quot;Bob&quot;
             ],
             &quot;married&quot;: true,
             &quot;name&quot;: &quot;Ken&quot;,
             &quot;pets&quot;: [ 
                 &quot;Dog&quot;
             ]
         }
         &lt;/pre&gt;
            &lt;p&gt;As you may observe the keys age, cars, children, etc are arranged in ascending order. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Complex Object encoding of Python&lt;/h2&gt;
            &lt;p&gt;A Complex object has two different parts that is &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Real part &lt;/li&gt;
                &lt;li&gt;Imaginary part&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE6.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example: 3 +2i&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Before performing encoding of a complex object, you need to check a variable is complex or not. You need
                to create a function which checks the value stored in a variable by using an instance method.&lt;/p&gt;

            &lt;p&gt;Let's create the specific function for check object is complex or eligible for encoding.&lt;strong&gt;
                &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         
         # create function to check instance is complex or not
         def complex_encode(object):
             # check using isinstance method
             if isinstance(object, complex):
                 return [object.real, object.imag]
             # raised error using exception handling if object is not complex
             raise TypeError(repr(object) + &quot; is not JSON serialized&quot;)
         
         
         # perform json encoding by passing parameter
         complex_obj = json.dumps(4 + 5j, default=complex_encode)
         print(complex_obj)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;'[4.0, 5.0]'&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Complex JSON object decoding in Python&lt;/h2&gt;
            &lt;p&gt;To decode complex object in JSON, use an object_hook parameter which checks JSON string contains the
                complex object or not. Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
           # function check JSON string contains complex object
           def is_complex(objct):
             if '__complex__' in objct:
               return complex(objct['real'], objct['img'])
             return objct
           
           # use of json loads method with object_hook for check object complex or not
           complex_object =json.loads('{&quot;__complex__&quot;: true, &quot;real&quot;: 4, &quot;img&quot;: 5}', object_hook = is_complex)
           #here we not passed complex object so it's convert into dictionary
           simple_object =json.loads('{&quot;real&quot;: 6, &quot;img&quot;: 7}', object_hook = is_complex)
           print(&quot;Complex_object......&quot;,complex_object)
           print(&quot;Without_complex_object......&quot;,simple_object)
         &lt;/pre&gt;
            &lt;p&gt; Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Complex_object...... (4+5j)
         Without_complex_object...... {'real': 6, 'img': 7}
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;10&quot;&gt;&lt;/a&gt;Overview of JSON Serialization class JSONEncoder&lt;/h2&gt;
            &lt;p&gt;JSONEncoder class is used for serialization of any Python object while performing encoding. It contains
                three different methods of encoding which are &lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;default(o)&lt;/strong&gt; – Implemented in the subclass and return serialize object for
                    &lt;strong&gt;o&lt;/strong&gt; object.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;encode(o)&lt;/strong&gt; – Same as json.dumps() method return JSON string of Python data
                    structure.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;iterencode(o) &lt;/strong&gt;– Represent string one by one and encode object o. &lt;strong&gt; &lt;/strong&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;With the help of encode() method of JSONEncoder class, we can also encode any Python object.&lt;strong&gt;
                &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;# import JSONEncoder class from json
         from json.encoder import JSONEncoder
         colour_dict = { &quot;colour&quot;: [&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot; ]}
         # directly called encode method of JSON
         JSONEncoder().encode(colour_dict)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;'{&quot;colour&quot;: [&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;]}'&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;11&quot;&gt;&lt;/a&gt;Overview of JSON Deserialization class JSONDecoder &lt;/h2&gt;
            &lt;p&gt;JSONDecoder class is used for deserialization of any Python object while performing decoding. It contains
                three different methods of decoding which are &lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;default(o)&lt;/strong&gt; – Implemented in the subclass and return deserialized object
                    &lt;strong&gt;o&lt;/strong&gt; object.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;decode(o)&lt;/strong&gt; – Same as json.loads() method return Python data structure of JSON string
                    or data.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;raw_decode(o) &lt;/strong&gt;– Represent Python dictionary one by one and decode object o.
                    &lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;With the help of decode() method of JSONDecoder class, we can also decode JSON string.&lt;strong&gt; &lt;/strong&gt;
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         # import JSONDecoder class from json
         from json.decoder import JSONDecoder
         colour_string = '{ &quot;colour&quot;: [&quot;red&quot;, &quot;yellow&quot;]}'
         # directly called decode method of JSON
         JSONDecoder().decode(colour_string)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt; Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{'colour': ['red', 'yellow']}&lt;/pre&gt;
            &lt;h3&gt;&lt;a id=&quot;12&quot;&gt;&lt;/a&gt;Decoding JSON data from URL: Real Life Example&lt;/h3&gt;
            &lt;p&gt;We will fetch data of CityBike NYC (Bike Sharing System) from specified URL(&lt;a
                    href=&quot;https://feeds.citibikenyc.com/stations/stations.json&quot;&gt;https://feeds.citibikenyc.com/stations/stations.json&lt;/a&gt;)
                and convert into dictionary format. &lt;/p&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;p&gt;NOTE:- Make sure requests library is already installed in your Python, If not then open Terminal or CMD
                and type &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt; (For Python 3 or above) &lt;strong&gt;pip3 install requests&lt;/strong&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         import requests
         
         # get JSON string data from CityBike NYC using web requests library
         json_response= requests.get(&quot;https://feeds.citibikenyc.com/stations/stations.json&quot;)
         # check type of json_response object
         print(type(json_response.text))
         # load data in loads() function of json library
         bike_dict = json.loads(json_response.text)
         #check type of news_dict
         print(type(bike_dict))
         # now get stationBeanList key data from dict
         print(bike_dict['stationBeanList'][0]) 
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         &amp;lt;class 'str'&amp;gt;
         &amp;lt;class 'dict'&amp;gt;
         {
             'id': 487,
              'stationName': 'E 20 St &amp;amp; FDR Drive',
             'availableDocks': 24,
             'totalDocks': 34,
             'latitude': 40.73314259,
             'longitude': -73.97573881,
             'statusValue': 'In Service',
             'statusKey': 1,
             'availableBikes': 9,
             'stAddress1': 'E 20 St &amp;amp; FDR Drive',
             'stAddress2': '',
             'city': '',
             'postalCode': '',
             'location': '', 
             'altitude': '', 
             'testStation': False, 
             'lastCommunicationTime': '2018-12-11 10:59:09 PM', 'landMark': ''
         }
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;13&quot;&gt;&lt;/a&gt;Exceptions Related to JSON Library in Python:&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Class &lt;strong&gt;json.JSONDecoderError&lt;/strong&gt; handles the exception related to decoding operation.
                    and it's a subclass of &lt;strong&gt;ValueError.&lt;/strong&gt; &lt;/li&gt;
                &lt;li&gt;Exception - &lt;strong&gt;json.JSONDecoderError(msg, doc)&lt;/strong&gt; &lt;/li&gt;
                &lt;li&gt;
                    Parameters of Exception are,
                    &lt;ul&gt;
                        &lt;li&gt;msg – Unformatted Error message&lt;/li&gt;
                        &lt;li&gt;doc – JSON docs parsed&lt;/li&gt;
                        &lt;li&gt;pos – start index of doc when it's failed&lt;/li&gt;
                        &lt;li&gt;lineno – line no shows correspond to pos&lt;/li&gt;
                        &lt;li&gt;colon – column no correspond to pos&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         #File I/O Open function for read data from JSON File
         data = {} #Define Empty Dictionary Object
         try:
                 with open('json_file_name.json') as file_object:
                         data = json.load(file_object)
         except ValueError:
              print(&quot;Bad JSON file format,  Change JSON File&quot;)
         &lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE7.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE7.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;14&quot;&gt;&lt;/a&gt;Infinite and NaN Numbers in Python&lt;/h2&gt;
            &lt;p&gt;JSON Data Interchange Format (RFC – Request For Comments) doesn't allow Infinite or Nan Value but there
                is no restriction in Python- JSON Library to perform Infinite and Nan Value related operation. If JSON
                gets INFINITE and Nan datatype than it's converted it into literal. &lt;/p&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         # pass float Infinite value
         infinite_json = json.dumps(float('inf'))
         # check infinite json type
         print(infinite_json)
         print(type(infinite_json))
         json_nan = json.dumps(float('nan'))
         print(json_nan)
         # pass json_string as Infinity
         infinite = json.loads('Infinity')
         print(infinite)
         # check type of Infinity
         print(type(infinite))
         &lt;/pre&gt;
            &lt;p&gt;Output:&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Infinity
         &amp;lt;class 'str'&amp;gt;
         NaN
         inf
         &amp;lt;class 'float'&amp;gt;	
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;15&quot;&gt;&lt;/a&gt;Repeated key in JSON String &lt;/h2&gt;
            &lt;p&gt;RFC specifies the key name should be unique in a JSON object, but it's not mandatory. Python JSON library
                does not raise an exception of repeated objects in JSON. It ignores all repeated key-value pair and
                considers only last key-value pair among them. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Example,&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         repeat_pair = '{&quot;a&quot;:  1, &quot;a&quot;:  2, &quot;a&quot;:  3}'
         json.loads(repeat_pair)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{'a': 3}&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;16&quot;&gt;&lt;/a&gt;CLI (Command Line Interface) with JSON in Python&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;json.tool &lt;/strong&gt;provides the command line interface to validate JSON pretty-print syntax.
                Let's see an example of CLI&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE8.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE8.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;$ echo '{&quot;name&quot; : &quot;Kings Authur&quot; }' | python3 -m json.tool&lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
        {
             &quot;name&quot;: &quot; Kings Authur &quot;
         }
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;17&quot;&gt;&lt;/a&gt;Advantages of JSON in Python&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Easy to move back between container and value (JSON to Python and Python to JSON)&lt;/li&gt;
                &lt;li&gt;Human readable (Pretty-print) JSON Object&lt;/li&gt;
                &lt;li&gt;Widely used in data handling.&lt;/li&gt;
                &lt;li&gt;Doesn't have the same data structure in the single file.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;18&quot;&gt;&lt;/a&gt;Implementation limitation of JSON in Python&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;In deserializer of JSON range and prediction of a number&lt;/li&gt;
                &lt;li&gt;The Maximum length of JSON string and arrays of JSON and nesting levels of object.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;19&quot;&gt;&lt;/a&gt;Cheat Code&lt;/h2&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;json.dumps(person_data) &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Create JSON Object &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;json.dump(person_data, file_write) &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Create JSON File using File I/O of Python &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;compact_obj = json.dumps(data, separators=(',',':'))&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Compact JSON Object by removing space character from JSON Object using separator &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;formatted_obj = json.dumps(dic, indent=4, separators=(',', ': '))&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Formatting JSON code using Indent &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;sorted_string = json.dumps(x, indent=4, sort_keys=True)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Sorting JSON object key by alphabetic order &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;complex_obj = json.dumps(4 + 5j, default=complex_encode)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Python Complex Object encoding in JSON &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;JSONEncoder().encode(colour_dict)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Use of JSONEncoder Class for Serialization &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;json.loads(data_string)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Decoding JSON String in Python dictionary using json.loads() function &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt; json.loads('{&quot;__complex__&quot;: true, &quot;real&quot;: 4, &quot;img&quot;: 5}', object_hook =
                                is_complex)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Decoding of complex JSON object to Python &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;JSONDecoder().decode(colour_string)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Use of Decoding JSON to Python with Deserialization &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p id=&quot;slidetag&quot;&gt;&amp;nbsp;&lt;/p&gt;
        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonReadWriteCSV&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMySQL&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python JSON: Encode(dump), Decode(load) json Data &amp;amp; File (Example)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">1.Python SciPy</title><link href="http://localhost:4000/blog/PythonSciPy" rel="alternate" type="text/html" title="1.Python SciPy" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonSciPy</id><content type="html" xml:base="http://localhost:4000/blog/PythonSciPy">&lt;section class=&quot;Ptutorial29&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python SciPy Tutorial: Learn with Example &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is SciPy?&lt;/h2&gt;
            &lt;p&gt;SciPy is an Open Source Python-based library, which is used in mathematics, scientific computing,
                Engineering, and technical computing. &lt;/p&gt;
            &lt;p&gt;SciPy also pronounced as &quot;Sigh Pi.&quot; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Sub-packages of SciPy:&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;File input/output - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/io.html&quot;&gt;&lt;strong&gt;scipy.io&lt;/strong&gt;&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;Special Function - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/special.html&quot;&gt;&lt;strong&gt;scipy.special&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Linear Algebra Operation - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/linalg.html&quot;&gt;&lt;strong&gt;scipy.linalg&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Interpolation - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/interpolate.html&quot;&gt;&lt;strong&gt;scipy.interpolate&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Optimization and fit - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/optimize.html&quot;&gt;&lt;strong&gt;scipy.optimize&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Statistics and random numbers - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/stats.html&quot;&gt;&lt;strong&gt;scipy.stats&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Numerical Integration - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/integrate.html&quot;&gt;&lt;strong&gt;scipy.integrate&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Fast Fourier transforms - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/fftpack.html&quot;&gt;&lt;strong&gt;scipy.fftpack&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Signal Processing - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/signal.html&quot;&gt;&lt;strong&gt;scipy.signal&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Image manipulation – &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/ndimage.html&quot;&gt;&lt;strong&gt;scipy.ndimage&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In this tutorial, you will learn: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is SciPy? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Why use SciPy &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Numpy VS SciPy &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;SciPy - Installation and Environment Setup &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;File Input / Output package: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Special Function package: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Linear Algebra with SciPy: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Discrete Fourier Transform – scipy.fftpack &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Optimization and Fit in SciPy – scipy.optimize &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;Nelder –Mead Algorithm: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#11&quot;&gt;Image Processing with SciPy – scipy.ndimage &lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Why use SciPy&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;SciPy contains varieties of sub packages which help to solve the most common issue related to
                    Scientific Computation.&lt;/li&gt;
                &lt;li&gt;SciPy is the most used Scientific library only second to GNU Scientific Library for C/C++ or
                    Matlab's.&lt;/li&gt;
                &lt;li&gt;Easy to use and understand as well as fast computational power.&lt;/li&gt;
                &lt;li&gt;It can operate on an array of NumPy library. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Numpy VS SciPy&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Numpy:&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Numpy is written in C and use for mathematical or numeric calculation.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;It is faster than other Python Libraries&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Numpy is the most useful library for Data Science to perform basic calculations.&lt;strong&gt; &lt;/strong&gt;
                &lt;/li&gt;
                &lt;li&gt;Numpy contains nothing but array data type which performs the most basic operation like sorting,
                    shaping, indexing, etc.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;SciPy:&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;SciPy is built in top of the NumPy &lt;/li&gt;
                &lt;li&gt;SciPy is a fully-featured version of Linear Algebra while Numpy contains only a few features. &lt;/li&gt;
                &lt;li&gt;Most new Data Science features are available in Scipy rather than Numpy.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;SciPy - Installation and Environment Setup&lt;/h2&gt;
            &lt;p&gt;You can also install SciPy in Windows via pip &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;Python3 -m pip install --user numpy scipy 
         &lt;/pre&gt;
            &lt;p&gt;Install Scipy on Linux &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;sudo apt-get install  python-scipy python-numpy
         &lt;/pre&gt;
            &lt;p&gt;Install SciPy in Mac &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;sudo port install py35-scipy py35-numpy
         &lt;/pre&gt;
            &lt;p&gt;Before start to learning SciPy, you need to know basic functionality as well as different types of an
                array of &lt;a href=&quot;https://www.guru99.com/numpy-tutorial.html&quot;&gt;NumPy&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;The standard way of import infSciPy modules and Numpy: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import special   #same for other modules
         import numpy as np
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;File Input / Output package:&lt;/h2&gt;
            &lt;p&gt;Scipy, I/O package, has a wide range of functions for work with different files format which are Matlab,
                Arff, Wave, Matrix Market, IDL, NetCDF, TXT, CSV and binary format. &lt;/p&gt;
            &lt;p&gt;Let's we take one file format example as which are regularly use of MatLab: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
          import numpy as np
          from scipy import io as sio
          array = np.ones((4, 4))
          sio.savemat('example.mat', {'ar': array}) 
          data = sio.loadmat(‘example.mat', struct_as_record=True)
          data['array']
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;array([[ 1., 1., 1., 1.],
                    [ 1., 1., 1., 1.],
                    [ 1., 1., 1., 1.],
                    [ 1., 1., 1., 1.]])
         &lt;/pre&gt;
            &lt;p&gt;Code Explanation &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;Line 1 &amp;amp; 2: &lt;/strong&gt; Import the essential library scipy with i/o package and Numpy.
                &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: Create 4 x 4, dimensional one's array &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Line 4&lt;/strong&gt;: Store array in &lt;strong&gt;example.mat&lt;/strong&gt; file. &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Line 5: &lt;/strong&gt;Get data from &lt;strong&gt;example.mat&lt;/strong&gt; file &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Line 6&lt;/strong&gt;: Print output. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Special Function package&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;scipy.special&lt;/strong&gt; package contains numerous functions of mathematical physics.&lt;/li&gt;
                &lt;li&gt; SciPy special function includes Cubic Root, Exponential, Log sum Exponential, Lambert, Permutation
                    and Combinations, Gamma, Bessel, hypergeometric, Kelvin, beta, parabolic cylinder, Relative Error
                    Exponential, etc.. &lt;/li&gt;
                &lt;li&gt;For one line description all of these function, type in Python console: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         help(scipy.special)	
         Output : 
         NAME
             scipy.special
         
         DESCRIPTION
             ========================================
             Special functions (:mod:`scipy.special`)
             ========================================
              
             .. module:: scipy.special
              
             Nearly all of the functions below are universal functions and follow
             broadcasting and automatic array-looping rules. Exceptions are noted.
         &lt;/pre&gt;
            &lt;h3&gt;Cubic Root Function:&lt;/h3&gt;
            &lt;p&gt;Cubic Root function finds the cube root of values. &lt;/p&gt;
            &lt;p&gt;Syntax: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.special.cbrt(x)
         &lt;/pre&gt;
            &lt;p&gt;Example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy.special import cbrt
         #Find cubic root of 27 &amp;amp; 64 using cbrt() function
         cb = cbrt([27, 64])
         #print value of cb
         print(cb)
         &lt;/pre&gt;
            &lt;p&gt;Output: array([3., 4.]) &lt;/p&gt;
            &lt;h3&gt;Exponential Function:&lt;/h3&gt;
            &lt;p&gt;Exponential function computes the 10**x element-wise.&lt;/p&gt;

            &lt;p&gt;Example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy.special import exp10
         #define exp10 function and pass value in its
         exp = exp10([1,10])
         print(exp)
         &lt;/pre&gt;
            &lt;p&gt;Output: [1.e+01 1.e+10] &lt;/p&gt;
            &lt;h3&gt;Permutations &amp;amp; Combinations:&lt;/h3&gt;
            &lt;p&gt;SciPy also gives functionality to calculate Permutations and Combinations. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Combinations - &lt;/strong&gt; scipy.special.comb(N,k&lt;strong&gt;)&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy.special import comb
         #find combinations of 5, 2 values using comb(N, k)
         com = comb(5, 2, exact = False, repetition=True)
         print(com)
         &lt;/pre&gt;
            &lt;p&gt;Output: 15.0 &lt;/p&gt;
            &lt;p&gt; &lt;strong&gt;Permutations – &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.special.perm(N,k)
         &lt;/pre&gt;
            &lt;p&gt;Example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy.special import perm
         #find permutation of 5, 2 using perm (N, k) function
         per = perm(5, 2, exact = True)
         print(per)
         &lt;/pre&gt;
            &lt;p&gt;Output: 20 &lt;/p&gt;
            &lt;h3&gt;Log Sum Exponential Function &lt;/h3&gt;
            &lt;p&gt;Log Sum Exponential computes the log of sum exponential input element. &lt;/p&gt;
            &lt;p&gt;Syntax : &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.special.logsumexp(x) 
         &lt;/pre&gt;
            &lt;h3&gt; Bessel Function &lt;/h3&gt;
            &lt;p&gt;Nth integer order calculation function &lt;/p&gt;
            &lt;p&gt;Syntax : &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.special.jn()
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Linear Algebra with SciPy&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Linear Algebra of SciPy is an implementation of BLAS and ATLAS LAPACK libraries. &lt;/li&gt;
                &lt;li&gt;Performance of Linear Algebra is very fast compared to BLAS and LAPACK.&lt;/li&gt;
                &lt;li&gt;Linear algebra routine accepts two-dimensional array object and output is also a two-dimensional
                    array.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Now let's do some test with &lt;strong&gt;scipy.linalg,&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Calculating &lt;strong&gt;determinant&lt;/strong&gt; of a two-dimensional matrix, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import linalg
         import numpy as np
         #define square matrix
         two_d_array = np.array([ [4,5], [3,2] ])
         #pass values to det() function
         linalg.det( two_d_array )
         &lt;/pre&gt;
            &lt;p&gt;Output: -7.0 &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Inverse Matrix – &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.linalg.inv()&lt;/pre&gt;
            &lt;p&gt;Inverse Matrix of Scipy calculates the inverse of any square matrix. &lt;/p&gt;
            &lt;p&gt; Let's see,&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import linalg
         import numpy as np
         # define square matrix
         two_d_array = np.array([ [4,5], [3,2] ])
         #pass value to function inv()
         linalg.inv( two_d_array )
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                array( [[-0.28571429,  0.71428571],
                [ 0.42857143, -0.57142857]] )
         &lt;/pre&gt;
            &lt;p&gt; &lt;strong&gt;Eigenvalues and Eigenvector – &lt;/strong&gt;scipy.linalg.eig() &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;The most common problem in linear algebra is eigenvalues and eigenvector which can be easily solved
                    using &lt;strong&gt;eig()&lt;/strong&gt; &lt;strong&gt; &lt;/strong&gt;function.&lt;/li&gt;
                &lt;li&gt;Now lets we find the Eigenvalue of (&lt;strong&gt;X&lt;/strong&gt;) and correspond eigenvector of a
                    two-dimensional square matrix.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import linalg
         import numpy as np
         #define two dimensional array
         arr = np.array([[5,4],[6,3]])
         #pass value into function
         eg_val, eg_vect = linalg.eig(arr)
         #get eigenvalues
         print(eg_val)
         #get eigenvectors
         print(eg_vect)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         [ 9.+0.j -1.+0.j] #eigenvalues
          [ [ 0.70710678 -0.5547002 ] #eigenvectors
            [ 0.70710678  0.83205029] ]
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Discrete Fourier Transform – scipy.fftpack&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;DFT is a mathematical technique which is used in converting spatial data into frequency data.&lt;/li&gt;
                &lt;li&gt;FFT (Fast Fourier Transformation) is an algorithm for computing DFT &lt;/li&gt;
                &lt;li&gt;FFT is applied to a multidimensional array.&lt;/li&gt;
                &lt;li&gt;Frequency defines the number of signal or wavelength in particular time period.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example: Take a wave and show using Matplotlib library. we take simple periodic function example of
                sin(20 × 2πt) &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         %matplotlib inline
         from matplotlib import pyplot as plt
         import numpy as np 
         
         #Frequency in terms of Hertz
         fre  = 5 
         #Sample rate
         fre_samp = 50
         t = np.linspace(0, 2, 2 * fre_samp, endpoint = False )
         a = np.sin(fre  * 2 * np.pi * t)
         figure, axis = plt.subplots()
         axis.plot(t, a)
         axis.set_xlabel ('Time (s)')
         axis.set_ylabel ('Signal amplitude')
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt;Output : &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy1.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;You can see this. Frequency is 5 Hz and its signal repeats in 1/5 seconds – it's call as a particular
                time period. &lt;/p&gt;
            &lt;p&gt;Now let us use this sinusoid wave with the help of DFT application. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import fftpack
         
         A = fftpack.fft(a)
         frequency = fftpack.fftfreq(len(a)) * fre_samp
         figure, axis = plt.subplots()
         
         axis.stem(frequency, np.abs(A))
         axis.set_xlabel('Frequency in Hz')
         axis.set_ylabel('Frequency Spectrum Magnitude')
         axis.set_xlim(-fre_samp / 2, fre_samp/ 2)
         axis.set_ylim(-5, 110)
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy2.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;You can clearly see that output is a one-dimensional array.&lt;/li&gt;
                &lt;li&gt;Input containing complex values are zero except two points.&lt;/li&gt;
                &lt;li&gt;In DFT example we visualize the magnitude of the signal.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Optimization and Fit in SciPy – scipy.optimize&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Optimization provides a useful algorithm for minimization of curve fitting, multidimensional or
                    scalar and root fitting. &lt;/li&gt;
                &lt;li&gt;Let's take an example of &lt;strong&gt;a Scalar Function, &lt;/strong&gt;to find minimum scalar
                    function&lt;strong&gt;.&lt;/strong&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         %matplotlib inline
         import matplotlib.pyplot as plt
         from scipy import optimize
         import numpy as np
         
         def function(a):
                return   a*2 + 20 * np.sin(a)
         plt.plot(a, function(a))
         plt.show()
         #use BFGS algorithm for optimization
         optimize.fmin_bfgs(function, 0) 
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy3.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Optimization terminated successfully. &lt;/p&gt;
            &lt;p&gt; Current function value: -23.241676 &lt;/p&gt;
            &lt;p&gt; Iterations: 4 &lt;/p&gt;
            &lt;p&gt; Function evaluations: 18 &lt;/p&gt;
            &lt;p&gt; Gradient evaluations: 6 &lt;/p&gt;
            &lt;p&gt;array([-1.67096375])&lt;/p&gt;

            &lt;ul&gt;
                &lt;li&gt;In this example, optimization is done with the help of the gradient descent algorithm from the
                    initial point &lt;/li&gt;
                &lt;li&gt;But the possible issue is local minima instead of global minima. If we don't find a neighbor of
                    global minima, then we need to apply global optimization and find global minima function used as
                    &lt;strong&gt;basinhopping()&lt;/strong&gt; which combines local optimizer. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;optimize.basinhopping(function, 0)&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
          fun: -23.241676238045315
          lowest_optimization_result:
               fun: -23.241676238045315
          hess_inv: array([[0.05023331]])
               jac: array([4.76837158e-07])
           message: 'Optimization terminated successfully.'
              nfev: 15
               nit: 3
              njev: 5
            status: 0
           success: True
                 x: array([-1.67096375])
                             message: ['requested number of basinhopping iterations completed successfully']
               minimization_failures: 0
                                nfev: 1530
                                 nit: 100
                                njev: 510
                        x: array([-1.67096375])
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;10&quot;&gt;&lt;/a&gt;Nelder –Mead Algorithm:&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Nelder-Mead algorithm selects through method parameter.&lt;/li&gt;
                &lt;li&gt;It provides the most straightforward way of minimization for fair behaved function. &lt;/li&gt;
                &lt;li&gt;Nelder – Mead algorithm is not used for gradient evaluations because it may take a longer time to
                    find the solution. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import numpy as np
         from scipy.optimize import minimize
         #define function f(x)
         def f(x):   
             return .4*(1 - x[0])**2
           
         optimize.minimize(f, [2, -1], method=&quot;Nelder-Mead&quot;)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                final_simplex: (array([[ 1.        , -1.27109375],
                [ 1.        , -1.27118835],
                [ 1.        , -1.27113762]]), array([0., 0., 0.]))
                    fun: 0.0
                message: 'Optimization terminated successfully.'
                   nfev: 147
                    nit: 69
                 status: 0
                success: True
                      x: array([ 1.        , -1.27109375])
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;11&quot;&gt;&lt;/a&gt;Image Processing with SciPy – scipy.ndimage&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;scipy.ndimage is a submodule of SciPy which is mostly used for performing an image related operation
                &lt;/li&gt;
                &lt;li&gt;ndimage means the &quot;n&quot; dimensional image.&lt;/li&gt;
                &lt;li&gt;SciPy Image Processing provides Geometrics transformation (rotate, crop, flip), image filtering
                    (sharp and de nosing), display image, image segmentation, classification and features extraction.
                &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;MISC Package&lt;/strong&gt; in SciPy contains prebuilt images which can be used to perform image
                    manipulation task &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example: Let's take a geometric transformation example of images &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import misc
         from matplotlib import pyplot as plt
         import numpy as np
         #get face image of panda from misc package
         panda = misc.face()
         #plot or show image of face
         plt.imshow( panda )
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt; Output: &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy4.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Now we &lt;strong&gt;Flip-down&lt;/strong&gt; current image: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #Flip Down using scipy misc.face image  
         flip_down = np.flipud(misc.face())
         plt.imshow(flip_down)
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt;Output:&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy5.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Example&lt;strong&gt;: Rotation of Image using Scipy,&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import ndimage, misc
         from matplotlib import pyplot as plt
         panda = misc.face()
         #rotatation function of scipy for image – image rotated 135 degree
         panda_rotate = ndimage.rotate(panda, 135)
         plt.imshow(panda_rotate)
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy6.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h3&gt; Integration with Scipy – Numerical Integration&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;When we integrate any function where analytically integrate is not possible, we need to turn for
                    numerical integration &lt;/li&gt;
                &lt;li&gt;SciPy provides functionality to integrate function with numerical integration.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;scipy.integrate&lt;/strong&gt; library has single integration, double, triple, multiple, Gaussian
                    quadrate, Romberg, Trapezoidal and Simpson's rules.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example: Now take an example of &lt;strong&gt;Single Integration&lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy7.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy7.jpg&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Here &lt;strong&gt;a&lt;/strong&gt; is the upper limit and &lt;strong&gt;b&lt;/strong&gt; is the lower limit &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import integrate
         # take f(x) function as f
         f = lambda x : x**2
         #single integration with a = 0 &amp;amp; b = 1  
         integration = integrate.quad(f, 0 , 1)
         print(integration)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p&gt;(0.33333333333333337, 3.700743415417189e-15) &lt;/p&gt;
            &lt;p&gt;Here function returns two values, in which the first value is integration and second value is estimated
                error in integral. &lt;/p&gt;
            &lt;p&gt;Example: Now take an example of &lt;strong&gt;double integration. &lt;/strong&gt;We find the double integration of
                the following equation, &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy8.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy8.jpg&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import integrate
         import numpy as np
         #import square root function from math lib
         from math import sqrt
         # set  fuction f(x)
         f = lambda x, y : 64 *x*y
         # lower limit of second integral
         p = lambda x : 0
         # upper limit of first integral
         q = lambda y : sqrt(1 - 2*y**2)
         # perform double integration
         integration = integrate.dblquad(f , 0 , 2/4,  p, q)
         print(integration)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt; &lt;/strong&gt;(3.0, 9.657432734515774e-14)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt; You have seen that above output as same previous one. &lt;/p&gt;
            &lt;h2&gt;Summary&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;SciPy(pronounced as &quot;Sigh Pi&quot;) is an Open Source Python-based library, which is used in mathematics,
                    scientific computing, Engineering, and technical computing.&lt;/li&gt;
                &lt;li&gt;SciPy contains varieties of sub packages which help to solve the most common issue related to
                    Scientific Computation.&lt;/li&gt;
                &lt;li&gt;SciPy is built in top of the NumPy &lt;/li&gt;
            &lt;/ul&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;th&gt;Package Name &lt;/th&gt;
                        &lt;th&gt;Description &lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.io &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; File input/output &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.special &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Special Function &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.linalg &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Linear Algebra Operation &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.interpolate &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Interpolation &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.optimize &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Optimization and fit &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.stats &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Statistics and random numbers &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.integrate &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Numerical Integration &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.fftpack &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Fast Fourier transforms &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.signal &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Signal Processing &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;scipy.ndimage &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Image manipulation – &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;

        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonSciPy&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonReadWriteCSV&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python SciPy Tutorial: Learn with Example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">2.Reading and Writing CSV Files</title><link href="http://localhost:4000/blog/PythonReadWriteCSV" rel="alternate" type="text/html" title="2.Reading and Writing CSV Files" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonReadWriteCSV</id><content type="html" xml:base="http://localhost:4000/blog/PythonReadWriteCSV">&lt;section class=&quot;Ptutorial30&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Reading and Writing CSV Files in Python using CSV Module &amp;amp; Pandas &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is a CSV file? &lt;/h2&gt;
            &lt;p&gt;A CSV file is a type of plain text file that uses specific structuring to arrange tabular data. CSV is a
                common format for data interchange as it's compact, simple and general. Many online services allow its
                users to export tabular data from the website into a CSV file. Files of CSV will open into Excel, and
                nearly all databases have a tool to allow import from CSV file. The standard format is defined by rows
                and columns data. Moreover, each row is terminated by a newline to begin the next row. Also within the
                row, each column is separated by a comma. &lt;/p&gt;
            &lt;p&gt;In this tutorial, you will learn: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is a CSV file? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;CSV Sample File. &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Python CSV Module &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;CSV Module Functions &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Reading CSV Files &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Reading as a Dictionary &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Writing to CSV Files &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Reading CSV Files with Pandas &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Writing to CSV Files with Pandas &lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;CSV Sample File.&lt;/h2&gt;
            &lt;p&gt;Data in the form of tables is also called CSV (comma separated values) - literally &quot;comma-separated
                values.&quot; This is a text format intended for the presentation of tabular data. Each line of the file is
                one line of the table. The values of individual columns are separated by a separator symbol - a comma
                (,), a semicolon (;) or another symbol. CSV can be easily read and processed by Python. &lt;/p&gt;
            &lt;p&gt;Consider the following Tabe &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Table Data&lt;/strong&gt; &lt;/p&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Programming language &lt;/td&gt;
                        &lt;td&gt;Designed by &lt;/td&gt;
                        &lt;td&gt;Appeared &lt;/td&gt;
                        &lt;td&gt;Extension &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Python &lt;/td&gt;
                        &lt;td&gt;Guido van Rossum &lt;/td&gt;
                        &lt;td&gt;1991 &lt;/td&gt;
                        &lt;td&gt;.py &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Java &lt;/td&gt;
                        &lt;td&gt;James Gosling &lt;/td&gt;
                        &lt;td&gt;1995 &lt;/td&gt;
                        &lt;td&gt;.java &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;C++ &lt;/td&gt;
                        &lt;td&gt;Bjarne Stroustrup &lt;/td&gt;
                        &lt;td&gt;1983 &lt;/td&gt;
                        &lt;td&gt;.cpp &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p&gt;You can represent this table in csv as below.&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;CSV Data&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Programming language, Designed by, Appeared, Extension &lt;/p&gt;
            &lt;p&gt;Python, Guido van Rossum, 1991, .py &lt;/p&gt;
            &lt;p&gt;Java, James Gosling, 1995, .java &lt;/p&gt;
            &lt;p&gt;C++, Bjarne Stroustrup,1983,.cpp &lt;/p&gt;
            &lt;p&gt;As you can see each row is a new line, and each column is separated with a comma. This is an example of
                how a CSV file looks like. &lt;/p&gt;
            &lt;p class=&quot;alert alert-error&quot; style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;https://drive.google.com/uc?export=download&amp;amp;id=1e4zXe62E41RqLexYusECd5RSvN5aVZGI&quot;
                    onclick=&quot;ga('send', 'event', 'download', 'Python CSV File', 'Python CSV File');&quot;&gt; Download CSV
                    Data&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Python CSV Module&lt;/h2&gt;
            &lt;p&gt;Python provides a CSV module to handle CSV files. To read/write data, you need to loop through rows of
                the CSV. You need to use the split method to get data from specified columns. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;CSV Module Functions&lt;/h2&gt;
            &lt;p&gt;In CSV module documentation you can find following functions: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;csv.field_size_limit – return maximum field size&lt;/li&gt;
                &lt;li&gt;csv.get_dialect – get the dialect which is associated with the name&lt;/li&gt;
                &lt;li&gt;csv.list_dialects – show all registered dialects&lt;/li&gt;
                &lt;li&gt;csv.reader – read data from a csv file&lt;/li&gt;
                &lt;li&gt;csv.register_dialect - associate dialect with name&lt;/li&gt;
                &lt;li&gt;csv.writer – write data to a csv file&lt;/li&gt;
                &lt;li&gt;csv.unregister_dialect - delete the dialect associated with the name the dialect registry &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;csv.QUOTE_ALL&lt;/strong&gt; - Quote everything, regardless of type.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;csv.QUOTE_MINIMAL&lt;/strong&gt; - Quote fields with special characters&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;csv.QUOTE_NONNUMERIC&lt;/strong&gt; - Quote all fields that aren't numbers value&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;csv.QUOTE_NONE&lt;/strong&gt; – Don't quote anything in output &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In this tutorial, we are going to focus only on the reader and writer functions which allow you to edit,
                modify, and manipulate the data in a CSV file. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;How to Read a CSV File&lt;strong&gt; &lt;/strong&gt;&lt;/h2&gt;
            &lt;p&gt;To read data from CSV files, you must use the reader function to generate a reader object. &lt;/p&gt;
            &lt;p&gt;The reader function is developed to take each row of the file and make a list of all columns. Then, you
                have to choose the column you want the variable data for. &lt;/p&gt;
            &lt;p&gt;It sounds a lot more intricate than it is. Let's take a look at this example, and we will find out that
                working with csv file isn't so hard. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #import necessary modules
         import csv
         with open('X:\data.csv','rt')as f:
           data = csv.reader(f)
           for row in data:
                 print(row)
         &lt;/pre&gt;
            &lt;p&gt;When you execute the program above, the output will be:&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;
         ['Programming language; Designed by; Appeared; Extension']
         ['Python; Guido van Rossum; 1991; .py']
         ['Java; James Gosling; 1995; .java']
         ['C++; Bjarne Stroustrup;1983;.cpp']
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;How to Read a CSV as a Dictionary&lt;/h2&gt;
            &lt;p&gt;You can also you use DictReader to read CSV files. The results are interpreted as a dictionary where the
                header row is the key, and other rows are values. &lt;/p&gt;
            &lt;p&gt;Consider the following code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #import necessary modules
         import csv
         
         reader = csv.DictReader(open(&quot;file2.csv&quot;))
         for raw in reader:
             print(raw)
         &lt;/pre&gt;
            &lt;p&gt;The result of this code is: &lt;/p&gt;
            &lt;pre
                class=&quot;code-toolbar&quot;&gt;
         OrderedDict([('Programming language', 'Python'), ('Designed by', 'Guido van Rossum'), (' Appeared', ' 1991'), (' Extension', ' .py')])
         OrderedDict([('Programming language', 'Java'), ('Designed by', 'James Gosling'), (' Appeared', ' 1995'), (' Extension', ' .java')])
         OrderedDict([('Programming language', 'C++'), ('Designed by', ' Bjarne Stroustrup'), (' Appeared', ' 1985'), (' Extension', ' .cpp')])&lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW1.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;And this way to read data from CSV file is much easier than earlier method. However, this is not isn't
                the best way to read data. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;How to write CSV File&lt;/h2&gt;
            &lt;p&gt;When you have a set of data that you would like to store in a CSV file you have to use writer() function.
                To iterate the data over the rows(lines), you have to use the writerow() function. &lt;/p&gt;
            &lt;p&gt;Consider the following example. We write data into a file &quot;writeData.csv&quot; where the delimiter is an
                apostrophe. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #import necessary modules
         import csv
         
         with open('X:\writeData.csv', mode='w') as file:
             writer = csv.writer(file, delimiter=',', quotechar='&quot;', quoting=csv.QUOTE_MINIMAL)
         
             #way to write to csv file
             writer.writerow(['Programming language', 'Designed by', 'Appeared', 'Extension'])
             writer.writerow(['Python', 'Guido van Rossum', '1991', '.py'])
             writer.writerow(['Java', 'James Gosling', '1995', '.java'])
             writer.writerow(['C++', 'Bjarne Stroustrup', '1985', '.cpp'])
         &lt;/pre&gt;
            &lt;p&gt;Result in csv file is: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Programming language, Designed by, Appeared, Extension 
         Python, Guido van Rossum, 1991, .py
         Java, James Gosling, 1995, .java
         C++, Bjarne Stroustrup,1983,.cpp&lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW2.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Reading CSV Files with Pandas&lt;/h2&gt;
            &lt;p&gt;Pandas is an opensource library that allows to you perform data manipulation in Python. Pandas provide an
                easy way to create, manipulate and delete the data. &lt;/p&gt;
            &lt;p&gt;You must install pandas library with command &amp;lt;code&amp;gt;pip install pandas&amp;lt;/code&amp;gt;. In windows, you
                will execute this command in Command Prompt while in Linux in the Terminal. &lt;/p&gt;
            &lt;p&gt;Reading the CSV into a pandas DataFrame is very quick and easy: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #import necessary modules
         import pandas
         result = pandas.read_csv('X:\data.csv')
         print(result)
         &lt;/pre&gt;
            &lt;p&gt;Result: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Programming language, Designed by, Appeared, Extension 
         0    Python, Guido van Rossum, 1991, .py
         1    Java, James Gosling, 1995, .java
         2    C++, Bjarne Stroustrup,1983,.cpp	&lt;/pre&gt;
            &lt;p&gt;Very useful library. In just three lines of code you the same result as earlier. Pandas know that the
                first line of the CSV contained column names, and it will use them automatically. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Writing to CSV Files with Pandas&lt;/h2&gt;
            &lt;p&gt;Writing to CSV file with Pandas is as easy as reading. Here you can convince in it. First you must create
                DataFrame based on the following code. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from pandas import DataFrame
         C = {'Programming language': ['Python','Java', 'C++'],
                 'Designed by': ['Guido van Rossum', 'James Gosling', 'Bjarne Stroustrup'],
                 'Appeared': ['1991', '1995', '1985'],
                 'Extension': ['.py', '.java', '.cpp'],
             }
         df = DataFrame(C, columns= ['Programming language', 'Designed by', 'Appeared', 'Extension'])
         export_csv = df.to_csv (r'X:\pandaresult.csv', index = None, header=True) # here you have to write path, where result file will be stored
         print (df)
         &lt;/pre&gt;
            &lt;p&gt;Here is the output &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;Programming language, Designed by, Appeared, Extension
         0    Python, Guido van Rossum, 1991, .py
         1    Java, James Gosling, 1995, .java
         2    C++, Bjarne Stroustrup,1983,.cpp&lt;/pre&gt;
            &lt;p&gt;And CSV file is created at the specified location. &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW3.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;So, now you know how use method 'csv' and also read and write data in CSV format. CSV files are widely
                used in software applications because they are easy to read and manage, and their small size makes them
                relatively fast for processing and transmission. &lt;/p&gt;
            &lt;p&gt;The csv module provides various functions and classes which allow you to read and write easily. You can
                look at the official Python documentation and find some more interesting tips and modules. CSV is the
                best way for saving, viewing, and sending data. Actually, it isn't so hard to learn as it seems at the
                beginning. But with a little practice, you'll master it. &lt;/p&gt;
            &lt;p&gt;Pandas is a great alternative to read CSV files. &lt;/p&gt;
            &lt;p&gt;Also, there are other ways to parse text files with libraries like ANTLR, PLY, and PlyPlus. They can all
                handle heavy-duty parsing, and if simple String manipulation doesn't work, there are regular expressions
                which you can use. &lt;/p&gt;


        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonSciPy&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonJSON&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Reading and Writing CSV Files in Python using CSV Module &amp;amp; Pandas</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">4.Python MySQL</title><link href="http://localhost:4000/blog/PythonMySQL" rel="alternate" type="text/html" title="4.Python MySQL" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonMySQL</id><content type="html" xml:base="http://localhost:4000/blog/PythonMySQL">&lt;section class=&quot;Ptutorial32&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python with MySQL: Connect, Create Database, Table, Insert [Examples] &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;p&gt;Before diving deep, let's understand &lt;/p&gt;
            &lt;h2&gt;What is MySQL?&lt;/h2&gt;
            &lt;p&gt;MySQL is an Open-Source database and one of the best type of RDBMS (Relational Database Management
                System). Co-founder of MySQLdb is Michael Widenius's, and also MySQL name derives from the daughter of
                Michael. &lt;/p&gt;
            &lt;h2&gt;How to Install MySQL&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Install MySQL in Linux/Unix:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Download RPM package for Linux/Unix from Official site: &lt;a
                    href=&quot;https://www.mysql.com/downloads/&quot;&gt;https://www.mysql.com/downloads/&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;In terminal use following command &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;rpm  -i &amp;lt;Package_name&amp;gt;&lt;/pre&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;Example   rpm -i MySQL-5.0.9.0.i386.rpm
         &lt;/pre&gt;
            &lt;p&gt;To check in Linux &lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;mysql --version&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Install MySQL in Windows&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt; Download MySQL database exe from &lt;a href=&quot;https://www.mysql.com/downloads/&quot;&gt;official site&lt;/a&gt; and
                install as usual normal installation of software in Windows. Refer this &lt;a
                    href=&quot;https://www.guru99.com/introduction-to-mysql-workbench.html&quot;&gt;tutorial&lt;/a&gt;, for a step by step
                guide&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;h2&gt;Install MySQL Connector Library for Python&lt;/h2&gt;
            &lt;p&gt;For Python 2.7 or lower install using pip as: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;pip install mysql-connector
         &lt;/pre&gt;
            &lt;p&gt;For Python 3 or higher version install using pip3 as:&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;pip3 install mysql-connector &lt;/pre&gt;
            &lt;h2&gt; Test the MySQL Database connection with Python&lt;/h2&gt;
            &lt;p&gt;To test database connection here we use pre-installed MySQL connector and pass credentials into
                &lt;strong&gt;connect()&lt;/strong&gt; function like host, username and password. &lt;/p&gt;
            &lt;p&gt;Syntax to access MySQL with Python: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             import mysql.connector
             db_connection = mysql.connector.connect(
               host=&quot;hostname&quot;,
               user=&quot;username&quot;,
               passwd=&quot;password&quot;
             )
         &lt;/pre&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import mysql.connector
         db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;
         )
         print(db_connection)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre
                class=&quot;code-toolbar&quot;&gt;&amp;lt;mysql.connector.connection.MySQLConnection object at 0x000002338A4C6B00&amp;gt;&lt;/pre&gt;
            &lt;p&gt; Here output shows the connection created successfully. &lt;/p&gt;
            &lt;h2&gt;Creating Database in MySQL using Python&lt;/h2&gt;
            &lt;p&gt;Syntax to Create new database in SQL is &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;CREATE DATABASE &quot;database_name&quot;
         &lt;/pre&gt;
            &lt;p&gt;Now we create database using Python in MySQL&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host= &quot;localhost&quot;,
           user= &quot;root&quot;,
           passwd= &quot;root&quot;
           )
         # creating database_cursor to perform SQL operation
         db_cursor = db_connection.cursor()
         # executing cursor with execute method and pass SQL query
         db_cursor.execute(&quot;CREATE DATABASE my_first_db&quot;)
         # get list of all databases
         db_cursor.execute(&quot;SHOW DATABASES&quot;)
         #print all databases
         for db in db_cursor:
             print(db)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/4/030819_0707_PythonwithM1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/4/030819_0707_PythonwithM1.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;

            &lt;p&gt;Here above image shows the &lt;strong&gt;my_first_db&lt;/strong&gt; database is created &lt;/p&gt;
            &lt;h2&gt;Create a Table in MySQL with Python&lt;/h2&gt;
            &lt;p&gt;Let's create a simple table &quot;student&quot; which has two columns. &lt;/p&gt;
            &lt;p&gt;SQL Syntax: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;CREATE  TABLE student (id INT, name VARCHAR(255))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;,
           database=&quot;my_first_db&quot;
           )
         db_cursor = db_connection.cursor()
         #Here creating database table as student'
         db_cursor.execute(&quot;CREATE TABLE student (id INT, name VARCHAR(255))&quot;)
         #Get database table'
         db_cursor.execute(&quot;SHOW TABLES&quot;)
         for table in db_cursor:
             print(table)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt; ('student',) &lt;/pre&gt;
            &lt;h2&gt;Create a Table with Primary Key&lt;/h2&gt;
            &lt;p&gt;Let's create an &lt;strong&gt;Employee&lt;/strong&gt; table with three different columns. We will add a primary key
                in &lt;strong&gt;id&lt;/strong&gt; column with AUTO_INCREMENT constraint &lt;/p&gt;
            &lt;p&gt;SQL Syntax, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;CREATE TABLE employee(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), salary INT(6))
         &lt;/pre&gt;
            &lt;p&gt;Example,&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;,
           database=&quot;my_first_db&quot;
           )
         db_cursor = db_connection.cursor()
         #Here creating database table as employee with primary key
         db_cursor.execute(&quot;CREATE TABLE employee(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), salary INT(6))&quot;)
         #Get database table
         db_cursor.execute(&quot;SHOW TABLES&quot;)
         for table in db_cursor:
             print(table)	
         &lt;/pre&gt;
            &lt;p&gt; Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;('employee',) ('student',)&lt;/pre&gt;
            &lt;h2&gt;ALTER table in MySQL with Python&lt;/h2&gt;
            &lt;p&gt;Alter command is used for modification of Table structure in SQL. Here we will alter &lt;strong&gt;Student
                &lt;/strong&gt;table and add a primary key to the &lt;strong&gt;id&lt;/strong&gt; field. &lt;/p&gt;
            &lt;p&gt;SQL Syntax, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;ALTER TABLE student MODIFY id INT PRIMARY KEY
         &lt;/pre&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;,
           database=&quot;my_first_db&quot;
           )
         db_cursor = db_connection.cursor()
         #Here we modify existing column id
         db_cursor.execute(&quot;ALTER TABLE student MODIFY id INT PRIMARY KEY&quot;)
         &lt;/pre&gt;
            &lt;p&gt; Output: &lt;/p&gt;
            &lt;p&gt; Here below you can see the &lt;strong&gt;id &lt;/strong&gt;column is modified. &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/4/030819_0707_PythonwithM2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/4/030819_0707_PythonwithM2.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;Insert Operation with MySQL in Python:&lt;/h2&gt;
            &lt;p&gt;Let's perform insertion operation in MySQL Database table which we already create. We will insert data oi
                STUDENT table and EMPLOYEE table. &lt;/p&gt;
            &lt;p&gt;SQL Syntax, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         INSERT INTO student (id, name) VALUES (01, &quot;John&quot;)
         INSERT INTO employee (id, name, salary) VALUES(01, &quot;John&quot;, 10000)
         &lt;/pre&gt;
            &lt;p&gt;Example,&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;,
           database=&quot;my_first_db&quot;
           )
         db_cursor = db_connection.cursor()
         student_sql_query = &quot;INSERT INTO student(id,name) VALUES(01, 'John')&quot;
         employee_sql_query = &quot; INSERT INTO employee (id, name, salary) VALUES (01, 'John', 10000)&quot;
         #Execute cursor and pass query as well as student data
         db_cursor.execute(student_sql_query)
         #Execute cursor and pass query of employee and data of employee
             db_cursor.execute(employee_sql_query)
         db_connection.commit()
         print(db_cursor.rowcount, &quot;Record Inserted&quot;)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt; 2 Record Inserted &lt;/pre&gt;


        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonJSON&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonKeyDiff&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python with MySQL: Connect, Create Database, Table, Insert [Examples]</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">5.Python 2 vs Python 3 - Key Differences</title><link href="http://localhost:4000/blog/PythonKeyDiff" rel="alternate" type="text/html" title="5.Python 2 vs Python 3 - Key Differences" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonKeyDiff</id><content type="html" xml:base="http://localhost:4000/blog/PythonKeyDiff">&lt;section class=&quot;Ptutorial32&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python 2 vs Python 3: Key Differences &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is Python 2?&lt;/h2&gt;
            &lt;p&gt;Python 2 made code development process easier than earlier versions. It implemented technical details of
                Python Enhancement Proposal (PEP). Python 2.7 (last version in 2.x ) is no longer under development and
                in 2020 will be discontinued. &lt;/p&gt;
            &lt;p&gt;In this tutorial, you will learn, &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is Python 2? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;What is Python 3? &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Why should you learn Python 2? &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Why should you use Python 3? &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;History of Python 2 &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;History of Python 3 &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Key Differences Between Python 2 and Python 3 &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Python 2 vs. Python 3 Example Code &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Which Python Version to Use? &lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;What is Python 3?&lt;/h2&gt;
            &lt;p&gt;On December 2008, Python released version 3.0. This version was mainly released to fix problems which
                exist in Python 2. The nature of these change is such that Python 3 was incompatible with Python 2. It
                is &lt;strong&gt;backward incompatible&lt;/strong&gt; Some features of Python 3 have been backported to Python 2.x
                versions to make the migration process easy in Python 3. &lt;/p&gt;
            &lt;p&gt;As a result, for any organization who was using Python 2.x version, migrating their project to 3.x needed
                lots of changes. These changes not only relate to projects and applications but also all the libraries
                that form part of the Python ecosystem. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Why should you learn Python 2?&lt;/h2&gt;
            &lt;figure style=&quot;margin-left: auto;margin-right: auto;&quot;&gt;
                &lt;center&gt;
                    &lt;a href=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy1.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            src=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy1.png&quot;
                            alt=&quot;&quot;&gt;&lt;/a&gt;
                    &lt;figcaption style=&quot;display: table;&quot;&gt;Google Trends Python 2 vs. Python 3&lt;/figcaption&gt;
                &lt;/center&gt;
            &lt;/figure&gt;
            &lt;p&gt;Although, Python 2 is an old open source version here are where you still need to learn Python 2: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;To become a DevOps engineer and you need to work with configurations management tools like puppet or
                    ansible. Here, you need to work with both of these versions. &lt;/li&gt;
                &lt;li&gt;If your company's code written in Python 2, you will require to learn to work with that &lt;/li&gt;
                &lt;li&gt;If your development team is working on a project that depends on specific third-party libraries or
                    software which you are not able to port to Python 3, then Python 2 is the only option available for
                    you. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Why should you use Python 3?&lt;/h2&gt;
            &lt;figure style=&quot;margin-left: auto;margin-right: auto;&quot;&gt;
                &lt;center&gt;
                    &lt;a href=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy2.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            src=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy2.png&quot;
                            alt=&quot;&quot;&gt;&lt;/a&gt;
                    &lt;figcaption style=&quot;display: table;&quot;&gt;Stack Overflow Questions Python 2 vs. Python 3&lt;/figcaption&gt;
                &lt;/center&gt;
            &lt;/figure&gt;
            &lt;p&gt;Here, are prime reasons for using Python 3.x versions: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Python 3 supports modern techniques like AI, machine learning, and data science&lt;/li&gt;
                &lt;li&gt;Python 3 is supported by a large Python developer's community. Getting support is easy.&lt;/li&gt;
                &lt;li&gt;Its easier to learn Python language compared to earlier versions.&lt;/li&gt;
                &lt;li&gt;Offers Powerful toolkit and libraries&lt;/li&gt;
                &lt;li&gt;Mixable with other languages&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;History of Python 2&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Python 2.0 - October 16, 2000 &lt;/li&gt;
                &lt;li&gt;Python 2.1 - April 17, 2001 &lt;/li&gt;
                &lt;li&gt;Python 2.2 - December 21, 2001 &lt;/li&gt;
                &lt;li&gt;Python 2.3 - July 29, 2003 &lt;/li&gt;
                &lt;li&gt;Python 2.4 - November 30, 2004 &lt;/li&gt;
                &lt;li&gt;Python 2.5 - September 19, 2006 &lt;/li&gt;
                &lt;li&gt;Python 2.6 - October 1, 2008 &lt;/li&gt;
                &lt;li&gt;Python 2.7-July 3, 2010&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;History of Python 3&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Python 3.0 - December 3, 2008 &lt;/li&gt;
                &lt;li&gt;Python 3.1 - June 27, 2009 &lt;/li&gt;
                &lt;li&gt;Python 3.2 - February 20, 2011 &lt;/li&gt;
                &lt;li&gt;Python 3.3 - September 29, 2012 &lt;/li&gt;
                &lt;li&gt;Python 3.4-March 16, 2014 &lt;/li&gt;
                &lt;li&gt;Python 3.5 - September 13, 2015&lt;/li&gt;
                &lt;li&gt;Python 3.6- October 2016&lt;/li&gt;
                &lt;li&gt;Python 3.7- June 2018.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Key Differences Between Python 2 and Python 3&lt;/h2&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy3.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;table class=&quot;table1 table-striped table-bordered&quot;&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;th&gt;&lt;strong&gt;Basis of comparison&lt;/strong&gt; &lt;/th&gt;
                        &lt;th&gt;&lt;strong&gt;Python 3&lt;/strong&gt; &lt;/th&gt;
                        &lt;th&gt;&lt;strong&gt;Python 2&lt;/strong&gt; &lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Release Date&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;2008 &lt;/td&gt;
                        &lt;td&gt;2000 &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Function print&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;print (&quot;hello&quot;) &lt;/td&gt;
                        &lt;td&gt;print &quot;hello&quot; &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Division of Integers &lt;/td&gt;
                        &lt;td&gt;Whenever two integers are divided, you get a float value &lt;/td&gt;
                        &lt;td&gt;When two integers are divided, you always provide integer value. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Unicode&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;In Python 3, default storing of strings is Unicode. &lt;/td&gt;
                        &lt;td&gt;To store Unicode string value, you require to define them with &quot;u&quot;. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Syntax &lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;The syntax is simpler and easily understandable. &lt;/td&gt;
                        &lt;td&gt;The syntax of Python 2 was comparatively difficult to understand. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Rules of ordering Comparisons &lt;/td&gt;
                        &lt;td&gt;In this version, Rules of ordering comparisons have been simplified. &lt;/td&gt;
                        &lt;td&gt;Rules of ordering comparison are very complex. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Iteration&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;The new Range() function introduced to perform iterations. &lt;/td&gt;
                        &lt;td&gt;In Python 2, the xrange() is used for iterations. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Exceptions&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;It should be enclosed in parenthesis. &lt;/td&gt;
                        &lt;td&gt;It should be enclosed in notations. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Leak of variables&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;The value of variables never changes. &lt;/td&gt;
                        &lt;td&gt;The value of the global variable will change while using it inside for-loop. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Backward compatibility &lt;/td&gt;
                        &lt;td&gt;Not difficult to port python 2 to python 3 but it is never reliable. &lt;/td&gt;
                        &lt;td&gt;Python version 3 is not backwardly compatible with Python 2. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Library&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;Many recent developers are creating libraries which you can only use with Python 3. &lt;/td&gt;
                        &lt;td&gt;Many older libraries created for Python 2 is not forward-compatible. &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Python 2 vs. Python 3 Example Code&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
           print(&quot;Hello World!&quot;)
           
         if __name__== &quot;__main__&quot;:
           main()
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Python 2&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
           print &quot;Hello World!&quot;
           
         if __name__== &quot;__main__&quot;:
           main()
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Which Python Version to Use?&lt;/h2&gt;
            &lt;p&gt;When it comes to Python version 2 vs. 3 today, Python 3 is the outright winner. That's because Python 2
                won't be available after 2020. Mass Python 3 adoption is the clear direction of the future. &lt;/p&gt;
            &lt;p&gt;After considering declining support for Python 2 programming language and added benefits from upgrades to
                Python 3, it is always advisable for a new developer to select Python version 3. However, if a job
                demands Python 2 capabilities, that would be an only compelling reason to use this version. &lt;/p&gt;


        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMySQL&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonKeyDiff&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python 2 vs Python 3: Key Differences</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry></feed>