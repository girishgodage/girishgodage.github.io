<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-28T20:12:58+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">10. Dictionary in Python</title><link href="http://localhost:4000/blog/PyhtonDictionary" rel="alternate" type="text/html" title="10. Dictionary in Python" /><published>2019-09-28T00:00:00+05:30</published><updated>2019-09-28T00:00:00+05:30</updated><id>http://localhost:4000/blog/PyhtonDictionary</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonDictionary">&lt;section class=&quot;Ptutorial10&quot;&gt;
   &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
      &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
      &lt;div class=&quot;page-header&quot;&gt;
         &lt;h2 itemprop=&quot;headline&quot;&gt; Python Dictionary(Dict): Update, Cmp, Len, Sort, Copy, Items, str Example &lt;/h2&gt;
      &lt;/div&gt;

      &lt;div itemprop=&quot;articleBody&quot;&gt;

         &lt;p&gt;Dictionaries are another example of a data structure. A dictionary is used to map or associate things you
            want to store the keys you need to get them. A dictionary in Python is just like a dictionary in the real
            world. Python Dictionary are defined into two elements Keys and Values. &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;Keys will be a single element&lt;/li&gt;
            &lt;li&gt;Values can be a list or list within a list, numbers, etc.&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;In this tutorial, we are going to learn, &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Python Dictionary Methods &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Copying dictionary &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Updating Dictionary &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Delete Keys from the dictionary &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Dictionary items() Method &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Sorting the Dictionary &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Python Dictionary in-built Functions &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Dictionary len() Method &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Variable Types &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;Python List cmp() Method &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#11&quot;&gt;Dictionary Str(dict) &lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;strong&gt;Syntax for Python Dictionary&lt;/strong&gt;: &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = { ' Tim': 18,  xyz,.. }&lt;/pre&gt;
         &lt;p&gt;Dictionary is listed in curly brackets, inside these curly brackets, keys and values are declared. Each key
            is separated from its value by a colon (:) while each element is separated by commas. &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Properties of Dictionary Keys&lt;/strong&gt; &lt;/p&gt;
         &lt;p&gt;There are two important points while using dictionary keys &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;More than one entry per key is not allowed ( no duplicate key is allowed)&lt;/li&gt;
            &lt;li&gt;The values in the dictionary can be of any type while the keys must be immutable like numbers, tuples or
               strings.&lt;/li&gt;
            &lt;li&gt;Dictionary keys are case sensitive- Same key name but with the different case are treated as different
               keys in Python dictionaries.&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print (Dict['Tiffany'])&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print((Dict['Tiffany']))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;In code, we have dictionary name &quot;Dict&quot;&lt;/li&gt;
            &lt;li&gt;We declared the name and age of the person in the dictionary, where name is &quot;Keys&quot; and age is the&quot;value&quot;
            &lt;/li&gt;
            &lt;li&gt;Now run the code&lt;/li&gt;
            &lt;li&gt;It retrieves the age of tiffany from the dictionary.&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;Python Dictionary Methods &lt;/h2&gt;
         &lt;h3&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Copying dictionary &lt;/h3&gt;
         &lt;p&gt;You can also copy the entire dictionary to new dictionary. For example, here we have copied our original
            dictionary to new dictionary name &quot;Boys&quot; and &quot;Girls&quot;. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}	
         studentX=Boys.copy()
         studentY=Girls.copy()
         print studentX
         print studentY&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}	
         studentX=Boys.copy()
         studentY=Girls.copy()
         print(studentX)
         print(studentY)&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;We have the original dictionary (Dict) with the name and age of the boys and girls together&lt;/li&gt;
            &lt;li&gt;But we want boys list separate from girls list, so we defined the element of boys and girls in a
               separate dictionary name &quot;Boys&quot; and &quot;Girls.&quot;&lt;/li&gt;
            &lt;li&gt;Now again we have created new dictionary name &quot;studentX&quot; and &quot;studentY&quot;, where all the keys and values
               of boy dictionary are copied into studentX, and the girls will be copied in studentY&lt;/li&gt;
            &lt;li&gt;So now you don't have to look into the whole list in main dictionary( Dict) to check who is boy and who
               is girl, you just have to print studentX if you want boys list and StudentY if you want girls list&lt;/li&gt;
            &lt;li&gt;So, when you run the studentX and studentY dictionary, it will give all the element present in the
               dictionary of &quot;boys&quot; and &quot;girls&quot; separately&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Updating Dictionary&lt;/h3&gt;
         &lt;p&gt;You can also update a dictionary by adding a new entry or a key-value pair to an existing entry or by
            deleting an existing entry. Here in the example we will add another name &quot;Sarah&quot; to our existing dictionary.
         &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         Dict.update({&quot;Sarah&quot;:9})
         print Dict&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         Dict.update({&quot;Sarah&quot;:9})
         print(Dict)&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Our existing dictionary &quot;Dict&quot; does not have the name &quot;Sarah.&quot;&lt;/li&gt;
            &lt;li&gt;We use the method Dict.update to add Sarah to our existing dictionary&lt;/li&gt;
            &lt;li&gt;Now run the code, it adds Sarah to our existing dictionary&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Delete Keys from the dictionary&lt;/h3&gt;
         &lt;p&gt;Python dictionary gives you the liberty to delete any element from the dictionary list. Suppose you don't
            want the name Charlie in the list, so you can delete the key element by following code. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         del Dict ['Charlie']
         print Dict&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         del Dict ['Charlie']
         print(Dict)&lt;/pre&gt;
         &lt;p&gt;When you run this code, it should print the dictionary list without Charlie. &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;We used the code del Dict&lt;/li&gt;
            &lt;li&gt;When code executed, it has deleted the Charlie from the main dictionary&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Dictionary items() Method&lt;/h3&gt;
         &lt;p&gt;The items() method returns a list of tuple pairs (Keys, Value) in the dictionary. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print &quot;Students Name: %s&quot; % Dict.items()&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt;&lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print(&quot;Students Name: %s&quot; % list(Dict.items()))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;We use the code items() method for our Dict.&lt;/li&gt;
            &lt;li&gt;When code was executed, it returns a list of items ( keys and values) from the dictionary&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;strong&gt;Check if a given key already exists in a dictionary&lt;/strong&gt; &lt;/p&gt;
         &lt;p&gt;For a given list, you can also check whether our child dictionary exists in a main dictionary or not. Here
            we have two sub-dictionaries &quot;Boys&quot; and &quot;Girls&quot;, now we want to check whether our dictionary Boys exist in
            our main &quot;Dict&quot; or not. For that, we use the forloop method with else if method. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}
         for key in Dict.keys():
             if key in Boys.keys():
                 print True
             else:       
                 print False&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}
         for key in list(Dict.keys()):
             if key in list(Boys.keys()):
                 print(True)
             else:       
                 print(False)&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;The forloop in code checks each key in the main dictionary for Boys keys&lt;/li&gt;
            &lt;li&gt;If it exists in the main dictionary, it should print true or else it should print false&lt;/li&gt;
            &lt;li&gt;When you execute the code, it will print &quot;True&quot; for three times, as we got three elements in our &quot;Boys&quot;
               dictionary &lt;/li&gt;
            &lt;li&gt;So it indicates that the &quot;Boys&quot; exist in our main dictionary (Dict)&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Sorting the Dictionary &lt;/h3&gt;
         &lt;p&gt;In the dictionary, you can also sort the elements. For example, if we want to print the name of the elements
            of our dictionary alphabetically we have to use the forloop. It will sort each element of dictionary
            accordingly. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}
         Students = Dict.keys()
         Students.sort()
         for S in Students:
               print&quot;:&quot;.join((S,str(Dict[S])))&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}
         Students = list(Dict.keys())
         Students.sort()
         for S in Students:
               print(&quot;:&quot;.join((S,str(Dict[S]))))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;We declared the variable students for our dictionary &quot;Dict.&quot; &lt;/li&gt;
            &lt;li&gt;Then we use the code Students.sort, which will sort the element inside our dictionary &lt;/li&gt;
            &lt;li&gt;But to sort each element in dictionary, we run the forloop by declaring variable S &lt;/li&gt;
            &lt;li&gt;Now, when we execute the code the forloop will call each element from the dictionary, and it will print
               the string and value in an order &lt;/li&gt;
         &lt;/ul&gt;
         &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Python Dictionary in-built Functions&lt;/h2&gt;
         &lt;h3&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Dictionary len() Method &lt;/h3&gt;
         &lt;p&gt;The len() function gives the number of pairs in the dictionary. &lt;/p&gt;
         &lt;p&gt;For example, &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print &quot;Length : %d&quot; % len (Dict)&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print(&quot;Length : %d&quot; % len (Dict))&lt;/pre&gt;
         &lt;p&gt;When len (Dict) function is executed it gives the output at &quot;4&quot; as there are four elements in our dictionary
         &lt;/p&gt;
         &lt;h3&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Variable Types&lt;/h3&gt;
         &lt;p&gt;Python does not require to explicitly declare the reserve memory space; it happens automatically. The assign
            values to variable &quot;=&quot; equal sign are used. The code to determine the variable type is &quot; %type (Dict).&quot; &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print &quot;variable Type: %s&quot; %type (Dict)&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print(&quot;variable Type: %s&quot; %type (Dict))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Use the code %type to know the variable type&lt;/li&gt;
            &lt;li&gt;When code was executed, it tells a variable type is a dictionary&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;10&quot;&gt;&lt;/a&gt;Python List cmp() Method&lt;/h3&gt;
         &lt;p&gt;The compare method cmp() is used in Python to compare values and keys of two dictionaries. If method returns
            0 if both dictionaries are equal, 1 if dic1 &amp;gt; dict2 and -1 if dict1 &amp;lt; dict2. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}	
         print cmp(Girls, Boys)&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;cmp is not supported in Python 3&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;We have two dictionary name &quot;Boys&quot; and &quot;Girls.&quot;&lt;/li&gt;
            &lt;li&gt;Which ever you declare first in code &quot;cmp(Girls, Boys)&quot; will be considered as dictionary 1. In our case,
               we declared &quot;Girls&quot; first, so it will be considered as dictionary 1 and boys as dictionary 2&lt;/li&gt;
            &lt;li&gt;When code is executed it prints out -1, It indicates that our dictionary 1 is less than dictionary 2.
            &lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;11&quot;&gt;&lt;/a&gt;Dictionary Str(dict)&lt;/h3&gt;
         &lt;p&gt;With Str() method, you can make a dictionary into a printable string format. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print &quot;printable string:%s&quot; % str (Dict)&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print(&quot;printable string:%s&quot; % str (Dict))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Use the code % str (Dict)&lt;/li&gt;
            &lt;li&gt;It will return the dictionary elements into a printable string format&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;b&gt; Here is the list of all Dictionary Methods&lt;/b&gt; &lt;/p&gt;
         &lt;table class=&quot;table1 table-striped table-bordered&quot;&gt;
            &lt;tbody&gt;
               &lt;tr&gt;
                  &lt;th&gt;Method&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;th&gt;Syntax&lt;/th&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;copy()&lt;/td&gt;
                  &lt;td&gt;Copy the entire dictionary to new dictionary&lt;/td&gt;
                  &lt;td&gt;dict.copy()&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;update()&lt;/td&gt;
                  &lt;td&gt;Update a dictionary by adding a new entry or a key-value pair to an&lt;br&gt; existing entry or by
                     deleting an existing entry.&lt;/td&gt;
                  &lt;td&gt;Dict.update([other])&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;items()&lt;/td&gt;
                  &lt;td&gt;Returns a list of tuple pairs (Keys, Value) in the dictionary.&lt;/td&gt;
                  &lt;td&gt;dictionary.items()&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;sort()&lt;/td&gt;
                  &lt;td&gt;You can sort the elements&lt;/td&gt;
                  &lt;td&gt;dictionary.sort()&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;len()&lt;/td&gt;
                  &lt;td&gt;Gives the number of pairs in the dictionary.&lt;/td&gt;
                  &lt;td&gt;len(dict)&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;cmp()&lt;/td&gt;
                  &lt;td&gt;Compare values and keys of two dictionaries&lt;/td&gt;
                  &lt;td&gt;cmp(dict1, dict2)&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;Str()&lt;/td&gt;
                  &lt;td&gt;Make a dictionary into a printable string format&lt;/td&gt;
                  &lt;td&gt;Str(dict)&lt;/td&gt;
               &lt;/tr&gt;
            &lt;/tbody&gt;
         &lt;/table&gt;
         &lt;h3&gt;Summary:&lt;/h3&gt;
         &lt;p&gt;Dictionaries in a programming language is a type of data-structure used to store information connected in
            someway. Python Dictionary are defined into two elements Keys and Values. Dictionaries do not store their
            information in any particular order, so you may not get your information back in the same order you entered
            it.&lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;Keys will be a single element&lt;/li&gt;
            &lt;li&gt;Values can be a list or list within a list, numbers, etc.&lt;/li&gt;
            &lt;li&gt;More than one entry per key is not allowed ( no duplicate key is allowed)&lt;/li&gt;
            &lt;li&gt;The values in the dictionary can be of any type while the keys must be immutable like numbers, tuples or
               strings.&lt;/li&gt;
            &lt;li&gt;Dictionary keys are case sensitive- Same key name but with the different case are treated as different
               keys in Python dictionaries.&lt;/li&gt;
         &lt;/ul&gt;


      &lt;/div&gt;

   &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonTuple&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonOperators&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Dictionary(Dict): Update, Cmp, Len, Sort, Copy, Items, str Example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">11. Operatos in Python</title><link href="http://localhost:4000/blog/PyhtonOperators" rel="alternate" type="text/html" title="11. Operatos in Python" /><published>2019-09-28T00:00:00+05:30</published><updated>2019-09-28T00:00:00+05:30</updated><id>http://localhost:4000/blog/PyhtonOperators</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonOperators">&lt;section class=&quot;Ptutorial11&quot;&gt;
        &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
            &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
            &lt;div class=&quot;page-header&quot;&gt;
               &lt;h1 itemprop=&quot;headline&quot;&gt; Python Operators: Arithmetic, Logical, Comparison, Assignment, Bitwise &amp;amp; Precedence &lt;/h1&gt;
            &lt;/div&gt;
            
            &lt;div itemprop=&quot;articleBody&quot;&gt;
              
               &lt;p&gt;Operators are used to perform operations on values and variables. Operators can manipulate individual items and returns a result. The data items are referred as operands or arguments. Operators are either represented by keywords or special characters. For example, for identity operators we use keyword &quot;is&quot; and &quot;is not&quot;. &lt;/p&gt;
               &lt;p&gt;In this tutorial, we going to learn various operators &lt;/p&gt;
               &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Arithmetic Operators &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Comparison Operators &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Python Assignment Operators &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Logical Operators or Bitwise Operators &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Membership Operators &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Identity Operators &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Operator precedence &lt;/a&gt;&lt;/li&gt;
               &lt;/ul&gt;
               &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;Arithmetic Operators&lt;/h2&gt;
               &lt;p&gt;Arithmetic Operators perform various arithmetic calculations like addition, subtraction, multiplication, division, %modulus, exponent, etc. There are various methods for arithmetic calculation in Python like you can use the eval function, declare variable &amp;amp; calculate, or call functions. &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: For arithmetic operators we will take simple example of addition where we will add two-digit 4+5=9 &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;x= 4	
         y= 5
         print(x + y)&lt;/pre&gt;
               &lt;p&gt;Similarly, you can use other arithmetic operators like for multiplication(*), division (/), substraction (-), etc. &lt;/p&gt;
               &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Comparison Operators&lt;/h2&gt;
               &lt;p&gt;These operators compare the values on either side of the operand and determine the relation between them. It is also referred as relational operators. Various comparison operators are ( ==, != , &amp;lt;&amp;gt;, &amp;gt;,&amp;lt;=, etc) &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: For comparison operators we will compare the value of x to the value of y and print the result in true or false. Here in example, our value of x = 4 which is smaller than y = 5, so when we print the value as x&amp;gt;y, it actually compares the value of x to y and since it is not correct, it returns false. &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;x = 4
         y = 5
         print(('x &amp;gt; y  is',x&amp;gt;y))&lt;/pre&gt;
               &lt;p&gt;Likewise, you can try other comparison operators (x &amp;lt; y, x==y, x!=y, etc.) &lt;/p&gt;
               &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Python Assignment Operators&lt;/h2&gt;
               &lt;p&gt;Python assignment operators are used for assigning the value of the right operand to the left operand. Various assignment operators used in Python are (+=, - = , *=, /= , etc.) &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Python assignment operators is simply to assign the value, for example &lt;/p&gt;
              
               &lt;pre class=&quot;code-toolbar&quot;&gt;num1 = 4
         num2 = 5
         print((&quot;Line 1 - Value of num1 : &quot;, num1))
         print((&quot;Line 2 - Value of num2 : &quot;, num2))&lt;/pre&gt;
               &lt;p&gt;&lt;strong&gt;Example of compound assignment operator&lt;/strong&gt; &lt;/p&gt;
               &lt;p&gt;We can also use a compound assignment operator, where you can add, subtract, multiply right operand to left and assign addition (or any other arithmetic function) to the left operand. &lt;/p&gt;
               &lt;ul&gt;
                  &lt;li&gt;Step 1: Assign value to num1 and num2 &lt;/li&gt;
                  &lt;li&gt;Step 2: Add value of num1 and num2 (4+5=9)&lt;/li&gt;
                  &lt;li&gt;Step 3: To this result add num1 to the output of Step 2 ( 9+4)&lt;/li&gt;
                  &lt;li&gt;Step 4: It will print the final result as 13 &lt;/li&gt;
               &lt;/ul&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;num1 = 4
         num2 = 5
         res = num1 + num2
         res += num1
         print((&quot;Line 1 - Result of + is &quot;, res))&lt;/pre&gt;
               &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Logical Operators&lt;/h2&gt;
               &lt;p&gt;Logical operators in Python are used for conditional statements are true or false. Logical operators in Python are AND, OR and NOT. For logical operators following condition are applied. &lt;/p&gt;
               &lt;ul style=&quot;margin-left: 40pt&quot;&gt;
                  &lt;li&gt;For AND operator – It returns TRUE if both the operands (right side and left side) are true&lt;/li&gt;
                  &lt;li&gt;For OR operator- It returns TRUE if either of the operand (right side or left side) is true&lt;/li&gt;
                  &lt;li&gt;For NOT operator- returns TRUE if operand is false&lt;/li&gt;
               &lt;/ul&gt;
               &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Here in example we get true or false based on the value of a and b &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;a = True
         b = False
         print(('a and b is',a and b))
         print(('a or b is',a or b))
         print(('not a is',not a))&lt;/pre&gt;
               &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Membership Operators&lt;/h2&gt;
               &lt;p&gt;These operators test for membership in a sequence such as lists, strings or tuples. There are two membership operators that are used in Python. (in, not in). It gives the result based on the variable present in specified sequence or string &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: For example here we check whether the value of x=4 and value of y=8 is available in list or not, by using &lt;strong&gt;in&lt;/strong&gt; and &lt;strong&gt;not in &lt;/strong&gt;operators. &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;x = 4
         y = 8
         list = [1, 2, 3, 4, 5 ];
         if ( x in list ):
            print(&quot;Line 1 - x is available in the given list&quot;)
         else:
            print(&quot;Line 1 - x is not available in the given list&quot;)
         if ( y not in list ):
            print(&quot;Line 2 - y is not available in the given list&quot;)
         else:
            print(&quot;Line 2 - y is available in the given list&quot;)&lt;/pre&gt;
               &lt;ul&gt;
                  &lt;li&gt;Declare the value for x and y &lt;/li&gt;
                  &lt;li&gt;Declare the value of list&lt;/li&gt;
                  &lt;li&gt;Use the &quot;in&quot; operator in code with if statement to check the value of x existing in the list and print the result accordingly&lt;/li&gt;
                  &lt;li&gt;Use the &quot;not in&quot; operator in code with if statement to check the value of y exist in the list and print the result accordingly&lt;/li&gt;
                  &lt;li&gt;Run the code- When the code run it gives the desired output&lt;/li&gt;
               &lt;/ul&gt;
               &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Identity Operators&lt;/h2&gt;
               &lt;p&gt;To compare the memory location of two objects, Identity Operators are used. The two identify operators used in Python are (is, is not). &lt;/p&gt;
               &lt;ul&gt;
                  &lt;li&gt;Operator is: It returns true if two variables point the same object and false otherwise&lt;/li&gt;
                  &lt;li&gt;Operator is not: It returns false if two variables point the same object and true otherwise&lt;/li&gt;
               &lt;/ul&gt;
               &lt;p&gt;Following operands are in decreasing order of precedence.&lt;/p&gt;
               
               &lt;p&gt;Operators in the same box evaluate left to right &lt;/p&gt;
               &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                  &lt;tbody&gt;
                     &lt;tr&gt;
                        &lt;th&gt;Operators (Decreasing order of precedence) &lt;/th&gt;
                        &lt;th&gt;Meaning&lt;/th&gt;
                     &lt;/tr&gt;
                     &lt;tr&gt;
                        &lt;td&gt;**&lt;/td&gt;
                        &lt;td&gt;Exponent&lt;/td&gt;
                     &lt;/tr&gt;
                     &lt;tr&gt;
                        &lt;td&gt;*, /, //, %&lt;/td&gt;
                        &lt;td&gt;Multiplication, Division, Floor division, Modulus&lt;/td&gt;
                     &lt;/tr&gt;
                     &lt;tr&gt;
                        &lt;td&gt;+, -&lt;/td&gt;
                        &lt;td&gt;Addition, Subtraction&lt;/td&gt;
                     &lt;/tr&gt;
                     &lt;tr&gt;
                        &lt;td&gt;&amp;lt;= &amp;lt; &amp;gt; &amp;gt;=&lt;/td&gt;
                        &lt;td&gt;Comparison operators&lt;/td&gt;
                     &lt;/tr&gt;
                     &lt;tr&gt;
                        &lt;td&gt;= %= /= //= -= += *= **=&lt;/td&gt;
                        &lt;td&gt;Assignment Operators&lt;/td&gt;
                     &lt;/tr&gt;
                     &lt;tr&gt;
                        &lt;td&gt;is is not&lt;/td&gt;
                        &lt;td&gt;Identity operators&lt;/td&gt;
                     &lt;/tr&gt;
                     &lt;tr&gt;
                        &lt;td&gt;in not in&lt;/td&gt;
                        &lt;td&gt;Membership operators&lt;/td&gt;
                     &lt;/tr&gt;
                     &lt;tr&gt;
                        &lt;td&gt;not or and&lt;/td&gt;
                        &lt;td&gt;Logical operators&lt;/td&gt;
                     &lt;/tr&gt;
                  &lt;/tbody&gt;
               &lt;/table&gt;
               &lt;p&gt;&lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;x = 20
         y = 20
         if ( x is y ): 
             print(&quot;x &amp;amp; y  SAME identity&quot;)
         y=30
         if ( x is not y ):
             print(&quot;x &amp;amp; y have DIFFERENT identity&quot;)&lt;/pre&gt;
               &lt;ul&gt;
                  &lt;li&gt;Declare the value for variable x and y&lt;/li&gt;
                  &lt;li&gt;Use the operator &quot;is&quot; in code to check if value of x is same as y&lt;/li&gt;
                  &lt;li&gt;Next we use the operator &quot;is not&quot; in code if value of x is not same as y&lt;/li&gt;
                  &lt;li&gt;Run the code- The output of the result is as expected&lt;/li&gt;
               &lt;/ul&gt;
               &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Operator precedence&lt;/h2&gt;
               &lt;p&gt;The operator precedence determines which operators need to be evaluated first. To avoid ambiguity in values, precedence operators are necessary. Just like in normal multiplication method, multiplication has a higher precedence than addition. For example in 3+ 4*5, the answer is 23, to change the order of precedence we use a parentheses (3+4)*5, now the answer is 35. Precedence operator used in Python are (unary + - ~, **, * / %, + - , &amp;amp;) etc. &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;v = 4
         w = 5
         x = 8
         y = 2
         z = 0
         z = (v+w) * x / y;   
         print(&quot;Value of (v+w) * x/ y is &quot;,  z)&lt;/pre&gt;
               &lt;ul&gt;
                  &lt;li&gt;Declare the value of variable v,w…z&lt;/li&gt;
                  &lt;li&gt;Now apply the formula and run the code&lt;/li&gt;
                  &lt;li&gt;The code will execute and calculate the variable with higher precedence and will give the output&lt;/li&gt;
               &lt;/ul&gt;
               &lt;h3&gt;Python 2 Example&lt;/h3&gt;
               &lt;p&gt;Above examples are Python 3 codes, if you want to use Python 2, please consider following codes &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;#Arithmetic Operators
         x= 4	
         y= 5
         print x + y
         
         #Comparison Operators
         x = 4
         y = 5
         print('x &amp;gt; y  is',x&amp;gt;y)
         
         #Assignment Operators
         num1 = 4
         num2 = 5
         print (&quot;Line 1 - Value of num1 : &quot;, num1)
         print (&quot;Line 2 - Value of num2 : &quot;, num2)
         
         #compound assignment operator
         num1 = 4
         num2 = 5
         res = num1 + num2
         res += num1
         print (&quot;Line 1 - Result of + is &quot;, res)
         
         #Logical Operators
         a = True
         b = False
         print('a and b is',a and b)
         print('a or b is',a or b)
         print('not a is',not a)
         
         #Membership Operators
         x = 4
         y = 8
         list = [1, 2, 3, 4, 5 ];
         if ( x in list ):
            print &quot;Line 1 - x is available in the given list&quot;
         else:
            print &quot;Line 1 - x is not available in the given list&quot;
         if ( y not in list ):
            print &quot;Line 2 - y is not available in the given list&quot;
         else:
            print &quot;Line 2 - y is available in the given list&quot;
         
         #Identity Operators
         x = 20
         y = 20
         if ( x is y ):
             print &quot;x &amp;amp; y  SAME identity&quot;
         y=30
         if ( x is not y ):
             print &quot;x &amp;amp; y have DIFFERENT identity&quot;
         
         #Operator precedence
         v = 4
         w = 5
         x = 8
         y = 2
         z = 0
         z = (v+w) * x / y;   
         print &quot;Value of (v+w) * x/ y is &quot;,  z
         &lt;/pre&gt;
               &lt;h3&gt;Summary:&lt;/h3&gt;
               &lt;p&gt;Operators in a programming language are used to perform various operations on values and variables. In Python, you can use operators like &lt;/p&gt;
               &lt;ul&gt;
                  &lt;li&gt;There are various methods for arithmetic calculation in Python as you can use the eval function, declare variable &amp;amp; calculate, or call functions&lt;/li&gt;
                  &lt;li&gt;Comparison operators often referred as relational operators are used to compare the values on either side of them and determine the relation between them&lt;/li&gt;
                  &lt;li&gt;Python assignment operators are simply to assign the value to variable&lt;/li&gt;
                  &lt;li&gt;Python also allows you to use a compound assignment operator, in a complicated arithmetic calculation, where you can assign the result of one operand to the other&lt;/li&gt;
                  &lt;li&gt;For AND operator – It returns TRUE if both the operands (right side and left side) are true&lt;/li&gt;
                  &lt;li&gt;For OR operator- It returns TRUE if either of the operand (right side or left side) is true&lt;/li&gt;
                  &lt;li&gt;For NOT operator- returns TRUE if operand is false&lt;/li&gt;
                  &lt;li&gt;There are two membership operators that are used in Python. (in, not in). &lt;/li&gt;
                  &lt;li&gt;It gives the result based on the variable present in specified sequence or string &lt;/li&gt;
                  &lt;li&gt;The two identify operators used in Python are (is, is not)&lt;/li&gt;
                  &lt;li&gt;It returns true if two variables point the same object and false otherwise&lt;/li&gt;
                  &lt;li&gt;
                     &lt;div&gt;Precedence operator can be useful when you have to set priority for which calculation need to be done first in a complex calculation. &lt;/div&gt;
                  &lt;/li&gt;
               &lt;/ul&gt;
              
            &lt;/div&gt;
            
         &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonDictionary&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFunctions&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Operators: Arithmetic, Logical, Comparison, Assignment, Bitwise &amp;amp; Precedence Operators are used to perform operations on values and variables. Operators can manipulate individual items and returns a result. The data items are referred as operands or arguments. Operators are either represented by keywords or special characters. For example, for identity operators we use keyword &quot;is&quot; and &quot;is not&quot;. In this tutorial, we going to learn various operators Arithmetic Operators Comparison Operators Python Assignment Operators Logical Operators or Bitwise Operators Membership Operators Identity Operators Operator precedence Arithmetic Operators Arithmetic Operators perform various arithmetic calculations like addition, subtraction, multiplication, division, %modulus, exponent, etc. There are various methods for arithmetic calculation in Python like you can use the eval function, declare variable &amp;amp; calculate, or call functions. Example: For arithmetic operators we will take simple example of addition where we will add two-digit 4+5=9 x= 4 y= 5 print(x + y) Similarly, you can use other arithmetic operators like for multiplication(*), division (/), substraction (-), etc. Comparison Operators These operators compare the values on either side of the operand and determine the relation between them. It is also referred as relational operators. Various comparison operators are ( ==, != , &amp;lt;&amp;gt;, &amp;gt;,&amp;lt;=, etc) Example: For comparison operators we will compare the value of x to the value of y and print the result in true or false. Here in example, our value of x = 4 which is smaller than y = 5, so when we print the value as x&amp;gt;y, it actually compares the value of x to y and since it is not correct, it returns false. x = 4 y = 5 print(('x &amp;gt; y is',x&amp;gt;y)) Likewise, you can try other comparison operators (x &amp;lt; y, x==y, x!=y, etc.) Python Assignment Operators Python assignment operators are used for assigning the value of the right operand to the left operand. Various assignment operators used in Python are (+=, - = , *=, /= , etc.) Example: Python assignment operators is simply to assign the value, for example num1 = 4 num2 = 5 print((&quot;Line 1 - Value of num1 : &quot;, num1)) print((&quot;Line 2 - Value of num2 : &quot;, num2)) Example of compound assignment operator We can also use a compound assignment operator, where you can add, subtract, multiply right operand to left and assign addition (or any other arithmetic function) to the left operand. Step 1: Assign value to num1 and num2 Step 2: Add value of num1 and num2 (4+5=9) Step 3: To this result add num1 to the output of Step 2 ( 9+4) Step 4: It will print the final result as 13 num1 = 4 num2 = 5 res = num1 + num2 res += num1 print((&quot;Line 1 - Result of + is &quot;, res)) Logical Operators Logical operators in Python are used for conditional statements are true or false. Logical operators in Python are AND, OR and NOT. For logical operators following condition are applied. For AND operator – It returns TRUE if both the operands (right side and left side) are true For OR operator- It returns TRUE if either of the operand (right side or left side) is true For NOT operator- returns TRUE if operand is false Example: Here in example we get true or false based on the value of a and b a = True b = False print(('a and b is',a and b)) print(('a or b is',a or b)) print(('not a is',not a)) Membership Operators These operators test for membership in a sequence such as lists, strings or tuples. There are two membership operators that are used in Python. (in, not in). It gives the result based on the variable present in specified sequence or string Example: For example here we check whether the value of x=4 and value of y=8 is available in list or not, by using in and not in operators. x = 4 y = 8 list = [1, 2, 3, 4, 5 ]; if ( x in list ): print(&quot;Line 1 - x is available in the given list&quot;) else: print(&quot;Line 1 - x is not available in the given list&quot;) if ( y not in list ): print(&quot;Line 2 - y is not available in the given list&quot;) else: print(&quot;Line 2 - y is available in the given list&quot;) Declare the value for x and y Declare the value of list Use the &quot;in&quot; operator in code with if statement to check the value of x existing in the list and print the result accordingly Use the &quot;not in&quot; operator in code with if statement to check the value of y exist in the list and print the result accordingly Run the code- When the code run it gives the desired output Identity Operators To compare the memory location of two objects, Identity Operators are used. The two identify operators used in Python are (is, is not). Operator is: It returns true if two variables point the same object and false otherwise Operator is not: It returns false if two variables point the same object and true otherwise Following operands are in decreasing order of precedence. Operators in the same box evaluate left to right Operators (Decreasing order of precedence) Meaning ** Exponent *, /, //, % Multiplication, Division, Floor division, Modulus +, - Addition, Subtraction &amp;lt;= &amp;lt; &amp;gt; &amp;gt;= Comparison operators = %= /= //= -= += *= **= Assignment Operators is is not Identity operators in not in Membership operators not or and Logical operators Example: x = 20 y = 20 if ( x is y ): print(&quot;x &amp;amp; y SAME identity&quot;) y=30 if ( x is not y ): print(&quot;x &amp;amp; y have DIFFERENT identity&quot;) Declare the value for variable x and y Use the operator &quot;is&quot; in code to check if value of x is same as y Next we use the operator &quot;is not&quot; in code if value of x is not same as y Run the code- The output of the result is as expected Operator precedence The operator precedence determines which operators need to be evaluated first. To avoid ambiguity in values, precedence operators are necessary. Just like in normal multiplication method, multiplication has a higher precedence than addition. For example in 3+ 4*5, the answer is 23, to change the order of precedence we use a parentheses (3+4)*5, now the answer is 35. Precedence operator used in Python are (unary + - ~, **, * / %, + - , &amp;amp;) etc. v = 4 w = 5 x = 8 y = 2 z = 0 z = (v+w) * x / y; print(&quot;Value of (v+w) * x/ y is &quot;, z) Declare the value of variable v,w…z Now apply the formula and run the code The code will execute and calculate the variable with higher precedence and will give the output Python 2 Example Above examples are Python 3 codes, if you want to use Python 2, please consider following codes #Arithmetic Operators x= 4 y= 5 print x + y #Comparison Operators x = 4 y = 5 print('x &amp;gt; y is',x&amp;gt;y) #Assignment Operators num1 = 4 num2 = 5 print (&quot;Line 1 - Value of num1 : &quot;, num1) print (&quot;Line 2 - Value of num2 : &quot;, num2) #compound assignment operator num1 = 4 num2 = 5 res = num1 + num2 res += num1 print (&quot;Line 1 - Result of + is &quot;, res) #Logical Operators a = True b = False print('a and b is',a and b) print('a or b is',a or b) print('not a is',not a) #Membership Operators x = 4 y = 8 list = [1, 2, 3, 4, 5 ]; if ( x in list ): print &quot;Line 1 - x is available in the given list&quot; else: print &quot;Line 1 - x is not available in the given list&quot; if ( y not in list ): print &quot;Line 2 - y is not available in the given list&quot; else: print &quot;Line 2 - y is available in the given list&quot; #Identity Operators x = 20 y = 20 if ( x is y ): print &quot;x &amp;amp; y SAME identity&quot; y=30 if ( x is not y ): print &quot;x &amp;amp; y have DIFFERENT identity&quot; #Operator precedence v = 4 w = 5 x = 8 y = 2 z = 0 z = (v+w) * x / y; print &quot;Value of (v+w) * x/ y is &quot;, z Summary: Operators in a programming language are used to perform various operations on values and variables. In Python, you can use operators like There are various methods for arithmetic calculation in Python as you can use the eval function, declare variable &amp;amp; calculate, or call functions Comparison operators often referred as relational operators are used to compare the values on either side of them and determine the relation between them Python assignment operators are simply to assign the value to variable Python also allows you to use a compound assignment operator, in a complicated arithmetic calculation, where you can assign the result of one operand to the other For AND operator – It returns TRUE if both the operands (right side and left side) are true For OR operator- It returns TRUE if either of the operand (right side or left side) is true For NOT operator- returns TRUE if operand is false There are two membership operators that are used in Python. (in, not in). It gives the result based on the variable present in specified sequence or string The two identify operators used in Python are (is, is not) It returns true if two variables point the same object and false otherwise Precedence operator can be useful when you have to set priority for which calculation need to be done first in a complex calculation. Previous Lesson Next Lesson</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">12. Function in Python</title><link href="http://localhost:4000/blog/PyhtonFunctions" rel="alternate" type="text/html" title="12. Function in Python" /><published>2019-09-28T00:00:00+05:30</published><updated>2019-09-28T00:00:00+05:30</updated><id>http://localhost:4000/blog/PyhtonFunctions</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonFunctions">&lt;section class=&quot;Ptutorial12&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Functions Examples: Call, Indentation, Arguments &amp;amp; Return Values &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;h3&gt;What is a Function in Python?&lt;/h3&gt;
            &lt;p&gt;A Functions in Python are used to utilize the code in more than one place in a program, sometimes also
                called method or procedures. Python provides you many inbuilt functions like print(), but it also gives
                freedom to create your own functions. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to define and call a function in Python &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Significance of Indentation (Space) in Python &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;How Function Return Value? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Arguments in Functions &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to define and call a function in Python&lt;/h2&gt;
            &lt;p&gt;Function in Python is defined by the&lt;strong&gt; &quot;def &quot; &lt;/strong&gt;statement followed by the function name and
                parentheses ( () ) &lt;/p&gt;
            &lt;p&gt;Example: &lt;/p&gt;
            &lt;p&gt;Let us define a function by using the command &quot; def func1():&quot; and call the function. The output of the
                function will be &lt;strong&gt;&quot;I am learning Python function&quot;.&lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;The function &lt;strong&gt;print func1()&lt;/strong&gt; calls our def func1(): and print the command &quot; &lt;strong&gt;I am
                    learning Python function None.&lt;/strong&gt;&quot; &lt;/p&gt;
            &lt;p&gt;There are set of rules in Python to define a function. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Any args or input parameters should be placed within these parentheses&lt;/li&gt;
                &lt;li&gt;The function first statement can be an optional statement- docstring or the documentation string of
                    the function&lt;/li&gt;
                &lt;li&gt;The code within every function starts with a colon (:) and should be indented (space)&lt;/li&gt;
                &lt;li&gt;The statement return (expression) exits a function, optionally passing back a value to the caller. A
                    return statement with no args is the same as return None.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Significance of Indentation (Space) in Python&lt;/h2&gt;
            &lt;p&gt;Before we get familiarize with Python functions, it is important that we understand the indentation rule
                to declare Python functions and these rules are applicable to other elements of Python as well like
                declaring conditions, loops or variable. &lt;/p&gt;
            &lt;p&gt;Python follows a particular style of indentation to define the code, since &lt;strong&gt;Python functions don't
                    have any explicit begin or end like curly braces to indicate the start and stop for the function,
                    they have to rely on this indentation&lt;/strong&gt;. Here we take a simple example with &quot;print&quot; command.
                When we write &quot;print&quot; function right below the def func 1 (): It will show an &quot;&lt;strong&gt;indentation
                    error: expected an indented block&lt;/strong&gt;&quot;. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.2.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Now, when you add the indent (space) in front of &quot;print&quot; function, it should print as expected. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.3.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;At least, one indent is enough to make your code work successfully. But as a best practice it is
                    advisable to leave about 3-4 indent to call your function&lt;/strong&gt;.&lt;/p&gt;
            &lt;p&gt;It is also necessary that while declaring indentation, you have to &lt;strong&gt;maintain the same indent for
                    the rest of your code&lt;/strong&gt;. For example, in below screen shot when we call another statement
                &quot;still in func1&quot; and when it is not declared right below the first print statement it will show an
                indentation error &lt;strong&gt;&quot;unindent does not match any other indentation level.&quot;&lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.4.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Now, when we apply same indentation for both the statements and align them in the same line, it gives the
                expected output. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;How Function Return Value?&lt;/h2&gt;
            &lt;p&gt;Return command in Python specifies what value to give back to the caller of the function. &lt;/p&gt;
            &lt;p&gt;Let's understand this with the following example&lt;/p&gt;
            
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Here - we see when function is not &quot;return&quot;. For example, we want the square of
                4, and it should give answer &quot;16&quot; when the code is executed. Which it gives when we simply use &quot;print
                x*x&quot; code, but when you call function &quot;print square&quot; it gives &quot;None&quot; as an output. This is because when
                you call the function, recursion does not happen and fall off the end of the function. Python returns
                &quot;None&quot; for failing off the end of the function. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; To make this clearer we replace the print command with assignment command. Let's
                check the output. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.7.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.7.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;When you run the command &quot;print square (4)&quot; it actually returns the value of the object since we don't
                have any specific function to run over here it returns &quot;None&quot;. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3) &lt;/strong&gt;Now, here we will see how to retrieve the output using &quot;return&quot; command. When
                you use the &quot;return&quot; function and execute the code, it will give the output &quot;16.&quot; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.8.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.8.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; Functions in Python are themselves an object, and an object has some value. We
                will here see how Python treats an object. When you run the command &quot;print square&quot; it returns the value
                of the object. Since we have not passed any argument, we don't have any specific function to run over
                here it returns a default value (0x021B2D30) which is the location of the object. &lt;strong&gt;In practical
                    Python program, you probably won't ever need to do this.&lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.9.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.9.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Arguments in Functions&lt;/h2&gt;
            &lt;p&gt;The argument is a value that is passed to the function when it's called. &lt;/p&gt;
            &lt;p&gt;In other words on the calling side, it is an argument and on the function side it is a parameter. &lt;/p&gt;
            &lt;p&gt;Let see how Python Args works - &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Arguments are declared in the function definition. While calling the function,
                you can pass the values for that args as shown below &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.10.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.10.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; To declare a default value of an argument, assign it a value at function
                definition. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.11.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.11.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Example: x has no default values. Default values of y=0. When we supply only one argument while calling
                multiply function, Python assigns the supplied value to x while keeping the value of y=0. Hence the
                multiply of x*y=0 &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.12.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.12.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3) &lt;/strong&gt;This time we will change the value to y=2 instead of the default value y=0, and
                it will return the output as (4x2)=8. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.13.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.13.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 4) &lt;/strong&gt;You can also change the order in which the arguments can be passed in Python.
                Here we have reversed the order of the value x and y to x=4 and y=2. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.14.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.14.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 5)&lt;/strong&gt; Multiple Arguments can also be passed as an array. Here in the example we call
                the multiple args (1,2,3,4,5) by calling the (*args) function. &lt;/p&gt;
            &lt;p&gt;Example: We declared multiple args as number (1,2,3,4,5) when we call the (*args) function; it prints out
                the output as (1,2,3,4,5) &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.15.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.15.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;In Python 2.7. &lt;strong&gt;function overloading&lt;/strong&gt; is not supported in Python. Function
                    Overloading is the ability to create multiple methods of the same name with a different
                    implementation. Function Overloading is fully supported in Python 3 &lt;/li&gt;
                &lt;li&gt;There is quite a confusion between methods and functions. Methods in Python are associated with
                    object instances while function are not. When Python calls a method, it binds the first parameter of
                    that call to the appropriate object reference. In simple words, a standalone function in Python is a
                    &quot;function&quot;, whereas a function that is an attribute of a class or an instance is a &quot;method&quot;.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h3&gt;Here is the complete Python 3 code&lt;/h3&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;#define a function
         def func1():
            print (&quot;I am learning Python function&quot;)
            print (&quot;still in func1&quot;)
            
         func1()
         
         def square(x):
               return x*x
         print(square(4))
         
         def multiply(x,y=0):
             print(&quot;value of x=&quot;,x)
             print(&quot;value of y=&quot;,y)
             
             return x*y
           
         print(multiply(y=2,x=4))
         &lt;/pre&gt;
            &lt;h3&gt;Here is the complete Python 2 code&lt;/h3&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;#define a function
         def func1():
            print &quot; I am learning Python function&quot;
            print &quot; still in func1&quot;
            
         func1()
         
         def square(x):
               return x*x
         print square(4)
         
         def multiply(x,y=0):
             print&quot;value of x=&quot;,x
             print&quot;value of y=&quot;,y
             
             return x*y
           
         print multiply(y=2,x=4)
         &lt;/pre&gt;
            &lt;h3&gt;Summary:&lt;/h3&gt;
            &lt;p&gt;Function in Python is a piece of reusable code that is used to perform single, related action. In this
                article, we will see &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Function defined by the &lt;strong&gt;def&lt;/strong&gt; statement&lt;/li&gt;
                &lt;li&gt;The code block within every function starts with a colon (:) and should be indented (space)&lt;/li&gt;
                &lt;li&gt;Any arguments or input parameters should be placed within these parentheses, etc.&lt;/li&gt;
                &lt;li&gt;At least one indent should be left before the code after declaring function&lt;/li&gt;
                &lt;li&gt;Same indent style should be maintained throughout the code within def function&lt;/li&gt;
                &lt;li&gt;For best practices three or four indents are considered best before the statement&lt;/li&gt;
                &lt;li&gt;You can use the &quot;return&quot; command to return values to the function call. &lt;/li&gt;
                &lt;li&gt;Python will print a random value like (0x021B2D30) when the argument is not supplied to the calling
                    function. Example &quot;print function.&quot; &lt;/li&gt;
                &lt;li&gt;On the calling side, it is an argument and on the function side it is a parameter&lt;/li&gt;
                &lt;li&gt;Default value in argument - When we supply only one argument while calling multiply function or any
                    other function, Python assigns the other argument by default&lt;/li&gt;
                &lt;li&gt;Python enables you to reverse the order of the argument as well &lt;/li&gt;
            &lt;/ul&gt;
            
           
        &lt;/div&gt;
        
    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonDictionary&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFunctions&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Functions Examples: Call, Indentation, Arguments &amp;amp; Return Values What is a Function in Python? A Functions in Python are used to utilize the code in more than one place in a program, sometimes also called method or procedures. Python provides you many inbuilt functions like print(), but it also gives freedom to create your own functions. In this tutorial, we will learn How to define and call a function in Python Significance of Indentation (Space) in Python How Function Return Value? Arguments in Functions How to define and call a function in Python Function in Python is defined by the &quot;def &quot; statement followed by the function name and parentheses ( () ) Example: Let us define a function by using the command &quot; def func1():&quot; and call the function. The output of the function will be &quot;I am learning Python function&quot;. The function print func1() calls our def func1(): and print the command &quot; I am learning Python function None.&quot; There are set of rules in Python to define a function. Any args or input parameters should be placed within these parentheses The function first statement can be an optional statement- docstring or the documentation string of the function The code within every function starts with a colon (:) and should be indented (space) The statement return (expression) exits a function, optionally passing back a value to the caller. A return statement with no args is the same as return None. Significance of Indentation (Space) in Python Before we get familiarize with Python functions, it is important that we understand the indentation rule to declare Python functions and these rules are applicable to other elements of Python as well like declaring conditions, loops or variable. Python follows a particular style of indentation to define the code, since Python functions don't have any explicit begin or end like curly braces to indicate the start and stop for the function, they have to rely on this indentation. Here we take a simple example with &quot;print&quot; command. When we write &quot;print&quot; function right below the def func 1 (): It will show an &quot;indentation error: expected an indented block&quot;. Now, when you add the indent (space) in front of &quot;print&quot; function, it should print as expected. At least, one indent is enough to make your code work successfully. But as a best practice it is advisable to leave about 3-4 indent to call your function. It is also necessary that while declaring indentation, you have to maintain the same indent for the rest of your code. For example, in below screen shot when we call another statement &quot;still in func1&quot; and when it is not declared right below the first print statement it will show an indentation error &quot;unindent does not match any other indentation level.&quot; Now, when we apply same indentation for both the statements and align them in the same line, it gives the expected output. How Function Return Value? Return command in Python specifies what value to give back to the caller of the function. Let's understand this with the following example Step 1) Here - we see when function is not &quot;return&quot;. For example, we want the square of 4, and it should give answer &quot;16&quot; when the code is executed. Which it gives when we simply use &quot;print x*x&quot; code, but when you call function &quot;print square&quot; it gives &quot;None&quot; as an output. This is because when you call the function, recursion does not happen and fall off the end of the function. Python returns &quot;None&quot; for failing off the end of the function. Step 2) To make this clearer we replace the print command with assignment command. Let's check the output. When you run the command &quot;print square (4)&quot; it actually returns the value of the object since we don't have any specific function to run over here it returns &quot;None&quot;. Step 3) Now, here we will see how to retrieve the output using &quot;return&quot; command. When you use the &quot;return&quot; function and execute the code, it will give the output &quot;16.&quot; Step 4) Functions in Python are themselves an object, and an object has some value. We will here see how Python treats an object. When you run the command &quot;print square&quot; it returns the value of the object. Since we have not passed any argument, we don't have any specific function to run over here it returns a default value (0x021B2D30) which is the location of the object. In practical Python program, you probably won't ever need to do this. Arguments in Functions The argument is a value that is passed to the function when it's called. In other words on the calling side, it is an argument and on the function side it is a parameter. Let see how Python Args works - Step 1) Arguments are declared in the function definition. While calling the function, you can pass the values for that args as shown below Step 2) To declare a default value of an argument, assign it a value at function definition. Example: x has no default values. Default values of y=0. When we supply only one argument while calling multiply function, Python assigns the supplied value to x while keeping the value of y=0. Hence the multiply of x*y=0 Step 3) This time we will change the value to y=2 instead of the default value y=0, and it will return the output as (4x2)=8. Step 4) You can also change the order in which the arguments can be passed in Python. Here we have reversed the order of the value x and y to x=4 and y=2. Step 5) Multiple Arguments can also be passed as an array. Here in the example we call the multiple args (1,2,3,4,5) by calling the (*args) function. Example: We declared multiple args as number (1,2,3,4,5) when we call the (*args) function; it prints out the output as (1,2,3,4,5) Tips: In Python 2.7. function overloading is not supported in Python. Function Overloading is the ability to create multiple methods of the same name with a different implementation. Function Overloading is fully supported in Python 3 There is quite a confusion between methods and functions. Methods in Python are associated with object instances while function are not. When Python calls a method, it binds the first parameter of that call to the appropriate object reference. In simple words, a standalone function in Python is a &quot;function&quot;, whereas a function that is an attribute of a class or an instance is a &quot;method&quot;. Here is the complete Python 3 code #define a function def func1(): print (&quot;I am learning Python function&quot;) print (&quot;still in func1&quot;) func1() def square(x): return x*x print(square(4)) def multiply(x,y=0): print(&quot;value of x=&quot;,x) print(&quot;value of y=&quot;,y) return x*y print(multiply(y=2,x=4)) Here is the complete Python 2 code #define a function def func1(): print &quot; I am learning Python function&quot; print &quot; still in func1&quot; func1() def square(x): return x*x print square(4) def multiply(x,y=0): print&quot;value of x=&quot;,x print&quot;value of y=&quot;,y return x*y print multiply(y=2,x=4) Summary: Function in Python is a piece of reusable code that is used to perform single, related action. In this article, we will see Function defined by the def statement The code block within every function starts with a colon (:) and should be indented (space) Any arguments or input parameters should be placed within these parentheses, etc. At least one indent should be left before the code after declaring function Same indent style should be maintained throughout the code within def function For best practices three or four indents are considered best before the statement You can use the &quot;return&quot; command to return values to the function call. Python will print a random value like (0x021B2D30) when the argument is not supplied to the calling function. Example &quot;print function.&quot; On the calling side, it is an argument and on the function side it is a parameter Default value in argument - When we supply only one argument while calling multiply function or any other function, Python assigns the other argument by default Python enables you to reverse the order of the argument as well</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">8. String in Python</title><link href="http://localhost:4000/blog/PyhtonStrings" rel="alternate" type="text/html" title="8. String in Python" /><published>2019-09-27T00:00:00+05:30</published><updated>2019-09-27T00:00:00+05:30</updated><id>http://localhost:4000/blog/PyhtonStrings</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonStrings">&lt;section class=&quot;Ptutorial8&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Strings: Replace, Join, Split, Reverse, Uppercase &amp;amp; Lowercase &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;
           &lt;p&gt;In Python everything is object and string are an object too. Python string can be created simply by
                enclosing characters in the double quote. &lt;/p&gt;
            &lt;p&gt;For example: &lt;/p&gt;
            &lt;p&gt;var = &lt;strong&gt;&quot;Hello World!&quot; &lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn - &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Accessing Values in Strings &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Various String Operators &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Some more examples &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Python String replace() Method &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Changing upper and lower case strings &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Using &quot;join&quot; function for the string &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Reversing String &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Split Strings &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;Accessing Values in Strings&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Python does not support a character type&lt;/strong&gt;, these are treated as strings of length one,
                also considered as substring. &lt;/p&gt;
            &lt;p&gt;We use square brackets for slicing along with the index or indices to obtain a substring. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                var1 = &quot;Girish99!&quot;
                var2 = &quot;Software Testing&quot;
                print (&quot;var1[0]:&quot;,var1[0])
                print (&quot;var2[1:5]:&quot;,var2[1:5])
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Various String Operators&lt;/h2&gt;
            &lt;p&gt;There are various string operators that can be used in different ways like concatenating different
                string. &lt;/p&gt;
            &lt;p&gt;Suppose if a=Girish and b=99 then a+b= &quot;Girish99&quot;. Similarly, if you are using a*2, it will &quot;GirishGirish&quot;.
                Likewise, you can use other operators in string.&lt;/p&gt;
            &lt;div&gt;
                &lt;table class=&quot;table1 table-striped table-bordered&quot; &gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th width=&quot;10%&quot;&gt;&lt;p&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
                            &lt;th width=&quot;25%&quot;&gt;&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
                            &lt;th width=&quot;40%&quot;&gt;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
                            &lt;th&gt; &lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[]&lt;/td&gt;
                            &lt;td&gt;Slice- it gives the letter from the given index&lt;/td&gt;
                            &lt;td&gt;a[1] will give &quot;u&quot; from the word Girish as such ( 0=G, 1=u, 2=r and 3=u)&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot;
                                    print x[1]
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[ : ]&lt;/td&gt;
                            &lt;td&gt;Range slice-it gives the characters from the given range&lt;/td&gt;
                            &lt;td&gt;x [1:3] it will give &quot;ur&quot; from the word Girish. Remember it will not consider 0 which is
                                G, it will consider word after that is ur. &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    print x[1:3]
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;in&lt;/td&gt;
                            &lt;td&gt;Membership-returns true if a letter exist in the given string&lt;/td&gt;
                            &lt;td&gt;u is present in word Girish and hence it will give 1 (True)&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    print &quot;u&quot; in x
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;not in&lt;/td&gt;
                            &lt;td&gt;Membership-returns true if a letter exist is not in the given string&lt;/td&gt;
                            &lt;td&gt;l not present in word Girish and hence it will give 1&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    print &quot;l&quot; not in x
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;r/R&lt;/td&gt;
                            &lt;td&gt;Raw string suppresses actual meaning of escape characters. &lt;/td&gt;
                            &lt;td&gt;Print r'\n' prints \n and print R'/n' prints \n&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;% - Used for string format&lt;/td&gt;
                            &lt;td&gt;%r - It insert the canonical string representation of the object (i.e., repr(o)) %s- It
                                insert the presentation string representation of the object (i.e., str(o)) %d- it will
                                format a number for display &lt;/td&gt;
                            &lt;td&gt; The output of this code will be &quot;Girish 99&quot;. &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    name = 'Girish'
                                    number = 99
                                    print'%s %d' % (name,number)	
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;+&lt;/td&gt;
                            &lt;td&gt;It concatenates 2 strings&lt;/td&gt;
                            &lt;td&gt;It concatenate strings and gives the result&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    y=&quot;99&quot; 
                                    print x+y
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;*&lt;/td&gt;
                            &lt;td&gt;Repeat &lt;/td&gt;
                            &lt;td&gt;It prints the character twice.&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    y=&quot;99&quot; 
                                    print x*2
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Some more examples&lt;/h2&gt;
            &lt;p&gt;You can update Python String by re-assigning a variable to another string. The new value can be related
                to previous value or to a completely different string all together. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                x = &quot;Hello World!&quot;
                print(x[:6]) 
                print(x[0:6] + &quot;Girish99&quot;)
            &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : - Slice:6 or 0:6 has the same effect &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Python String replace() Method&lt;/h2&gt;
            &lt;p&gt;The method replace() returns a copy of the string in which the values of old string have been replaced
                with the new value. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                oldstring = 'I like Girish99' 
                newstring = oldstring.replace('like', 'love')
                print(newstring)
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Changing upper and lower case strings&lt;/h2&gt;
            &lt;p&gt;In Python, you can even change the string to upper case or lower case.&lt;/p&gt;
            
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                string=&quot;python at Girish99&quot;
                print(string.upper())
            &lt;/pre&gt;
            &lt;p&gt;Likewise, you can also do for other function as well like capitalize &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                string=&quot;python at Girish99&quot;		
                print(string.capitalize())
            &lt;/pre&gt;
            &lt;p&gt;You can also convert your string to lower case &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                string=&quot;PYTHON AT Girish99&quot;
                print(string.lower())
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Using &quot;join&quot; function for the string&lt;/h2&gt;
            &lt;p&gt;The join function is a more flexible way for concatenating string. With join function, you can add any
                character into the string. &lt;/p&gt;
            &lt;p&gt;For example, if you want to add a colon (:) after every character in the string &quot;Python&quot; you can use the
                following code. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                print(&quot;:&quot;.join(&quot;Python&quot;))
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Reversing String&lt;/h2&gt;
            &lt;p&gt;By using the reverse function, you can reverse the string. For example, if we have string &quot;12345&quot; and
                then if you apply the code for the reverse function as shown below. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                string=&quot;12345&quot;		
                print(''.join(reversed(string)))
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Split Strings&lt;/h2&gt;
            &lt;p&gt;Split strings is another function that can be applied in Python let see for string &quot;Girish99 career
                Girish99&quot;. First here we will split the string by using the command word.split and get the result. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                word=&quot;Girish99 career Girish99&quot;		
                print(word.split(' '))
            &lt;/pre&gt;
            &lt;p&gt;To understand this better we will see one more example of split, instead of space (' ') we will replace
                it with ('r') and it will split the string wherever 'r' is mentioned in the string &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                word=&quot;Girish99 career Girish99&quot;		
                print(word.split('r'))
            &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;In Python, Strings are immutable. &lt;/strong&gt;&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Consider the following code&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                x = &quot;Girish99&quot;
                x.replace(&quot;Girish99&quot;,&quot;Python&quot;)
                print(x)
            &lt;/pre&gt;
            &lt;p&gt;will still return Girish99. This is because x.replace(&quot;Girish99&quot;,&quot;Python&quot;) returns &lt;strong&gt;a copy of
                &lt;/strong&gt;&lt;strong&gt;X with replacements made&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;You will need to use the following code to observe changes&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                x = &quot;Girish99&quot;
                x = x.replace(&quot;Girish99&quot;,&quot;Python&quot;)
                print(x)
            &lt;/pre&gt;
            &lt;p&gt;Above codes are Python 3 examples, If you want to run in Python 2 please consider following code. &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                #Accessing Values in Strings
                var1 = &quot;Girish99!&quot;
                var2 = &quot;Software Testing&quot;
                print &quot;var1[0]:&quot;,var1[0]
                print &quot;var2[1:5]:&quot;,var2[1:5]
                #Some more examples
                x = &quot;Hello World!&quot;
                print x[:6] 
                print x[0:6] + &quot;Girish99&quot;
                #Python String replace() Method
                oldstring = 'I like Girish99' 
                newstring = oldstring.replace('like', 'love')
                print newstring
                #Changing upper and lower case strings
                string=&quot;python at Girish99&quot;
                print string.upper()
                string=&quot;python at Girish99&quot;		
                print string.capitalize()
                string=&quot;PYTHON AT Girish99&quot;
                print string.lower()
                #Using &quot;join&quot; function for the string
                print&quot;:&quot;.join(&quot;Python&quot;)		
                #Reversing String
                string=&quot;12345&quot;		
                print''.join(reversed(string))
                #Split Strings
                word=&quot;Girish99 career Girish99&quot;		
                print word.split(' ')
                word=&quot;Girish99 career Girish99&quot;		
                print word.split('r')
                x = &quot;Girish99&quot;
                x.replace(&quot;Girish99&quot;,&quot;Python&quot;)
                print x
                x = &quot;Girish99&quot;
                x = x.replace(&quot;Girish99&quot;,&quot;Python&quot;)
                print x
            &lt;/pre&gt;
            &lt;p&gt;Python has introduced a .format function which does way with using the cumbersome %d and so on for string
                formatting. &lt;/p&gt;
            &lt;h2&gt;Summary:&lt;/h2&gt;
            &lt;p&gt;Since Python is an object-oriented programming language, many functions can be applied to Python objects.
                A notable feature of Python is its indenting source statements to make the code easier to read.&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;div&gt;Accessing values through slicing - square brackets are used for slicing along with the index or
                        indices to obtain a substring.&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;In slicing, if range is declared [1:5], it can actually fetch the value from range [1:4]
                        &lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;You can update Python String by re-assigning a variable to another string&lt;/li&gt;
                &lt;li&gt;
                    &lt;div&gt;Method replace() returns a copy of the string in which the occurrence of old is replaced with
                        new.&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Syntax for method replace: oldstring.replace(&quot;value to change&quot;,&quot;value to be replaced&quot;)&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;String operators like [], [ : ], in, Not in, etc. can be applied to concatenate the string, fetching
                    or inserting specific characters into the string, or to check whether certain character exist in the
                    string&lt;/li&gt;
                &lt;li&gt;
                    &lt;div&gt;Other string operations include&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Changing upper and lower case &lt;/li&gt;
                        &lt;li&gt;Join function to glue any character into the string&lt;/li&gt;
                        &lt;li&gt;Reversing string&lt;/li&gt;
                        &lt;li&gt;Split string&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            
        &lt;/div&gt;
        
    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PyhtonVariables&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonTuple&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Strings: Replace, Join, Split, Reverse, Uppercase &amp;amp; Lowercase In Python everything is object and string are an object too. Python string can be created simply by enclosing characters in the double quote. For example: var = &quot;Hello World!&quot; In this tutorial, we will learn - Accessing Values in Strings Various String Operators Some more examples Python String replace() Method Changing upper and lower case strings Using &quot;join&quot; function for the string Reversing String Split Strings Accessing Values in Strings Python does not support a character type, these are treated as strings of length one, also considered as substring. We use square brackets for slicing along with the index or indices to obtain a substring. var1 = &quot;Girish99!&quot; var2 = &quot;Software Testing&quot; print (&quot;var1[0]:&quot;,var1[0]) print (&quot;var2[1:5]:&quot;,var2[1:5]) Various String Operators There are various string operators that can be used in different ways like concatenating different string. Suppose if a=Girish and b=99 then a+b= &quot;Girish99&quot;. Similarly, if you are using a*2, it will &quot;GirishGirish&quot;. Likewise, you can use other operators in string. Operator Description Example [] Slice- it gives the letter from the given index a[1] will give &quot;u&quot; from the word Girish as such ( 0=G, 1=u, 2=r and 3=u) x=&quot;Girish&quot; print x[1] [ : ] Range slice-it gives the characters from the given range x [1:3] it will give &quot;ur&quot; from the word Girish. Remember it will not consider 0 which is G, it will consider word after that is ur. x=&quot;Girish&quot; print x[1:3] in Membership-returns true if a letter exist in the given string u is present in word Girish and hence it will give 1 (True) x=&quot;Girish&quot; print &quot;u&quot; in x not in Membership-returns true if a letter exist is not in the given string l not present in word Girish and hence it will give 1 x=&quot;Girish&quot; print &quot;l&quot; not in x r/R Raw string suppresses actual meaning of escape characters. Print r'\n' prints \n and print R'/n' prints \n % - Used for string format %r - It insert the canonical string representation of the object (i.e., repr(o)) %s- It insert the presentation string representation of the object (i.e., str(o)) %d- it will format a number for display The output of this code will be &quot;Girish 99&quot;. name = 'Girish' number = 99 print'%s %d' % (name,number) + It concatenates 2 strings It concatenate strings and gives the result x=&quot;Girish&quot; y=&quot;99&quot; print x+y * Repeat It prints the character twice. x=&quot;Girish&quot; y=&quot;99&quot; print x*2 Some more examples You can update Python String by re-assigning a variable to another string. The new value can be related to previous value or to a completely different string all together. x = &quot;Hello World!&quot; print(x[:6]) print(x[0:6] + &quot;Girish99&quot;) Note : - Slice:6 or 0:6 has the same effect Python String replace() Method The method replace() returns a copy of the string in which the values of old string have been replaced with the new value. oldstring = 'I like Girish99' newstring = oldstring.replace('like', 'love') print(newstring) Changing upper and lower case strings In Python, you can even change the string to upper case or lower case. string=&quot;python at Girish99&quot; print(string.upper()) Likewise, you can also do for other function as well like capitalize string=&quot;python at Girish99&quot; print(string.capitalize()) You can also convert your string to lower case string=&quot;PYTHON AT Girish99&quot; print(string.lower()) Using &quot;join&quot; function for the string The join function is a more flexible way for concatenating string. With join function, you can add any character into the string. For example, if you want to add a colon (:) after every character in the string &quot;Python&quot; you can use the following code. print(&quot;:&quot;.join(&quot;Python&quot;)) Reversing String By using the reverse function, you can reverse the string. For example, if we have string &quot;12345&quot; and then if you apply the code for the reverse function as shown below. string=&quot;12345&quot; print(''.join(reversed(string))) Split Strings Split strings is another function that can be applied in Python let see for string &quot;Girish99 career Girish99&quot;. First here we will split the string by using the command word.split and get the result. word=&quot;Girish99 career Girish99&quot; print(word.split(' ')) To understand this better we will see one more example of split, instead of space (' ') we will replace it with ('r') and it will split the string wherever 'r' is mentioned in the string word=&quot;Girish99 career Girish99&quot; print(word.split('r')) Important Note: In Python, Strings are immutable. Consider the following code x = &quot;Girish99&quot; x.replace(&quot;Girish99&quot;,&quot;Python&quot;) print(x) will still return Girish99. This is because x.replace(&quot;Girish99&quot;,&quot;Python&quot;) returns a copy of X with replacements made You will need to use the following code to observe changes x = &quot;Girish99&quot; x = x.replace(&quot;Girish99&quot;,&quot;Python&quot;) print(x) Above codes are Python 3 examples, If you want to run in Python 2 please consider following code. Python 2 Example #Accessing Values in Strings var1 = &quot;Girish99!&quot; var2 = &quot;Software Testing&quot; print &quot;var1[0]:&quot;,var1[0] print &quot;var2[1:5]:&quot;,var2[1:5] #Some more examples x = &quot;Hello World!&quot; print x[:6] print x[0:6] + &quot;Girish99&quot; #Python String replace() Method oldstring = 'I like Girish99' newstring = oldstring.replace('like', 'love') print newstring #Changing upper and lower case strings string=&quot;python at Girish99&quot; print string.upper() string=&quot;python at Girish99&quot; print string.capitalize() string=&quot;PYTHON AT Girish99&quot; print string.lower() #Using &quot;join&quot; function for the string print&quot;:&quot;.join(&quot;Python&quot;) #Reversing String string=&quot;12345&quot; print''.join(reversed(string)) #Split Strings word=&quot;Girish99 career Girish99&quot; print word.split(' ') word=&quot;Girish99 career Girish99&quot; print word.split('r') x = &quot;Girish99&quot; x.replace(&quot;Girish99&quot;,&quot;Python&quot;) print x x = &quot;Girish99&quot; x = x.replace(&quot;Girish99&quot;,&quot;Python&quot;) print x Python has introduced a .format function which does way with using the cumbersome %d and so on for string formatting. Summary: Since Python is an object-oriented programming language, many functions can be applied to Python objects. A notable feature of Python is its indenting source statements to make the code easier to read. Accessing values through slicing - square brackets are used for slicing along with the index or indices to obtain a substring. In slicing, if range is declared [1:5], it can actually fetch the value from range [1:4] You can update Python String by re-assigning a variable to another string Method replace() returns a copy of the string in which the occurrence of old is replaced with new. Syntax for method replace: oldstring.replace(&quot;value to change&quot;,&quot;value to be replaced&quot;) String operators like [], [ : ], in, Not in, etc. can be applied to concatenate the string, fetching or inserting specific characters into the string, or to check whether certain character exist in the string Other string operations include Changing upper and lower case Join function to glue any character into the string Reversing string Split string</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">7. Variables in Python</title><link href="http://localhost:4000/blog/PyhtonVariables" rel="alternate" type="text/html" title="7. Variables in Python" /><published>2019-09-27T00:00:00+05:30</published><updated>2019-09-27T00:00:00+05:30</updated><id>http://localhost:4000/blog/PyhtonVariables</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonVariables">&lt;section class=&quot;Ptutorial7&quot;&gt;
   &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
      &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
      &lt;div class=&quot;page-header&quot;&gt;
         &lt;h2 itemprop=&quot;headline&quot;&gt; Python Variables: Declare, Concatenate, Global &amp;amp; Local &lt;/h2&gt;
      &lt;/div&gt;
      &lt;div itemprop=&quot;articleBody&quot;&gt;
         &lt;h2&gt; What is a Variable in Python? &lt;/h2&gt;
         &lt;p&gt;A Python variable is a reserved memory location to store values. In other words, a variable in a python
            program gives data to the computer for processing. &lt;/p&gt;
         &lt;p&gt;Every value in Python has a datatype. Different data types in Python are Numbers, List, Tuple, Strings,
            Dictionary, etc. Variables can be declared by any name or even alphabets like a, aa, abc, etc. &lt;/p&gt;
         &lt;p&gt;In this tutorial, we will learn, &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to Declare and use a Variable &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Re-declare a Variable &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Concatenate Variables &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Local &amp;amp; Global Variables &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Delete a variable &lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
         &lt;div&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to Declare and use a Variable&lt;/h2&gt;
            &lt;p&gt;Let see an example. We will declare variable &quot;a&quot; and print it. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               a=100 
               print a
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Re-declare a Variable&lt;/h2&gt;
            &lt;p&gt;You can re-declare the variable even after you have declared it once. &lt;/p&gt;
            &lt;p&gt;Here we have variable initialized to f=0. &lt;/p&gt;
            &lt;p&gt;Later, we re-assign the variable f to value &quot;guru99&quot; &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.1.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.1.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.1.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               # Declare a variable and initialize it
               f = 0
               print f
               # re-declaring the variable works
               f = 'guru99'
               print f
            &lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               # Declare a variable and initialize it
               f = 0
               print(f)
               # re-declaring the variable works
               f = 'guru99'
               print(f)
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Concatenate Variables&lt;/h2&gt;
            &lt;p&gt;Let's see whether you can concatenate different data types like string and number together. For example,
               we will concatenate &quot;Guru&quot; with the number &quot;99&quot;. &lt;/p&gt;
            &lt;p&gt;Unlike Java, which concatenates number with string without declaring number as string, Python requires
               declaring the number as string otherwise it will show a TypeError&lt;/p&gt;
            
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.2.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.2.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.2.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;For the following code, you will get undefined output - &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               a=&quot;Guru&quot;
               b = 99
               print a+b
            &lt;/pre&gt;
            &lt;p&gt;Once the integer is declared as string, it can concatenate both &quot;Guru&quot; + &lt;strong&gt;str&lt;/strong&gt;(&quot;99&quot;)=
               &quot;Guru99&quot; in the output. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               a=&quot;Guru&quot;
               b = 99
               print(a+str(b))
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Local &amp;amp; Global Variables&lt;/h2&gt;
            &lt;p&gt;In Python when you want to use the same variable for rest of your program or module you declare it a
               global variable, while if you want to use the variable in a specific function or method, you use a local
               variable. &lt;/p&gt;
            &lt;p&gt;Let's understand this difference between local and global variable with the below program. &lt;/p&gt;
            &lt;ol&gt;
               &lt;li&gt;Variable &quot;f&quot; is &lt;strong&gt;global&lt;/strong&gt; in scope and is assigned value 101 which is printed in output
               &lt;/li&gt;
               &lt;li&gt;Variable f is again declared in function and assumes &lt;strong&gt;local&lt;/strong&gt; scope. It is assigned
                  value &quot;I am learning Python.&quot; which is printed out as an output. This variable is different from the
                  global variable &quot;f&quot; define earlier&lt;/li&gt;
               &lt;li&gt;Once the function call is over, the local variable f is destroyed. At line 12, when we again, print
                  the value of &quot;f&quot; is it displays the value of global variable f=101&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.3.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.3.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.3.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               # Declare a variable and initialize it
               f = 101
               print f
               # Global vs. local variables in functions
               def someFunction():
               # global f
                  f = 'I am learning Python'
                  print f
               someFunction()
               print f
            &lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               # Declare a variable and initialize it
               f = 101
               print(f)
               # Global vs. local variables in functions
               def someFunction():
               # global f
                  f = 'I am learning Python'
                  print(f)
               someFunction()
               print(f)
            &lt;/pre&gt;
            &lt;p&gt;Using the keyword &lt;strong&gt;global, &lt;/strong&gt;you can reference the global variable inside a function.&lt;/p&gt;
            
            &lt;ol&gt;
               &lt;li&gt;Variable &quot;f&quot; is &lt;strong&gt;global&lt;/strong&gt; in scope and is assigned value 101 which is printed in output
               &lt;/li&gt;
               &lt;li&gt;Variable f is declared using the keyword &lt;strong&gt;global&lt;/strong&gt;. This is &lt;strong&gt;NOT&lt;/strong&gt; a
                  &lt;strong&gt;local variable&lt;/strong&gt;, but the same global variable declared earlier. Hence when we print
                  its value, the output is 101&lt;/li&gt;
               &lt;li&gt;
                  &lt;div&gt;We changed the value of &quot;f&quot; inside the function. Once the function call is over, the changed
                     value of the variable &quot;f&quot; persists. At line 12, when we again, print the value of &quot;f&quot; is it
                     displays the value &quot;changing global variable&quot;&lt;/div&gt;
               &lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.4.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.4.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.4.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               f = 101;
               print f
               # Global vs.local variables in functions
               def someFunction():
               global f
               print f
               f = &quot;changing global variable&quot;
               someFunction()
               print f
            &lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               f = 101;
               print(f)
               # Global vs.local variables in functions
               def someFunction():
               global f
               print(f)
               f = &quot;changing global variable&quot;
               someFunction()
               print(f)
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Delete a variable&lt;/h2&gt;
            &lt;p&gt;You can also delete variable using the command &lt;strong&gt;del&lt;/strong&gt; &quot;variable name&quot;. &lt;/p&gt;
            &lt;p&gt;In the example below, we deleted variable f, and when we proceed to print it, we get error
               &quot;&lt;strong&gt;variable name is not defined&lt;/strong&gt;&quot; which means you have deleted the variable. &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.5.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.5.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.5.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               f = 11;
               print(f)
               del f
               print(f)
            &lt;/pre&gt;
            &lt;h2&gt;Summary:&lt;/h2&gt;
            &lt;ul&gt;
               &lt;li&gt;Variables are referred to &quot;envelop&quot; or &quot;buckets&quot; where information can be maintained and referenced.
                  Like any other programming language Python also uses a variable to store the information.&lt;/li&gt;
               &lt;li&gt;Variables can be declared by any name or even alphabets like a, aa, abc, etc.&lt;/li&gt;
               &lt;li&gt;Variables can be re-declared even after you have declared them for once&lt;/li&gt;
               &lt;li&gt;In Python you cannot concatenate string with number directly, you need to declare them as a separate
                  variable, and after that, you can concatenate number with string&lt;/li&gt;
               &lt;li&gt;Declare local variable when you want to use it for current function&lt;/li&gt;
               &lt;li&gt;Declare Global variable when you want to use the same variable for rest of the program&lt;/li&gt;
               &lt;li&gt;
                  &lt;div&gt;To delete a variable, it uses keyword &quot;del&quot;.&lt;/div&gt;
               &lt;/li&gt;
            &lt;/ul&gt;

         &lt;/div&gt;

      &lt;/div&gt;
   &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMainFunction&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PyhtonStrings&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Variables: Declare, Concatenate, Global &amp;amp; Local What is a Variable in Python? A Python variable is a reserved memory location to store values. In other words, a variable in a python program gives data to the computer for processing. Every value in Python has a datatype. Different data types in Python are Numbers, List, Tuple, Strings, Dictionary, etc. Variables can be declared by any name or even alphabets like a, aa, abc, etc. In this tutorial, we will learn, How to Declare and use a Variable Re-declare a Variable Concatenate Variables Local &amp;amp; Global Variables Delete a variable How to Declare and use a Variable Let see an example. We will declare variable &quot;a&quot; and print it. a=100 print a Re-declare a Variable You can re-declare the variable even after you have declared it once. Here we have variable initialized to f=0. Later, we re-assign the variable f to value &quot;guru99&quot; Python 2 Example # Declare a variable and initialize it f = 0 print f # re-declaring the variable works f = 'guru99' print f Python 3 Example # Declare a variable and initialize it f = 0 print(f) # re-declaring the variable works f = 'guru99' print(f) Concatenate Variables Let's see whether you can concatenate different data types like string and number together. For example, we will concatenate &quot;Guru&quot; with the number &quot;99&quot;. Unlike Java, which concatenates number with string without declaring number as string, Python requires declaring the number as string otherwise it will show a TypeError For the following code, you will get undefined output - a=&quot;Guru&quot; b = 99 print a+b Once the integer is declared as string, it can concatenate both &quot;Guru&quot; + str(&quot;99&quot;)= &quot;Guru99&quot; in the output. a=&quot;Guru&quot; b = 99 print(a+str(b)) Local &amp;amp; Global Variables In Python when you want to use the same variable for rest of your program or module you declare it a global variable, while if you want to use the variable in a specific function or method, you use a local variable. Let's understand this difference between local and global variable with the below program. Variable &quot;f&quot; is global in scope and is assigned value 101 which is printed in output Variable f is again declared in function and assumes local scope. It is assigned value &quot;I am learning Python.&quot; which is printed out as an output. This variable is different from the global variable &quot;f&quot; define earlier Once the function call is over, the local variable f is destroyed. At line 12, when we again, print the value of &quot;f&quot; is it displays the value of global variable f=101 Python 2 Example # Declare a variable and initialize it f = 101 print f # Global vs. local variables in functions def someFunction(): # global f f = 'I am learning Python' print f someFunction() print f Python 3 Example # Declare a variable and initialize it f = 101 print(f) # Global vs. local variables in functions def someFunction(): # global f f = 'I am learning Python' print(f) someFunction() print(f) Using the keyword global, you can reference the global variable inside a function. Variable &quot;f&quot; is global in scope and is assigned value 101 which is printed in output Variable f is declared using the keyword global. This is NOT a local variable, but the same global variable declared earlier. Hence when we print its value, the output is 101 We changed the value of &quot;f&quot; inside the function. Once the function call is over, the changed value of the variable &quot;f&quot; persists. At line 12, when we again, print the value of &quot;f&quot; is it displays the value &quot;changing global variable&quot; Python 2 Example f = 101; print f # Global vs.local variables in functions def someFunction(): global f print f f = &quot;changing global variable&quot; someFunction() print f Python 3 Example f = 101; print(f) # Global vs.local variables in functions def someFunction(): global f print(f) f = &quot;changing global variable&quot; someFunction() print(f) Delete a variable You can also delete variable using the command del &quot;variable name&quot;. In the example below, we deleted variable f, and when we proceed to print it, we get error &quot;variable name is not defined&quot; which means you have deleted the variable. f = 11; print(f) del f print(f) Summary: Variables are referred to &quot;envelop&quot; or &quot;buckets&quot; where information can be maintained and referenced. Like any other programming language Python also uses a variable to store the information. Variables can be declared by any name or even alphabets like a, aa, abc, etc. Variables can be re-declared even after you have declared them for once In Python you cannot concatenate string with number directly, you need to declare them as a separate variable, and after that, you can concatenate number with string Declare local variable when you want to use it for current function Declare Global variable when you want to use the same variable for rest of the program To delete a variable, it uses keyword &quot;del&quot;.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/python/tutorial/6/Python4_1.png" /></entry><entry><title type="html">9. Tuple in Python</title><link href="http://localhost:4000/blog/PyhtonTuple" rel="alternate" type="text/html" title="9. Tuple in Python" /><published>2019-09-27T00:00:00+05:30</published><updated>2019-09-27T00:00:00+05:30</updated><id>http://localhost:4000/blog/PyhtonTuple</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonTuple">&lt;section class=&quot;Ptutorial9&quot;&gt;
   &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
      &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
      &lt;div class=&quot;page-header&quot;&gt;
         &lt;h2 itemprop=&quot;headline&quot;&gt; Python TUPLE - Pack, Unpack, Compare, Slicing, Delete, Key &lt;/h2&gt;
      &lt;/div&gt;

      &lt;div itemprop=&quot;articleBody&quot;&gt;
         &lt;h3&gt;What is Tuple in Python?&lt;/h3&gt;
         &lt;p&gt;A tuple is just like a list of a sequence of immutable python objects. The difference between list and tuple
            is that list are declared in square brackets and can be changed while &lt;strong&gt;tuple is declared in
               parentheses&lt;/strong&gt; and cannot be changed. However, you can take portions of existing tuples to make new
            tuples. &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Tuple Syntax&lt;/strong&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Tup = ('Jan','feb','march')&lt;/pre&gt;
         &lt;p&gt;To write an empty tuple, you need to write as two parentheses containing nothing- &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;tup1 = ();&lt;/pre&gt;
         &lt;p&gt;For writing tuple for a single value, you need to include a comma, even though there is a single value. Also
            at the end you need to write semicolon as shown below. &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Tup1 = (50,);&lt;/pre&gt;
         &lt;p&gt;Tuple indices begin at 0, and they can be concatenated, sliced and so on. &lt;/p&gt;
         &lt;p&gt;In this tutorial, we will learn- &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Packing and Unpacking &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Comparing tuples &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Using tuples as keys in dictionaries &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Deleting Tuples &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Slicing of Tuple &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Built-in functions with Tuple &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Advantages of tuple over list &lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;strong&gt;Tuple Assignment &lt;/strong&gt; &lt;/p&gt;
         &lt;p&gt;Python has tuple assignment feature which enables you to assign more than one variable at a time. In here,
            we have assigned tuple 1 with the persons information like name, surname, birth year, etc. and another tuple
            2 with the values in it like number (1,2,3,….,7). &lt;/p&gt;
         &lt;p&gt;For Example, &lt;/p&gt;
         &lt;p&gt; (name, surname, birth year, favorite movie and year, profession, birthplace) = Robert &lt;/p&gt;
         &lt;p&gt;Here is the code, &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;tup1 = ('Robert', 'Carlos','1965','Terminator 1995', 'Actor','Florida');
         tup2 = (1,2,3,4,5,6,7);
         print(tup1[0])
         print(tup2[1:4])&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Tuple 1 includes list of information of Robert&lt;/li&gt;
            &lt;li&gt;Tuple 2 includes list of numbers in it&lt;/li&gt;
            &lt;li&gt;We call the value for [0] in tuple and for tuple 2 we call the value between 1 and 4&lt;/li&gt;
            &lt;li&gt;Run the code- It gives name Robert for first tuple while for second tuple it gives number (2,3 and 4)
            &lt;/li&gt;
         &lt;/ul&gt;
         &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;Packing and Unpacking&lt;/h2&gt;
         &lt;p&gt;In packing, we place value into a new tuple while in unpacking we extract those values back into variables.
         &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;x = (&quot;Guru99&quot;, 20, &quot;Education&quot;)    # tuple packing
         (company, emp, profile) = x    # tuple unpacking
         print(company)
         print(emp)
         print(profile)&lt;/pre&gt;
         &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Comparing tuples&lt;/h2&gt;
         &lt;p&gt;A comparison operator in Python can work with tuples. &lt;/p&gt;
         &lt;p&gt;The comparison starts with a first element of each tuple. If they do not compare to =,&amp;lt; or &amp;gt; then it
            proceed to the second element and so on. &lt;/p&gt;
         &lt;p&gt;It starts with comparing the first element from each of the tuples&lt;/p&gt;

         &lt;p&gt;Let's study this with an example- &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;#case 1&lt;/strong&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;a=(5,6)
         b=(1,4)
         if (a&amp;gt;b):print(&quot;a is bigger&quot;)
         else: print(&quot;b is bigger&quot;)
         &lt;/pre&gt;
         &lt;p&gt;&lt;strong&gt;#case 2&lt;/strong&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;a=(5,6)
         b=(5,4)
         if (a&amp;gt;b):print(&quot;a is bigger&quot;)
         else: print (&quot;b is bigger&quot;)&lt;/pre&gt;
         &lt;p&gt;&lt;strong&gt;#case 3&lt;/strong&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;a=(5,6)
         b=(6,4)
         if (a&amp;gt;b):print(&quot;a is bigger&quot;)
         else: print(&quot;b is bigger&quot;)&lt;/pre&gt;
         &lt;p&gt;&lt;strong&gt;Case1:&lt;/strong&gt; Comparison starts with a first element of each tuple. In this case 5&amp;gt;1, so the
            output a is bigger &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Case 2:&lt;/strong&gt; Comparison starts with a first element of each tuple. In this case 5&amp;gt;5 which is
            inconclusive. So it proceeds to the next element. 6&amp;gt;4, so the output a is bigger &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Case 3:&lt;/strong&gt; Comparison starts with a first element of each tuple. In this case 5&amp;gt;6 which is
            false. So it goes into the else block and prints &quot;b is bigger.&quot; &lt;/p&gt;
         &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Using tuples as keys in dictionaries&lt;/h2&gt;
         &lt;p&gt;Since tuples are hashable, and list is not, we must use tuple as the key if we need to create a composite
            key to use in a dictionary. &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: We would come across a composite key if we need to create a telephone directory
            that maps, first-name, last-name, pairs of telephone numbers, etc. Assuming that we have declared the
            variables as last and first number, we could write a dictionary assignment statement as shown below: &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;directory[last,first] = number&lt;/pre&gt;
         &lt;p&gt;Inside the brackets, the expression is a tuple. We could use tuple assignment in a for loop to navigate this
            dictionary. &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;for last, first in directory:&lt;/pre&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;    print first, last, directory[last, first]&lt;/pre&gt;
         &lt;p&gt;This loop navigates the keys in the directory, which are tuples. It assigns the elements of each tuple to
            last and first and then prints the name and corresponding telephone number. &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Tuples and dictionary&lt;/strong&gt;&lt;/p&gt;
         &lt;p&gt;Dictionary can return the list of tuples by calling items, where each tuple is a key value pair. &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;a = {'x':100, 'y':200}
         b = list(a.items())
         print(b) 
         &lt;/pre&gt;
         &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Deleting Tuples&lt;/h2&gt;
         &lt;p&gt;Tuples are immutable and cannot be deleted. You cannot delete or remove items from a tuple. But deleting
            tuple entirely is possible by using the keyword &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;del&lt;/pre&gt;
         &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Slicing of Tuple&lt;/h2&gt;
         &lt;p&gt;To fetch specific sets of sub-elements from tuple or list, we use this unique function called slicing.
            Slicing is not only applicable to tuple but also for array and list. &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;x = (&quot;a&quot;, &quot;b&quot;,&quot;c&quot;, &quot;d&quot;, &quot;e&quot;)
         print(x[2:4])&lt;/pre&gt;
         &lt;p&gt;The output of this code will be ('c', 'd'). &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Here is the Python 2 Code for all above example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;tup1 = ('Robert', 'Carlos','1965','Terminator 1995', 'Actor','Florida');
         tup2 = (1,2,3,4,5,6,7);
         print  tup1[0]
         print  tup2[1:4]
         
         #Packing and Unpacking
         x = (&quot;Guru99&quot;, 20, &quot;Education&quot;)    # tuple packing
         (company, emp, profile) = x    # tuple unpacking
         print company
         print emp
         print profile
         
         #Comparing tuples
         #case 1
         a=(5,6)
         b=(1,4)
         if (a&amp;gt;b):print &quot;a is bigger&quot;
         else: print &quot;b is bigger&quot;
         
         #case 2
         a=(5,6)
         b=(5,4)
         if (a&amp;gt;b):print &quot;a is bigger&quot;
         else: print &quot;b is bigger&quot;
         
         #case 3
         a=(5,6)
         b=(6,4)
         if (a&amp;gt;b):print &quot;a is bigger&quot;
         else: print &quot;b is bigger&quot;
         
         #Tuples and dictionary
         a = {'x':100, 'y':200}
         b = a.items()
         print b 
         
         #Slicing of Tuple
         x = (&quot;a&quot;, &quot;b&quot;,&quot;c&quot;, &quot;d&quot;, &quot;e&quot;)
         print x[2:4]
         
         &lt;/pre&gt;
         &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Built-in functions with Tuple&lt;/h2&gt;
         &lt;p&gt;To perform different task, tuple allows you to use many built-in functions like all(), any(), enumerate(),
            max(), min(), sorted(), len(), tuple(), etc. &lt;/p&gt;
         &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Advantages of tuple over list&lt;/h2&gt;
         &lt;ul&gt;
            &lt;li&gt;Iterating through tuple is faster than with list, since tuples are immutable. &lt;/li&gt;
            &lt;li&gt;Tuples that consist of immutable elements can be used as key for dictionary, which is not possible with
               list&lt;/li&gt;
            &lt;li&gt;If you have data that is immutable, implementing it as tuple will guarantee that it remains
               write-protected&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;: &lt;/p&gt;
         &lt;p&gt;Python has tuple assignment feature which enables you to assign more than one variable at a time. &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;
               &lt;div&gt;Packing and Unpacking of Tuples&lt;/div&gt;
               &lt;ul&gt;
                  &lt;li&gt;In packing, we place value into a new tuple while in unpacking we extract those values back into
                     variables. &lt;/li&gt;
               &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;A comparison operator in Python can work with tuples.&lt;/li&gt;
            &lt;li&gt;
               &lt;div&gt;Using tuples as keys in dictionaries&lt;/div&gt;
               &lt;ul&gt;
                  &lt;li&gt;Tuples are hashable, and list are not&lt;/li&gt;
                  &lt;li&gt;We must use tuple as the key if we need to create a composite key to use in a dictionary&lt;/li&gt;
                  &lt;li&gt;Dictionary can return the list of tuples by calling items, where each tuple is a key value pair
                  &lt;/li&gt;
               &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;Tuples are immutable and cannot be deleted. You cannot delete or remove items from a tuple. But deleting
               tuple entirely is possible by using the keyword &quot;del&quot;&lt;/li&gt;
            &lt;li&gt;To fetch specific sets of sub-elements from tuple or list, we use this unique function called slicing
            &lt;/li&gt;
         &lt;/ul&gt;

      &lt;/div&gt;

   &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PyhtonStrings&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonDictionary&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python TUPLE - Pack, Unpack, Compare, Slicing, Delete, Key</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">6. Main Function in Python</title><link href="http://localhost:4000/blog/PythonMainFunction" rel="alternate" type="text/html" title="6. Main Function in Python" /><published>2019-09-26T00:00:00+05:30</published><updated>2019-09-26T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonMainFunction</id><content type="html" xml:base="http://localhost:4000/blog/PythonMainFunction">&lt;section class=&quot;Ptutorial6&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Main Function with Examples: Understand __main__ &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;p&gt;Before we jump more into Python coding, we get familiarize with Python Main function and its importance.
            &lt;/p&gt;
            &lt;p&gt;Consider the following code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def main():
                print &quot;hello world!&quot;
                print &quot;Guru99&quot;
            &lt;/pre&gt;
            &lt;p&gt;Here we got two pieces of print one is defined within a main function that is &quot;Hello World&quot; and the other
                is independent which is &quot;Guru99&quot;. When you run the function def main (): &lt;br&gt;&lt;br&gt;&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Only &quot;Guru99&quot; prints out &lt;/li&gt;
                &lt;li&gt;and not the code &quot;Hello World.&quot;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/6/Python4_1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot;
                        alt=&quot;Learn Python Main Function with Examples: Understand __main__&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/6/Python4_1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;It is because we did not declare the call &lt;strong&gt;function &quot;if__name__== &quot;__main__&quot;.&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;When Python interpreter reads a source file, it will execute all the code found in it. &lt;/li&gt;
                &lt;li&gt;When Python runs the &quot;source file&quot; as the main program, it sets the special variable (__name__) to
                    have a value (&quot;__main__&quot;). &lt;/li&gt;
                &lt;li&gt;When you execute the main function, it will then read the &quot;if&quot; statement and checks whether __name__
                    does equal to __main__.&lt;/li&gt;
                &lt;li&gt;In Python &lt;strong&gt;&quot;if__name__== &quot;__main__&quot; &lt;/strong&gt;allows you to run the Python files either as
                    &lt;strong&gt;reusable modules or standalone programs&lt;/strong&gt;. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Like C, Python uses == for comparison while = for assignment. Python interpreter uses the main function
                in two ways &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;div&gt;import: __name__= module's filename&lt;/div&gt;
                    &lt;p&gt;if statement==false, and the script in __main__ will not be executed&lt;/p&gt;

                &lt;/li&gt;
                &lt;li&gt;
                    &lt;div&gt;direct run:__name__=__main__&lt;/div&gt;
                    &lt;p&gt;if statement == True, and the script in _main_will be executed&lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;So when the code is executed, it will check for module name with &quot;if.&quot;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;It is important that after defining the main function, you call the code by if__name__== &quot;__main__&quot; and
                then run the code, only then you will get the output &quot;hello world!&quot; in the programming console as shown
                below. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/6/Python4_22.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot;
                        alt=&quot;Learn Python Main Function with Examples: Understand __main__&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/6/Python4_22.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Make sure that after defining a main function, you leave some indent and not
                declare the code right below the def main(): function otherwise it will give indent error. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def main():
                print(&quot;Hello World!&quot;)
       
                if __name__== &quot;__main__&quot;:
                    main()
     
                 print(&quot;Guru99&quot;)
            &lt;/pre&gt;
            &lt;p&gt;Above examples are Python 3 codes, if you want to use Python 2, please consider following code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def main():
                print &quot;Hello World!&quot;
       
                if __name__== &quot;__main__&quot;:
                main()
     
                print &quot;Guru99&quot;
            &lt;/pre&gt;
            &lt;p class=&quot;alert alert-success&quot;&gt; In Python 3, you do not need to use if__name. Following code also works &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def main():
                print(&quot;Hello World!&quot;)
       
                 main()
                print(&quot;Guru99&quot;)
            &lt;/pre&gt;
            &lt;p id=&quot;slidetag&quot;&gt;&amp;nbsp;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonPrint&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMainFunction&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Main Function with Examples: Understand __main__</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/python/tutorial/6/Python4_1.png" /></entry><entry><title type="html">4. First Python Program</title><link href="http://localhost:4000/blog/PythonFirstProgram" rel="alternate" type="text/html" title="4. First Python Program" /><published>2019-09-25T00:00:00+05:30</published><updated>2019-09-25T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonFirstProgram</id><content type="html" xml:base="http://localhost:4000/blog/PythonFirstProgram">&lt;section class=&quot;Ptutorial4&quot;&gt;
    &lt;div class=&quot;page-header&quot;&gt;
        &lt;h2 itemprop=&quot;headline&quot;&gt; Hello World: Create your First Python Program &lt;/h2&gt;
     &lt;/div&gt;
     
     &lt;div itemprop=&quot;articleBody&quot;&gt;
        
        &lt;p&gt;In the last tutorial, we completed our Python installation and setup. It's time to create your first program. &lt;/p&gt;
        &lt;h2&gt;Creating First Program&lt;/h2&gt;
        &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Open PyCharm Editor. You can see the introductory screen for PyCharm. To create a new project, click on “Create New Project”. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/Python3.1.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/Python3.1.png&quot; width=&quot;70%&quot; height=&quot;70%&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 2) &lt;/strong&gt;You will need to select a location. &lt;/p&gt;
        &lt;ol&gt;
           &lt;li&gt;You can select the location where you want the project to be created. If you don’t want to change location than keep it as it is but at least change the name from “untitled” to something more meaningful, like “FirstProject”.&lt;/li&gt;
           &lt;li&gt;PyCharm should have found the Python interpreter you installed earlier.&lt;/li&gt;
           &lt;li&gt;Next Click the “Create” Button.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.2.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.2.png&quot; width=&quot;70%&quot; height=&quot;70%&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 3) &lt;/strong&gt;Now Go up to the “File” menu and select “New”. Next, select “Python File”. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.3.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.3.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 4) &lt;/strong&gt;A new pop up will appear. Now type the name of the file you want (Here we give “HelloWorld”) and hit “OK”. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.4.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.4.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 5) &lt;/strong&gt;Now type a simple program - print (‘Hello World!’).&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.5.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 6) &lt;/strong&gt;Now Go up to the “Run” menu and select “Run” to run your program. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.6.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 7) &lt;/strong&gt;You can see the output of your program at the bottom of the screen. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/Python3.5.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/Python3.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 8) &lt;/strong&gt;Don't worry if you don't have Pycharm Editor installed, you can still run the code from the command prompt. Enter the correct path of a file in command prompt to run the program. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/Python3.6.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/Python3.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;The output of the code would be &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/Python3.7.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/Python3.7.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        
  &lt;/pre&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonInstaller&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFirstProgram&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Hello World: Create your First Python Program In the last tutorial, we completed our Python installation and setup. It's time to create your first program. Creating First Program Step 1) Open PyCharm Editor. You can see the introductory screen for PyCharm. To create a new project, click on “Create New Project”. Step 2) You will need to select a location. You can select the location where you want the project to be created. If you don’t want to change location than keep it as it is but at least change the name from “untitled” to something more meaningful, like “FirstProject”. PyCharm should have found the Python interpreter you installed earlier. Next Click the “Create” Button. Step 3) Now Go up to the “File” menu and select “New”. Next, select “Python File”. Step 4) A new pop up will appear. Now type the name of the file you want (Here we give “HelloWorld”) and hit “OK”. Step 5) Now type a simple program - print (‘Hello World!’). Step 6) Now Go up to the “Run” menu and select “Run” to run your program. Step 7) You can see the output of your program at the bottom of the screen. Step 8) Don't worry if you don't have Pycharm Editor installed, you can still run the code from the command prompt. Enter the correct path of a file in command prompt to run the program. The output of the code would be</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/python/tutorial/4/Python3.1.png" /></entry><entry><title type="html">5. Print in Python</title><link href="http://localhost:4000/blog/PythonPrint" rel="alternate" type="text/html" title="5. Print in Python" /><published>2019-09-25T00:00:00+05:30</published><updated>2019-09-25T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonPrint</id><content type="html" xml:base="http://localhost:4000/blog/PythonPrint">&lt;section class=&quot;Ptutorial5&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; How to Print in Python with Examples &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;p&gt;In this tutorial, you will learn- &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to print simple string?&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to print blank lines&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Print end command&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to print simple string?&lt;/h2&gt;
            &lt;p&gt;More often then not you require to Print strings in your coding construct. &lt;/p&gt;
            &lt;p&gt;Here is how to do it in Python 3 &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example: 1&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;To print the Welcome to GirishG, use the print () function as follows: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (&quot;Welcome to GirishG&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Welcome to GirishG &lt;/p&gt;
            &lt;p&gt;In Python 2, same example will look like &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print &quot;Welcome to GirishG&quot;&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;If you want to print the name of five countries, you can write: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print(&quot;USA&quot;)
     print(&quot;Canada&quot;)
     print(&quot;Germany&quot;)
     print(&quot;France&quot;)
     print(&quot;Japan&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;USA
     Canada
     Germany
     France
     Japan&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to print blank lines&lt;/h2&gt;
            &lt;p&gt;Sometimes you need to print one blank line in your Python program. Following are an example to perform
                this task. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
            &lt;p&gt;Let us print 8 blank lines. You can type: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (8 * &quot;\n&quot;)&lt;/pre&gt;
            &lt;p&gt;or: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (&quot;\n\n\n\n\n\n\n\n\n&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here is the code&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (&quot;Welcome to GirishG&quot;)
     print (8 * &quot;\n&quot;)
     print (&quot;Welcome to GirishG&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;Welcome to GirishG
     
     
     
     
     
     
     
     Welcome to GirishG&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Print end command&lt;/h2&gt;
            &lt;p&gt;By default, python's print() function ends with a newline. This function comes with a parameter called
                'end.' The default value of this parameter is '\n,' i.e., the new line character. You can end a print
                statement with any character or string using this parameter. This is available in only in Python 3+ &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (&quot;Welcome to&quot;, end = ' ') 
     print (&quot;GirishG&quot;, end = '!')&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Welcome to GirishG! &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;# ends the output with '@.' &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print(&quot;Python&quot; , end = '@')&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Python@ &lt;/p&gt;
            &lt;p id=&quot;slidetag&quot;&gt;&amp;nbsp;&lt;/p&gt;
        &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFirstProgram&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMainFunction&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">How to Print in Python with Examples</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">15.Add new Event</title><link href="http://localhost:4000/blog/AgendaApp10" rel="alternate" type="text/html" title="15.Add new Event" /><published>2019-09-24T00:00:00+05:30</published><updated>2019-09-24T00:00:00+05:30</updated><id>http://localhost:4000/blog/AgendaApp10</id><content type="html" xml:base="http://localhost:4000/blog/AgendaApp10">&lt;section class=&quot;tutorial15&quot;&gt;

    &lt;div class=&quot;angular-tutorial tutorial&quot;&gt;


        &lt;h2&gt;Add new Event&lt;/h2&gt;

        &lt;p&gt;Finally, the last thing we have to do is to handle our form on submit and add new event to the list.&lt;/p&gt;

        &lt;ol&gt;
            &lt;li&gt;Add new function to &lt;code&gt;app.component.ts&lt;/code&gt;&lt;/li&gt;

            &lt;!-- mdbsnippet --&gt;
            &lt;div class=&quot;docs-pills&quot;&gt;
                &lt;div class=&quot;d-flex justify-content-between&quot;&gt;
                    &lt;ul class=&quot;nav md-pills pills-grey&quot;&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;nav-link active show&quot; data-toggle=&quot;tab&quot;
                                href=&quot;#mdb79feea82146939d545fda76b9e905910&quot; role=&quot;tab&quot;&gt;app.component.ts&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
                &lt;div class=&quot;tab-content&quot;&gt;
                    &lt;div class=&quot;tab-pane fade active show&quot; id=&quot;mdb79feea82146939d545fda76b9e905910&quot; role=&quot;tabpanel&quot;&gt;
                        &lt;div class=&quot;code-toolbar&quot;&gt;
                            &lt;pre
                                class=&quot;grey lighten-3 px-3 mb-0 line-numbers  language-js&quot;&gt;&lt;code class=&quot; language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;addNewEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newEvent&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; any &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            time&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            subject&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;subjectInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            location&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;locationInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;descriptionInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;subjectInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;locationInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;descriptionInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;modal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
                            &lt;div class=&quot;toolbar&quot;&gt;
                                
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;&lt;!-- /.mdbsnippet --&gt;

            &lt;p&gt;As you probably already see our new functions does four things

            &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Creates a &lt;mark&gt;newEvent&lt;/mark&gt; object with values from the form&lt;/li&gt;
                &lt;li&gt;Adds the new object to the &lt;mark&gt;events&lt;/mark&gt; array &lt;/li&gt;
                &lt;li&gt;Clears the form's inputs&lt;/li&gt;
                &lt;li&gt;Hides modal&lt;/li&gt;

            &lt;/ol&gt;

            &lt;p&gt;&lt;/p&gt;

            &lt;li&gt;Update the button in a Modal Footer with call to &lt;mark&gt;addNewEvent()&lt;/mark&gt;&lt;/li&gt;

            &lt;!-- mdbsnippet --&gt;
            &lt;div class=&quot;docs-pills&quot;&gt;
                &lt;div class=&quot;d-flex justify-content-between&quot;&gt;
                    &lt;ul class=&quot;nav md-pills pills-grey&quot;&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;nav-link active show&quot; data-toggle=&quot;tab&quot;
                                href=&quot;#mdb53cad2dc0b560f4dce03be8100b3be8a&quot; role=&quot;tab&quot;&gt;app.component.html&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
                &lt;div class=&quot;tab-content&quot;&gt;
                    &lt;div class=&quot;tab-pane fade active show&quot; id=&quot;mdb53cad2dc0b560f4dce03be8100b3be8a&quot; role=&quot;tabpanel&quot;&gt;
                        &lt;div class=&quot;code-toolbar&quot;&gt;
                            &lt;pre
                                class=&quot;grey lighten-3 px-3 mb-0 line-numbers  language-js&quot;&gt;&lt;code class=&quot; language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button
          type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;
          mdbBtn
          color&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;info&quot;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;waves-effect&quot;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;click&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;addNewEvent()&quot;&lt;/span&gt;
          mdbWavesEffect
        &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
          Add
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
                            &lt;div class=&quot;toolbar&quot;&gt;
                                
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;&lt;!-- /.mdbsnippet --&gt;

            &lt;li&gt;Save and test the app&lt;/li&gt;

            &lt;img class=&quot;img-fluid&quot;
                src=&quot;http://localhost:4000/img/angular/tutorials/agenda-app/10/final.gif&quot;
                alt=&quot;Add new event&quot;&gt;&lt;br&gt;



        &lt;/ol&gt;


    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/AgendaApp9&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="AgendaApp" /><category term="programming" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/angular/tutorials/agenda-app/10/final.gif" /></entry></feed>