<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-03T05:56:12+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">AWS Lambda vs Azure Functions vs Google Cloud Functions,Comparing Serverless Providers</title><link href="http://localhost:4000/blog/aws-lambda-vs-azure-functions-vs-google-functions" rel="alternate" type="text/html" title="AWS Lambda vs Azure Functions vs Google Cloud Functions,Comparing Serverless Providers" /><published>2020-01-15T10:41:00+00:00</published><updated>2020-01-15T10:41:00+00:00</updated><id>http://localhost:4000/blog/CloudFunctionCompare</id><content type="html" xml:base="http://localhost:4000/blog/aws-lambda-vs-azure-functions-vs-google-functions">&lt;h2 id=&quot;comparing-serverless-providers&quot;&gt;Comparing Serverless Providers&lt;/h2&gt;

&lt;p&gt;Wondering which serverless provider is right for you? Read this blog to understand and analyze the comparison between AWS Lambda vs Azure Functions vs Google Cloud Functions. Get to know their current version and compare performance, security, pricing and scalability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/5/Serverless-Platform-Comparison-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When it comes to serverless providers, there are many popular opinions based on various biases. Yet, while choosing the serverless there are many things that go on than the surface picture.&lt;/p&gt;

&lt;p&gt;Considering how critical this is for long-term success, platforms should be evaluated based on their functionalities and service integrations. The potential backlash in choosing a serverless platform is high. Some of them are vendor lock-in and data lock-in, as Patrick Debois, CTO at Zender, mentions in his tweet.&lt;/p&gt;

&lt;p&gt;So how do you select the right serverless provider? The answer is in this article. Here we discuss the major serverless provider considering their technical empowerment which will help you to equally weigh the selection process directed towards your specific needs.&lt;/p&gt;

&lt;h3 id=&quot;current-version&quot;&gt;Current Version:&lt;/h3&gt;

&lt;p&gt;As of today, AWS Lambda vs Azure Functions vs Google Cloud Functions all are production ready and generally available. Reflecting over the timeline, AWS Lambda became publicly available in early 2015, Azure Functions in late 2016 while Google Cloud Functions, just recently, in July 2018.&lt;/p&gt;

&lt;p&gt;With such a big difference in their timeline, it is evident that AWS Lambda dominates the &lt;em&gt;serverless landscape&lt;/em&gt; with the huge developer community and the wide spectrum of use cases. Moreover, it has advanced functionalities like edge processing and chaining.&lt;/p&gt;

&lt;p&gt;Azure Functions supports the variety of supported runtime environment. The current approach of Azure is to provide a functional IDE in their portal to help you prototype and deploy functions.&lt;/p&gt;

&lt;p&gt;When it comes to picking anyone out of this, the prerequisites and the evaluation criteria that you’ll employ will be unique to your organization. However, there are some common areas that these serverless providers fall into. Let’s discuss some of them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/5/Dia1-5-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;language-support--deployment&quot;&gt;Language Support &amp;amp; Deployment&lt;/h3&gt;

&lt;p&gt;AWS Lambda currently has native support for code written in JavaScript, Node.js, Python, Java and C#, along with releasing support for Golang earlier this year. These wide choices of runtime environments and its versatility makes it the first choice for developers.&lt;/p&gt;

&lt;p&gt;AWS Lambda provides API operations that you can use to create and update Lambda functions with the help of a deployment package uploaded to the console in a ZIP file or edited within the console itself.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dependency management aside the biggest barrier to entry is language runtime support. Most FaaS platforms only support a handful of language runtimes. AWS Lambda and Azure Functions being the exceptions as both platforms support most popular language runtimes.— Kelsey Hightower (@kelseyhightower) February 26, 2018&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the other hand, Azure Function supports C#, F#, Python, Java, Node.js, Python &amp;amp; PHP. Contrary to AWS Lambda, Azure Functions provides you with multiple options for deploying your function, such as GitHub, DropBox, Visual Studio, Kudu Console, Zip deployment and One Drive.&lt;/p&gt;

&lt;p&gt;With Google Cloud Functions, your function execution varies by your chosen language. Currently, it supports Node.js 6, Node.js 7 and Python 3.7 with more to be supported soon. For deployment, you can choose either of these: CLI, Zip upload, inline web editor, Cloud Storage and Cloud Storage Repositories.&lt;/p&gt;

&lt;p&gt;Truple.io is currently using AWS Lambda with Serverless Framework. According to its cloud architect, they used Azure Functions for 6 months but didn’t have a good experience. Eventually, they abandoned Azure Functions and moved to  Kubernetes. Here why,&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;AWS Lambda had most of the problems solved already for Node.Js. It has good scalability without any resource issues. AWS Lambda, I feel it works as it is promised. However, with C#, I did use it on AWS Lambda the week after it was released. However, it had some issues that were solved after almost 8 months.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On the contrary, in Azure Functions, I was using C#  and we continually had issue after issue. Due to lack of documentation, we were constantly running into issues. Not only that, App Insights (monitoring platform for Azure Functions) took 5+ minutes to load the logs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Apart from this, we recently faced issues with Azure CDN, where we were unable to purge files so old, outdated files continued to be served up for 16+ hours after the purge. Cloudfront in AWS invalidates works in less than 15 minutes every time I do it”&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;dependencies-management&quot;&gt;Dependencies Management&lt;/h3&gt;
&lt;p&gt;With AWS Lambda, dependencies are packaged within the deployment packages itself. To do it successfully, you first need to organize your code and dependencies in a certain way.&lt;/p&gt;

&lt;p&gt;Guidelines for creating the deployment package varies depending upon your choice of language. You may also use build plugins such as Jenkins (for Node.js and Python) and Maven (Java) to create the packages.&lt;/p&gt;

&lt;p&gt;With Azure Functions, You can include your package.json in your function directory and run npm install as you normally would with Node.js projects using Kudu or the Console in the Azure portal. This process is similar irrespective of your runtime language.&lt;/p&gt;

&lt;p&gt;Google Cloud Functions let you manage your dependencies with npm and are expressed in a metadata file called package.json. Your function also has an option to downloads the dependencies declared in package.json using npm.&lt;/p&gt;

&lt;p&gt;Google Cloud Functions install dependencies on behalf of the user, which means that they do not need to take awkward steps like “vendoring” them locally (required for AWS Lambda) and they also avoid potential pitfalls, e.g., if the developer is using a Windows machine and vendors a library with native extensions (C code), there’s a high probability that it will not work on AWS Lambda when deployed.&lt;/p&gt;

&lt;h3 id=&quot;persistent-storage&quot;&gt;Persistent Storage&lt;/h3&gt;
&lt;p&gt;The essence of serverless functions lies in its statelessness. Saying that an ideal function would be the one written in a stateless style which has no affinity to the underlying compute infrastructure or other variables.&lt;/p&gt;

&lt;p&gt;With AWS Lambda, the function is required to be written without any variables. At the same time, you have an option for storage of variables in the persistent storage such as S3, DynamoDB or any other cloud storage services.&lt;/p&gt;

&lt;p&gt;With Azure Functions to store the persistent data that needs to be constant across numerous instances, you may use Azure Blob Storage or Azure Table Storage.&lt;/p&gt;

&lt;p&gt;If you want to “cache” data, for instance, a DB connection, you can use static variables. For Google Cloud Functions, if you require to share state across function invocations, your function should use services such as Cloud Datastore, Cloud Firestore, Cloud Storage and Cloud SQL to persist data.&lt;/p&gt;

&lt;h3 id=&quot;identity--access-management&quot;&gt;Identity &amp;amp; Access Management&lt;/h3&gt;
&lt;p&gt;For Identity and access management, IAM system provides you with an authorization layer that allows you to exercise fine-grained access management for your functions.&lt;/p&gt;

&lt;p&gt;For example, what they can do with those resources (read-only or write-only access), and what areas they have access to (specific function or whole project).&lt;/p&gt;

&lt;p&gt;AWS Lambda provides you with the facility to create your own custom IAM policies and attach them with your Lambda functions. This allows permissions for AWS Lambda API actions, users, groups, roles and resources.&lt;/p&gt;

&lt;p&gt;While Azure Functions lets you control your function policies through Resource Based Access Control. It is supported at Subscription and ResourceGroup. Though at the moment, you can give permission to read/write access both to your functions as read-only access disables some of the app’s features.&lt;/p&gt;

&lt;p&gt;However, with Google Cloud Functions’ IAM roles you can list the permissions that are contained in each role. Roles can be granted to users on an entire project or on individual functions. Though there are more features in Alpha version soon to be released publicly.&lt;/p&gt;

&lt;h3 id=&quot;triggers--types&quot;&gt;Triggers &amp;amp; Types&lt;/h3&gt;
&lt;p&gt;Event sources (triggers) are custom events that invoke your serverless function. AWS Lambda gives you the feature for invocation over HTTPS defined by a custom REST API and an endpoint using API Gateway.&lt;/p&gt;

&lt;p&gt;Other than that, AWS Lambda supports a plethora of other AWS service that you can configure as an event source. Lambdas can also be invoked through AWS SDKs given that it has the necessary permission for invocations.&lt;/p&gt;

&lt;p&gt;With Azure Functions, there are few Microsoft services such as CosmosDB, Queue Storage, Service Bus and Table Storage. However, one advance feature is that external HTTP and Webhooks (from GitHub) can be used for invocation, along with APIM, function proxy and bindings.&lt;/p&gt;

&lt;p&gt;Google Cloud Functions supports HTTP triggers provides that you need to specify while creating your function endpoint and these works only synchronously. Apart from this, Cloud Storage and Cloud Pub/Sub can work as event sources. There are more event sources though they are in Beta version: Firebase Authentication, Real-time Database, Analytics for Firebase and Cloud Firestore.&lt;/p&gt;

&lt;h3 id=&quot;orchestration&quot;&gt;Orchestration&lt;/h3&gt;
&lt;p&gt;Applications with serverless architecture, where functions start, execute and finish in a matter of milliseconds, do not preserve state. Each function is completely independent and data cannot be saved in the container, which is demolished when the function completes its task.&lt;/p&gt;

&lt;p&gt;For enabling state in a stateless architecture and orchestrate functions, AWS created Step Functions. This module logs the state of each function so it can be used by subsequent functions or for root-cause analysis.&lt;/p&gt;

&lt;p&gt;With Azure Functions, you can orchestrate and automate the tasks using Azure Logic Apps as well as Durable Functions. You can easily integrate different services of cloud and on-premise through connectors.  Google Cloud Functions at present doesn’t support integration with Cloud Composer, GCP’s workflow orchestration services.&lt;/p&gt;

&lt;p&gt;Laurens Van Houtven, Principal at Latacora, faced quite a few problems with functions orchestration and monitoring. Here’s what he has to say,&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;With Google Cloud Functions, there were two major problems that we faced, first, there isn’t a straightforward way to integrate it with any mail services (like SES + AWS Lambda), secondly, it has limited runtime support for the function written in JS.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Other problems our clients have seen include e.g. limited orchestration support (step functions) and that API Gateway doesn’t scale down to very simple things.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;They’re hard to monitor because most security monitoring tools don’t deal with them (AWS Config finally got Lambda support last week) but we solve that problem with internal tooling. The annoyances with Lambda (e.g. API Gateway) you can mostly work around by using e.g. Terraform to orchestrate which you should be doing anyway. The limitations with alternatives are pretty fundamental.&lt;/em&gt;”&lt;/p&gt;

&lt;h3 id=&quot;concurrency--execution-time&quot;&gt;Concurrency &amp;amp; Execution Time&lt;/h3&gt;
&lt;p&gt;Concurrency refers to the parallel number of executions that happens at any given time. You can estimate the concurrent execution count, but this count differs depending upon the type of event source.&lt;/p&gt;

&lt;p&gt;Also, you functions scale automatically based on incoming request rate, but not all resources in your architecture may be able to do so. Hence, concurrency is also dependent on downstream resources support.&lt;/p&gt;

&lt;p&gt;Currently, AWS Lambda limits the total concurrent executions across the functions within a given region to 1000. You can control concurrency in two ways, for individual functional level and account level. Also, the maximum function execution time is 900 seconds or 15 minutes.&lt;/p&gt;

&lt;p&gt;At present, Azure functions support multiple functions concurrently provided they are within a single app instance which has no limit. The number of concurrent activity and orchestrator function executions is capped at 10X the number of cores on the VM. Like AWS Lambda, this also has an execution time limit of 300 seconds or 5 minutes which is upgradeable to 600 seconds or 10 minutes within consumption plan.&lt;/p&gt;

&lt;p&gt;Likewise, with Google Cloud Functions, there is no concurrent limit for HTTP invocation. For other types of invocation, the maximum number of concurrent function requests is 1000. However, the maximum execution time, unlike other service providers, is 60 seconds by default which can be upgraded to 540 seconds or 9 minutes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: An important difference between AWS and Google Cloud Functions is that concurrency is measured at the account level for AWS but at the project level for Cloud Functions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This means that, for AWS, if a function executes, the total number of available executions for all functions is reduced by 1 for the account. For Google Cloud Functions, if a function executes, the number of available executions for only that function is reduced by 1 and not for the account.&lt;/p&gt;

&lt;p&gt;In theory, you could have 10 functions, each with 1,000 concurrent executions on Cloud Functions whereas you could only have 1 such function on AWS.&lt;/p&gt;

&lt;h3 id=&quot;scalability--availability&quot;&gt;Scalability &amp;amp; Availability&lt;/h3&gt;
&lt;p&gt;AWS Lambda supports dynamic scalability in response to the increased traffic. However, this is subjected to an individual account level concurrent execution limit.&lt;/p&gt;

&lt;p&gt;To manage traffic burst, AWS Lambda will immediately increase your concurrently executing functions by a predetermined amount, dependent on which region it’s executed. If there is no predefined limit, it keeps on increasing the number of functions by 500 per minute until your demand is met.&lt;/p&gt;

&lt;p&gt;Currently, Azure Functions are available based upon two different plans. First, the consumption plan which scales your function automatically where a function execution times out after a configurable period of time. Second, the app service plan which runs your functions on the dedicated VMs.&lt;/p&gt;

&lt;p&gt;Dedicated VMs are allocated to every function app, which means the function’s host can be always up and running.&lt;/p&gt;

&lt;p&gt;With Google Cloud Functions, you have the novelty of automatic scalability. However, the background functions scale more gradually and it depends on the duration of functions and longer functions will scale slightly slower. Also, maximum scalability is based upon the rate limits.&lt;/p&gt;

&lt;h3 id=&quot;logging--monitoring&quot;&gt;Logging &amp;amp; Monitoring&lt;/h3&gt;
&lt;p&gt;AWS Lambda has inbuilt functionality of monitoring Lambda functions by reporting metrics through Amazon CloudWatch. These metrics include a number of requests, latency per request, number of requests resulting in an error.&lt;/p&gt;

&lt;p&gt;It automatically integrates with Amazon CloudWatch Logs and pushes all logs from your code to a CloudWatch Logs group associated with a Lambda function. You can also use AWS X-Ray to leverage end-to-end monitoring of your functions, however, it comes with the extra price.&lt;/p&gt;

&lt;p&gt;Azure Functions comes with built-in integration with Azure Application Insights for monitoring functions. Functions also have built-in monitoring that doesn’t use Application Insights. If you do not want to use Application Insights, you can opt for a built-in logging system, however, that uses Azure Storage.&lt;/p&gt;

&lt;p&gt;Google Cloud Platform provides you with Google Stackdriver which is a suite of monitoring tools (Stackdriver Logging, Stackdriver Error Reporting, Stackdriver Monitoring) that helps you understand what’s going on in your Cloud Functions. It has in-built tools for logging, reporting errors and monitoring. Apart from Stackdriver, you can view execution times, execution counts and memory usage in the GCP Console.&lt;/p&gt;

&lt;h3 id=&quot;aws-lambda-vs-azure-functions-vs-google-cloud-functions-pricing-comparison&quot;&gt;AWS Lambda vs Azure Functions vs Google Cloud Functions: Pricing Comparison&lt;/h3&gt;
&lt;p&gt;Before we jump on to the exact dollars, let’s understand the execution environment in a better manner.&lt;/p&gt;

&lt;p&gt;Execution time is directly proportional to the execution environment. For example, if you’re dealing with a function which is computation heavy and takes a few milliseconds of time to execute. This might prompt you to opt for lower memory sizes as it will cost you less but it is a double-edged sword. The smaller the machine, the more time it will take to execute a function.&lt;/p&gt;

&lt;p&gt;AWS Lambda has a free-tier under which it covers first 1M function requests &amp;amp; 400,000 GB-secs per month. Thereafter, you will be required to pay $0.20 per 1M requests or $0.0000002 per request. Also, $0.00001667 for every GB-secs used.&lt;/p&gt;

&lt;p&gt;Azure Functions’ free tier covers 1M requests and 400,000 GB-secs on the monthly basis. Afterwards, you will pay $0.000016/GB-secs and $0.20 per 1M executions.&lt;/p&gt;

&lt;p&gt;Google Cloud Functions are priced on the execution time (GB-sec), the number of invocations and how many resources you provision for the function (GHz-secs).&lt;/p&gt;

&lt;p&gt;The free tier includes first 2M requests and $0.40 beyond that. Compute time is measured in two units: GB-secs &amp;amp; GHz-secs. Moreover, networking outbound data is charged flatly at $0.12/Gb with first 5GB free. This pricing model makes it a little different than the rest of the contenders.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: One another important pricing factor we shouldn’t ignore is API Gateway. For example, with AWS Lambda, API Gateway is a prerequisite and is required for HTTP &amp;amp; HTTPS invocations both. However, with Google Cloud Functions, HTTP requests don’t require an API Gateway.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is one of the major benefits of Google Cloud Functions: HTTP functions do not require an API Gateway. For AWS, this contributes a significant amount of cost and complexity in running your function. With Google Cloud Functions, you get an HTTP endpoint and routing/networking are set up for you automatically. You don’t need to pay an additional cost to an API Gateway.&lt;/p&gt;

&lt;p&gt;Read more: For a detailed analysis of serverless pricing refer to this blog. If you’re keen on what it takes to run serverless applications, here is an in-depth resource.&lt;/p&gt;

&lt;h3 id=&quot;aws-lambda-vs-azure-functions-vs-google-cloud-functions-performance-comparison&quot;&gt;AWS Lambda vs Azure Functions vs Google Cloud Functions: Performance Comparison&lt;/h3&gt;
&lt;p&gt;Recently at USENIX Annual Technical Conference 2018, an academic report was published about the performance of various serverless platforms. The research was conducted on a single “measurement function” which performed the two basic tasks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Collect invocation timing and runtime information of function instance&lt;/li&gt;
  &lt;li&gt;Run specified tasks (measuring local disk I/O throughput, network throughput) based on received messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#1. Concurrency &amp;amp; Scalability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For AWS, 3328 MB was the maximum aggregate memory that can be allocated across all function instances on any VM in AWS Lambda. This perhaps suggests that AWS Lambda tries to place a new function instance on the top of the existing VM so as to increase the memory utilization rates.&lt;/p&gt;

&lt;p&gt;Despite Azure Functions claiming to scale 200 instances for a single Node.js function, it fails to do in practice. In this experiment, it was able to scale at most 10 function instances running concurrently for a single function.&lt;/p&gt;

&lt;p&gt;With Google Cloud Functions, only half of the expected number of instances, even for a low concurrency level, could be launched at the same time. The remaining requests were queued.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2. Cold Start&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Speaking of AWS Lambda, there wasn’t any major cold start difference between the launching of existing and new instance. In fact, the median cold start time i.e. latency between the two cases was only 39 ms.&lt;/p&gt;

&lt;p&gt;On the contrary, it took a long time for the Azure instances to launch despite the fact that 1.5 GB memory was allocated to them. Median cold start latency was observed at 3640 ms in Azure.&lt;/p&gt;

&lt;p&gt;Surprisingly, with Google Cloud Functions, the median cold start latency ranged from 110 ms to 493 ms. At present, it allocated memory proportionally to CPU, but in Google, memory size has more impact on cold start latency than in AWS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/5/academic2-1-610x467.jpg&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#3. Instance Maximum Idle Time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This can be loosely defined as the maximum time an instance can stay idle before it shuts down. Here are the results:&lt;/p&gt;

&lt;p&gt;For AWS, an instance was able to stay active for 27 minutes. Notably, in 80% of the cases, instances were shut down after 26 minutes. With Azure Functions, no consistent idle time was discovered.&lt;/p&gt;

&lt;p&gt;For Google Cloud Functions, the idle time was as huge as 120 minutes. Even after 120 minutes, in 18% of the cases, the instances remained active.&lt;/p&gt;

&lt;p&gt;However, this data may contradict when you put your specific needs in practice. Not only that, but the platform’s internal security practices also play a major role.&lt;/p&gt;

&lt;p&gt;Recently I came across an opinion where a company had to move a large SaaS application from AWS to Azure. The tech stack included 80% Linux/OSS and 20% .NET.&lt;/p&gt;

&lt;p&gt;The organization switched to Azure due to its affinity for security compliance and data sovereignty. After the switch, they came to realize that Azure is much stronger in support and in an ability to interact with Azure product teams to help guide the direction of the platform.&lt;/p&gt;

&lt;p&gt;It is evident from the recent reports Azure is keeping up with the face in the serverless landscape and there is no way to neglect them.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;According to the latest study by CNCF, AWS leads the serverless race with almost 70% of the production deployment done using AWS Lambda.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AWS Lambda owns 70% percent of the active serverless platform user base – https://t.co/oTqy1sN1Wm … let me translate that for you. Amazon is currently positioned to own 70% of the future of ALL software.— Simon Wardley #Labour #EEA #Exit #Attlee #Disraeli (@swardley) April 19, 2018&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The 2-year head start (launched in 2014), quick implementation of new features and performance are the major factors in AWS Lambda’s pole position.&lt;/p&gt;

&lt;p&gt;Presently serverless is driven by cloud-native practitioners, but as serverless adoption increases the organizations will continue to utilize multiple clouds, with AWS usually being part of the mix. Thus in the future, we are likely to see Azure and Google Cloud Functions catching up with AWS Lambda.&lt;/p&gt;

&lt;p&gt;If you are diving into serverless with no platform preference, I would encourage everyone to explore and try each of these before incorporating them into their custom software development services. Understand the use cases why and when serverless can help you.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Comparing Serverless Providers</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/sw_design.png" /></entry><entry><title type="html">Serverless vs Containers A Face-off between your Application Deployment Options</title><link href="http://localhost:4000/blog/serverlessVScontainers" rel="alternate" type="text/html" title="Serverless vs Containers A Face-off between your Application Deployment Options" /><published>2020-01-15T10:41:00+00:00</published><updated>2020-01-15T10:41:00+00:00</updated><id>http://localhost:4000/blog/ServerlessVsContainerCompare</id><content type="html" xml:base="http://localhost:4000/blog/serverlessVScontainers">&lt;h2 id=&quot;serverless-vs-containers&quot;&gt;Serverless-vs-containers&lt;/h2&gt;

&lt;p&gt;Like most of the existing cloud application development trends, Serverless and Containers have been widely spoken-of and discussed among developers. Some feel that Serverless originated as an alternative to containerization and some feel serverless can be used with containers for application deployment.&lt;/p&gt;

&lt;p&gt;The difference between Serverless and Containerization is not limited to performance, but also applicable for longevity limitations, application scalability, time-of-deployment etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/6/container-function-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s 2019 and like most of the ongoing trends of devops, going serverless or using containers for application deployment seem to be a common point of debate among all new kids (pun intended!) on the block right now! And we still feel it’s not going to end anytime soon.&lt;/p&gt;

&lt;p&gt;However, Is the Serverless vs Container comparison popular just because some cloud enthusiasts feel that serverless computing is a replacement for containers? OR Is it because some people feel that serverless is just another technology that can be used inside containers?&lt;/p&gt;

&lt;p&gt;In this article, we’ll compare both these technologies and try to find out which one (if any!) is better. What are the common and distinct qualities? Which one is suitable for what application use case? But first, let’s start with some background.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-need-serverless-computing&quot;&gt;Why do we need Serverless computing?&lt;/h3&gt;
&lt;p&gt;Over the past few years, we used to deploy our applications over big servers where the overall responsibility for managing or provisioning the resources is upon us. There are few issues with it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unnecessary charges for keeping the server up even when we are not consuming any resources&lt;/li&gt;
  &lt;li&gt;Overall responsibility for maintenance and uptime of the server is upon us&lt;/li&gt;
  &lt;li&gt;We are also responsible for applying the appropriate security updates to the server.&lt;/li&gt;
  &lt;li&gt;As our usage scales we need to manage scaling up our server as well. And as a result manage scaling it down when we don’t have as much usage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With so many issues (like the ones mentioned above), it’s a lot of work to handle for smaller companies and individuals. Moreover, as a result this impacts the overall Time to market and cost of delivery which is otherwise the most important factors in &lt;strong&gt;Custom software development&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is where “Serverless computing” comes into play. With Serverless computing, you are provided with an execution model where your cloud provider (AWS, Azure or Google cloud) is executing a piece of code by dynamically allocating the resources. This only charge you for the amount of resources that are used to run the application code. That’s a lot of cost cutting when you compare the &lt;em&gt;compute cost&lt;/em&gt; with traditional servers. This way, your overall experience of computing is “serverless” (as the cost of managing server resources is less) but the infrastructure is not. If you want to know A-Z of serverless architecture, &lt;a href=&quot;blog/serverless-architecture-guide&quot;&gt;&lt;em&gt;read our Comprehensive Guide to Serverless Architecture&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-need-containerization&quot;&gt;Why do we need Containerization?&lt;/h3&gt;
&lt;p&gt;Containerization is needed because it intends to solve an important problem: to ensure that a software runs correctly when it is moved from one computing environment to another.  Containerization an application also enables different teams to work on different parts of the application independently, as far as there is no major change in the way how they interact with each other. As a result, it is easier to develop a software and testing it faster for all the possible errors.&lt;/p&gt;

&lt;p&gt;In a world such as agile, DevOps, this has become more critical than ever. Containers simply make it simple for developers to know that their software will run without worrying about where it will be deployed. They also enable that we have commonly known as ‘microservices’.&lt;/p&gt;

&lt;p&gt;Following are the items that are usually bundled in a container:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application&lt;/li&gt;
  &lt;li&gt;Dependencies&lt;/li&gt;
  &lt;li&gt;Libraries&lt;/li&gt;
  &lt;li&gt;Binaries&lt;/li&gt;
  &lt;li&gt;Configuration files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To manage all these containers, you are required to have another set of specialized software like Docker Swarm, Kubernetes, etc. This software helps you orchestrate these containers so that you can push them out to different machines while making sure that they run.&lt;/p&gt;

&lt;p&gt;The Image attached below represents how Containerization works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/6/Artboard-6.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we now why do we need serverless and containers, let’s have a feature by feature comparison of Serverless vs Containers so as to get a proper idea about each deployment option:&lt;/p&gt;

&lt;h4 id=&quot;1-longevity-limitations-in-containers-vs-serverless&quot;&gt;#1. Longevity Limitations in Containers vs Serverless&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: As you may know, functions live very ‘short’. Here, short can be defined as 5 minutes or less. Functions are ephemeral, means, the container running the function may live for only once and die after its execution.&lt;/p&gt;

&lt;p&gt;Shorter lifespan is one of the caveats of functions but it also provides agility which gives devs freedom and flexibility to push apps into the production which are easy to scale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: This is not the case with containers. Containers are always running and spinning and they do not die once their execution is done. This empowers them to leverage the benefit of caching, about which we will discuss later, but at the same time, scaling is not instantaneous.&lt;/p&gt;

&lt;h4 id=&quot;2-state-persistency&quot;&gt;#2. State persistency&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: As discussed in the above point, functions are ephemeral or ‘short-lived’ which in turn, makes them stateless. The more stateless your functions are, the more ways there are to put them together and build something powerful.&lt;/p&gt;

&lt;p&gt;The power of stateless computing lies in the ability to empower developers to write powerful, reusable functions and combine them. But it comes with the downside of caching. Since functions are stateless, you cannot cache anything for the further use, as a result, it faces high latency about which we will discuss in next point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: With containers, you can leverage the benefits of caching. To allow the data to be stored even when the containers are terminated, you’ll need to use a storage mechanism that will manage the data outside of the container. Anyways, why caching is so important?&lt;/p&gt;

&lt;p&gt;If the objects on the object file that container is about to produce is same as the previous builds, reusing a cache from the previous result is a great time saver in terms of computing. This enables the building of new containers extremely fast.&lt;/p&gt;

&lt;h4 id=&quot;3-latency--startup-time&quot;&gt;#3. Latency &amp;amp; Startup Time&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: Since functions are stateless, caching is unavailable and they don’t have copies of your functions running on standby, it results in higher invocation time. Functions stay warm, or your code is running while getting a command to be executed, for 15 minutes and die, hence, if you call it after the specified time, it will be a cold start.&lt;/p&gt;

&lt;p&gt;As a result, you may face latency issues especially when there are concurrent users. To tackle this, you can add the following code to it to keep it warm all the time as mentioned in our previous blog: Serverless Performance: Challenges and Best Practices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/6/serverless.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, this is temporary and can be used while you’re dealing with fewer functions. If you’re using it for all the functions, soon there will be a lot of dummy functions and then you won’t be able to manage it properly. However, the number of the function is quite small, it makes sense to use functions rather than spinning a whole container.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Considering the pre-serverless era of containers, these are always sitting there and all you have to do is send an HTTPS request to it and you get an instant response and low latency time. With caching at the advantage, containers can be spun fast with none of the files to be created again, as a reference to them is sufficient to locate and reuse the already built structures.&lt;/p&gt;

&lt;h4 id=&quot;-scalability-in-serverless-and-containers&quot;&gt;# Scalability in Serverless and Containers&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: In serverless architecture, the backend of an application automatically and inherently scales to meet demand of the desired scalability. Moreover, Serverless Computing can be compared to the functioning manner of a water supply: your supply provider turn the tap on and your consumers can acquire as much water they need at any time. They only pay for what they use. This concept is far more scalable than the attempt to buy water one bucket, or shipping one container at at time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: While using a container-based architecture, it’s the job of a developer to determine the number of containers to be deployed in advance when it comes to scale the application according to the desired needs. Moreover, with the increased demand a shipping company would try to ship more containers to the destination to meet that demand. But this won’t be much scalable either when demand of consumers exceeds the shipping company’s expectation.&lt;/p&gt;

&lt;h4 id=&quot;4-portability--migration&quot;&gt;#4. Portability &amp;amp; Migration&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: Let’s assume you’re already using many different services of AWS. If this is the case, then opting for Lambda functions would be extremely easy as it facilitates fast and accessible integration with its other services.&lt;/p&gt;

&lt;p&gt;Even if it’s not the case and you fear vendor lock-in, what you can do is to make sure all API endpoints and URLs used in your code get mapped through a domain/change via DNS is under your control.&lt;/p&gt;

&lt;p&gt;This gives you an option of cutting off a particular service or redirecting them to a different endpoint of your choice (eg. an another BaaS provider). This is better than hard coding your code in an endpoint which is not under your control or is unalterable.&lt;/p&gt;

&lt;p&gt;However, there are many FaaS providers and your concern for vendor lock-in is quite obvious. In case of Lambda, if it isn’t meeting your region specific requirements, here is what you can do. All Lambda handler code should be isolated and extremely thin shims to logic that is locked up in other modules/classes.&lt;/p&gt;

&lt;p&gt;This increases reusability and in the event that a refactor is necessary to move out of Lambda, makes that work much easier and straightforward. This also facilitates unit testing. An example of a thin Lambda handler:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/6/code.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Speaking of migration, it is still hazy how to fit FaaS into the current DevOps framework. It might happen that your organisation will write hundreds of function and after a time, nobody knows what functionalities were included in which functions and how many of them are still in use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: If you’re opting for container-based microservices architecture, these provide great portability. The time and efforts to move the code from developer’s laptop to your internal datacenter or out to different cloud providers are minimal.&lt;/p&gt;

&lt;p&gt;With the immense stress on innovation and time to market are getting lesser and lesser, opting for microservices empowers you to spin up new versions of your application.&lt;/p&gt;

&lt;p&gt;Hence microservices sounds like a good option to get started if you’re moving from monoliths due to ease in migration and various option for technology stack for multiple containers.&lt;/p&gt;

&lt;p&gt;However, running a container on a cloud platform has a huge amount of interdependencies. Such as upgrades need to be planned together which includes container hosts, container images, container engine and container orchestration.&lt;/p&gt;

&lt;p&gt;For some legacy applications that you want to shift to microservices, ‘containerizing’ them might be an easy and cheap option than to re-architecting the whole application into functions.&lt;/p&gt;

&lt;p&gt;#5. Development Environments &amp;amp; Language support for Serverless and Containers
Serverless: The language supported by popular FaaS providers are quite limited which mainly includes Node.js, Python, Java, C# and Go (in case of AWS Lambda).&lt;/p&gt;

&lt;p&gt;Containers: While containers empowers you with heterogeneous development environments and you can work on any technology stack you want. It might not sound like a huge benefit since developers these days are well-versed with multiple languages, but it is!&lt;/p&gt;

&lt;p&gt;When you’ll be hiring for your new project, you won’t be required to take language into considerations for microservice architecture. Since microservices are independently deployable and scalable with each service providing a firm module boundary, services can be written in the language of any choice and can be managed by different teams.&lt;/p&gt;

&lt;h4 id=&quot;6-system-control&quot;&gt;#6. System control&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: Dealing with functions such as AWS Lambda doesn’t come off as a hard task as it eliminates the infrastructure complexity, as a result, you can focus more on developing your product and business outcomes. It significantly reduces the time to market which is not the case with containers. However, there is a long list of things that should not be done while using AWS Lambda.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Plus, management of cluster configuration is a serious challenge as it prerequisites solid background in container technology. Talking about the control, microservices are comparatively easy to handle. Plus, orchestration framework like Kubernetes accelerates your governance and control over the architecture.&lt;/p&gt;

&lt;p&gt;Container-based microservice architecture imparts you full control over the individual as well as the whole system. This enables you to set policies, allocate and manage resources. Plus, having fine grain control over the security and migration services.&lt;/p&gt;

&lt;p&gt;With the full control over the container system comes the ability to see inside and outside of the containers. This allows comprehensive and effective testing &amp;amp; debugging using multiple environments and extensive resources. Whereas actual implementation and local testing of functions aren’t possible and hence it is hard to guess the performance issues.&lt;/p&gt;

&lt;h4 id=&quot;7-resource-heavy-processing-in-serverless-and-containers&quot;&gt;#7. Resource heavy processing in Serverless and Containers&lt;/h4&gt;
&lt;p&gt;Let’s take an example of AWS Lambda, if the function is taking more than 5 minutes, you’ll be mandated to dissect these tasks into smaller ones, plus, these are not the only limitations while working with them.&lt;/p&gt;

&lt;p&gt;You can allocate the maximum of 1.5 GB of RAM for executing a single function, your deployment package should not exceed the maximum size of 50 MB. Whereas with containers, you can allocate the computing resources as per your application requirements.&lt;/p&gt;

&lt;h4 id=&quot;8-testing-in-serverless-vs-containers&quot;&gt;#8 Testing in Serverless vs Containers&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: Testing is difficult in serverless based web applications as it often becomes hard for developers to replicate the backend environment on an local environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Since containers run on the same platform where they are deployed, it’s relatively simple to test a container-based application before deploying it to the production.&lt;/p&gt;

&lt;h4 id=&quot;9-maintenance-in-containers-and-serverless&quot;&gt;#9. Maintenance in Containers and Serverless&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: Maintenance in Serverless based applications is much easier than you can ever imagine. Since your serverless vendor such as AWS lambda takes care of all sort of things such as management and software updates to the server, overall maintenance is less.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Unlike Serverless – with which a developer don’t have to think about maintenance – it’s a developer job to to manage and update each container he deploy.&lt;/p&gt;

&lt;h4 id=&quot;10-cost-comparison-in-serverless-and-containers&quot;&gt;#10. Cost comparison in Serverless and Containers&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: As already mentioned above, using Serverless functions such as AWS lambda for application deployment prevents you for bearing unnecessary expenses of resources because application code does not run unless it is called. Instead, you will be charged for the server capacity that your application is going to use, anyways. If you want to have a clear overview regarding &lt;em&gt;AWS lambda pricing&lt;/em&gt;, we’ve already covered that in our previous blog post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Containers are constantly running, and therefore cloud providers have to charge for the server space even if no one is using the application at the time.&lt;/p&gt;

&lt;h4 id=&quot;11-time-of-deployment-difference-in-containers-vs-serverless&quot;&gt;#11. Time of deployment difference in Containers vs Serverless&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Serverless&lt;/strong&gt;: Since serverless functions are smaller than container microservices and they do not come bundled with system dependencies, it takes only milliseconds to deploy an application. Moreover, Serverless applications goes live as soon as the code is deployed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Although, Containers take longer to setup at the initial stages of development but once configured they only take few seconds to deploy.&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-serverless--serverless-use&quot;&gt;When to Use Serverless? : Serverless Use&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/6/what-function-can-do-better.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Serverless Computing is perfect fit for the following use-cases:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If your traffic pattern changes automatically. Not only it will be handled automatically, it will even shut down when there is no traffic at all.&lt;/li&gt;
  &lt;li&gt;If you are worried about the cost of maintenance of servers and the resources your application consume, serverless will be great fit for such use-case&lt;/li&gt;
  &lt;li&gt;If you don’t want to spend much time in thinking where your code is running and how!&lt;/li&gt;
  &lt;li&gt;Serverless websites and applications can be written and deployed without handling the work of setting up infrastructure. As such, it is possible to launch a fully-functional app or website in days using serverless.&lt;/li&gt;
  &lt;li&gt;Serverless architecture allows you to build performance-enhancing image and video services for any application. You can use its services to do things like dynamically resize images or change video transcoding for different target devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;when-to-use-containers--containers-use-case&quot;&gt;When to Use Containers? : Containers Use Case&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/6/What-containers-can-do-better-Copy.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Containers are best to use for Application deployment in following use cases:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you want to use the operating system of your own choice and leverage full control over the installed programming language and runtime version.&lt;/li&gt;
  &lt;li&gt;If you want to use software with specific version requirements, containers are great to start with.&lt;/li&gt;
  &lt;li&gt;If you are okay in bearing cost of using big yet traditional servers for anything such as Web APIs, machine learning computations, and long-running processes, then you might also want to try out containers as well (They will cost you less than servers anyways)&lt;/li&gt;
  &lt;li&gt;If you want to develop new container-native applications&lt;/li&gt;
  &lt;li&gt;If you need to refactor a very large and complicated monolithic application, then it’s better to use container as it’s better for complex applications&lt;/li&gt;
  &lt;li&gt;Some organizations still use containers to migrate existing applications into more modern environments. Container orchestration tools like Kubernetes comes with already defined best practices which provide ease in managing large-scale container set-up.&lt;/li&gt;
  &lt;li&gt;Container orchestration platforms such as Docker can solve your issues with unpredictable traffic (auto-scaling), however, the process of spinning containers up or down won’t be instantaneous.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Which one should you choose? It looks like both have its own benefits. Both can be best or worse solution depending on the use case and there can’t be anything predefined.&lt;/p&gt;

&lt;p&gt;If your existing application is big and it exists on-premise, you may first want to run in containers and then slowly move some of its parts towards functions. If you already have a microservice based application and you do not mind vendor lock-in, you can think of going serverless.&lt;/p&gt;

&lt;p&gt;Serverless architecture definitely worths your attention especially due to its cost-effectiveness.&lt;/p&gt;

&lt;p&gt;As discussed in the introduction, we can’t really say that serverless means the death of containers. Not as of now. However, containers and serverless are both growing technology and it will be interesting to see what each one of them behold.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Serverless-vs-containers</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/sw_design.png" /></entry><entry><title type="html">Serverless Performance Tuning with AWS Lambda</title><link href="http://localhost:4000/blog/serverless-performance" rel="alternate" type="text/html" title="Serverless Performance Tuning with AWS Lambda" /><published>2020-01-15T10:41:00+00:00</published><updated>2020-01-15T10:41:00+00:00</updated><id>http://localhost:4000/blog/ServerlessPerformanceTuning</id><content type="html" xml:base="http://localhost:4000/blog/serverless-performance">&lt;h2 id=&quot;serverless-performance-tuning&quot;&gt;Serverless Performance Tuning&lt;/h2&gt;

&lt;p&gt;Efficient configuration of AWS Lambda functions is highly critical when you’re expecting an optimal performance of your serverless applications. This blog discusses potential serverless performance bottlenecks and ways through which you can finetune AWS Lambda performance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/7/serverless-performance-1024x555.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve seen some remarkable and exponential client growth. Months over months, the number of projects that we are handling is growing at an exponential rate. And so is the expectation of exceptional service.&lt;/p&gt;

&lt;p&gt;As we move into this article, you’ll discover that predicting the performance of Serverless systems is quite a difficult job, especially for lower-memory functions. And hence, in this blog, we’ll try to set some concrete benchmarks which you can use to configure the performance of your serverless system.&lt;/p&gt;

&lt;h3 id=&quot;aws-lambda-performance-benchmark-2019&quot;&gt;AWS Lambda Performance Benchmark 2019&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Optimal Memory Size&lt;/li&gt;
  &lt;li&gt;Language Runtime&lt;/li&gt;
  &lt;li&gt;Parallel Version Invocation&lt;/li&gt;
  &lt;li&gt;Concurrency Issues&lt;/li&gt;
  &lt;li&gt;Cold vs Hot Startups&lt;/li&gt;
  &lt;li&gt;Code Optimization for Efficient Performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;optimal-memory-size&quot;&gt;Optimal memory size&lt;/h3&gt;
&lt;p&gt;Well, with some serverless vendors, you have the limit for choosing the memory from 128 MB to 1308 MB while some vendors select the memory automatically according to your function.&lt;/p&gt;

&lt;p&gt;This leaves the question of how to choose the optimal memory size for your functions. What I have observed is that simply choosing the memory size that sufficiently runs your function isn’t going to work. In fact, that’s an anti-pattern. Here’s why!&lt;/p&gt;

&lt;p&gt;Let’s take the example of AWS Lambda. Lambda provides you with a single dial to allocate the number of computing resources (RAM) to your function. This RAM allocation also impacts the amount of CPU time and network bandwidth received by your function.&lt;/p&gt;

&lt;p&gt;Now, why is it an anti-pattern? Because Lambda billing is as accurate as 100-ms increments. Hence, opting for the smallest sufficient amount of RAM might add latency to your application. If the increase in latency outweighs the resource cost savings, it might come off as more expensive.&lt;/p&gt;

&lt;p&gt;Well, the noteworthy point here is that you should test your lambda functions at all available resources level so as to determine the excellent level of price/performance for your application. You will observe that the performance level of your functions will increase logarithmically over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Specification&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The limits that you’ll set initially will be working as base limits. As you move on, you’ll come across a resource threshold where any additional RAM/CPU/Bandwidth available to your functions no longer provides any significant performance gain.&lt;/p&gt;

&lt;p&gt;However, the prices of lambda functions increase linearly with the increase in computing resources. And that is why your test should be able to determine the logarithmic function bend to choose the excellent configuration of your function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance Results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s the experiment was done by AWS which clearly shows that ideal memory allocation can be cost-effective with lower latency as well. Moreover, the additional cost of computing per 100 ms for using 512 MB over the lower memory options is far better than the amount of latency reduced in the function by allocating more resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/7/121.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Though there is no significant performance gain after 512 MB for this particular logic and hence the additional cost per 100 ms now drives the total cost higher. This means, 512 MB is the optimal choice for minimising total cost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Language runtime&lt;/strong&gt;
It could be definitely a concern of everybody, whether the chosen language will perform the performance of functions or not! But before moving on to that section, let us see which platforms support which languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is what users from around the world have to say about language runtime performance!&lt;/p&gt;

&lt;h4 id=&quot;1-aws-lambda&quot;&gt;#1. AWS Lambda:&lt;/h4&gt;

&lt;p&gt;As per the benchmark studies were done in 2017, compiled languages (Java &amp;amp; .NET) were significantly more consistent than dynamic languages (Python &amp;amp; Node.Js). However, one of the key advantages of writing code in Node.js and Python is that they produce much smaller size packages which result in lower cold start time.&lt;/p&gt;

&lt;p&gt;However, according to the latest 2018 benchmark studies, there is no significant difference between newer compiled languages (.NET Core 2.0 &amp;amp; Go) and the original dynamic languages.&lt;/p&gt;

&lt;p&gt;This is a remarkable achievement from AWS which gives a new level of assurance to its users. Thus, it is safer to assume that while new languages are being added to AWS Lambda, older languages are being improved at the same time.&lt;/p&gt;

&lt;h4 id=&quot;2-microsoft-azure-functions&quot;&gt;#2. Microsoft Azure Functions:&lt;/h4&gt;

&lt;p&gt;You may come across a thin performance difference across C# and Node.js which obviously depends on each case.&lt;/p&gt;

&lt;p&gt;At the present moment, slower startup time is observed with C# due to compilation requirements. C# does offer some deeper integration with the model exposed by the WebJobs SDK, allowing you to bind to any supported binding type, but in Node, Microsoft offers mechanisms to address most of the scenarios that would require specific binding types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro tips&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Choosing a language for functions is totally dependent on your comfort and your resources.&lt;/p&gt;

&lt;p&gt;But if the performance is the driving considerations, then you need to closely map out the performance characteristics of the languages you’re interested in and then choose the best one from them.&lt;/p&gt;

&lt;p&gt;The compiled languages (Java and .NET) shows the best performance for subsequent invocations but for that, you’ll have to incur the largest initial startup cost for container’s first invocation. The initial invocation time of the interpreted languages (Node.js and Python) are very fast compared to compiled languages, but can’t reach the same level of maximum performance as the compiled languages do.&lt;/p&gt;

&lt;p&gt;If your application may come across very spiky traffic or very infrequent use, we recommend one of the interpreted languages. If your application does not experience large peaks or valleys within its traffic patterns or does not have user experiences blocked on function response times, we recommend you choose the language you’re already most comfortable with.&lt;/p&gt;

&lt;h4 id=&quot;parallel-version-invocation&quot;&gt;Parallel version invocation&lt;/h4&gt;
&lt;p&gt;The deployment process in cloud functions is pretty straightforward and simple: Upload a new function code package → Publish a new version → Update your aliases. However, these steps are just the pieces of your deployment process with function.&lt;/p&gt;

&lt;p&gt;Each deployment process would be application specific. But the cloud architects should understand the relationship between function and it’s event sources and dependencies.&lt;/p&gt;

&lt;p&gt;Once such a concept in the deployment phase is parallel version invocation. When multiple triggering events occur faster than a single-threaded function runtime can process them, the runtime may invoke the function multiple times in parallel.&lt;/p&gt;

&lt;p&gt;Here an existing function container containing the previous source code package will continue to invoke along with the new function version. This occurs asynchronously on the service side while updating an alias to point to a new version of the function.&lt;/p&gt;

&lt;p&gt;The process of parallel function invocation though short-lived can affect the performance of the serverless architecture. It’s important that your application continues to operate as expected during this process. An artefact of this might be that any stack dependencies being decommissioned after a deployment (for example, database tables, a message queue, etc.) not be decommissioned until after you’ve observed all invocations targeting the new function version.&lt;/p&gt;

&lt;p&gt;In Azure functions, if a function app is using the Consumption hosting plan, the function app could scale out automatically. Each instance of the function app, whether the app runs on the Consumption hosting plan or a regular App Service hosting plan, might process concurrent function invocations in parallel using multiple threads. The maximum number of concurrent function invocations in each function app instance varies based on the type of trigger being used as well as the resources used by other functions within the function app.&lt;/p&gt;

&lt;p&gt;You may also like:  Serverless vs Containers: Comparing your Application Deployment Options&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concurrency issues&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For any basic application, multiple functions are going to execute transactions at the same time. Each transaction will perform multiple functions and may separate only by microseconds. To the users, the operations appear concurrent.&lt;/p&gt;

&lt;p&gt;However, concurrency is one of the most important performance issues which you need to closely monitor. Otherwise, your data is vulnerable possibly undesirable effects on reads and access to uncommitted data.&lt;/p&gt;

&lt;p&gt;Let’s compare concurrency issues by taking the example of an experiment. This experiment will help you understand the comparison of execution performance (concurrency and hot/cold startup) between AWS Lambda, Apache OpenWhisk, Google Cloud Functions and Azure Functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System specifications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The performance tool measures the latency and throughput of the Serverless Framework. This tool uses the Serverless Framework to deploy Node.js function to different services. It sends synchronous invocation calls by executing the function with HTTP events/triggers as per the requirements of the multiple platforms.&lt;/p&gt;

&lt;p&gt;The memory size for all the platforms is 512 MB except Microsoft Azure, which has auto-discovering requirements of functions.&lt;/p&gt;

&lt;p&gt;The test begins by maintaining the invocation calls to test the function by reissuing each request just after receiving the response from the preceding call.  Along with this, at every 10 seconds, it adds an additional concurrent call but only up to 15 concurrent requests to the test function. Moreover, this test was repeated 10 times per platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance Results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The below figure shows the results of the execution performance which measures the ability of serverless platforms.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/7/concurrency-768x495.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is what we can conclude from the above graph.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AWS Lambda&lt;/strong&gt;: It shows to scale linearly and exhibits the highest throughput of the commercial platform even at 15 concurrent requests.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Google Cloud Functions&lt;/strong&gt;: It shows a sublinear scaling and appears to taper off as the number of concurrent requests approaches to 15.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Microsoft Azure Functions&lt;/strong&gt;: Its performance is highly fluctuating, however, the throughput observed is quite high in places, outperforming the other platforms while the concurrency level is low.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apache OpenWhisk&lt;/strong&gt;: Its performance depicts a low throughput and no scalability until 8 concurrent requests and then function scales sublinearly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cold vs Hot startups&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we’ve discussed this inherent drawback in my previous blog about Serverless Architecture, I’ll just brief you on it.&lt;/p&gt;

&lt;p&gt;A cold startup occurs when you execute an inactive function for the first time. This occurs when your cloud service provider provisions the runtime container selected by your function and then runs it. This process is popularly referred to as a ‘cold start’ and is known for increasing your execution time&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/7/AWS-lambda-1024x555.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Whenever your function is running, it will stay hot, or in other sense, your container stays alive and waiting for you to command another execution. However, gradually and eventually, if there is no activity, your cloud provider will drop the container and hence, your function will become cold again.&lt;/p&gt;

&lt;p&gt;Let’s compare concurrency issues by taking the example of an experiment. This experiment will help you understand the cold start times and expiration behaviours of function instances between AWS Lambda, Apache OpenWhisk, Google Cloud Functions and Azure Functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Specification&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;System specification is the same as the above experiment.&lt;/p&gt;

&lt;p&gt;This test sends a single signal execution requests to the test function at increasing intervals in the range of 1-30 minutes. Moreover, the function containers expire after 15 minutes of inactivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance Results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The below figure depicts the performance results of various platforms.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/7/gp2-610x420.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s what we can conclude from the above test:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AWS Lambda&lt;/strong&gt;: It shows no effect of function idling.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Google Cloud Functions&lt;/strong&gt;: It shows no effect of function idling.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Microsoft Azure Functions&lt;/strong&gt;: It appears that it expires after few minutes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apache OpenWhisk&lt;/strong&gt;: It appears that it deallocates the container within around 10 minutes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The noteworthy performance of AWS Lambda and Google Cloud Functions can be credited to the extremely fast container start times or preallocation of containers even before its execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minimize the deployment package size of your function.&lt;/li&gt;
  &lt;li&gt;Make sure you use modularity of the AWS SDK for Java and .NET.&lt;/li&gt;
  &lt;li&gt;Also, reduce the complexities of your dependencies.&lt;/li&gt;
  &lt;li&gt;If this isn’t sufficient, leverage the container reuse by lazily loading variables so that your function stays warm for several minutes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/7/code-image-1024x555.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Optimisation for efficient performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Performance of your serverless application is hugely dependent on the logic you need the cloud function to execute and what the dependencies are. The serverless developers should understand the granularity in a microservices architecture.&lt;/p&gt;

&lt;p&gt;If there are many function invocations it would make the application complex to run and debug. While the scope of optimization is different for each application, there are some best practices to optimize your code for functions.&lt;/p&gt;

&lt;p&gt;Following are some of the best practices-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1. Container reuse&lt;/strong&gt;: Any externalized configuration or dependencies that your code retrieves should be stored and referenced locally after initial execution. The cloud architect should limit the re-initialization of variables on every invocation and use static initialization, global/static variables and singletons instead. Also, keep alive and reuse connections (HTTP, database, etc.) that were established during a previous invocation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2. Optimize the coding practices for deployment&lt;/strong&gt;: The cloud functions will support many language-specific SDKs. To enable the latest set of features and security updates, cloud provider (eg. AWS Lambda or Azure functions) will periodically update these libraries. These updates may introduce subtle changes to the behaviour of your function.&lt;/p&gt;

&lt;p&gt;To have full control of the dependencies your function uses, it is recommended to package all your dependencies with your deployment code. It is also important to minimize the package size to its runtime necessities. This will reduce the amount of time that it takes for your deployment package to be downloaded and unpacked ahead of invocation.&lt;/p&gt;

&lt;p&gt;For example- Google functions authored in Java or .NET Core, avoid uploading the entire GCP SDK library as part of your deployment package. Instead, selectively depend on the modules which pick up components of the SDK you need (e.g. Datastore, Google cloud storage SDK modules and Google function libraries). Prefer simpler frameworks that load quickly on container startups such as Dagger and Guice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#3.Separate the point of entry for function and core logic&lt;/strong&gt;: For example, keep the AWS Lambda handle separate from core logic. This makes unit-testing of the function easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#4. Avoid long-running functions&lt;/strong&gt;: Functions can become large and long-running due to language and external dependencies. This can cause unexpected timeout issues. Refactor large functions into smaller function sets that work together and return faster responses.&lt;/p&gt;

&lt;p&gt;For example, an HTTP trigger function might require an acknowledgement response within a certain time limit. The HTTP trigger payload is queued to be processed by a queue trigger function. This way you can defer the actual task and return an immediate response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#5. Initializing database connections&lt;/strong&gt;: After a function is executed, the serverless provider (AWS Lambda) maintains the runtime container for some time. This is done in anticipation of another function invocation. So for establishing database connection leveraging global scope is very important. Instead of re-establishing the connection, the original connection should be used in the subsequent invocations.&lt;/p&gt;

&lt;p&gt;Declare database connections and other objects/variables outside the Lambda function handler code to provide additional optimization when the function is invoked again. You can add logic to your code to check if a connection already exists before creating one.&lt;/p&gt;

&lt;h3 id=&quot;take-away&quot;&gt;Take Away!&lt;/h3&gt;
&lt;p&gt;Armed with this knowledge, now you can take the better decision on how to configure your functions.&lt;/p&gt;

&lt;p&gt;The other lesson, I’d like to impart you is that function benchmarks are supposed to be gathered over the course of time and not in hours and minutes. Hence, AWS Lambda performance monitoring is a continuous process.&lt;/p&gt;

&lt;p&gt;We’ll be refurbishing this blog from time to time and try to be updated in our custom software development practices. So, keep in touch to stay updated about AWS Lambda performance.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Serverless Performance Tuning</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/sw_design.png" /></entry><entry><title type="html">How to Build a Scalable Application up to 1 Million Users on AWS</title><link href="http://localhost:4000/blog/building-scalable-application-aws-platform" rel="alternate" type="text/html" title="How to Build a Scalable Application up to 1 Million Users on AWS" /><published>2020-01-12T10:41:00+00:00</published><updated>2020-01-12T10:41:00+00:00</updated><id>http://localhost:4000/blog/ScalableawsApp</id><content type="html" xml:base="http://localhost:4000/blog/building-scalable-application-aws-platform">&lt;h3 id=&quot;build-a-scalable-application&quot;&gt;Build a Scalable Application&lt;/h3&gt;

&lt;p&gt;Scalability of an application is equally important as its features and user interface. It becomes even more important if your app is going to serve more than a million users in the future. In this blog, you will learn how to scale your app up to 1 million users on AWS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/4/User-scale-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Suppose you’ve built a web application and started getting few customers. After some feedback and suggestions, you are ready with the full-fledged product. Now, your marketing team shares your app on product hunt to acquire new customers. Suddenly, thousands of visitors are using your app and at one point they are unable to use your app.&lt;/p&gt;

&lt;p&gt;You’ve tested your app and it is working fine. So what happened?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“This is not a bug but a problem of scalability. Your cloud architecture is not designed to scale with increasing load.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve seen many companies which usually focus more on features and less on scalability. Creating applications that are both resilient and scalable is an essential part of any application architecture. In this blog, you will learn how to build highly scalable web application architecture that can scale with increasing load.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-scalable-application&quot;&gt;What is a Scalable Application?&lt;/h3&gt;
&lt;p&gt;Scalability refers to the ability of a system to give a reasonable performance under growing demands (This can be larger data-sets, higher request rates, the combination of size and velocity, etc). It should work well with 1 user or 1 million users and handles spikes in traffic automatically. By adding and removing the resources only when needed, scalable apps consume only the resources necessary to meet demand.&lt;/p&gt;

&lt;p&gt;When talking about scalability in cloud computing, you will often hear about two main ways of scaling – horizontal or vertical. Let’s look deeper into these terms.&lt;/p&gt;

&lt;h4 id=&quot;vertical-scaling-scaling-up&quot;&gt;Vertical scaling (Scaling Up)&lt;/h4&gt;

&lt;p&gt;Scaling up or vertical scaling refers to resource maximization of a single unit to expand its ability to handle the increasing load. In hardware terms, this includes adding processing power and memory to the physical machine running the server. In software terms, scaling up may include optimizing algorithms and application code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/4/Single-Host-Vertical-Scalibility.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;horizontal-scaling-scaling-out&quot;&gt;Horizontal scaling (Scaling Out)&lt;/h4&gt;

&lt;p&gt;Scaling out or horizontal scaling refers to resource increment by the addition of units to the app’s cloud architecture. This means adding more units of smaller capacity instead of adding a single unit of larger capacity. The requests for resources are then spread across multiple units thus reducing the excess load on a single machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/4/Single-Host-Horizontal-Scalibility.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;characteristics-of-the-scalable-application&quot;&gt;Characteristics of the Scalable Application&lt;/h3&gt;
&lt;p&gt;What does scalability look like? There are some areas where an app needs to excel to be considered scalable.&lt;/p&gt;

&lt;h4 id=&quot;performance&quot;&gt;Performance&lt;/h4&gt;
&lt;p&gt;First and foremost, the application must operate well under stress with low latency. The speed of a website affects usage and user satisfaction, as well as search engine rankings, a factor that directly correlates to revenue and retention. As a result, creating a scalable web application architecture that is optimized for fast responses and low latency is key.&lt;/p&gt;

&lt;h4 id=&quot;availability-and-reliability&quot;&gt;Availability and Reliability&lt;/h4&gt;
&lt;p&gt;These are closely related and equally necessary. Scalable apps rarely if ever go down under stress. They need to reliably produce data upon request and not lose stored information.&lt;/p&gt;

&lt;h4 id=&quot;manageability&quot;&gt;Manageability&lt;/h4&gt;
&lt;p&gt;The manageability of the cloud architecture equates to the scalability of operations: maintenance and updates. Things to consider for manageability are the ease of diagnosing and understanding problems when they occur, ease of making updates or modifications, and how simple the system is to operate. (i.e., does it routinely operate without failure or exceptions?)&lt;/p&gt;

&lt;h4 id=&quot;cost&quot;&gt;Cost&lt;/h4&gt;
&lt;p&gt;Highly scalable applications don’t have to be unreasonably expensive to build, maintain, or scale. Planning for scalability during development allows the app to expand as demand increases without causing undue expenses.&lt;/p&gt;

&lt;p&gt;You’ve plenty of options to choose the cloud provider while building the high-performance web application architecture. The three leading cloud computing vendors, AWS, Microsoft Azure and Google Cloud, each have their own strengths and weaknesses that make them ideal for different use cases.&lt;/p&gt;

&lt;p&gt;In this blog, I’ve chosen AWS to show you how to build web scalable application. AWS is a subsidiary of the renowned company, Amazon, it provides different services that are cloud-centered for various requirements. AWS holds the highest 33% market share of cloud computing. They provide excellent documentation on each of their services, helpful guides and white papers, reference architectures for common apps.&lt;/p&gt;

&lt;h3 id=&quot;steps-to-build-a-scalable-application-based-on-increasing-users-from-1-to-1-million&quot;&gt;Steps to build a scalable application based on increasing users from 1 to 1 million&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Step1 : Initial Setup of Cloud Architecture&lt;/li&gt;
  &lt;li&gt;Step2 : Create a Multiple Hosts and Choose Database&lt;/li&gt;
  &lt;li&gt;Step3 : Store database on Amazon RDS&lt;/li&gt;
  &lt;li&gt;Step4 : Create a multiple avialibility zones&lt;/li&gt;
  &lt;li&gt;Step5 : Move Static content to Object-based Storage&lt;/li&gt;
  &lt;li&gt;Step6 : Auto Scaling&lt;/li&gt;
  &lt;li&gt;Step7 : Service Oriented Architecture(SOA)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;1-user&quot;&gt;1 User&lt;/h3&gt;
  &lt;p&gt;### Initial Setup of Cloud Architecture&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Amazon Machine Images (AMI)&lt;/li&gt;
    &lt;li&gt;Amazon EC2&lt;/li&gt;
    &lt;li&gt;Amazon VPC&lt;/li&gt;
    &lt;li&gt;Amazon Route 53&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Amazon Machine Images (AMI)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Machine Image (AMI) gives the information required to launch an instance, which is a virtual server in the cloud. You can specify an AMI during the launch an instance. An AMI includes a template for the root volume for the instance, launch permissions that control which AWS accounts can use the AMI to launch instances and a block device mapping that specifies the volumes to attach to the instance when it’s launched.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Elastic Compute Cloud (Amazon EC2)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Elastic Compute Cloud provides the scalable computing capacity in the AWS cloud. This eliminates the hardware upfront so that you can develop and deploy applications faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Virtual Private Cloud (Amazon VPC)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Virtual Private Cloud gives a provision to launch AWS resources in a virtual network. It gives complete control over the virtual networking environment including a selection of IP address range, subnet creation, the configuration of route tables and network gateways.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Route 53&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Route 53 is a highly available and scalable cloud DNS web service. Amazon Route 53 effectively connects user requests to infrastructure running in AWS – such as Amazon EC2 instances, Elastic Load Balancing load balancers or Amazon S3 buckets.&lt;/p&gt;

&lt;p&gt;Here you need a bigger box. You can simply choose the larger instance type which is called vertical scaling. At the initial stage, vertical scaling is enough but we can’t scale vertically indefinitely. Eventually, you’ll hit the wall. Also, it doesn’t address failover and redundancy.&lt;/p&gt;

&lt;h3 id=&quot;users--10&quot;&gt;USERS &amp;gt; 10&lt;/h3&gt;
&lt;h3 id=&quot;create-multiple-hosts-and-choose-the-database&quot;&gt;Create multiple hosts and choose the database&lt;/h3&gt;
&lt;p&gt;First, you need to choose the database as users are increasing and generating data. It’s advisable to start with SQL Database first because of the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Established and well-worn technology.&lt;/li&gt;
  &lt;li&gt;Community support and latest tools.&lt;/li&gt;
  &lt;li&gt;We aren’t going to break SQL DBs in our first 10 million users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note, you can choose the NoSQL database if your users are going to generate a large volume of data in various forms.&lt;/p&gt;

&lt;p&gt;At this stage, you have everything in a single bucket. This architecture is harder to scale and complex to manage in the long run. It’s time to introduce the multi-tier architecture to separate the database from the application.&lt;/p&gt;

&lt;h3 id=&quot;users--100&quot;&gt;USERS &amp;gt; 100&lt;/h3&gt;
&lt;h3 id=&quot;store-database-on-amazon-rds-to-ease-the-operations&quot;&gt;Store database on Amazon RDS to ease the operations&lt;/h3&gt;
&lt;p&gt;When users increase to 100, Database deployment is the first thing which needs to be done. There are two general directions to deploy a database on AWS. The foremost option is to use a managed database service such as Amazon Relational Database Service (Amazon RDS) or Amazon Dynamo DB and the second step is to host your own database software on Amazon EC2.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon RDS&lt;/li&gt;
  &lt;li&gt;Amazon DynamoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Amazon RDS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Relational Database Service (Amazon RDS) makes it easy to set up, operate, and scale a relational database in the cloud. Amazon RDS provides six familiar database engines to choose from, including Amazon Aurora, Oracle, Microsoft SQL Server, PostgreSQL, MySQL and MariaDB.&lt;/p&gt;

&lt;h3 id=&quot;user--1000&quot;&gt;User &amp;gt; 1000&lt;/h3&gt;
&lt;h3 id=&quot;create-multiple-availability-zones-to-improve-availability&quot;&gt;Create multiple availability zones to improve availability&lt;/h3&gt;
&lt;p&gt;As per current architecture, you may face availability issues. If the host for your web app fails then it may go down. So you need another web instance in another Availability Zone where you will put the slave database to RDS.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Elastic Load Balancer (ELB)&lt;/li&gt;
  &lt;li&gt;Multi – AZ Deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here you’ve to use Elastic Load Balancer (ELB) to balance the load between the two web host instances in the two AZs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elastic Load Balancer (ELB)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ELB distributes the incoming application traffic across EC2 instances. It is horizontally scaled, imposes no bandwidth limit, supports SSL termination, and performs health checks so that only healthy instances receive traffic.&lt;/p&gt;

&lt;p&gt;This configuration has 2 instances behind the ELB. We can have 1000s of instances behind the ELB. This is Horizontal Scaling.&lt;/p&gt;

&lt;p&gt;At this stage, you’ve multiple EC2 instances to serve thousands of users which ultimately increases your cloud cost. To reduce the cost, you have to optimize instances’ usage based on varying load.&lt;/p&gt;

&lt;h3 id=&quot;users-10000s--100000&quot;&gt;Users: 10,000s – 100,000&lt;/h3&gt;
&lt;h3 id=&quot;move-static-content-to-object-based-storage-for-better-performance&quot;&gt;Move static content to object-based storage for better performance&lt;/h3&gt;
&lt;p&gt;To improve performance and efficiency, you’ll need to add more read replicas to RDS. This will take load off the write master database. Furthermore, you can reduce the load from web servers by moving static content to Amazon S3 and Amazon CloudFront.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon S3&lt;/li&gt;
  &lt;li&gt;Amazon CloudFront&lt;/li&gt;
  &lt;li&gt;Amazon DynamoDB&lt;/li&gt;
  &lt;li&gt;Amazon ElastiCache&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Amazon S3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon S3 is object-based storage. It is not attached to EC2 instance which makes it best suitable to store static content, like javascript, CSS, images, videos. It is designed for 99.999999999% of durability and can store multiple petabytes of data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon CloudFront&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon CloudFront is a Content Delivery Network(CDN). It retrieves data from Amazon S3 bucket and distributes it to multiple data center locations. It caches content at the edge locations to provide our users with the lowest latency access.&lt;/p&gt;

&lt;p&gt;Furthermore, to reduce the load from database servers, you can use DynamoDB(managed NoSQL database) to store session state. For caching data from the database, you can use Amazon ElastiCache.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon DynamoDB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon DynamoDB is a fast and flexible NoSQL database service for applications that need consistent, single-digit millisecond latency. It is a completely managed cloud database and supports document and key-value store models.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon ElastiCache&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon ElastiCache is a Caching-as-a-Service. It removes the complexity associated with deploying and managing a distributed cache environment. It’s a self-healing infrastructure if nodes fail new nodes are started automatically.&lt;/p&gt;

&lt;h3 id=&quot;users--500000&quot;&gt;Users &amp;gt; 500,000&lt;/h3&gt;
&lt;h3 id=&quot;setting-up-auto-scaling-to-meet-the-varying-demand-automatically&quot;&gt;Setting up Auto Scaling to meet the varying demand automatically&lt;/h3&gt;
&lt;p&gt;At this stage, your architecture is quite complex to be managed by the small team and without proper monitoring, analyzing it’s difficult to move forward.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon CloudWatch&lt;/li&gt;
  &lt;li&gt;AWS Elastic Beanstalk&lt;/li&gt;
  &lt;li&gt;AWS OpsWorks&lt;/li&gt;
  &lt;li&gt;AWS Cloud Formation&lt;/li&gt;
  &lt;li&gt;AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that the web tier is much more lightweight, it’s time for Auto Scaling!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Auto Scaling is nothing but an automatic resizing of compute clusters based on demand.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Auto Scaling enables “just-in-time provisioning,” allowing users to scale infrastructure dynamically as load demands. It can launch or terminate EC2 instances automatically based on Spikes in Traffic. You pay only for the resources which are enough to handle the load.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/4/Amazon-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For monitoring you can use the following AWS services:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon CloudWatch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS CloudWatch provides a rich set of tools to monitor the health and resource utilization of various AWS services. The metrics collected by CloudWatch can be used to set up alarms, send notifications, and trigger actions upon alarms firing. Amazon EC2 sends metrics to CloudWatch that describe your Auto Scaling instances.&lt;/p&gt;

&lt;p&gt;The autoscaling group can include multiple AZs, up to as many as are in the same region. Instances can pop up in multiple AZs not just for scalability, but for availability.&lt;/p&gt;

&lt;p&gt;We need to add monitoring, metrics, and logging to optimize Auto Scaling efficiently.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Host-level metrics&lt;/strong&gt;. Look at a single CPU instance within an autoscaling group and figure out what’s going wrong.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aggregate level metrics&lt;/strong&gt;. Look at metrics on the Elastic Load Balancer to understand the performance of the entire set of instances.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log analysis&lt;/strong&gt;. Look at what the application is telling you using CloudWatch Logs. CloudTrail helps you analyze and manage logs. If you have set up region-specific configurations in CloudWatch, it is not easy to combine metrics from different regions within an AWS monitoring tool. In that case you can use Loggly, a log management tool. You can send logs and metrics from CloudWatch and CloudTrail to Loggly and unify these logs with other data for a better understanding of your infrastructure and applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Squeeze as much performance as you can from your configuration. Auto Scaling can help with that. You don’t want systems that are at 20% CPU utilization.&lt;/p&gt;

&lt;p&gt;The infrastructure is getting big, it can scale to 1000s of instances. We have read replicas, we have horizontal scaling, but we need some automation to help manage it all, we don’t want to manage each individual instance. Here some automation tools:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Elastic Beanstalk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Elastic Beanstalk is a service that allows users to deploy code written in Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker on familiar servers such as Apache, NGINX, Passenger, and IIS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS OpsWorks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS OpsWorks provides a unique approach to application management. Additionally, AWS OpsWorks auto-heals application stack, giving scaling based on time or workload demand and generates metrics to facilitate monitoring.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Cloud Formation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Cloud Formation provides resources using a template in JSON format. You have the option to choose from a collection of sample templates to get started on common tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CodeDeploy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Code Deploy is a platform service for automating code deployment to Amazon EC2 instances and instances running on premises.&lt;/p&gt;

&lt;h3 id=&quot;users--1-million&quot;&gt;Users &amp;gt; 1 million&lt;/h3&gt;
&lt;h3 id=&quot;use-service-oriented-architecturesoa-for-better-flexibility&quot;&gt;Use Service Oriented Architecture(SOA) for better flexibility&lt;/h3&gt;
&lt;p&gt;To serve more than 1 million users you need to use Service Oriented Architecture(SOA) while designing large scale web applications.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amazon Simple Queue Service (SQS)&lt;/li&gt;
  &lt;li&gt;Amazon Simple Notification Service (SNS)&lt;/li&gt;
  &lt;li&gt;AWS Lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In SOA, we need to separate each component from the respective tiers and create separate services. The individual services can then be scaled independently. Web and application tiers will have different resource requirements and different services. This gives you a lot of flexibility for scaling and high availability.&lt;/p&gt;

&lt;p&gt;AWS provides a host of generic services to help you build SOA infrastructure quickly. They are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Simple Queue Service (SQS)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a simple and cost-effective service to decouple and coordinate the components of a cloud application. Using SQS sending, storing, and receiving messages can be executed easily between software components of any size.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Simple Notification Service (SNS)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With SNS you can send messages to a large number of subscribers. The benefits are easy setup, smooth operation, and high reliability to send notifications to all endpoints.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Lambda&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda is a compute service that lets you run code without provisioning or managing servers. AWS Lambda executes your code only when needed and scales automatically, from a few requests per day to thousands per second. You pay only for the compute time you consume – there is no charge when your code is not running. You can also build serverless architecture composed of functions that are triggered by events.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The decision about how to approach scaling should be made up front because you never know when you are going to get popular! Also, crashing (or even just slow) pages leave your users unhappy and your app with a bad reputation. It ultimately affects your revenue.&lt;/p&gt;

&lt;p&gt;Learning how to build scalable websites takes time, a lot of practice, and a good amount of money. For companies that have a need and struggling to get this done, We are your best option for such a project. We’ve created Scalable Web Apps for clients having millions of users. Contact us for a consultation and price quote.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Build a Scalable Application</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/sw_design.png" /></entry><entry><title type="html">Serverless Architecture A Comprehensive Guide</title><link href="http://localhost:4000/blog/serverless-architecture-guide" rel="alternate" type="text/html" title="Serverless Architecture A Comprehensive Guide" /><published>2020-01-10T10:41:00+00:00</published><updated>2020-01-10T10:41:00+00:00</updated><id>http://localhost:4000/blog/Serverlessarchguide</id><content type="html" xml:base="http://localhost:4000/blog/serverless-architecture-guide">&lt;h3 id=&quot;serverless-architecture&quot;&gt;Serverless Architecture:&lt;/h3&gt;

&lt;p&gt;Read this comprehensive guide to understand Serverless Technology. Get to know what is function-as-a-service, how do serverless architecture works, its benefits &amp;amp; drawbacks and an in-depth case study on PhotoVogue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/3/serverless-application-2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the launch of serverless architecture in 2014, it is continuously redining the ways in which we develop and deploy our software products. One such revolutionary story surfaced while I was interacting with one of our client, a startup CTO.&lt;/p&gt;

&lt;p&gt;“I recall how hard was it to build a prototype for production system which resulted in launching things even before they were ready, poorly managed continuous integration/development processes and bug fix systems that were created by an intern who left almost a year ago.&lt;/p&gt;

&lt;p&gt;But now, due to serverless architecture, &lt;strong&gt;I can spontaneously take up an idea&lt;/strong&gt;, transform into a scalable solution and outlast the business decision being taken to develop it!”&lt;/p&gt;

&lt;p&gt;Being a startup CTO, this is a huge win when faster time-to-market is a key factor for thriving in the competing economy. However, serverless architecture brings more than just faster time-to-market and you’ll definitely need some help in getting started with this new concept.&lt;/p&gt;

&lt;p&gt;Let’s get started and examine how serverless architecture is exactly defined!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is Serverless Architecture?&lt;/li&gt;
  &lt;li&gt;FaaS: Function as a Service&lt;/li&gt;
  &lt;li&gt;What about microservices?&lt;/li&gt;
  &lt;li&gt;How does the serverless app works?&lt;/li&gt;
  &lt;li&gt;Case Study: Unpacking Serverless Architecture&lt;/li&gt;
  &lt;li&gt;Benefits of serverless&lt;/li&gt;
  &lt;li&gt;Drawbacks of serverless&lt;/li&gt;
  &lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-serverless-architecture&quot;&gt;What is Serverless Architecture?&lt;/h3&gt;
&lt;p&gt;“Serverless computation is going to fundamentally not only change the economics of what is back-end computing, but it’s going to be the core of the future of distributed computing.” — &lt;strong&gt;Satya Nadella, CEO Microsoft&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Methodology, mindset, culture–the heart of serverless is the approach. But taking the approach to its logical extreme yields technologies. This tech can be called serverless &amp;amp; they should become &amp;gt; the yardstick by which other technologies are measured (i.e., define the spectrum)
 — Ben Kehoe (@ben11kehoe) December 21, 2018&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The world is still revolving around servers even with the rise of cloud computing. But it isn’t going to last for a longer time. Cloud apps are shifting into the serverless world and it will indeed bring about dramatic changes in how we create and distribute software and applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Once Upon a Server Time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before the cloud-y days (pun intended), servers were one of the major parts, for developers,  when it came to building an application or software. You needed a budget, good plan, connect the dots, supply the power and provide them with a house.&lt;/p&gt;

&lt;p&gt;You’d have to buy or lease the servers, arrange the power, supplies, cooling, cabling- and then construct them all up in a data centre or a colocation facility.&lt;/p&gt;

&lt;p&gt;Over time, the colocation facilities started providing extra facilities like racks, power, internet access, etc. But it wasn’t sufficient.&lt;/p&gt;

&lt;p&gt;And it still required a lot of detailed planning, a huge amount of time and, most importantly, money. Hence, &lt;strong&gt;a shift was inevitable!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entering the Cloud&lt;/strong&gt;
Infrastructure-as-a-service (IaaS) came to the rescue!&lt;/p&gt;

&lt;p&gt;Since the last 2 years, the way you do computing has been changed drastically. It’s not about ‘Why cloud?’ or ‘How cloud?’ anymore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IaaS served a perfect recipe for cost improvement&lt;/strong&gt;, agility and scalability with added spices of reliability and perfect architecture. (I’m now hungry, maybe!)&lt;/p&gt;

&lt;p&gt;With a limitless supply of virtual machines, no upfront cost and a little bit of effort, developers were able to fire up servers with their choice of operating system and they’re off running.&lt;/p&gt;

&lt;p&gt;Moreover, &lt;strong&gt;the total cost of ownership has reduced dramatically.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I remember buying servers at the cost of hundreds of dollars for my first company with the investment of a lot of efforts in their maintenance. For the second company, I leased the servers for years but still had to put a considerable amount of efforts.&lt;/p&gt;

&lt;p&gt;For the third company, I leased them by month and for my current company, I’ve leased them by the hour, as per demand, on pennies.&lt;/p&gt;

&lt;p&gt;But this was from the perspective of architecture and pricing. Anyways, the overall &lt;strong&gt;concept of ‘application/software’&lt;/strong&gt; in the cloud is quickly evolving. It’s no longer about building on a web. It’s more about building a distributed system of loosely coupled components in the cloud.&lt;/p&gt;

&lt;p&gt;The user apps and back-end data storage are still prevailing, but the processing is increasingly taking place asynchronously outside of an app framework. And hence, the worldview is increasingly around tasks and process flows, not applications and servers.&lt;/p&gt;

&lt;p&gt;Moreover, their units of measures for compute cycles is in seconds and minutes, not hours. In short, &lt;strong&gt;apps are becoming serverless&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thinking Serverless&lt;/strong&gt;
For the past 14 months or so, I’ve been working on serverless technology and let me tell you, it’s a very large break from the way we build our software/applications and deploy them.&lt;/p&gt;

&lt;p&gt;But the phrase ‘serverless’ doesn’t mean servers are no longer involved. It just means that developers no longer have to worry about managing them. Without thinking much about their maintenance, computing resources get used as services.&lt;/p&gt;

&lt;p&gt;Though, serverless can be understood as an amalgamation of two distinct points as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1. BaaS&lt;/strong&gt;: First meaning of serverless could be taken as the &lt;strong&gt;use of 3rd party services/applications (in the cloud) to handle the server-side logic and state&lt;/strong&gt;. For example, consider a mobile app with quite a broad ecosystem of cloud-based databases, authentication services, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2. FaaS&lt;/strong&gt;: Second meaning of serverless could be taken as the &lt;strong&gt;use of 3rd party stateless compute containers to handle the server-side logic&lt;/strong&gt;. These containers are event-triggered and may last for only one invocation i.e. ephemeral.&lt;/p&gt;

&lt;p&gt;In this blog, you would be coming across FaaS quite frequently as it is a newer technology that is bringing about a significant change in the way we think about technical architecture and has been at the core of serverless.&lt;/p&gt;

&lt;p&gt;Though, &lt;strong&gt;both BaaS and FaaS are interrelated and overlapping&lt;/strong&gt;. For example, Auth0 started off as a BaaS ‘Authentication-as-a-Service’ but with Auth Webtask they have entered the FaaS space.&lt;/p&gt;

&lt;h3 id=&quot;faas-function-as-a-service&quot;&gt;FaaS: Function-as-a-Service&lt;/h3&gt;
&lt;p&gt;FaaS is a new and improved way to build and deploy your server-side software which is more focused around deploying individual functions or operations.&lt;/p&gt;

&lt;p&gt;FaaS is where you hear a lot of buzz about serverless comes from. I remember one of our developer saying that &lt;strong&gt;serverless is,in fact, FaaS&lt;/strong&gt;. If you are thinking the same, well let me correct you, you’re missing out the complete picture.&lt;/p&gt;

&lt;p&gt;Anyways, &lt;strong&gt;let’s get back to what is function-as-a-service about?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FaaS is inherently an event-driven approach&lt;/strong&gt;. But let’s understand it better by taking an example.&lt;/p&gt;

&lt;p&gt;When we traditionally deploy a server-side application, we start with microservices. Digging deep, we start with host instance, usually a virtual machine instance or a container.&lt;/p&gt;

&lt;p&gt;We then deploy our application within the host. If, in case, our host is a VM or a container, then out the application is an operating system process. Usually, our application contains the code for multiple interrelated operations as shown in the below figure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/3/traditional-server-side-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FaaS changes this model of deployment. We would shift our focus from both host instance and application process of our model to the individual operations or functions that express our application’s logic. We upload those functions, one-by-one, to a vendor-supplied FaaS platform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/3/faas-platform-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These &lt;strong&gt;functions are not continuously active in a server&lt;/strong&gt; process though, sitting idle until they need to be run as they would be in a traditional system.&lt;/p&gt;

&lt;p&gt;Instead, the &lt;strong&gt;FaaS platform is configured in such a manner that it responds to a specific event for each operation&lt;/strong&gt;. When that event occurs, the vendor platform initiates the function and then calls it to the triggering event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/3/faas-function-lifecycle-1-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the function has finished executing, the &lt;strong&gt;FaaS platform is free to tear it down&lt;/strong&gt;. Alternatively, as an optimization, it might keep it for a while until there is another event to be processed.&lt;/p&gt;

&lt;p&gt;As I said earlier, this is an event-driven approach. Moreover, FaaS vendor also integrates with various synchronous (HTTP API Gateway)  and asynchronous (hosted message) event sources apart from providing a platform to host and execute the code.&lt;/p&gt;

&lt;h3 id=&quot;what-about-microservices&quot;&gt;What about Microservices?&lt;/h3&gt;

&lt;p&gt;I am sure you must be wondering where microservices would go?&lt;/p&gt;

&lt;p&gt;They are here to stay! Do not worry!&lt;/p&gt;

&lt;p&gt;This approach to digital transformation representing &lt;strong&gt;monolithic —&amp;gt; microservices —&amp;gt; serverless&lt;/strong&gt; is driven by the need for greater agility and scalability. To keep up with the competition, the organizations need to update its technology stack quickly, eventually making the software a differentiating factor.&lt;/p&gt;

&lt;p&gt;Thus microservices architecture emerged as a key &lt;strong&gt;method of providing development teams with flexibility&lt;/strong&gt; and other benefits, such as the ability to deliver applications at warp speed using infrastructure as a service (IaaS) and platform as a service (PaaS) environments.&lt;/p&gt;

&lt;p&gt;The concept of this idea was to break the monolithic applications into smaller services each with its own business logic. With a monolithic architecture, a single faulty service can bring down the entire app server and all the services running on it.&lt;/p&gt;

&lt;p&gt;While in a microservice each service runs in its own container and thus application architects can develop, manage and scale these services independently.&lt;/p&gt;

&lt;p&gt;The microservices can be scaled and deployed separately and written in different programming languages. But a key decision many organizations face when deploying their microservices architecture is choosing between IaaS and PaaS environments.&lt;/p&gt;

&lt;p&gt;Microservices involve source code management, a build server, code repository, image repository, cluster manager, container scheduler, dynamic service discovery, software load balancer and a cloud load balancer. It also needs a mature agile and DevOps team to support continuous delivery.&lt;/p&gt;

&lt;p&gt;As explained earlier &lt;strong&gt;FaaS takes the step further by making an application more granular to the level of functions and events&lt;/strong&gt;. Thus, it is pretty clear that the unit of work is getting smaller and smaller.&lt;/p&gt;

&lt;p&gt;We’ve gone from monoliths to microservices to functions. FaaS also improves the shortcoming of PaaS model ie. scaling and friction between development and operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scaling a microservice hosted on PaaS is challenging and complex&lt;/strong&gt;. The architecture might have elements written in different programming languages, deployed across multiple clouds and on-premise locations, running on different containers.&lt;/p&gt;

&lt;p&gt;When demand increases for the app, all the underlying components have to be coordinated to scale, or you have to be able to identify which individual elements need to scale to address the surge in demand.&lt;/p&gt;

&lt;p&gt;Even if you set up your PaaS application to auto-scale you won’t be doing this to the level of individual requests unless you know the traffic trend. So a FaaS application is much more efficient when it comes to costs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/3/complexity.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But still, there will be always space for both microservices and FaaS to co-exist because there are certain things which you can’t do with functions at all. For example, an API/Microservice will always be to respond faster since it can keep connections to databases and other things open and ready.&lt;/p&gt;

&lt;p&gt;Moreover, one more thing to note here is that by &lt;strong&gt;grouping a bundle of functions together behind an API gateway, you’ve created a microservice&lt;/strong&gt;. This shows that both of these can co-exist in a nice way.&lt;/p&gt;

&lt;p&gt;This high-level flow remains the same as the traditional approach. The key difference is that, in case of a function, the container is created and destroyed by algorithms used in FaaS platforms and the operational team have no control over that.&lt;/p&gt;

&lt;p&gt;And hence, it is here to stay!&lt;/p&gt;

&lt;p&gt;But with ease of function and reduced cost comes increasing complexity about which we will discuss later in the blog.&lt;/p&gt;

&lt;h3 id=&quot;how-does-serverless-app-works&quot;&gt;How does Serverless App Works?&lt;/h3&gt;
&lt;p&gt;Serverless might look like a bright sunny day but it isn’t that sunny after all. It has brought about a big difference when it comes to application architecture.&lt;/p&gt;

&lt;p&gt;Moreover, &lt;strong&gt;the change with serverless isn’t gradual&lt;/strong&gt;, but with a jolt. FaaS drives a totally different type of application architecture through a fundamentally event-driven model, a much more granular form of deployment.&lt;/p&gt;

&lt;p&gt;So,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;How does serverless app work in actual?&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;What does serverless architecture look like?&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How is it different from non-serverless architecture?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the questions that we’re going to tackle in this chapter. Let’s dive deeper and understand the serverless architecture and its working.&lt;/p&gt;

&lt;h3 id=&quot;reference-application&quot;&gt;Reference Application&lt;/h3&gt;
&lt;p&gt;Let’s make some assumptions about our reference application.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It is a multi-user app.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;It has a mobile-friendly user interface.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User management and authentication are required.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ve certainly overlooked some other features that you might expect in a basic app, but the point of this exercise is not to actually build an app but to compare a serverless application architecture with a legacy, non-serverless architecture.&lt;/p&gt;

&lt;h3 id=&quot;monolithic-architecture&quot;&gt;Monolithic Architecture&lt;/h3&gt;
&lt;p&gt;Given those requirements, a monolithic architecture for our app might look something like the below figure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/3/monolithic-Architecture.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;serverless architecture&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;A native mobile app for iOS or Android&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A backend is written in Java &amp;amp; HTML&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A relational database&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this architecture, a mobile app is responsible for handling app interface and input from the user, but it delegates most actual logic to the backend. From the perspective of code, the mobile app is lightweight and quite simple. It uses HTTP to make a request to multiple API endpoints served by the backend Java application.&lt;/p&gt;

&lt;p&gt;Authentication and user management are encapsulated with the Java application code. Moreover, it also interacts with the relational database in order to store user data.&lt;/p&gt;

&lt;h3 id=&quot;why-change&quot;&gt;Why Change?&lt;/h3&gt;
&lt;p&gt;You might say, &lt;strong&gt;“I am perfectly fine with this architecture as it meets all my requirements, so why just not stop there and call it a good?”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To which I will reply that there are multiple challenges and operational pitfalls which I will discuss in this section to which you might relate. Go on!&lt;/p&gt;

&lt;p&gt;In building this app, you’ll need to have hands-on expertise in iOS and Java, don’t you? Apart from that, you need to have good experience in configuring, deploying and operating Java application servers as well as a relational database. Moreover, think about their host systems, whether container-based or running directly on virtual or physical hardware?&lt;/p&gt;

&lt;p&gt;We’ve not yet touched scalability, security or high availability, all of which are critical aspects of the modern production system. The bottom line- &lt;strong&gt;all these complexities, at one point in time, will become friction&lt;/strong&gt; when you’ll be fixing bugs, adding features or trying to rapidly prototype new ideas.&lt;/p&gt;

&lt;p&gt;And hence, you need a change!&lt;/p&gt;

&lt;h3 id=&quot;serverless-architecture-1&quot;&gt;Serverless Architecture&lt;/h3&gt;
&lt;p&gt;A serverless architecture of our basic application would look something like the below figure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/3/user-flow-768x632.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;According to this architecture, while the user interface will still remain a part of the native mobile app, user authentication and management will be handled by a BaaS service like AWS Cognito. These services can be called directly from the mobile app to handle user-facing tasks like registration and authentication.&lt;/p&gt;

&lt;p&gt;Moreover, the same BaaS can be used by other backend components to retrieve user information.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;user management and authentication now handle by BaaS&lt;/strong&gt;, the logic which was previously handled by backend Java application is simplified. You can use another amazing serverless component, AWS API Gateway, to handle routing HTTP requests between a mobile app and your backend in a secure and scalable manner.&lt;/p&gt;

&lt;p&gt;Each distinct operation can be encapsulated in a function. A FaaS platform such as AWS Lambda takes each of these functions and runs them in parallel ‘containers’ that can be monitored and scaled separately.&lt;/p&gt;

&lt;p&gt;Those backend FaaS functions can interact seamlessly with a NoSQL, BaaS database like AWS DynamoDB. In fact, one drastic change is that &lt;strong&gt;we no longer store any session state within our server-side application code&lt;/strong&gt;, and instead will persist in NoSQL store.&lt;/p&gt;

&lt;p&gt;While it may seem to you like a minute change but believe me, it will help you significantly with scaling.&lt;/p&gt;

&lt;h3 id=&quot;what-got-better&quot;&gt;What got better?&lt;/h3&gt;
&lt;p&gt;You might say, “There is no significant difference in terms of complexity and it has, in fact, more specific application components that our traditional monolithic architecture?”&lt;/p&gt;

&lt;p&gt;To which I will reply that &lt;strong&gt;the code we will write now will be solely focused on the logic of the app&lt;/strong&gt;. What’s more? Our components are now decoupled and separate, due to that, we can switch them or add new logic very fast without the inherent friction in the non-serverless architecture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scaling, high availability and security are the areas all backed up with the serverless architecture&lt;/strong&gt;. This means that as the popularity of your app grows, you needn’t worry about renting more powerful servers, or failure in a database or troubleshoot a firewall configuration.&lt;/p&gt;

&lt;p&gt;In short, &lt;strong&gt;labour cost has reduced&lt;/strong&gt;, as well as, the risk and resources cost of running it. All of its constituent components will scale flexibly. What’s more? If you have an idea for a new feature, our lead time is highly decreased, hence, we can start getting feedback and work on it efficiently.&lt;/p&gt;

&lt;p&gt;Pretty exciting, right?&lt;/p&gt;

&lt;p&gt;We have more discussion on benefits and drawbacks of serverless. Stay tuned!&lt;/p&gt;

&lt;p&gt;Before that, let’s discover more about serverless architecture through serverless architecture case study.&lt;/p&gt;

&lt;h3 id=&quot;case-study-unpacking-serverless-architecture&quot;&gt;Case Study: Unpacking Serverless Architecture&lt;/h3&gt;

&lt;p&gt;When PhotoVogue, part of Vogue Italia,  launched in 2011, it was woefully unprepared to become the next rags-to-riches online photography platform.&lt;/p&gt;

&lt;p&gt;Within a year, &lt;strong&gt;the popularity increased and skyrocketing traffic overwhelmed the Italy based company&lt;/strong&gt;. Moreover, the user experience went lethargic and its pre-existing backend limited the scalability.&lt;/p&gt;

&lt;p&gt;Liking it to open-heart surgery, Marco Vigano, Head of Digital Development at Conde Nast Italia, was forced to perform an emergency migration from local server to AWS in just 3 months. &lt;strong&gt;PhotoVogue’s quick switch to the serverless likely saved it from death-by-desertion after its homebrew server failed to keep the pace.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This trend has further decreased time-to-market and delivers the scaling necessary for Uber, Pokemon Go, Airbnb, ‘Clash of Clans’ and numerous other apps characterised by large user bases and real-time data. With more than 4 million apps struggling for attention on Apple’s App Store and Google’s Play Store, developers are turning to serverless for a competitive advantage.&lt;/p&gt;

&lt;p&gt;Sounds like a fascinating story? Let’s have a closer look!&lt;/p&gt;

&lt;h3 id=&quot;about-the-platform&quot;&gt;About the Platform&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;PhotoVogue is an online photography platform&lt;/strong&gt;. It is a part of Vogue Italia which is owned by Conde Nast Italia. It allows upcoming photographers to showcase their work.&lt;/p&gt;

&lt;p&gt;It also gives them the chance to have their photos published in Vogue or to be picked up by photography agencies. Each picture is curated by Vogue’s editorial staff and it ensures that highest quality photographs appear online&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Challenge&lt;/strong&gt;
Let’s have a look at some of the key challenges faced by the PhotoVogue team.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It currently showcases images from around &lt;strong&gt;130,000 photographers&lt;/strong&gt; from around the world. This jumbo collection houses more than &lt;strong&gt;400,000 images&lt;/strong&gt;, each of which can be &lt;strong&gt;up to 50 MB in size&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;With the growing demand, it failed to meet user demands. Moreover, the pre-existing IT infrastructure restricted the growth of the site.&lt;/li&gt;
  &lt;li&gt;The need for providing better and faster experience to both photographers and editorial staff wasn’t feasible at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Solution&lt;/strong&gt;
Vigano identified AWS as the perfect cloud provider that suited the firm requirements which provided them with an amazing solution.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It offered flexible scalability, ease of maintenance and cost-effectiveness than the pre-existing physical infrastructure that supported PhotoVogue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Presently, it uses Amazon Simple Storage Service (Amazon S3) to store all its photos where its ability to generate a URL enabled users to upload their photos really fast.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, &lt;strong&gt;do they even use FaaS? Or any serverless components?&lt;/strong&gt; Yes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/3/Figure-9.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;From Amazon S3, an &lt;strong&gt;AWS Lambda function is triggered,&lt;/strong&gt; which automatically &lt;strong&gt;converts the uploaded image into multiple digital formats&lt;/strong&gt;– such as GIF, JPEG, PNG and TIFF- and allows the images to be edited by PhotoVogue staff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Amazon API Gateway is used as the caching layer for the REST API, and Amazon CloudFront facilitates the content delivery network (CDN).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Benefits&lt;/strong&gt;
“With Amazon API Gateway and AWS Lambda, the user experience is up to 90% faster. That’s for both photographers uploading images and the editorial team processing them.”- &lt;strong&gt;Marco Viagano, Head of Digital Development.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not just that, he has more things to say!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Quicker provisioning of resources supports growth.&lt;/strong&gt; “With the traditional infrastructure, it would take days to set up which now can be done in hours. IT is no longer holding back the business, in fact, we can grow faster.”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Making savings, enabling innovation, boosting revenue.&lt;/strong&gt; “We’ve cut IT costs by around 30%. We used to spend more time in maintaining the infrastructure which now has reduced drastically and hence we can explore new services.”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Successful events further promoted the online platform.&lt;/strong&gt; In November 2016, PhotoVogue held an event in Milan. “During the event, we experienced about 20% more uploads than normal daily traffic and we dealt with it seamlessly.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wow!&lt;/p&gt;

&lt;h3 id=&quot;benefits-of-serverless-technology&quot;&gt;Benefits of Serverless Technology&lt;/h3&gt;
&lt;p&gt;Now, it’s time to move on to the benefits that serverless brings on the table. Since, serverless in still in evolution, some of the benefits that we will be considering might not be available after 2 years.&lt;/p&gt;

&lt;p&gt;Moreover, this is an unproven concept and hence, before moving on to serverless, you should definitely consider its significant facets. I hope that discussing benefits and drawbacks will you in clearing the confused air regarding serverless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reduced Infrastructure Costs&lt;/strong&gt;
Before you set up your servers, there are various things that you need to consider. Some of them might look like below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many and on what type of hosts our servers are going to run on?&lt;/li&gt;
  &lt;li&gt;How much CPU &amp;amp; RAM your database needs?&lt;/li&gt;
  &lt;li&gt;How many instances will you be provided to support scaling?&lt;/li&gt;
  &lt;li&gt;What about high availability?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you figure out all these things, comes the time of planning, allocation and provisioning. Tiresome, isn’t it?&lt;/p&gt;

&lt;p&gt;Indeed! And most of the time we overestimate things and end up paying for all those resources that we never use in the future. Sounds familiar?&lt;/p&gt;

&lt;p&gt;On the other side, the magnanimous benefit that serverless brings to the table is that we don’t plan, allocate or provision resources. We let the vendors facilitate us precisely the amount of capacity we need at any point in time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we don’t have any load, we don’t use any and hence, we don’t pay for any!&lt;/strong&gt; As simple as that! If we only have 1 TB of data, we don’t need the capacity to store 100 TB. We trust our vendors that service will be provided, on demand, and this is equally true for FaaS &amp;amp; BaaS services both.&lt;/p&gt;

&lt;p&gt;For example, AWS Lambda is charged by 100 milliseconds of use, 36,000 times more precise than the hourly billing of EC2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexible Scaling&lt;/strong&gt;
All of this reduction in infrastructure cost comes with the added benefit of automatic scaling.&lt;/p&gt;

&lt;p&gt;Let me remind you, with serverless, &lt;strong&gt;horizontal scaling is completely automatic, elastic and managed by the provider&lt;/strong&gt;. But how does this all happen? Let’s take an example!&lt;/p&gt;

&lt;p&gt;When your platform receives the first event to trigger a function, it will initiate the container to run your code. If another event is triggered while the previous one is still in process, it will initiate another container to run your code. This automation will enable horizontal scaling until there are enough containers to run your code.&lt;/p&gt;

&lt;p&gt;Pretty flexible, right?&lt;/p&gt;

&lt;p&gt;Reduced Scaling Costs
Due to this pay-as-you-go model, you save a lot with high scalability. Isn’t this a huge economic win?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1. Infrequent requests:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re using a server application, that processes 2 requests every single minute and takes 100 ms to process each request. This means, your CPU usage over an hour is 0.1%. This is highly inefficient and only if you’d wish that much other application could use your server as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But serverless encaptures this efficiency and gives you the benefit in the form of reduced cost&lt;/strong&gt;. In this case, if you’d be paying for just 200ms of computing every minute, which is 0.15% of your overall time.&lt;/p&gt;

&lt;p&gt;Such benefits in cost prove to be an amazing democratizer. As production teams have the extremely tiny amount of operational cost to bear to try out something new. In fact, if your total workload is relatively small, you have to provide nothing considering the ‘free tier’ services from some vendors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2. Fluctuating traffic:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s assume that your website traffic spikes once in a while. The basic traffic that you receive during the day is around 10 requests/sec. but that increases to 10 times by 100 requests/sec. every 5 min. for 10 sec.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s assume that during the peak hours your servers get exhausted and at the same time you don’t want to reduce your response time&lt;/strong&gt;. Do you have any solution? I do.&lt;/p&gt;

&lt;p&gt;If you’re functioning in a traditional environment, you may need to upgrade your hardware by the factor of 10 to handle the sudden increase in traffic.&lt;/p&gt;

&lt;p&gt;Auto-scaling isn’t a favourable option here as it is highly unlikely to predict the time taken by the new instances of servers to come up, and moreover, by the time those servers are ready, the traffic spike phase will be over.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/3/serverless-graph.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, with serverless, this doesn’t seem to be an issue. You have to do nothing whether your traffic is uniform or it is at peak. All you do is &lt;strong&gt;pay for the extra compute capacity that you use during the spike phase&lt;/strong&gt;. And hence, this is a huge cost saving for your company.&lt;/p&gt;

&lt;p&gt;But wait! You’ll receive significant economic benefits only if your traffic is inconsistent. If you have stable traffic and you’re using FaaS, you may end up paying more than you should. Hence, do your math first!&lt;/p&gt;

&lt;h3 id=&quot;ease-of-operation-management&quot;&gt;Ease of Operation Management&lt;/h3&gt;
&lt;p&gt;As I said earlier, scaling is automatic and hence, FaaS has more benefits than just scaling costs. You ask me how? Let me explain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1. Benefit of auto-scaling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consider a case where you’re manually managing your app server where you will need a specific person to add and remove instances to an array of servers. While with FaaS, you don’t have to worry about that as your vendor do all the things related to scaling.&lt;/p&gt;

&lt;p&gt;Moreover, this lets you get out of the bubble of worrying about &lt;strong&gt;how many concurrent requests you can handle until you run out of memory with a performance hit?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2. Reduction in packaging and deployment complexity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Packaging and deploying an API gateways aren’t simple, admit that! At the same time, FaaS functions are pretty simple in comparison to deploying an entire server.  If you are just getting started with FaaS, you don’t even need to package anything, &lt;strong&gt;write your code in the vendor console and you’re ready to go!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If your team is quite efficient- this benefit could be as huge as- a fully serverless solution aka zero system administration.&lt;/p&gt;

&lt;h3 id=&quot;lower-risk-of-failure&quot;&gt;Lower Risk of Failure&lt;/h3&gt;
&lt;p&gt;The chances of problems to occur increases when your team manages multiple systems and components. However, this is not the case with serverless. With serverless, &lt;strong&gt;you outsource the management and operation part, plus, you outsource having to solve any problems that occur in those systems.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This brings the added benefit as you rely on the expertise of others in solving unpredictable problems rather than solving it yourself. This sounds like a good idea because many elements of the technical ‘stack’ are the ones that we rarely alter. When a problem occurs, we may not know how to solve them which leads to prolonged and indeterminate downtime.&lt;/p&gt;

&lt;p&gt;With serverless, there is a considerable decrease in the number of techniques that you’ll have to manage directly. And moreover, you’ll be dealing with the ones which are frequently used by your team which makes it much easier to handle.&lt;/p&gt;

&lt;p&gt;And hence, &lt;strong&gt;there are rare chances of failure when you go serverless.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;shorter-lead-time&quot;&gt;Shorter Lead Time&lt;/h3&gt;
&lt;p&gt;To provide enough space for innovation in our production environment, short lead time is as important as short cycle time. Lead Time means, the time from the foundation of a new product or feature to having it deployed in a minimum viable way to a production environment.&lt;/p&gt;

&lt;p&gt;The fact that serverless architecture totally wipes out the inherent complexity of building, launching, scaling and operations is very amazing in itself. Not only that, it gives you space enough that you can change the way you deliver your product in a totally upside down manner.&lt;/p&gt;

&lt;p&gt;And this is &lt;strong&gt;why I am so excited about serverless&lt;/strong&gt; because of the ability it unleashes in a production environment. Plus, we can focus more now delivering awesome products to our customers!&lt;/p&gt;

&lt;p&gt;I said enough! Let’s say what people have to say about it!AWS&lt;/p&gt;

&lt;p&gt;“Now is a pretty great time to have your data stack on AWS. I’ve rarely felt so empowered to build a ton of things with almost literally ZERO infrastructure concerns. Serverless + data engineering is quite the combo.” &lt;strong&gt;Chris, Director of Data Engineering at Textio&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“We are starting to see applications built in a ridiculously short time period” &lt;strong&gt;Adrian Cockcroft, VP at AWS Cloud Architecture Strategy&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;drawbacks-of-serverless-technology&quot;&gt;Drawbacks of Serverless Technology&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;**Built-in Drawbacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1. Vendor lock-in:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Serverless, in other words, means outsourcing your services to a 3rd party vendor. Moreover, that means that you won’t be having much control over many key aspects of system downtime, forced API upgrades, loss of functionality and much more.&lt;/p&gt;

&lt;p&gt;This seems to be an inherent limitation that serverless applications face. Through multiple choice of integration patterns, APIs and documents, different vendors enforce different levels of lock-in models.&lt;/p&gt;

&lt;p&gt;What lock-in means is that if you want to move from one vendor to another, you’ll need to update your operational tools, change your code and may even require changing the architecture. The fear of vendor lock-in is one of the major drawbacks of serverless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2. Statelessness:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a huge benefit which enables scaling easily as a matter of increasing concurrency but managing it is quite tricky. And moreover, it comes with the drawback of inconsistent performance which we will discuss later.&lt;/p&gt;

&lt;p&gt;Apart from the components that are designed to store data,&lt;strong&gt;most of the other serverless parts are stateless&lt;/strong&gt;. By definition, the information in stateless functions doesn’t persist beyond their immediate lifespan. And hence, this gives the birth to complexity while we consider the interaction of these components with another.&lt;/p&gt;

&lt;p&gt;With the implementation of FaaS functions, you can have a code in your app but the cache is rarely of any use. As soon as your cache is ‘heated’ for the initial usage, it is likely to be thrown away as the FaaS instance is torn down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#3. Local testing:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;one of the most mind-numbing difficulties of serverless application architectures&lt;/strong&gt;. In case of non-serverless applications, developers have local options on-hand where they can test the application and observer whether it will work or not during and after the deployment. However, with serverless architecture,&lt;strong&gt;end-to-end testing of application is quite more difficult.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because, at present, most of the vendors aren’t providing with the local implementation which, in turn, forces developers to use the regular production implementation. This means remote testing for all your integrations. Sounds like a big deal? It is.&lt;/p&gt;

&lt;p&gt;Because the &lt;strong&gt;units of integration with FaaS functions are a lot smaller than with other architecture&lt;/strong&gt;. These typically consist of separate pieces and hence managing them is quite challenging. And therefore, we rely on remote testing a lot more than we do for other types of architectural style&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#4. ‘Cold/Warm’ start: Serverless performance is quite inconsistent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the most common issues is how long does it take for a FaaS function to start which is referred to as a cold start. On the AWS Lambda, this means initialisation of our code as well as initialization of our container which houses the code. The cold starts happens when lambda function hasn’t been invoked for a while or if its configurations have been altered.&lt;/p&gt;

&lt;p&gt;Once it has been invoked, the container can handle events without going through that same process and these ‘warm’ invocations of the Lambda functions are quite faster. &lt;strong&gt;It is recommended that 99.99% of events should be processed by a warm container.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, the uncertainty between ‘cold’ and ‘warm’ is difficult to predict which leads to inconsistent serverless performance issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#5. Security:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As soon as you consider the serverless approach, you are exposed to a whole new level of security issues which can be summed up in the following points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;With serverless, &lt;strong&gt;data is now in transit between various functions&lt;/strong&gt;. Each time we transit data from one place to another, the chances of the data to be leaked and tampered with increases since the surface area increases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With &lt;strong&gt;greater flexibility, comes the greater opportunities for attackers&lt;/strong&gt; to get to your system. The only way to tackle this is to treat each function with its own security protocols.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No wonder, &lt;strong&gt;serverless has made the motoring extremely hard&lt;/strong&gt;. With more number of functions, comes the hardship of monitoring them. Remember, you may create tons of functions due to its low operational cost, but keep in mind the total cost of ownership, including the increased risk of having unused, vulnerable and stale code in production.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;production-drawbacks&quot;&gt;Production Drawbacks&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;#1. Deployment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The interaction between the underlying platform and the application is facilitated via API calls. Since serverless applications are, in fact, a bundle of many small individual components, deploying an entire application is typically not a good idea.&lt;/p&gt;

&lt;p&gt;Due to this basic difference in the architecture, it is often a &lt;strong&gt;challenging task to align the deployments of large-scale serverless applications.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2. Execution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the publicly criticised limitations of serverless is &lt;strong&gt;limited execution environment of FaaS function&lt;/strong&gt;. Unlike legacy servers, they don’t have an indefinite amount of resources and they are executed on limited CPU, I/O resources, memory and discs.&lt;/p&gt;

&lt;p&gt;For instance, AWS Lambda functions come with an inherited memory of 1.5 GB and will be terminated after a maximum of 5 minutes. As the FaaS platform is evolving, you can expect some expansion in the execution environment. Moreover, designing the architecture within the limit of this environment will add you the benefit of more scalable architecture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#3. Monitoring:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While you may not like the limited execution environment but at the same time monitoring of these metrics is out of your concern. However, metrics responsible for business functionality still needs to be monitored.&lt;/p&gt;

&lt;p&gt;But the limit to which the monitoring is well supported of these functions is a mix-and-match. For example, &lt;strong&gt;AWS Lambda has multiple ways of monitoring can be performed but some of these are poorly documented&lt;/strong&gt;. Also, there is a considerable lack of support at present in distributed monitoring. And hence, once all of these functions are in the commonplace, serverless systems will come off as an easy operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#4. Remote testing:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ability to perform remote testing comes along with its inherent inability of local testing. This is due to the fact that certain vendors make the remote testing possible but up to a very lesser extent. For example, &lt;strong&gt;you can do remote testing at component level but not at the serverless application level.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is quite exhaustive to test a series of serverless components without setting up an account with the vendor to make sure that testing isn’t affecting the production resources and also, that the limitations provided by the platform are equally met.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#5. Debugging:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At present, we are stuck on the debugging part as we have to accept whatever the vendor provides us. This might be okay in certain cases but AWS Lambda provides you with extremely basic functionalities and hence it is a big turnoff.&lt;/p&gt;

&lt;p&gt;What we are looking for really is integration with 3rd party services for debugging and open APIs.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The aim of this blog is to clear the confusing clouds over the mind of people who are not sure about serverless adoption! But I am sure all those techies who are ready to roll their sleeve and eager to embrace &amp;amp; experiment as the way to an amazing product, will say ‘Yes!’&lt;/p&gt;

&lt;p&gt;Though serverless architecture might not come off as a perfect solution to all your worries, it surely will decrease them. But be careful before you plunge yourself into the world of serverless and FaaS. &lt;strong&gt;While there are gold mines to be plundered (deployment, scaling), there are dragons as well (serverless security, debugging).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From the business perspective, &lt;strong&gt;the best benefit I can see is the space to experiment new features with reduced time-to-market&lt;/strong&gt;, which is the most critical point in today’s world where new technology is released every day.&lt;/p&gt;

&lt;p&gt;Serverless systems are still in its infancy stage and it will be wonderful to witness how they solve and fit into our architectural requirements.&lt;/p&gt;

&lt;p&gt;Until then, subscribe to our blog and keep yourself one step ahead with updates on serverless technology and much more!&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Serverless Architecture:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/sw_design.png" /></entry><entry><title type="html">10 AWS Lambda Use Cases to Start Your Serverless Journey</title><link href="http://localhost:4000/blog/serverless-examples-aws-lambda-use-cases" rel="alternate" type="text/html" title="10 AWS Lambda Use Cases to Start Your Serverless Journey" /><published>2020-01-07T10:49:00+00:00</published><updated>2020-01-07T10:49:00+00:00</updated><id>http://localhost:4000/blog/ServerlessExampleUseCase</id><content type="html" xml:base="http://localhost:4000/blog/serverless-examples-aws-lambda-use-cases">&lt;h3 id=&quot;aws-lambda-use-cases-to-start-your-serverless-journey&quot;&gt;AWS Lambda Use Cases to Start Your Serverless Journey&lt;/h3&gt;
&lt;p&gt;Many big companies such as Netflix, Conde Nast and NY Times are migrating their compute services to serverless. But sometimes the cloud architects are confused about the application of serverless technologies such as AWS Lambda and Azure functions.This blog explains 10 AWS Lambda Use Cases to help you get started with serverless. Some of the use cases are Serverless Website,App Authentication,Mass Emailing, Real-time Data Transformation, CRON Jobs,Chatbot,IoT.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/Serverless-Examples-with-AWS-Lambda-Use-Cases.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Netflix, Mapbox, A Cloud Guru, BlackBoard, Conde Nast, and New York Times. Do you know what these companies have in common?&lt;/p&gt;

&lt;p&gt;All migrated to serverless architecture and have immensely benefitted from this decision.&lt;/p&gt;

&lt;p&gt;At the recently held ServerlessConf, ‘A Cloud Guru’ gave a proof of serverless promise saying they were never required to change their architecture due to performance reasons. They are running 287 Lambda functions, 19 microservices with 3.68 TB of data at the mere cost of $580 per month. Read that again!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why we use AWS Lambda?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda removes the need for the traditional compute services, thus reducing operational costs and complexity. This results in many benefits such as faster development, easier operational management, scaling, and reduction in operational costs.&lt;/p&gt;

&lt;p&gt;Moreover if you have frequent changes in memory usage, Lambda takes care of that as well. It has “Pay as you go” model whose billing is based on used memory, number of request and execution duration rounded up to nearest 100 milliseconds. Its huge leap forward in comparison to EC2.&lt;/p&gt;

&lt;p&gt;We are well aware of how serverless helps in elevating our focus to more business-critical tasks by empowering developers and offering cost-friendly solutions. However, we have still observed confusion among people who want to get started with serverless adoption but don’t know where, when and how! This blog post is about them.&lt;/p&gt;

&lt;p&gt;Let’s start unfolding each of them with practical examples and benefits it brings to the organizations as well as development teams.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Serverless Website Example with AWS Lambda&lt;/li&gt;
  &lt;li&gt;Serverless Authentication Using AWS Cognito&lt;/li&gt;
  &lt;li&gt;Multi-Location Media Transformation&lt;/li&gt;
  &lt;li&gt;Mass Emailing using AWS Lambda &amp;amp; SES&lt;/li&gt;
  &lt;li&gt;AWS Lambda Use Case for Real-time Data Transformation&lt;/li&gt;
  &lt;li&gt;Serverless CRON Jobs*&lt;/li&gt;
  &lt;li&gt;AWS Lambda Use Case for Efficient Monitoring&lt;/li&gt;
  &lt;li&gt;Real-time Notifications with AWS Lambda and SNS&lt;/li&gt;
  &lt;li&gt;Building a Serverless Chatbot&lt;/li&gt;
  &lt;li&gt;Serverless IoT Backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#1. Serverless Website Example with AWS Lambda&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maintaining a dedicated server is outdated, in fact, even a virtual server. Not only it’s tiresome but provisioning the instances, updating the OS, etc. takes a lot of time and distracts you from focusing on the core functionalities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Lambda&lt;/strong&gt; along with other AWS services can be used to build a powerful website without having to manage a single server or an operating system. For a basic version, we will use &lt;strong&gt;AWS API Gateway, DynamoDB, Amazon S3 and Amazon Cognito User Pool.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/Serverless-Website-Example.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The components used here are used for executing the following functionalities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript in the browser exchanges the data from a backend API built through API Gateway and AWS Lambda.&lt;/li&gt;
  &lt;li&gt;DynamoDB is a NoSQL database which is used for storing data through API’s Lambda function.&lt;/li&gt;
  &lt;li&gt;Amazon S3 is used for hosting the static website content like HTML, media files, CSS, JavaScript which acts as a front end in the user’s browser.&lt;/li&gt;
  &lt;li&gt;Amazon Cognito is used for user authentication and management with the help of secured backend API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The architecture here depicts a basic version of a serverless website. It can be elaborated into a full-fledged multi-functional website by adding other AWS services. Some of the distinguished examples of Serverless websites are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Serverless E-commerce Website which uses AWS Lambda use cases for payment management, cart management and recommendation engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/cover-image-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Serverless Dynamic Web Page&lt;/strong&gt; built using two Lambda functions to monitor internal services at Monsanto.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Serverless Single Page Website&lt;/strong&gt; a practical example to develop a low latency website with Lambda functions, S3 and CloudFront.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bustle.com&lt;/strong&gt; (news &amp;amp; entertainment website run entirely on serverless) More information can be found here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#2. Serverless Authentication Example Using AWS Cognito&lt;/strong&gt;
Whether you’re running New York Times or a personal blog, personalization plays a huge role when you interact with your users. &lt;strong&gt;Amazon Cognito&lt;/strong&gt; when used with &lt;strong&gt;AWS Lambda&lt;/strong&gt;, can empower you to add pre and post-login hooks to execute your custom logic.&lt;/p&gt;

&lt;p&gt;After creating an AWS Lambda function, you can trigger it based on various user pool operations such as user sign-up, user confirmation, sign-in, etc. Not only that, you can experiment with your authentication procedure and make it more challenging, migrate the users and send out personalized verification messages, to name a few.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/Serverless-Authentication-Example-Using-AWS-Cognito.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following are the common triggering sources from where you can hook your Lambda function:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sign-up, confirmation and sign-in&lt;/li&gt;
  &lt;li&gt;Pre and post authentication&lt;/li&gt;
  &lt;li&gt;Custom authentication challenge&lt;/li&gt;
  &lt;li&gt;Pre token generation&lt;/li&gt;
  &lt;li&gt;Migrate user&lt;/li&gt;
  &lt;li&gt;Custom message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s understand how custom message works. Amazon Cognito will trigger your Lambda function before sending an email or phone verification text or multi-factor authentication which allows you to customize the message as per the requirements. The triggering source for the custom message are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Confirmation code post-sign-up&lt;/li&gt;
  &lt;li&gt;Temporary password for new users&lt;/li&gt;
  &lt;li&gt;Resending confirmation code&lt;/li&gt;
  &lt;li&gt;Confirmation code to forget password request&lt;/li&gt;
  &lt;li&gt;Manual request for new email/phone&lt;/li&gt;
  &lt;li&gt;Multi-factor authentication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#3. AWS Lambda Use Case for Multi-Location Media Transformation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With the rising number of global viewership, we all know how difficult a task it is to facilitate media files in multiple formats on multiple locations. With the prerequisite of least processing time, reducing the latency and minimizing the bandwidth is important than ever. Here are some common scenarios which you might have come across:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Resizing image based on the query parameter&lt;/li&gt;
  &lt;li&gt;Serving appropriate file format based on browser characteristics, for example, WebP for Chrome/Android browsers and JPEG for the rest&lt;/li&gt;
  &lt;li&gt;Defining whitelist of dimensions to be generated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This problem can be simplified with the help of Lambda@Edge and CloudFront. This process can be executed by adding four Lambda triggers to CloudFront. Here’s how it works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/AWS-Lambda-Edge-Multi-Location-Media-Transform-Example-768x239.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Lambda 1 (viewer request):&lt;/strong&gt; This function is executed to serve the media file in the requested format from the CloudFront cache. No further functions will be executed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lambda 2 (origin request):&lt;/strong&gt; If the requested format is not available, this function fetches the media file with requested configurations from the Amazon S3 bucket and cache it to CloudFront. If the file doesn’t exist, Lambda 3 executed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lambda 3 (origin response):&lt;/strong&gt; This function makes a network call which fetches the original image from the S2 bucket, transforms it as per the requirement and uploads it back.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lambda 4 (viewer response):&lt;/strong&gt; This function serves the requested media file from the CloudFront cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: Lambda 2,3 and 4 are executed only when the requested media file isn’t available in the cache. Here’s more you can do with Lambda@Edge:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Inspect cookies and rewrite URLs to perform A/B testing.&lt;/li&gt;
  &lt;li&gt;Send specific objects to your users based on the User-Agent header.&lt;/li&gt;
  &lt;li&gt;Implement access control by looking for specific headers before passing requests to the origin.&lt;/li&gt;
  &lt;li&gt;Add, drop, or modify headers to direct users to different cached objects.&lt;/li&gt;
  &lt;li&gt;Generate new HTTP responses.&lt;/li&gt;
  &lt;li&gt;Cleanly support legacy URLs.&lt;/li&gt;
  &lt;li&gt;Modify or condense headers or URLs to improve cache utilization.&lt;/li&gt;
  &lt;li&gt;Make HTTP requests to other Internet resources and use the results to customize responses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#4. Mass Emailing using AWS Lambda &amp;amp; SES&lt;/strong&gt;
New York Times sends our 4 Billion emails per year which includes newsletters, breaking news and transactional emails. Mass mailing is an integrated part of marketing services for any organizations. Traditional solutions often require hardware expenditure, license costs and technical expertise.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;AWS Lambda&lt;/strong&gt; and &lt;strong&gt;Simple Email Service SES&lt;/strong&gt;, you can build a cost-effective and in-house serverless email platform. Along with S3 (where your mailing list will be stored) you can quickly send HTML or text-based emails to a large number of recipients.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/Serverless-Email-Example-using-SES-768x205.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Whenever a user uploads a CSV file, it triggers an S3 event. This event triggers another Lambda function which imports the file into the database and will start sending email to all the addresses. For sending our scheduled newsletters, you can integrate it with CloudWatch Events.&lt;/p&gt;

&lt;p&gt;Here’s an example of MoonMail’s (email marketing platform) serverless technology stack built using AWS Lambda use cases and SES. The primary reason for them to switch to serverless is extremely fast performance and infinite scalability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#5. AWS Lambda Use Case for Real-time Data Transformation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Kinesis Firehose&lt;/strong&gt; is basically used for writing real-time streaming data to &lt;strong&gt;Amazon S3, Redshift or Elasticsearch&lt;/strong&gt;. But business requirements have changed over the time.&lt;/p&gt;

&lt;p&gt;Sometimes it is required to amend or restructure the raw data for before writing it to the destination. Some of the common use cases that have emerged over the time are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Normalize the data acquired from different touchpoints&lt;/li&gt;
  &lt;li&gt;Adding metadata to the recorded data&lt;/li&gt;
  &lt;li&gt;Converting or restructuring the data as per the destination prerequisites&lt;/li&gt;
  &lt;li&gt;Performing ETL functionality&lt;/li&gt;
  &lt;li&gt;Combine data from another data source&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fulfilling such requirements is now possible with &lt;strong&gt;AWS Lambda&lt;/strong&gt; use cases. It helps you create a powerful and scalable way to execute data transformations on the clickstream data.&lt;/p&gt;

&lt;p&gt;After buffering the incoming data from the source destinations, Firehose invokes a Lambda function asynchronously over a specified batch period. This Lambda function transforms the data as per the custom logic and sends it back to Firehose. From here, the data is written to the specified destination.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/Real-time-Data-Transform-AWS-Lambda-Kinesis-Firehose.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Along with this, you also have an option to store the raw data (source data backup) to S3 and create a raw data lake before transforming. This process happens concurrently along with your data transformation.&lt;/p&gt;

&lt;p&gt;To help you get started with this functionality, AWS provides you with predefined Lambda blueprints in the following format.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Syslog to JSON&lt;/li&gt;
  &lt;li&gt;Syslog to CSV&lt;/li&gt;
  &lt;li&gt;Apache Log to JSON&lt;/li&gt;
  &lt;li&gt;Apache Log to CSV&lt;/li&gt;
  &lt;li&gt;General Firehose Processing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With 5 more use cases left in the Serverless journey, I expect some of you to be slightly anxious of the cost of running a serverless application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/AWS-Lambda-pricing-768x368.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#6. Serverless CRON Jobs Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CRON or scheduled jobs which are executed based on different parameters are used widely for executing simple time-based tasks. CloudWatch Events now supports cron-like expressions which can be used to trigger a Lambda function periodically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/Serverless-CRON-Jobs-Example.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simply create a Lambda function and direct AWS Lambda to execute it on a regular schedule by specifying a fixed rate or cron expression. While creating your Lambda function,  you need to provide CloudWatch Events as an event source and specify a time interval. For example, create a new event every y and invoke this Lambda function with it. Some real-life use case could be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you are running a membership site where accounts have an expiration date, you can schedule a cron job to regularly deactivate the expired account&lt;/li&gt;
  &lt;li&gt;Sending out the newsletter on fixed timings&lt;/li&gt;
  &lt;li&gt;Cleaning up the database cache on the regular interval&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an example to help you get started with CRON jobs in CloudWatch and AWS Lambda with Node.Js&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#7. AWS Lambda Use Case for Efficient Monitoring&lt;/strong&gt;
&lt;strong&gt;CloudWatch Events&lt;/strong&gt; delivers a real-time stream of system events that depicts changes in AWS resources.  Before the CloudWatch was launched as an event source, you needed to use the CloudWatch Event console or APIs to integrate it with Lambda.&lt;/p&gt;

&lt;p&gt;By creating CloudWatch Event rules, you can monitor and create Lambda functions for processing. Two general scenarios where you can use this possibility:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/AWS-Lambda-Triggers-using-CloudWatch-Metrics-768x499.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Alarm Threshold Breaches:&lt;/strong&gt; Let’s imagine where your CPU is running beyond its specified limits or you’re seeing more/ fewer events than what you’re expecting, CloudWatch can trigger a Lambda function for you which will notify the team through an email or terminate the underperforming resources.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cloudwatch Logs:&lt;/strong&gt; To monitor the incoming CloudWatch logs in realtime, by integrating it with a function which will keep track of any anomaly and notify the team if detected or you can program it to write these logs to your database for a backup.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#8. Real-time Notifications with AWS Lambda &amp;amp; SNS&lt;/strong&gt;
Real-time notification saves a lot of our manual work and we all know how inevitable they are in our hyper-connected world.  ChatOps is becoming the most effective procedure to DevOps. Saying that it’d be an added advantage to receive real-time notifications on 3rd-party platforms like Slack.&lt;/p&gt;

&lt;p&gt;When using &lt;strong&gt;SNS&lt;/strong&gt;, you create a topic and control access to it by defining policies that determine the subscribers and publishers to be communicated with the topic. When an SNS topic has Lambda function subscribed to it, it invokes the function with the payload of a published message.&lt;/p&gt;

&lt;p&gt;Upon invocation, the function can manipulate the information in the message, publish the message to the other SNS topics and/or send the message to other AWS services or endpoints.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/Serverless-SNS-Example-for-Real-time-Notifications-768x205.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An interesting example is to receive your infrastructural alerts as a Slack notification. Whenever a CloudWatch alarms trigger, it will send a message to the SNS topic. Upon receiving the message, SNS topic will invoke a Lambda function which will call the Slack API to post a message to Slack channel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#9. AWS Lambda Use Case for Building Serverless Chatbot&lt;/strong&gt;
Building and running chatbots is not only time consuming but expensive also. Developers must provision, run and scale the infrastructural resources that run the chatbot code. However, with AWS Lambda you can run a scalable chatbot architecture. Here’s how to get started:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/AWS-Lambda-Chatbot-768x319.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter your code logic to the Lambda function.&lt;/li&gt;
  &lt;li&gt;Set up your code to trigger when user commands are sent to the bot. The commands are API requests (from Slack, Messenger, etc) routed through API Gateway to Lambda function.&lt;/li&gt;
  &lt;li&gt;Lambda runs only when it is commanded and hence using the resources when needed. You pay for the time it runs your code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#10. Serverless IoT Backend&lt;/strong&gt;
Scaling an IoT device fleet to hundreds and thousands of devices isn’t an easy job. Along with that, it is somewhat challenging to extract the details for multiple devices in a single solution.&lt;/p&gt;

&lt;p&gt;Suppose your fleet of devices here are smart light bulbs,  internet-connected robot, music player, etc. and you want to register specific information for all of them in your database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/2/Serverless-IoT-Backend-Example-768x319.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As shown in the above diagram, you can create &lt;strong&gt;AWS IoT&lt;/strong&gt; rules to trigger specific device registration logic using Lambda function to the &lt;strong&gt;DynamoDB&lt;/strong&gt; table. Along with this, you can use an another Lambda function which will search the database for device-specific serial number and a randomly generated activation code to activate your device.&lt;/p&gt;

&lt;p&gt;In this similar manner, you can create your own IoT backend solution and logic instead of managing the infrastructure.&lt;/p&gt;

&lt;p&gt;Also, you can use AWS IoT 1-Click with &lt;strong&gt;AWS Lambda&lt;/strong&gt; use cases to create business logic as per your requirements. This was launched at AWS re-Invent 2017 and since then people have been coming up with creative ways to use it. This works over the common WiFi platform and executes a customized Lambda function on triggering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take Away!&lt;/strong&gt;
Presently, AWS Lambda use cases include workloads that are asynchronous, concurrent, infrequent, in sporadic demand, unpredictable traffic in scaling requirements, stateless, ephemeral and highly dynamic. That might sound like a lot in a single sentence, I understand.&lt;/p&gt;

&lt;p&gt;Confused regarding where to start? Go small so that you can experiment and mature over the time. Or want more serverless examples to help you get started? Connect with me on Twitter @GGodage or send me an email on girishgodage@gmail.com&lt;/p&gt;

&lt;p&gt;Though serverless examples serve for diverse use cases, it might not come off as the perfect solution always. But one thing is for sure, if you have a specific use case which has dominated the enterprise environment and you’re looking forward to moving towards a utility-based computing service model, you’re on the right path!&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">AWS Lambda Use Cases to Start Your Serverless Journey Many big companies such as Netflix, Conde Nast and NY Times are migrating their compute services to serverless. But sometimes the cloud architects are confused about the application of serverless technologies such as AWS Lambda and Azure functions.This blog explains 10 AWS Lambda Use Cases to help you get started with serverless. Some of the use cases are Serverless Website,App Authentication,Mass Emailing, Real-time Data Transformation, CRON Jobs,Chatbot,IoT.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/sw_design.png" /></entry><entry><title type="html">How to Build an E-commerce App using Serverless Technology?</title><link href="http://localhost:4000/blog/ecommerce-app-using-serverless" rel="alternate" type="text/html" title="How to Build an E-commerce App using Serverless Technology?" /><published>2020-01-07T10:41:00+00:00</published><updated>2020-01-07T10:41:00+00:00</updated><id>http://localhost:4000/blog/ServerlessEcom1</id><content type="html" xml:base="http://localhost:4000/blog/ecommerce-app-using-serverless">&lt;h3 id=&quot;how-to-build-an-e-commerce-app-using-serverless-&quot;&gt;How to Build an E-commerce App using Serverless ?&lt;/h3&gt;

&lt;p&gt;Learn how to build an ecommerce app using serverless architecture (reference architecture added). Start with an MVP and design the microservices using AWS Lambda functions to reap the benefits of event-driven architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/1/cover-image-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Serverless Architecture- the term which has been added to the technology stack, a few years ago, is becoming a common use since the launch of AWS Lambda in 2014.&lt;/p&gt;

&lt;p&gt;The evidence is- Raymond Camden, Serverless Developer Advocate quoting that serverless will become ‘less of a hot new thing’ and more of a ‘just another option’ and it is becoming a reality now. One of the main reason is that it provocatively illustrates one of the biggest headaches of the IT industry- server administration. In short, write your code and run your applications without provisioning or managing anything on the server side.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But is the sweet reality is good as it is promised?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, let’s put this question on the test as we build an e-commerce app based upon serverless architecture using AWS stack.&lt;/p&gt;

&lt;p&gt;Over the years, I’ve observed that many enterprises don’t know how to build such apps and ignore the massive benefits they have to offer due to insufficient knowledge. And that’s what I will be sharing with you in this post.&lt;/p&gt;

&lt;h3 id=&quot;features-for-building-an-mvp-for-a-serverless-e-commerce-application&quot;&gt;Features for Building an MVP for a Serverless E-commerce Application&lt;/h3&gt;

&lt;p&gt;Before we jump onto architecting the tech stack for our ecommerce app, let’s discuss some of the basic features for our MVP.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;User authentication and authorization:&lt;/strong&gt;
The first feature that comes to your mind while you think of an ecommerce app is user pool authentication &amp;amp; management. The aim here is to provide a seamless registration process while demanding the least possible information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Product Catalog:&lt;/strong&gt;
This consists of a product catalogue which will display the product list from where users can choose the product they want to buy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Payment:&lt;/strong&gt;
This is a catalyst which can increase or decrease your sales ratio.  The motive here is to provide multiple payments options with ease in process and the tight layer of security.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Shopping Cart:&lt;/strong&gt;
A shopping cart is an essential feature for an e-commerce app where users will be able to add the product of their choices and place an order.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Customer Support:&lt;/strong&gt;
Customer support is an inevitable feature to run a successful business. For this, you can either leave your contact details within the app or you may integrate a chatbot which will work based on instant messaging.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from this, if you’re planning to outgrow your competitors, here are some additional features you should have a look upon:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Push Notifications:&lt;/strong&gt;
This is the single most key feature which is sought after by ecommerce giants. Plus, it works as a catalyst for the exclusive promotion and special offers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Shipment Tracking:&lt;/strong&gt;
This feature tracks the status of the ordered shipment. Plus, it includes keeping the users updated by sending out SMS and email about the product delivery status.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Comparison Feature:&lt;/strong&gt;
This feature let users compare different product based on a fixed set of multiple values. For this, you will have to make another cart namely ‘Comparison Cart.’&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;content&quot;&gt;Content&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Step1 - Monolithic First Approach&lt;/li&gt;
  &lt;li&gt;Step2 - Why Serverless Architecture?&lt;/li&gt;
  &lt;li&gt;Step3 - Identifying the Bounded Contexts&lt;/li&gt;
  &lt;li&gt;Step4 - Designing Microservices&lt;/li&gt;
  &lt;li&gt;Step5 - Architecting the Serverless Ecommerce App on AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;getting-started-with-monolithic-first-approach&quot;&gt;Getting Started With Monolithic First Approach&lt;/h3&gt;
&lt;p&gt;According to Martin Fowler, there are two common patterns which are followed while people approach towards microservice architecture. Here are they:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Most of the successful microservice stories start with a monolith which scales up to a level and then breaks up into microservices.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most of the development teams who started building their system with microservices have ended up in serious trouble.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you begin building an application, there are a lot of uncertainties starting with how useful it will be for users. It may be hard to scale a system which is poorly designed but successful. However, that’s still a better option than being in the reverse situation.&lt;/p&gt;

&lt;p&gt;And hence, it is always recommended to start with a simple version or MVP and test how well it is working out. And the add new functionalities in the form of microservices. Following this advice, here’s how what our MVP should consist of.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authorization — responsible for authorizing/managing a user&lt;/li&gt;
  &lt;li&gt;Presentation — responsible for handling HTTP requests and responding with HTML or JSON/XML&lt;/li&gt;
  &lt;li&gt;Business logic — the application’s business logic&lt;/li&gt;
  &lt;li&gt;Database layer — data access objects responsible for accessing the database&lt;/li&gt;
  &lt;li&gt;Application integration — integration with other services (e.g. via messaging or REST API). Or 
integration with any other Data sources&lt;/li&gt;
  &lt;li&gt;Notification module — responsible for sending email/push notifications whenever needed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/1/service-image1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;why-serverless-architecture&quot;&gt;Why Serverless Architecture?&lt;/h3&gt;
&lt;p&gt;Six years ago, Walmart Canada failed on Black Fridays for two years in a row. It’s IT Department came across a multi-million dollar question since the ageing architecture started affecting their business negatively!&lt;/p&gt;

&lt;p&gt;Monoliths might be fine for many systems but they are definitely not the best! And that’s where serverless architecture dominates the technology space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what happened with Walmart?&lt;/strong&gt; Well, it couldn’t handle 6 million page views per minute and made it impossible to have a positive user experience. They had an architecture which was suitable for the internet of 2005, designed for desktops, laptops and monoliths.&lt;/p&gt;

&lt;p&gt;That’s when they decided to re architect their legacy system to microservice based architecture and prepare themselves for the world by 2020, where there would be &lt;strong&gt;4 Billion people connected to 25+ million apps available.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sounds too good to be true? Wait! The results were:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Conversions were up by 20% literally overnight&lt;/li&gt;
  &lt;li&gt;Mobile orders were up by 98% instantly&lt;/li&gt;
  &lt;li&gt;No downtime on Black Friday or Boxing Day&lt;/li&gt;
  &lt;li&gt;The operational savings were significant as well since the company moved off of its expensive     hardware onto commodity hardware&lt;/li&gt;
  &lt;li&gt;They saved 40% of the computing power and experienced 20-50% cost savings overall&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was six years back. What we have now is to prepare ourselves till and beyond 2020. How? By building a serverless architecture based ecommerce mobile app! Here are a few more reasons to back my claims!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Enhanced scalability:&lt;/strong&gt;
Everyone expects their app to be the next Amazon. But if that happens, is it prepared to handle the load? Provisioning instance is a big risk- but so is being unprepared when success strikes. With serverless architecture, the sky is the limit and you don’t have to decide anything about scaling. One online program scaled to 50,000 users within six months without provisioning any servers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pay for what you use:&lt;/strong&gt;
Serverless technology saves money in terms of computing power and manpower both. First, you save by deleting all together with your infrastructure management staff and secondly, you pay only when your servers are running. No extra cost for idle time!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Decreased time to market:&lt;/strong&gt;
If your competitor got it first, you lose! That’s a simple economy of the consumer market. Serverless architecture allows developers to add new functionalities in hours and days instead of weeks and months. Few examples consist of apps that rely on third-party APIs for services like authentication (0Auth), social (Twitter), map (Mapbox), AI (IBM Watson) and more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Characteristics of Microservices&lt;/strong&gt;
Before we move further adding new functionalities to our MVP, let us understand what makes a good microservice.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Loose Coupling:&lt;/strong&gt;
One of the key features of what good microservices consists of is loose coupling. What this means is, a change in one service should not require a change in another. Because that’s the whole point of microservice, being able to change one service without needing to change anything to the other one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, payment service and cart management should be developed as a separate service so that both can be scaled and maintained independently.&lt;/p&gt;

&lt;p&gt;Apart from this, one service should know minimum things about the other services it is communicating with. This suggests keeping the number of calls with a different type of services to a minimum. If this fails, we will land up with potential performance problems on the top of tight coupling.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;High Cohesion:&lt;/strong&gt;
The second key feature of a good microservice is high cohesion. This means to group microservices based on similar behaviour. Why this? Because if we want to change one behaviour, we want to do it as fast as we can without having to change the behaviour of any other region.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it requires to make changes in lots of different places and making lots of services, it is not only slower but potentially risky! And that’s what we want to avoid at all. And hence, this recommends defining fine boundaries within your architecture which ensures that similar behaviour resides in one place while it couples with other boundaries as loosely as possible.&lt;/p&gt;

&lt;h3 id=&quot;identifying-the-bounded-contexts&quot;&gt;Identifying the Bounded Contexts&lt;/h3&gt;
&lt;p&gt;We are developing a complex microservice architecture for a complex application which is going to be a set of loosely coupled bounded context i.e. business capabilities.&lt;/p&gt;

&lt;p&gt;Microservices provides huge benefits but these benefits can be achieved only after a careful functional decomposition of the application into bounded contexts. The idea here is that any given application consists of multiple bounded contexts which can be defined as “a specific responsibility enforced by explicit boundaries” and consists of things which do not need to be communicated externally with other bounded contexts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to decompose an application into business capabilities?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By defining bounded contexts corresponding to business capabilities. These can be defined as something which does business in order to generate value. It normally corresponds to a business object,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Product Management is responsible for product catalogue&lt;/li&gt;
  &lt;li&gt;Notification management is responsible for email/sms notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering our case of a serverless ecommerce app, we are trying to introduce customer-centric services in order to meet our business goals of customer retention. Ecommerce is an inherently complex business domain. There are interrelationships among entities like users, products, reviews, payment, tracking, etc. &lt;strong&gt;But where do you start?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following the Domain-driven Design (DDD) approach, we can first start by breaking the ecommerce domain down into subdomains. As a starting point, we can define our business units corresponding to the technical domain.&lt;/p&gt;

&lt;p&gt;The business capabilities of a serverless ecommerce app will include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;User Management:&lt;/strong&gt; This is responsible for user authentication and management through social gateways, manual authentication, email verification and mobile number verification.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Content Management:&lt;/strong&gt; This is responsible for search bar, navigation and translation services.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Product Catalog:&lt;/strong&gt; This is responsible for product details, product images and product reviews.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Customer Management:&lt;/strong&gt; This is responsible for catering facilities like personal subscriptions, saved payment methods, address verification, ship orders, customer credits and loyalty programmes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cart Management:&lt;/strong&gt; This is responsible for shopping cart management, quick order and check out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Payment Management:&lt;/strong&gt; This is responsible for processing payment and fraud tracking.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Inventory Management:&lt;/strong&gt; This is responsible for keep tracking of back orders and pre-orders.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Track Management:&lt;/strong&gt; This is responsible for keep track of shipment and notifying of orders via push notifications, SMS and email.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reporting Management:&lt;/strong&gt; This is responsible for web analytics, business intelligence, product sales reports and many more.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Marketing Engine:&lt;/strong&gt; This is responsible for personalised marketing and management of recommending products.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;designing-microservices&quot;&gt;Designing Microservices&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Remember the MVP that we built earlier?&lt;/strong&gt; It will give us a starting point to think about how to classify the services which are required to build a full-fledged serverless ecommerce application.&lt;/p&gt;

&lt;p&gt;The Application Frontend and Product Catalog subdomains are highlighted since they are an integral part of the solution. Furthering with our DDD approach, we’ll define more bounded contexts that emerge from these subdomains.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/1/s1-1024x529.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Within the Customer UI part, two distinct bounded contexts come into play. The web and the mobile application frontend shares a common language between each other. We will call these context “Web App” &amp;amp; “Mobile App”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product Related Services&lt;/strong&gt; is even more divided. Product information- containing the core information and images about products- forms a Product Information bounded context. Another distinct bounded context that emerges from this domain is &lt;strong&gt;Personalised Marketing&lt;/strong&gt; which communicated directly with customers. Lastly, there is a &lt;strong&gt;Customer Identity&lt;/strong&gt; context focused exclusively on user security and access control.&lt;/p&gt;

&lt;p&gt;The payment subdomain dissolved into &lt;strong&gt;Payment Service&lt;/strong&gt; bounded context which handles payment process, financial security and fraud tracking. Check out domain breaks down into &lt;strong&gt;Checkout &amp;amp; Order Tracking&lt;/strong&gt; bounded context. Lastly, inventory domain dissolves into Inventory Management bounded context.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/1/s2-1024x529.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have established the bounded contexts, we can now think about what services will make sense from the user/customer perspective. As mentioned earlier, Application Frontend part has two distinct services: Mobile App &amp;amp; Web App.&lt;/p&gt;

&lt;p&gt;The Customer Identity context should provide &lt;strong&gt;Customer Authentication&lt;/strong&gt; service in order to ensure that only authorised user is being able to access our services. Plus, &lt;strong&gt;Customer Management&lt;/strong&gt; which will handle personal subscriptions, saved payment methods, address verification, customer credits and loyalty programmes.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Product Information&lt;/strong&gt; context will take care of product catalogue, product images. This will also handle product reviews. This task will be cross-referenced and will be supplied customer identity from &lt;strong&gt;Customer Authentication&lt;/strong&gt; services.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Personalised Marketing&lt;/strong&gt; service will handle recommending products as per customer’s previous choice, preferences and purchases. It will also handle the content management service which will include navigation and translational services.&lt;/p&gt;

&lt;p&gt;For the Payment domain, we will only refer to a single eponymous service per bounded context. The Order Tracking &amp;amp; Checkout will house two distinct services, first &lt;strong&gt;Track management&lt;/strong&gt; which will keep track of shipment and notifying of orders via push notifications, SMS and email and secondly, &lt;strong&gt;Cart management&lt;/strong&gt; which handle quick order and checkout.&lt;/p&gt;

&lt;p&gt;Lastly, the Inventory domain will house &lt;strong&gt;Inventory management&lt;/strong&gt; which will keep track of orders and pre-orders. And, reporting service which will be responsible for generating various reports and monitoring.&lt;/p&gt;

&lt;p&gt;The last step in this design process is to illustrate the interactions that will take place between the services. However, we will depict them at the time of fabricating our app architecture. Before moving onto that, there is one important thing that one must keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do not assume that all these services and interactions will take place in real time while servicing the end user activity. Few services will need information from a few other services, an event-based approach combined with caching could be used to ensure that its processing is self-contained in order to cater user’s request in real time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;architecting-the-serverless-ecommerce-app-on-aws&quot;&gt;Architecting the Serverless Ecommerce App on AWS&lt;/h3&gt;
&lt;p&gt;Now that we have built our individual microservices, it is time now to figure out our tools. All these services can leverage service discovery and will use simple mechanisms (such as HTTP) for easy connectivity from a wide variety of devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Considering the granularity level of serverless functions&lt;/strong&gt;, we will depict three main portions up to the serverless level viz. Recommendation Engine, Cart Management and Payment Service. For the simplicity of representation, rest of the application will be discussed up to the microservice level.&lt;/p&gt;

&lt;p&gt;Maintaining an e-commerce application with a heavy product catalogue is challenging. The catalogue should be searchable, and individual product pages should contain rich information including product images, pricing and reviews.&lt;/p&gt;

&lt;p&gt;Here customers may want to find things they are interested in and expects pages to load quickly. Also, customers expect the ‘Quick Checkout” functionality to be able to make purchases any time they want.&lt;/p&gt;

&lt;p&gt;The customer-facing user experience in you in your ecommerce workloads includes responsive web applications and optionally as native mobile applications. In combination with the backend architecture, you build your application by assembling multiple frontend components that correspond to and communicate with functions through backend APIs.&lt;/p&gt;

&lt;p&gt;Here’s an example of how frontend of our serverless ecommerce app will work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/1/service-image-1024x575.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The picture shows the Product Catalogue management microservice which will use Amazon Simple Storage Service. This will accommodate all static content, such as product images, manuals and videos. The main benefit of hosting the website on S3 is that it can be replicated to multiple regions of AWS.&lt;/p&gt;

&lt;p&gt;Amazon DynamoDB will accommodate persistent session data such as shopping cart and product pricing details. Since it is a NoSQL database, we have the flexibility to add new product categories and new attributes to our catalogue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/1/Q2-1024x926.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will use Amazon API Gateway for the frontend to access the backend features and compute these functionalities either as microservice or functions (whichever we have chosen). One important reason for using multiple API Gateways is to avoid creating a single monolithic API Gateway as we scale at a higher level. More to that, single API Gateway will the autonomy provided by the microservices architecture.&lt;/p&gt;

&lt;p&gt;The DNS requests to the e-commerce app will be handled by highly avaiable Amazon Route 53. While Amazon CloudFront is used as our content distribution network. It will cache static and streaming content with low latency from locations close to the customer.&lt;/p&gt;

&lt;p&gt;Amazon Elasticache will be used as a session store for volatile data and as a caching layer for the product catalogue to reduce input/output and cost over DynamoDB. The Product Catalogue will be fully loaded into Amazon CloudSearch which will provide full search functionality to the customers.&lt;/p&gt;

&lt;p&gt;Amazon Translate will be used for facilitating our app in multiple languages. For sending transactional email, such as order confirmation, to the customer, we will Amazon SES. This can be easily added with the help of AWS SDKs.&lt;/p&gt;

&lt;p&gt;As discussed earlier, we will use functions for three main services- payments, cart management and Recommendation Engine. Rest of the microservices will be hosted on EC2 Instances while Elastic Beanstalk will automatically handle the details of provisioning, load balancing, auto-scaling and application health monitoring.&lt;/p&gt;

&lt;h3 id=&quot;using-serverless-in-our-ecommerce-app&quot;&gt;Using Serverless in our Ecommerce App&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;#1. Cart Management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Cart Management business functionality will make use of 5 functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ADD (Function 1): This will be triggered when a user adds a product into their cart.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function getProductData(profile_id,cb){
var params = {
TableName : TABLES.productData,
KeyConditionExpression: &quot;#id = :profile_id&quot;,
ExpressionAttributeNames:{
&quot;#id&quot;: &quot;profile_id&quot;
},
ExpressionAttributeValues: {
&quot;:profile_id&quot;: profile_id
}
};
docClient.query(params,function(err,data){
if(err){
console.log('err in getProduct');
cb(err,null)
} else {
cb(null,data.Items);
}
});
}     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;DELETE (Function 2): This will be triggered when a user deletes a product from their cart.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function deleteProduct(id,product_id,cb){
var params = {
TableName: TABLES['productCatalog'],
Key:{
id,
product_id
}
};
docClient.delete(params,function(err,data){
if (err) {
console.error(&quot;Unable to delete item. Error JSON:&quot;, JSON.stringify(err, null, 2));
cb(err);
} else {
console.log(&quot;DeleteItem succeeded:&quot;, JSON.stringify(data, null, 2));
cb(null);
}
});
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;QUANTITY(Function 3): Whenever the number of product quantities will be updated, this function will be triggered.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UPDATE (Function 4): This function will be running at a set interval of time to make sure that the products added in the cart are available in the warehouse. If not, it will automatically delete them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CHECK OUT (Function 5): Once the order is confirmed, this function will be triggered which will initiate the payment procedure.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#2. Payment Management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For facilitating the payment system, we will use Stripe Relay and Stripe Checkout. The function level granular architecture of serverless payment system will look something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once the user creates an order, the app will provide order details to Stripe.&lt;/li&gt;
  &lt;li&gt;After confirming the product availability in the Inventory (DynamoDB), Stripe confirms the order and returns with the order total to the user.&lt;/li&gt;
  &lt;li&gt;Once the order is confirmed, an AWS Lambda function will be triggered which will load Stripe Checkout over a secured HTTPS URL.&lt;/li&gt;
  &lt;li&gt;Once the user provides the payment details, Stripe indicates the payment result to the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Accepting the card payment with Stripe is a two-step process which works on client-side and server-side both:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;From the user’s browser, Stripe securely collects the user’s payment details and returns a representative token which is then submitted by the browser to the app’s server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the request is submitted, an API request is sent which triggers a Lambda function which will create a charge and complete the payment&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; You can securely collect the payment information with Checkout. It combines with the HTML, JavaScript and CSS to create an embedded form as shown below. To get started, add the following code to your secure payment page and makes sure that your code submits to your own server-side code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;form action=&quot;your-server-side-code&quot; method=&quot;POST&quot;&amp;gt;
&amp;lt;script
src=&quot;https://checkout.stripe.com/checkout.js&quot; class=&quot;stripe-button&quot;
data-key=&quot;pk_test_6pRNASCoBOKtIshFeQd4XMUh&quot;
data-amount=&quot;999&quot;
data-name=&quot;Stripe.com&quot;
data-description=&quot;Example charge&quot;
data-image=&quot;https://stripe.com/img/documentation/checkout/marketplace.png&quot;
data-locale=&quot;auto&quot;
data-zip-code=&quot;true&quot;&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Once a token is created, your server-side code will trigger a Lambda function through API Gateway to create a one-time charge. This request contains the token, currency, amount to charge and any additional information you want to pass.&lt;/p&gt;

&lt;p&gt;Our Lambda function will look something like this. It is written in Node.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// Set your secret key: remember to change this to your live secret key in production
// See your keys here: https://dashboard.stripe.com/account/apikeys
var stripe = require(&quot;stripe&quot;)(&quot;sk_test_BQokikJOvBiI2HlWgH4olfQ2&quot;); // Token is created using Checkout or Elements!
// Get the payment token ID submitted by the form:
const token = request.body.stripeToken; // Using Express const charge = stripe.charges.create({
amount: 999,
currency: 'usd',
description: 'Example charge',
source: token,
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tokens can be only used once and every time the user purchases something, he/she will have to re-enter the details.&lt;/p&gt;

&lt;p&gt;However, Stripe allows multiple payment solutions like saving the card details, payment through bank, refunds and much more. You may check out their documentation here for adding further functionalities to your payment mechanism.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#3. Recommendation Engine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main aim of developing a recommendation engine is to facilitate each user with content based on unique interests of each visitor to boost user engagement and improve user conversion, lifetime value and retention.&lt;/p&gt;

&lt;p&gt;The recommendation engine will use the following data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Actions: This will include user clicks, visited products and products categories. This will help in constructing an accurate model and make better content recommendation.&lt;/li&gt;
  &lt;li&gt;Behaviours: This will include users’ past preferences and information from which predictive models will learn more about their preferences.
*Demographic Information: This will include user-specific information such as gender, age, etc. which will help in prediction as users with similar background tends to have similar choices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The recommendation engine uses AWS Lambda for processing users’ actions as mentioned above. It extracts events from multiple sources. As soon as the event occurs, it triggers a specific Lambda function attached to it which process the event further.&lt;/p&gt;

&lt;p&gt;Once the event is processed, it checks for users’ history in DynamoDB which is used to store aggregated data of clicks by the user, product and preferences as well as user profile information.&lt;/p&gt;

&lt;p&gt;If the users’ history exists, machine learning through predictive analysis determines the content affinity scores and passes the information to Kinesis Stream.&lt;/p&gt;

&lt;p&gt;Content affinity scores are used with the personalised logic to determine the most relevant content to present to the user.&lt;/p&gt;

&lt;p&gt;ElastiCache is used to store pre-computed cold-start content affinity scores. This stores the logic for the users who have no history, means they are visiting for the first time. While Machine Learning helps us in easily designing, test, operationalize and manage predictive analytics solutions due to its API-driven architecture.&lt;/p&gt;

&lt;p&gt;Once the events are processed, they are fed to Kinesis Stream which aggregates clicks in near real-time by the user, product choices, preferences and demographic information to write to DynamoDB. It also archives the raw click-stream data to S3.&lt;/p&gt;

&lt;h3 id=&quot;maintaining-the-data-consistency&quot;&gt;Maintaining the Data Consistency&lt;/h3&gt;

&lt;p&gt;Since microservices are architectured with ‘Database per Service’ philosophy, maintaining the data consistency is highly critical. Especially considering our case of an ecommerce app, there are going to be multiple services that need to ensure data consistency across services.&lt;/p&gt;

&lt;p&gt;When you’re working with microservices, things are quite complicated. Since microservices has its own database, you can no longer use two-phase-commits to have database consistency across your system.&lt;/p&gt;

&lt;p&gt;Let’s take an example: whenever a user places an order, charging the customer, sending the confirmation, updating the stock and sending it out to delivery doesn’t happen in a single ACID transaction. To execute the above scenario, you’ll be required to create a distributed transaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What’s the solution?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, we will implement each business transaction that spans across multiple services as a Saga.&lt;/p&gt;

&lt;p&gt;Saga can be defined as a sequence of local database transaction updates the data within each service database. The first trigger will be an external one while the subsequent triggers will be initiated by the completion of the preceding service.&lt;/p&gt;

&lt;p&gt;For implementing a saga transaction, we will you the method of events/orchestration. In this method, there is absence of central coordination. The first service initiates a transaction and then publishes an event. Further, this event is listed by the next service which executed a local transaction and publish an event, depending upon the requirement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/1/order-create-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once the order is placed, the order service saves your order with a pending state and publishes this event- EVENT_ORDER_CREATED&lt;/li&gt;
  &lt;li&gt;The inventory service listens to the event- EVENT_ORDER_CREATED, prepares the order after verifying with the stock available, update it and publish the next event- EVENT_ORDER_PREPARED&lt;/li&gt;
  &lt;li&gt;The payment service listen to the event- EVENT_ORDER_PREPARED, bills the customer and publish the next event- EVENT_ORDER_BILLED&lt;/li&gt;
  &lt;li&gt;Delivery service listens to this event- EVENT_ORDER_BILLED, will pick up products from the warehouse and deliver the product. Once the product is delivered, it publishes the next event- EVENT_ORDER_DELIVERED&lt;/li&gt;
  &lt;li&gt;In the end, order service, which initiated this transaction, listen to EVENT_ORDER_DELIVERED and concludes the order state as finished.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If at all, during this transaction, a business rule is violated, then the saga executes a series of compensating transactions to undo any preceding changes. Here’s an example, what if payment fails?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/1/order-create-copy-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the payment service fails to execute successfully, it will produce an event- EVENT_PAYMENT_FAIL&lt;/li&gt;
  &lt;li&gt;The preceding event- EVENT_ORDER_PREPARED and EVENT_ORDER_CREATED listens to this and terminates the created order.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The flexibility, independent scalability, event-driven nature and strong encapsulation in serverless architecture makes it a perfect choice for building an e-commerce application. But successful implementation of serverless for e-commerce app will require a minimum level of expertise and maturity in terms of function observability, monitoring and automation.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">How to Build an E-commerce App using Serverless ?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/sw_design.png" /></entry><entry><title type="html">DevOps with Docker, Kubernetes and Azure DevOps</title><link href="http://localhost:4000/blog/devops-tutorial-with-docker-kubenetes-and-azure-devops" rel="alternate" type="text/html" title="DevOps with Docker, Kubernetes and Azure DevOps" /><published>2020-01-01T10:41:00+00:00</published><updated>2020-01-01T10:41:00+00:00</updated><id>http://localhost:4000/blog/devops1</id><content type="html" xml:base="http://localhost:4000/blog/devops-tutorial-with-docker-kubenetes-and-azure-devops">&lt;p&gt;In this article, we focus our attention on the DevOps.&lt;/p&gt;

&lt;p&gt;What is DevOps? How is it different from Agile? What are the popular DevOps Tools? What is the role of Docker, Kubernetes and Azure DevOps in DevOps. Let’s get started with a simple usecase.&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is DevOps?&lt;/li&gt;
  &lt;li&gt;Why do we need DevOps?&lt;/li&gt;
  &lt;li&gt;How is DevOps different from Agile?&lt;/li&gt;
  &lt;li&gt;What are the important DevOps tools?&lt;/li&gt;
  &lt;li&gt;How does Docker help DevOps?&lt;/li&gt;
  &lt;li&gt;How does Kubernetes help DevOps?&lt;/li&gt;
  &lt;li&gt;How does Azure DevOps help DevOps?&lt;/li&gt;
  &lt;li&gt;What is Continuous Integration, Continuous Delivery?&lt;/li&gt;
  &lt;li&gt;What is Infrastructure as Code?&lt;/li&gt;
  &lt;li&gt;How do Terraform and Ansible help DevOps?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-devops&quot;&gt;What is DevOps?&lt;/h2&gt;

&lt;p&gt;As with most buzzwords around software development, there is no accepted definition for DevOps.&lt;/p&gt;

&lt;p&gt;Definitions vary from simple ones, like these two, to complex definitions that last a complete page of a book.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt; is the combination of &lt;strong&gt;cultural philosophies, practices, and tools&lt;/strong&gt; 
that &lt;strong&gt;increases&lt;/strong&gt; an organization’s ability to &lt;strong&gt;deliver applications and services&lt;/strong&gt; at &lt;strong&gt;high velocity&lt;/strong&gt; - Amazon Web Services(AWS)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt; is a &lt;strong&gt;collaborative and multidisciplinary&lt;/strong&gt; effort within an organization to &lt;strong&gt;automate continuous delivery&lt;/strong&gt; of new software versions, while &lt;strong&gt;guaranteeing&lt;/strong&gt; their &lt;strong&gt;correctness and reliability&lt;/strong&gt; - A Survey of DevOps Concepts and Challenges - L Leite&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Instead of trying define DevOps&lt;/strong&gt;, let’s understand how Software Development evolved to DevOps.&lt;/p&gt;

&lt;h3 id=&quot;waterfall-model&quot;&gt;Waterfall Model&lt;/h3&gt;

&lt;p&gt;First few decades of software development was centered around the water fall model.&lt;/p&gt;

&lt;p&gt;Waterfall model approached software development the same way that you would approach building a real estate project - for example, building an amazing bridge.&lt;/p&gt;

&lt;p&gt;You will build software in multiple phases that can go on for a period any where between a few weeks to a few months.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-01-waterfall.png&quot; alt=&quot;Image&quot; title=&quot;Waterfall Model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In most waterfall projects, it would be months before the business sees a working version of an application.&lt;/p&gt;

&lt;h3 id=&quot;key-elements-to-build-great-software&quot;&gt;Key Elements to Build Great Software&lt;/h3&gt;

&lt;p&gt;While working in the waterfall model for a few decades, we understood a few key elements around developing great software:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Communication&lt;/li&gt;
  &lt;li&gt;Feedback&lt;/li&gt;
  &lt;li&gt;Automation&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;importance-of-communication&quot;&gt;Importance of Communication&lt;/h4&gt;

&lt;p&gt;Software Development is a multi disciplinary effort involving a variety of skills.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-06-teams.png&quot; alt=&quot;Image&quot; title=&quot;DevOps Teams&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Communication between people is essential for the success of a software project.&lt;/p&gt;

&lt;p&gt;In the waterfall model, we tried to enhance communication by trying to prepare 1000 page documents on Requirements, Design, Architecture and Deployment.&lt;/p&gt;

&lt;p&gt;But, over a period of time, we understood that&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The best way to enhance communication within the team, is to get the team together. Get a variety of skills in the same team.&lt;/li&gt;
  &lt;li&gt;Cross functional teams - with wide range of skills - work great.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;importance-of-early-feedback&quot;&gt;Importance of Early Feedback&lt;/h4&gt;

&lt;p&gt;Getting Feedback Quickly is important. Building great software is all about getting quick feedback.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Are we building an application which meets the business expections?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You cannot wait for months to get feedback. You would want to know quickly.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Will your application have problems if it is deployed to production?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don’t want to know it after a few months. You want to find it out as early as possible.&lt;/p&gt;

&lt;p&gt;The earlier we find a problem, the easier it is to fix it.&lt;/p&gt;

&lt;p&gt;We found that the best software teams are structured to enable quick feedback. Anything I’m working on, I would like to know if I’m doing the right thing as early as possible .&lt;/p&gt;

&lt;h4 id=&quot;importance-of-automation&quot;&gt;Importance of Automation&lt;/h4&gt;

&lt;p&gt;Automation is critical. Software Development involves a wide range of activities. Doing things manually is slow and error prone. We understood that it’s essential to always look for opportunities to introduce Automation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-05-continuous-delivery.png&quot; alt=&quot;Image&quot; title=&quot;DevOps Continuous Delivery&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Having understood the key elements to develop great software, lets look at how we evolved to Agile and DevOps.&lt;/p&gt;

&lt;h3 id=&quot;evolution-to-agile&quot;&gt;Evolution to Agile&lt;/h3&gt;

&lt;p&gt;Agile was the first step in evolution towards implementing our learnings with enhanced communication between teams, getting feedback and bringing in automation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-06-teams.png&quot; alt=&quot;Image&quot; title=&quot;DevOps Teams&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agile brought the business and development teams together into one team which works to build great software in small iterations called sprints.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-02-agile-2.png&quot; alt=&quot;Image&quot; title=&quot;Agile &amp;amp; DevOps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of spending weeks or months on each phase of development, agile focuses on taking small requirements called user stories through the development cycle within a few days, sometimes within the same day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-02-agile-1.png&quot; alt=&quot;Image&quot; title=&quot;Agile &amp;amp; DevOps&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-did-agile-enhance-communication-between-teams&quot;&gt;How did Agile enhance communication between teams?&lt;/h4&gt;

&lt;p&gt;Agile brought the business and development teams together.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Business is responsible for defining what to build? What are the requirements?&lt;/li&gt;
  &lt;li&gt;Development is responsible for building a product that meets the requirements. Development includes everybody involved in Design, Coding, Testing and Packaging of your software.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Agile, a representative from Business, called a Product Owner, is always present with the team, the team understands the business objectives clearly.&lt;/p&gt;

&lt;p&gt;When the development team does not understand the requirements well and is going in a wrong path, Product Owner helps them do course correction and stay on the correct path.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Result : The final product the team builds is something that the business wants.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another important factor is that Agile Teams have cross functional skills - coding skills - front end, api and databases, testing skills and business skills. This enhances communication between people that have to work together to build great software.&lt;/p&gt;

&lt;h4 id=&quot;agile-and-automation&quot;&gt;Agile and Automation&lt;/h4&gt;

&lt;p&gt;What are the Automation areas where Agile Teams focused on?&lt;/p&gt;

&lt;p&gt;Software Products can have a variety of defects.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Functional Defects mean the product does not work as expected.&lt;/li&gt;
  &lt;li&gt;Technical Defects make the maintainence of the software difficult. For example, code quality problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, agile teams were focused on using automation to find technical and functional defects as early as possible.&lt;/p&gt;

&lt;p&gt;Agile teams focused on automation tests. Writing great unit tests to test your methods and classes. Writing great integration tests to test your modules and applications. Agile teams also focused extensively on code quality. Tools like SONAR were used to assess the code quality of applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-05-continuous-integration.png&quot; alt=&quot;Image&quot; title=&quot;Agile &amp;amp; Continuous Integration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Is it sufficient if you have great automation tests and great code quality checks? You would want to run them as often as possible. Agile Teams focused on Continuous Integration. You make a commit to version control. Your Unit Tests, Automation Tests and Code Quality Checks were automatically executed in a Continuous Integration Pipeline. Most popular CI/CD tool during the early agile time period was Jenkins.&lt;/p&gt;

&lt;h4 id=&quot;how-did-agile-promote-immediate-feedback&quot;&gt;How did Agile promote immediate feedback?&lt;/h4&gt;

&lt;p&gt;Most important factor is that Business does not need to wait for months to see the final product.  At the end of every sprint, the product is demoed to all stakeholders including Architecture and Business Teams. All feedback is taken in while prioritizing user stories for the next sprint. Result : The final product the team builds is something that the business wants.&lt;/p&gt;

&lt;p&gt;Another important factor that enables immediate feedback is continuous integration. Let’s say I commit some code into version control. Within 30 minutes, I get feedback if my code causes a unit test failure or a integration test failure. I will get feedback if my code does not meet code quality standards or does not have enough code coverage in the unit tests.&lt;/p&gt;

&lt;p&gt;Was agile successful? Yes. For sure. By focusing on improving the communication between business and development teams, and focusing on finding a variety of defects early, Agile took software development to the next level.&lt;/p&gt;

&lt;p&gt;I, personally, had a wonderful experience working with some amazing teams in the Agile model. Software Engineering, which for me represents all the efforts in building software from requirements to taking applications live, for the first time, was as enjoyable as programming.&lt;/p&gt;

&lt;p&gt;But, does evolution stop? Nope.&lt;/p&gt;

&lt;p&gt;New challenges emerged.&lt;/p&gt;

&lt;h3 id=&quot;evolution-of-microservices-architectures&quot;&gt;Evolution of Microservices Architectures&lt;/h3&gt;

&lt;p&gt;We started moving towards a microservices architecture and we started building a number of small api’s instead of building large monolith applications.&lt;/p&gt;

&lt;p&gt;What was the new challenge?&lt;/p&gt;

&lt;p&gt;Operations becomes more important. Instead of doing 1 monolith release a month, you are doing hundreds of small microservice releases every week. Debugging problems across microservices and getting visibility into what’s happening with the microservices became important.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-06-microservices.png&quot; alt=&quot;Image&quot; title=&quot;DevOps and Microservices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was time for a new buzzword in software development. DevOps.&lt;/p&gt;

&lt;h3 id=&quot;emergence-of-devops&quot;&gt;Emergence of DevOps&lt;/h3&gt;

&lt;p&gt;What was the focus of DevOps?&lt;/p&gt;

&lt;p&gt;Focus of DevOps was on enhancing the communication between the Development and the Operations Team.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How do we make deployments easier?&lt;/li&gt;
  &lt;li&gt;How do we make the work operations team does more visible to the development team?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-did-devops-enhance-communication-between-teams&quot;&gt;How did DevOps enhance communication between teams?&lt;/h4&gt;

&lt;p&gt;DevOps brought Operations Teams closer to the Development Teams.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In more mature enterprises, Development and Operations Teams worked as one Team. They started sharing common goals and both teams started to understand the challenges the other team faces.&lt;/li&gt;
  &lt;li&gt;In enterprises in the early stages of devops evolution, a representative from the operations team can be involved in the sprints - standups and retrospectives.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-06-teams.png&quot; alt=&quot;Image&quot; title=&quot;DevOps Teams&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-are-the-automation-areas-where-devops-teams-focused-on&quot;&gt;What are the Automation areas where DevOps Teams focused on?&lt;/h4&gt;

&lt;p&gt;In addition to the focus areas of agile - Continuous Integration and Test Automation, the DevOps teams were focused on helping automate several of the Operation Teams Activities - Provisioning Servers, Configuring Software on Servers, Deploying Applications and Monitoring Production Environments. A few key terminology are Continuous Deployment, Continuous Delivery and Infrastructure as Code.&lt;/p&gt;

&lt;p&gt;Continuous Deployment is all about continuously deploying new version of software on Test Environments. In even more mature organizations like Google, Facebook, Continuous Delivery helps in continuously deploying software to production - maybe hundreds of production deployments per day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-05-continuous-delivery.png&quot; alt=&quot;Image&quot; title=&quot;DevOps Continuous Delivery&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Infrastructure as Code is all about treating your Infrastructure like you treat your application code. You create your infrastructure - servers, load balancers and database - in an automated way using configuration. You would version control your infrastructure - so that you can track your infrastructure changes over a period of time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-06-iaac-2-overview.png&quot; alt=&quot;Image&quot; title=&quot;DevOps and Infrastructure as Code&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-did-devops-promote-immediate-feedback&quot;&gt;How did DevOps promote immediate feedback?&lt;/h4&gt;

&lt;p&gt;DevOps brings Operations and Development Teams Together. Because Operations and Development are part of the same team, the entire team understands the challenges associated with Operations and Development.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Any operational problems get quick attention of the developers.&lt;/li&gt;
  &lt;li&gt;Any challenges in taking software live get early attention of operations team.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DevOps encouraged Continuous Integration, Continuous Delivery and Infrastructure as Code.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Because of Continous Delivery, If I make a code change or a configuration change that might break a test or a staging environment, I would know it within a few hours.&lt;/li&gt;
  &lt;li&gt;Because of Infrastructure As Code, Developers can self provision environments, deploy code and find problems on their own, without any help from operations team.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While we talk as if agile and devops are two different things to make things simple, in reality, there is no accepted definition for what devops means.&lt;/p&gt;

&lt;p&gt;I see agile and devops as two phases that helped us improve how build great software. They don’t compete against each other but together they help us build amazing software products.&lt;/p&gt;

&lt;p&gt;As far as iam concerned the objective of Agile and DevOps together is to do things that&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Promote Communication and Feedback between Business, Development and Operations Teams&lt;/li&gt;
  &lt;li&gt;Ease the painpoints with Automation. We will discuss about Unit Tests, Integration Tests, Code Quality Checks, Continuous Integration, Continuous Delivery, Infrastructure as Code and Standardization through Containerization during this amazing journey in this course.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-devops-story&quot;&gt;A DevOps Story&lt;/h2&gt;

&lt;p&gt;Here’s an amazing story:&lt;/p&gt;

&lt;p&gt;You are the star developer in a team and you would need to make a quick fix. You go to a github repository!&lt;/p&gt;

&lt;p&gt;You quickly checkout the project.&lt;/p&gt;

&lt;p&gt;You quickly create your local environment.&lt;/p&gt;

&lt;p&gt;You make a change. You test it. You update the unit and automation tests.&lt;/p&gt;

&lt;p&gt;You commit it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-05-continuous-delivery.png&quot; alt=&quot;Image&quot; title=&quot;DevOps Continuous Delivery&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You get an email saying it is deployed to QA.&lt;/p&gt;

&lt;p&gt;A few integration tests are automatically run.&lt;/p&gt;

&lt;p&gt;Your QA team gets an email asking for approval. They do a manual test and approve.&lt;/p&gt;

&lt;p&gt;Your code is live in production in a few minutes.&lt;/p&gt;

&lt;p&gt;You might think this is an ideal scenario. But, do you know that this is what is happening in innovative enterprises like Netflix, Amazon and Google day in and day out!&lt;/p&gt;

&lt;p&gt;This is the story of DevOps.&lt;/p&gt;

&lt;h3 id=&quot;devops--development--operations&quot;&gt;DevOps = Development + Operations&lt;/h3&gt;

&lt;p&gt;DevOps is a Natural Evolution of Software Development. DevOps is NOT JUST a tool, a framework or just automation. It is a combination of all these.&lt;/p&gt;

&lt;p&gt;DevOps focuses on People, Process and Products. People aspects of DevOps are all about Culture and Create a Great Mindset. A culture which promotes open communication and values quick feedback. A culture that value high quality software.&lt;/p&gt;

&lt;p&gt;Agile helped in bridging the gap between the business and development teams. Development Teams understood the priorities of the business and worked with the business to deliver the stories providing most value first. However, the Dev and Ops teams were not aligned.&lt;/p&gt;

&lt;p&gt;They had different goals.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The goal of Dev team is to take as many new features to production as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The goal of Ops team was to keep the production environment as stable as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, if taking things to production is difficult, dev and ops are unaligned.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DevOps aims to align the Dev and Ops teams with shared goals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dev team works with the Ops team to understand and solve operational challenges. Ops team is part of the scrum team and understands the features under development.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How can we make this possible?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Break down the wall between Dev and Ops!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;getting-dev-and-ops-together---option-1&quot;&gt;Getting Dev and Ops Together - Option 1&lt;/h4&gt;

&lt;p&gt;In matured Dev Ops enterprises, Dev and Ops work as part of the same scrum team and share each other responsibilities.&lt;/p&gt;

&lt;h4 id=&quot;getting-dev-and-ops-together---option-2&quot;&gt;Getting Dev and Ops Together - Option 2&lt;/h4&gt;

&lt;p&gt;However, if you are in the early stages of devops evolution, how can you get Dev and Ops have common objectives and work together?&lt;/p&gt;

&lt;p&gt;Here are some of the things you can do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One of the things you can start with is to have the development team share some of the responsibilities of the operation team. For example, the dev team can take the responsibility of new release for the first week after production deployment. This helps the development team understand the challenges faced by operations in taking new releases live and help them come together and find better solutions.&lt;/li&gt;
  &lt;li&gt;Other thing you can do is to involve a representative of the operations team in the Scrum activities. Involve them in Standups and Retrospectives of the team.&lt;/li&gt;
  &lt;li&gt;The next thing you can do is to make the challenges faced by Operations team more visible to the Development team. When you face any challenges in operations, make development teams part of the teams working on solutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which way you take, find ways of breaking the wall and get the Development and Operations team together.&lt;/p&gt;

&lt;p&gt;Another interesting option emerges because of automation. By using Infrastructure as Code and enabling Self Provisioning for Developers, You can create common language that operations and development teams understand - code. More about this in the next couple of steps.&lt;/p&gt;

&lt;h3 id=&quot;a-devops-use-case&quot;&gt;A DevOps Use Case&lt;/h3&gt;

&lt;p&gt;Consider the picture below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-usecases-1-and-2.png&quot; alt=&quot;Image&quot; title=&quot;DevOps Use case with Docker and Kubernetes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This picture show cases two simple workflows&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No 1 : Infrastructure as Code using Terraform and Azure DevOps to provision Kubernetes Clusters&lt;/li&gt;
  &lt;li&gt;No 2 : Continuous Deployment of Microservices using Azure DevOps to build and deploy Docker images for microservices into Kubernetes Clusters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Does this sound complex?&lt;/p&gt;

&lt;p&gt;Let’s break it down and try and understand them.&lt;/p&gt;

&lt;p&gt;Let’s start with No 2 - Continuous Deployment first.&lt;/p&gt;

&lt;h4 id=&quot;no-2--devops-continuous-deployment-with-azure-devops-and-jenkins&quot;&gt;No 2 : DevOps Continuous Deployment with Azure DevOps and Jenkins&lt;/h4&gt;

&lt;p&gt;What is the use of having great tests and code quality checks if you don’t run them often?&lt;/p&gt;

&lt;p&gt;What is the use of deployment automation if you dont deploy software often enough?&lt;/p&gt;

&lt;p&gt;As soon as a developer commits code into the version control system, the following steps are executed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Unit Tests&lt;/li&gt;
  &lt;li&gt;Code Quality Checks&lt;/li&gt;
  &lt;li&gt;Integration Tests&lt;/li&gt;
  &lt;li&gt;Application Packaging - Building a deployable version of application. Tools - Maven, Gradle, Docker&lt;/li&gt;
  &lt;li&gt;Application Deployment - Putting new applications or new versions of application live.&lt;/li&gt;
  &lt;li&gt;An email to the testing team to test the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As soon as there is an approval from the test team, the app is immediately deployed to the  Next Environment.&lt;/p&gt;

&lt;p&gt;This is called Continuous Deployment. If you continuously deploy upto production, it is called Continuous Delivery.&lt;/p&gt;

&lt;p&gt;The most popular CI CD Tools are Azure DevOps and Jenkins&lt;/p&gt;

&lt;h4 id=&quot;no-1--devops-infrastructure-as-code-with-terraform&quot;&gt;No 1 : DevOps Infrastructure as Code with Terraform&lt;/h4&gt;

&lt;p&gt;In older days, we used to create environments and deploy applications manually.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-06-iaac-1-manual.png&quot; alt=&quot;Image&quot; title=&quot;DevOps and Iac - Manual&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Everytime you create a server, this needs to be done manually.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What if Java version needs to be updated?&lt;/li&gt;
  &lt;li&gt;A security patch needs to be applied?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You do it manually.&lt;/p&gt;

&lt;p&gt;What is the result of this?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;High Chance of Errors.&lt;/li&gt;
  &lt;li&gt;Replication environments is difficult.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;infrastructure-as-code&quot;&gt;Infrastructure as Code&lt;/h4&gt;

&lt;p&gt;Infrastructure as Code - Treat Infrastructure the same way as application code&lt;/p&gt;

&lt;p&gt;Here are some of the important things to understand with Infastructure as Code&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Infra team focuses on value added work (instead of routine work)&lt;/li&gt;
  &lt;li&gt;Less Errors and Quick Recovery from Failures&lt;/li&gt;
  &lt;li&gt;Servers are Consistent (Avoids Configuration Drift)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-06-iaac-2-overview.png&quot; alt=&quot;Image&quot; title=&quot;DevOps and Iac - Automated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most popular IaC tools are Ansible and Terraform.&lt;/p&gt;

&lt;p&gt;Typically these are the steps in IaC&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provision Servers(Enabled by Cloud) from a Template&lt;/li&gt;
  &lt;li&gt;Install Software&lt;/li&gt;
  &lt;li&gt;Configure Software&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;server-provisioning&quot;&gt;Server Provisioning&lt;/h5&gt;

&lt;p&gt;Typically Provisioning Tools are used to provision servers and get new server ready with networking capabilities. The most popular provisioning tools are CloudFormation and Terraform.&lt;/p&gt;

&lt;p&gt;Using Terraform, you can provision servers and rest of your infrastructure, like load balancers, databases, networking configuration, etc. You can create servers using precreated images created using tools like Packer and AMI (Amazon Machine Image).&lt;/p&gt;

&lt;h5 id=&quot;configuration-management&quot;&gt;Configuration Management&lt;/h5&gt;

&lt;p&gt;Configuration Management tools are used to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Install Software&lt;/li&gt;
  &lt;li&gt;Configure Software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Popular Configuration management tools are Chef, Puppet, Ansible, and SaltStack. These are designed to install and manage software on existing servers.&lt;/p&gt;

&lt;h3 id=&quot;role-of-docker-and-kubernetes-in-devops&quot;&gt;Role of Docker and Kubernetes in DevOps&lt;/h3&gt;

&lt;p&gt;What is the role of Docker and Kubernetes in DevOps?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/docker-intro.png&quot; alt=&quot;Image&quot; title=&quot;Docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the microservices world, a few microservices might be built with Java, a few with Python and a few with JavaScript.&lt;/p&gt;

&lt;p&gt;Different microservices will have different ways of building applications and deploying them to servers.&lt;/p&gt;

&lt;p&gt;This makes operations team’s job difficult.&lt;/p&gt;

&lt;p&gt;How can we have similar way of deploying multiple types of applications? Enter Containers and Docker.&lt;/p&gt;

&lt;p&gt;Using Docker you can build images of microservices - irrespective of their language - Java, Python or JavaScript. You can run these images the same way on any infrastructure.&lt;/p&gt;

&lt;p&gt;This simplifies operations.&lt;/p&gt;

&lt;p&gt;Kubernetes adds on to this by helping to orchestrate different types of containers and deploying them to clusters.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/kubernetes-01-intro.png&quot; alt=&quot;Image&quot; title=&quot;Kubernetes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kubernetes also provides&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Service Discovery&lt;/li&gt;
  &lt;li&gt;Load Balancing&lt;/li&gt;
  &lt;li&gt;Centralized Configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docker and Kubernetes make DevOps easy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devops-06-iaac-4-containers.png&quot; alt=&quot;Image&quot; title=&quot;Devops with Docker and Kubernetes&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;important-devops-metrics&quot;&gt;Important DevOps Metrics&lt;/h3&gt;

&lt;p&gt;Following are some of the important DevOps metrics you can track and improve over a period of time.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Deployment Frequency - How often are applications deployed to production?&lt;/li&gt;
  &lt;li&gt;Time To Market - How long do you need to take a feature from coding to production?&lt;/li&gt;
  &lt;li&gt;Failure Rate of New Releases - How many of your releases fail?&lt;/li&gt;
  &lt;li&gt;Lead Time to Fixes - How long do you need to make a production fix and release it to production?&lt;/li&gt;
  &lt;li&gt;Mean Time to Recovery  - How long do you take to recover your production environment from a major issue?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;devops-best-practices&quot;&gt;DevOps Best Practices&lt;/h3&gt;

&lt;p&gt;Following are some of the best practices with DevOps&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Standardization&lt;/li&gt;
  &lt;li&gt;Teams with Cross Function Skills&lt;/li&gt;
  &lt;li&gt;Focus on Culture&lt;/li&gt;
  &lt;li&gt;Automate, Automate and ..&lt;/li&gt;
  &lt;li&gt;Immutable Infrastructure&lt;/li&gt;
  &lt;li&gt;Dev Prod Parity&lt;/li&gt;
  &lt;li&gt;Version Control Everything&lt;/li&gt;
  &lt;li&gt;Self Provisioning&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;devops-maturity-signals&quot;&gt;DevOps Maturity Signals&lt;/h3&gt;

&lt;p&gt;How do you measure the maturity of your DevOps Implementations. Here are some of the important questions to ask.&lt;/p&gt;

&lt;h4 id=&quot;development&quot;&gt;Development&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Does every commit trigger automated tests and automated code quality checks?&lt;/li&gt;
  &lt;li&gt;Is your code continuously delivered to production?&lt;/li&gt;
  &lt;li&gt;Do you use pair programming?&lt;/li&gt;
  &lt;li&gt;Do you use TDD and BDD?&lt;/li&gt;
  &lt;li&gt;Do you have a lot of re-usable modules?&lt;/li&gt;
  &lt;li&gt;Can development teams self provision environments?&lt;/li&gt;
  &lt;li&gt;How long does it take to deliver a quick fix to production?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;test&quot;&gt;Test&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Are your tests full automated with high quality production like test data?&lt;/li&gt;
  &lt;li&gt;Does your builds fail when your automated tests fail?&lt;/li&gt;
  &lt;li&gt;Are your testing cycles small?&lt;/li&gt;
  &lt;li&gt;Do you have automated NFR tests?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;deployment&quot;&gt;Deployment&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Do you have Dev Prod Parity?&lt;/li&gt;
  &lt;li&gt;Do you use A/B Testing?&lt;/li&gt;
  &lt;li&gt;Do you use canary deployments?&lt;/li&gt;
  &lt;li&gt;Can you deploy at the click of a button?&lt;/li&gt;
  &lt;li&gt;Can you rollback at the click of a button?&lt;/li&gt;
  &lt;li&gt;Can you provision and release infrastructure at the click of a button?&lt;/li&gt;
  &lt;li&gt;Do you use IAC and version control your infrastructure?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;monitoring&quot;&gt;Monitoring&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Does the team use a centralized monitoring system?&lt;/li&gt;
  &lt;li&gt;Can development team get access to logs at the click of a button?&lt;/li&gt;
  &lt;li&gt;Does the team get an automated alert if something goes wrong in production?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;teams-and-processes&quot;&gt;Teams and Processes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Is the team looking to continuously improve?&lt;/li&gt;
  &lt;li&gt;Does the team have all the skills it needs from Business, Development and Operations?&lt;/li&gt;
  &lt;li&gt;Does the team track the key devops metrics and improve on them?&lt;/li&gt;
  &lt;li&gt;Do you have the culture of take Local Discoveries and using them to make Global Improvements?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;devops-transformation-best-practices&quot;&gt;DevOps Transformation Best Practices&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Leadership Buy-in is Critical&lt;/li&gt;
  &lt;li&gt;Involves Upfront Costs&lt;/li&gt;
  &lt;li&gt;Setup COEs to help teams&lt;/li&gt;
  &lt;li&gt;Choose the right application and team&lt;/li&gt;
  &lt;li&gt;Start Small&lt;/li&gt;
  &lt;li&gt;Sharing Learings (Newsletters, Communication, COEs)&lt;/li&gt;
  &lt;li&gt;Encourage People with Exploration and Automation Mindset&lt;/li&gt;
  &lt;li&gt;Recognize DevOps Teams&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we focus our attention on the DevOps.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/sw_design.png" /></entry><entry><title type="html">ASP. NET Core - ActionFilter</title><link href="http://localhost:4000/blog/customize-actionfilters" rel="alternate" type="text/html" title="ASP. NET Core - ActionFilter" /><published>2019-11-01T05:54:00+00:00</published><updated>2019-11-01T05:54:00+00:00</updated><id>http://localhost:4000/blog/customize9-actionfilters</id><content type="html" xml:base="http://localhost:4000/blog/customize-actionfilters">&lt;h2 id=&quot;actionfilter&quot;&gt;ActionFilter&lt;/h2&gt;

&lt;p&gt;We keep on customizing on the controller level in this ninth post of this series. I’ll have a look into ActionFilters and how to create your own ActionFilter to keep your Actions small and readable.&lt;/p&gt;

&lt;h2 id=&quot;about-actionfilters&quot;&gt;About ActionFilters&lt;/h2&gt;

&lt;p&gt;Action filters are a little bit like middlewares, but are executed immediately on a specific action or on all actions of a specific controller. If you apply an ActionFilter as a global one, it executes on all actions in your application. ActionFilters are created to execute code right before or after the action is executed. They are introduced to execute aspects that are not part of the actual action logic. Authorization is such an aspect. I’m sure you already know the &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizeAttribute&lt;/code&gt; to allow users or groups to access specific Actions or Controllers. The &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizeAttribute&lt;/code&gt; actually is an ActionFilter. It checks whether the logged-on user is authorized or not. If not it redirects to the login page.&lt;/p&gt;

&lt;p&gt;The next sample shows the skeletons of a normal ActionFilters and an async ActionFilter:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleActionFilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionFilter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something before the action executes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something after the action executes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleAsyncActionFilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncActionFilter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecutionAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ActionExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ActionExecutionDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something before the action executes&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something after the action executes; resultContext.Result will be set&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see here, there are always two methods to place code to execute before and after the target action is executed. This ActionFilters cannot be used as attribute. If you want to use the ActionFilters as attribute in your Controllers, you need to derive from &lt;code class=&quot;highlighter-rouge&quot;&gt;Attribute&lt;/code&gt; or from &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionFilterAttribute&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidateModelAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionFilterAttribute&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BadRequestObjectResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code shows a simple ActionFilter which always returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;BadRequestObjectResult&lt;/code&gt;, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelState&lt;/code&gt; is not valid. This may be useful within a Web API as a default check on &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; requests. This could be extended with a lot more validation logic. We’ll see how to use it later on.&lt;/p&gt;

&lt;p&gt;Another possible use case for an ActionFilter is logging. You don’t need to log in the controller Actions directly. You can do this in an action filter to keep your actions readable with relevant code:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggingActionFilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionFilter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoggingActionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoggerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoggingActionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something before the action executes&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Action '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' executing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnActionExecuted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionExecutedContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something after the action executes&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Action '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' executed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This logs an informational message out to the console. You are able to get more information about the current Action out of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionExecutingContext&lt;/code&gt; or the &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionExecutedContext&lt;/code&gt; e.g. the arguments, the argument values and so on. This makes the ActionFilters pretty useful.&lt;/p&gt;

&lt;h2 id=&quot;using-the-actionfilters&quot;&gt;Using the ActionFilters&lt;/h2&gt;

&lt;p&gt;ActionFilters that actually are Attributes can be registered as an attribute of an Action or a Controller:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValidateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ActionFilter as attribute&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// save the person&lt;/span&gt;
    
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//just to test the action&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;ValidateModelAttribute&lt;/code&gt; that checks the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelState&lt;/code&gt; and returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;BadRequestObjectResult&lt;/code&gt; in case the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelState&lt;/code&gt; is invalid and we don’t need to check the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelState&lt;/code&gt; in the actual Action.&lt;/p&gt;

&lt;p&gt;To register ActionFilters globally you need to extend the MVC registration in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CofnigureServices&lt;/code&gt; method of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddControllersWithViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMvcOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SampleActionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SampleAsyncActionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ActionFilters registered like this, are getting executed on every action. This way you are able to use ActionFilters that don’t derive from Attribute.&lt;/p&gt;

&lt;p&gt;The Logging &lt;code class=&quot;highlighter-rouge&quot;&gt;LoggingActionFilter&lt;/code&gt; we created previously is a little more special. It is depending on an instance of an &lt;code class=&quot;highlighter-rouge&quot;&gt;ILoggerFactory&lt;/code&gt;, which need to be passed into the constructor. This won’t work well as an attribute, because Attributes don’t support constructor injection via dependency injection. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ILoggerFactory&lt;/code&gt; is registered in the ASP.NET Core dependency injection container and needs to be injected into the &lt;code class=&quot;highlighter-rouge&quot;&gt;LoggingActionFilter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because of this, there are some more ways to register ActionFilters. Globally we are able to register it as a type, that gets instantiated by the dependency injection container and the dependencies can be solved by the container.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddControllersWithViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMvcOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoggingActionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works well. We now have the &lt;code class=&quot;highlighter-rouge&quot;&gt;ILoggerFactory&lt;/code&gt; in the filter.&lt;/p&gt;

&lt;p&gt;To support automatic resolution in Attributes, you need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceFilterAttribute&lt;/code&gt; on the Controller or Action level:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ServiceFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoggingActionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to the global filter registration, the ActionFilter needs to be registered in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceCollection&lt;/code&gt; before we can use it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceFilterAttribute&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSingleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoggingActionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To be complete, there is another way to use ActionFilters that needs arguments passed into the constructor.  You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeFilterAttribute&lt;/code&gt; to automatically instantiate the filter. But using this attribute, the Filter isn’t instantiate by the dependency injection container and the arguments need to get specified as argument of the &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeFilterAttribute&lt;/code&gt;. See the next snippet from the &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TypeFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddHeaderAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Arguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Juergen Gutsch (@sharpcms)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Hi &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Type of the filter and the arguments are specified with the &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeFilterAttribute&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Personally I like the way to keep the actions clean using ActionFilters. If I find repeating tasks inside my Actions, that are not really relevant to the actual responsibility of the Action, I try to move it out to an ActionFilter, or maybe a ModelBinder or a MiddleWare, depending on how globally it should work. The more it is relevant to an Action the more likely I use an ActionFilter.&lt;/p&gt;

&lt;p&gt;There are some more kind of filters, which all work similar. To learn more about the different kind of filters, you definitely need to &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters&quot;&gt;read the docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the tenth part of the series we move to the actual view logic and extend the Razor Views with custom &lt;strong&gt;TagHelpers&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;sessions&quot;&gt;Sessions&lt;/h2&gt;

&lt;p&gt;This is series of articles on Building Conf planner app with Asp.net Core:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-logging&quot; target=&quot;_blank&quot;&gt;1 - Logging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-configuration&quot; target=&quot;_blank&quot;&gt;2 - Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-dependency-injection&quot; target=&quot;_blank&quot;&gt;3 - Dependency Injection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-https&quot; target=&quot;_blank&quot;&gt;4 - Https&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-hostedservices&quot; target=&quot;_blank&quot;&gt;5 - Hostedservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-middleware&quot; target=&quot;_blank&quot;&gt;6 - Middlewares&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-outputformatter&quot; target=&quot;_blank&quot;&gt;7 - Outputformatter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-modelbinders&quot; target=&quot;_blank&quot;&gt;8 - Modelbinders &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-actionfilters&quot; target=&quot;_blank&quot;&gt;9 - Actionfilters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-taghelpers&quot; target=&quot;_blank&quot;&gt;10 - Taghelpers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-webhostbuilder&quot; target=&quot;_blank&quot;&gt;11 - Webhostbuilder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-hosting&quot; target=&quot;_blank&quot;&gt;12 - Hosting &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/customize-modelbinders&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/customize-taghelpers&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="customization" /><category term="learning" /><summary type="html">ActionFilter</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/aspnetcore.png" /></entry><entry><title type="html">ASP. NET Core - ModelBinders</title><link href="http://localhost:4000/blog/customize-modelbinders" rel="alternate" type="text/html" title="ASP. NET Core - ModelBinders" /><published>2019-11-01T05:54:00+00:00</published><updated>2019-11-01T05:54:00+00:00</updated><id>http://localhost:4000/blog/customize8-modelbinders</id><content type="html" xml:base="http://localhost:4000/blog/customize-modelbinders">&lt;h2 id=&quot;modelbinders&quot;&gt;ModelBinders&lt;/h2&gt;

&lt;p&gt;In the last chapter about &lt;code class=&quot;highlighter-rouge&quot;&gt;OutputFormatters&lt;/code&gt; I wrote about sending data out to the clients in different formats. In this post we are going to do it the other way. This post is about data you get into your Web API from outside. What if you get data in a special format or what if you get data you need to validate in a special way. &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBinders&lt;/code&gt; will help you to handle this.&lt;/p&gt;

&lt;h2 id=&quot;about-modelbinders&quot;&gt;About ModelBinders&lt;/h2&gt;

&lt;p&gt;ModelBinders are responsible to bind the incoming data to specific action method parameters. It binds the data sent with the request to the parameters. The default binders are able to bind data that are sent via the QueryString or sent within the request body. Within the body the data can be sent in URL format or JSON.&lt;/p&gt;

&lt;p&gt;The model binding tries to find the values in the request by the parameter names. The form values, the route data and the query string values are stored as a key-value pair collection and the binding tries to find the parameter name in the keys of the collection.&lt;/p&gt;

&lt;h2 id=&quot;preparation-of-the-test-project&quot;&gt;Preparation of the test project&lt;/h2&gt;

&lt;p&gt;In this chapter I’d like to send CSV data to a Web API method. I will reuse the CSV data we created in the last post:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-csv&quot;&gt;Id,FirstName,LastName,Age,EmailAddress,Address,City,Phone
48,Samantha,White,18,Angel.Morgan@shaw.ca,&quot;8202 77th Street &quot;,Mascouche,(682) 381-4092
1,Eric,Wright,2,Briana.Ross@gmx.com,&quot;8104 Scott Avenue &quot;,Canutillo,(253) 366-5637
55,Amber,Watson,46,Sarah.Foster@gmx.com,&quot;9206 Lewis Avenue &quot;,Coleman,(632) 375-4415
99,Alexander,King,59,Ross.Timms@live.com,&quot;3089 Paerdegat 7th Street &quot;,Monte Alto,(366) 319-4154
69,Autumn,Hayes,25,Mark.Diaz@shaw.ca,&quot;3263 Avenue O  &quot;,Montreal West (Montréal-Ouest),(283) 438-7801
94,Destiny,James,47,Kylie.Walker@telus.net,&quot;1057 14th Street &quot;,Montreal,(570) 574-3208
59,Christina,Bennett,87,Madeline.Adams@att.com,&quot;5672 19th Lane &quot;,Corrigan,(467) 304-0309
71,Isaac,Hayes,33,Trevor.Robinson@hotmail.com,&quot;9707 Langham Street &quot;,Huntington,(635) 317-0231
23,Jason,Morgan,77,Jennifer.Powell@rogers.ca,&quot;4413 Debevoise Avenue &quot;,Pinole,(265) 467-1984
43,Jenna,Brandzin,92,Natalie.Reed@gmail.com,&quot;4691 Sea Breeze Avenue &quot;,Cushing-Douglass,(502) 427-9135
79,Madison,Verstraete,69,Abigail.Wright@hotmail.com,&quot;2066 104th Street &quot;,Moose Lake,(448) 423-7550
80,Lorrie,Long,89,Melissa.Bennett@microsoft.com,&quot;3048 Allen Avenue &quot;,Munday,(576) 707-6183
79,Alejandro,Daeninck,51,Matthew.Phillips@att.com,&quot;9997 41st Street &quot;,North Bay,(455) 297-2648
14,Makayla,Clark,44,Joshua.Jackson@rogers.ca,&quot;4518 Folsom Place &quot;,Cortland,(772) 692-0732
12,Isaac,Sanchez,37,Paige.MacKenzie@live.com,&quot;2094 Mc Kenny Street &quot;,Brockville,(563) 735-0233
68,Jesus,Brandzin,34,Molly.Clark@telus.net,&quot;3532 Durland Place &quot;,Comfort,(627) 319-9704
59,Logan,Howard,59,Jorge.Brandzin@rogers.ca,&quot;3458 Wythe Avenue &quot;,Enderby,(226) 520-9653
48,Nathaniel,Richardson,58,Amanda.Pitt@gmail.com,&quot;6926 Sunnyside Court &quot;,Los Altos Hills,(513) 338-4602
34,Tiffany,Miller,18,Claire.Alexander@att.com,&quot;1985 Devon Avenue &quot;,Sansom Park,(357) 274-3606
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let’s start by creating a new project using the .NET CLI:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new webapi &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; ModelBinderSample &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; ModelBinderSample
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates a new Web API project.&lt;/p&gt;

&lt;p&gt;In this new project I created a new controller with a small action inside:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ModelBinderSample.Controllers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;api/[controller]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonsController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ItemsRead&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Persons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persons&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This looks basically like any other action. It accepts a list of persons and returns an anonymous object that contains the number of persons as well as the list of persons. This action is pretty useless, but helps us to debug the ModelBinder using Postman.&lt;/p&gt;

&lt;p&gt;We also need the Person class:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;City&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phone&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This actually will work fine, if we would send JSON based data to that action.&lt;/p&gt;

&lt;p&gt;As a last preparation step, we need to add the CsvHelper NuGet package to easier parse the CSV data. I also love to use the .NET CLI here:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet package add CsvHelper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-a-csvmodelbinder&quot;&gt;Creating a CsvModelBinder&lt;/h2&gt;

&lt;p&gt;To create the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBinder&lt;/code&gt; add a new class called &lt;code class=&quot;highlighter-rouge&quot;&gt;CsvModelBinder&lt;/code&gt;, which implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;IModelBinder&lt;/code&gt;. The next snippet shows a generic binder that should work with any list of models:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CsvModelBinder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IModelBinder&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BindModelAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelBindingContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Specify a default argument name if none is set by ModelBinderAttribute&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;modelName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Try to fetch the value of the argument by name&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueProviderResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetModelValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueProviderResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Check if the argument value is null or empty&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StringReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CsvReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelElementType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetRecords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelElementType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;bindingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelBindingResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the method &lt;code class=&quot;highlighter-rouge&quot;&gt;BindModelAsync&lt;/code&gt; we get the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBindingContext&lt;/code&gt; with all the information in it we need to get the data and to deserialize it.&lt;/p&gt;

&lt;p&gt;First the &lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt; get’s checked against null. After that we set a default argument name to the model, if none is specified. If this is done we are able to fetch the value by the name we previously set.&lt;/p&gt;

&lt;p&gt;If there’s no value, we shouldn’t throw an exception in this case. The reason is that maybe the next configured &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBinder&lt;/code&gt; is responsible. If we throw an exception the execution of the current request is canceled and the next configured &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBinder&lt;/code&gt; doesn’t have the chance to get executed.&lt;/p&gt;

&lt;p&gt;With a &lt;code class=&quot;highlighter-rouge&quot;&gt;StringReader&lt;/code&gt; we read the value into the &lt;code class=&quot;highlighter-rouge&quot;&gt;CsvReader&lt;/code&gt; and deserialize it to the list of models. We get the type for the deserialization out of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelMetadata&lt;/code&gt; property. This contains all the relevant information about the current model.&lt;/p&gt;

&lt;h2 id=&quot;using-the-modelbinder&quot;&gt;Using the ModelBinder&lt;/h2&gt;

&lt;p&gt;The Binder isn’t used automatically, because it isn’t registered in the dependency injection container and not configured to use within the MVC framework.&lt;/p&gt;

&lt;p&gt;The easiest way use this model binder is to use the ModelBinderAttribute on the argument of the action where the model should be bound:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ModelBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binderType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CsvModelBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ItemsRead&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Persons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persons&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the type of our &lt;code class=&quot;highlighter-rouge&quot;&gt;CsvModelBinder&lt;/code&gt; is set as &lt;code class=&quot;highlighter-rouge&quot;&gt;binderType&lt;/code&gt; to that attribute.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/stevejgordon&quot;&gt;Steve Gordon&lt;/a&gt; wrote about a second option in his blog post: &lt;a href=&quot;https://www.stevejgordon.co.uk/html-encode-string-aspnet-core-model-binding/&quot;&gt;Custom ModelBinding in ASP.NET MVC Core&lt;/a&gt;. He uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBinderProvider&lt;/code&gt; to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBinder&lt;/code&gt; to the list of existing ones.&lt;/p&gt;

&lt;p&gt;I personally prefer the explicit declaration, because the most custom &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBinders&lt;/code&gt; will be pretty specific to an action or to a specific type and there’s no hidden magic in the background.&lt;/p&gt;

&lt;h2 id=&quot;testing-the-modelbinder&quot;&gt;Testing the ModelBinder&lt;/h2&gt;

&lt;p&gt;To test it, we need to create a new Request in Postman. I set the request type to POST and put the URL https://localhost:5001/api/persons in the address bar. Now I need to add the CSV data in the body of the request. Because it is a URL formatted body, I needed to put the data as &lt;code class=&quot;highlighter-rouge&quot;&gt;persons&lt;/code&gt; variable into the body:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;persons=Id,FirstName,LastName,Age,EmailAddress,Address,City,Phone
48,Samantha,White,18,Angel.Morgan@shaw.ca,&quot;8202 77th Street &quot;,Mascouche,(682) 381-4092
1,Eric,Wright,2,Briana.Ross@gmx.com,&quot;8104 Scott Avenue &quot;,Canutillo,(253) 366-5637
55,Amber,Watson,46,Sarah.Foster@gmx.com,&quot;9206 Lewis Avenue &quot;,Coleman,(632) 375-4415

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After pressing send, I got the result as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/customize-aspnetcore/modelbinder.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the clients are able to send CSV based data to the server.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is a good way to transform the input in a way the action really needs. You could also use the ModelBinders to do some custom validation against the database or whatever you need to do before the model get’s passed to the action.&lt;/p&gt;

&lt;p&gt;To learn more about ModelBinders, you need to have a look into the pretty detailed documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding&quot;&gt;Model Binding in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding&quot;&gt;Custom Model Binding in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While playing around with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ModelBinderProvider&lt;/code&gt; Steve describes in his blog, I stumbled upon &lt;code class=&quot;highlighter-rouge&quot;&gt;InputFormatters&lt;/code&gt;. Would this actually be the right way to transform CSV input into objects? I definitely need to learn some more details about the &lt;code class=&quot;highlighter-rouge&quot;&gt;InputFormatters&lt;/code&gt;and will use this as 12th topic of this series.&lt;/p&gt;

&lt;p&gt;In the next chapter, I will show you what you can do with &lt;strong&gt;ActionFilters&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;sessions&quot;&gt;Sessions&lt;/h2&gt;

&lt;p&gt;This is series of articles on Building Conf planner app with Asp.net Core:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-logging&quot; target=&quot;_blank&quot;&gt;1 - Logging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-configuration&quot; target=&quot;_blank&quot;&gt;2 - Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-dependency-injection&quot; target=&quot;_blank&quot;&gt;3 - Dependency Injection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-https&quot; target=&quot;_blank&quot;&gt;4 - Https&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-hostedservices&quot; target=&quot;_blank&quot;&gt;5 - Hostedservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-middleware&quot; target=&quot;_blank&quot;&gt;6 - Middlewares&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-outputformatter&quot; target=&quot;_blank&quot;&gt;7 - Outputformatter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-modelbinders&quot; target=&quot;_blank&quot;&gt;8 - Modelbinders &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-actionfilters&quot; target=&quot;_blank&quot;&gt;9 - Actionfilters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-taghelpers&quot; target=&quot;_blank&quot;&gt;10 - Taghelpers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-webhostbuilder&quot; target=&quot;_blank&quot;&gt;11 - Webhostbuilder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/customize-hosting&quot; target=&quot;_blank&quot;&gt;12 - Hosting &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/customize-outputformatter&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/customize-actionfilters&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="customization" /><category term="learning" /><summary type="html">ModelBinders</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/aspnetcore.png" /></entry></feed>