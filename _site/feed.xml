<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-15T14:15:56+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">6. Software Design - What is Dependency Inversion Principle?</title><link href="http://localhost:4000/blog/SwDesignLesson6" rel="alternate" type="text/html" title="6. Software Design - What is Dependency Inversion Principle?" /><published>2019-10-14T11:05:00+00:00</published><updated>2019-10-14T11:05:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson6</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson6">&lt;p&gt;Dependency Inversion Principle is one of the important SOLID Principles. Dependency Inversion Principle is implemented by one of the most popular Java frameworks - Spring. What is it all about? How does it help you design good applications?&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will Learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is Dependency Inversion Principle?&lt;/li&gt;
  &lt;li&gt;How are Dependency Inversion Principle and Spring Framework related?&lt;/li&gt;
  &lt;li&gt;A few examples of Dependency Inversion Principle in action&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-dependency-inversion-principle-dip&quot;&gt;What Is Dependency Inversion principle (DIP)?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Depend Upon Abstractions (interfaces), not Implementations (concrete classes)”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this statement mean? Let’s try understanding that with an example:&lt;/p&gt;

&lt;p&gt;Let’s look at an example of what this means:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class OutputDevice {
	void copy(String device) {
		Keyboard keyboard = new Keyboard();
		int character;
		while ((character = keyboard.read()) != -1) {
			if (device.equals(&quot;Printer&quot;)) {
				writeToPrinter(character);
			} else {
				writeToDevice(character);
			}
		}
	}

	private void writeToDevice(int character) {
		// TODO Auto-generated method stub
		
	}

	private void writeToPrinter(int c) {
		// TODO Auto-generated method stub
		
	}
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What does the &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method do?&lt;/p&gt;

&lt;p&gt;It reads a character from the keyboard, and then decides where this character needs to go. If it’s a printer, write to the printer. Else, send it to the disk.&lt;/p&gt;

&lt;p&gt;The problem here is that as the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;OutputDevice&lt;/code&gt; types increase, the logic of &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; needs to change every single time.&lt;/p&gt;

&lt;p&gt;Let’s look at an alternate implementation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public interface Reader {
		public char read();
	}

	public interface Writer {
		public void write(char ch);
	}

	void copy(Reader r, Writer w) {
		int c;

		while((c = r.read()) != EOF) {
			w.write(c);
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we have done here is define two separate interfaces, one to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;, and the other to define the &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;The responsibility of the &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method is quite clear here: it reads from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt;, and writes whatever it gets to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; now focuses only on the actual operation, and it does so by identifying everything else as its dependencies.&lt;/p&gt;

&lt;p&gt;It can now work with any implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; interfaces.&lt;/p&gt;

&lt;h3 id=&quot;dip-and-the-spring-framework&quot;&gt;DIP and The Spring Framework&lt;/h3&gt;

&lt;p&gt;DIP is one of the core principles that the Spring Framework enables. Have a look at this example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorthm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; directly creates an instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt;. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt; is a dependency of &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt;, and as we saw in our previous example, directly accessing it is not a great idea. If you want to switch from a bubble-sort to a quicksort algorithm later, you need to change quite a lot of code inside &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Better Approach for &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; is to make use of an interface - sort algorithm. Here is how our modified code would look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intrface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BinarySearchImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;User of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class, can also pass in a specific implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt;, such as a bubble-sort or a quick-sort implementation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; is &lt;strong&gt;decoupled&lt;/strong&gt; from which &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you use the Spring framework, you could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; annotation with the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class, to automatically auto wire an implementation of an available sort algorithm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;By applying the DIP, you make your code more testable. The test code could pass in dependency mocks to properly test the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Dependency Inversion is about identifying dependencies and externalizing them. You can use a framework like Spring to simplify Dependency Inversion. DIP makes your code more maintainable, reusable and testable.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson5&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson6&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Dependency Inversion Principle is one of the important SOLID Principles. Dependency Inversion Principle is implemented by one of the most popular Java frameworks - Spring. What is it all about? How does it help you design good applications?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">5. Software Design - Open Closed Principle Principle</title><link href="http://localhost:4000/blog/SwDesignLesson5" rel="alternate" type="text/html" title="5. Software Design - Open Closed Principle Principle" /><published>2019-10-14T11:00:00+00:00</published><updated>2019-10-14T11:00:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson5</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson5">&lt;p&gt;Open Closed Principle is one of the SOLID Principles. You want your code to be extensible. How do you achieve it with minimum fuss? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is the Open Closed Principle?&lt;/li&gt;
  &lt;li&gt;How do you apply this principle in developing and designing software applications?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-closed-principle&quot;&gt;Open Closed Principle&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your classes should be open to extension, but closed to modification&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean? Let’s look at a simple example to understand what this means.&lt;/p&gt;

&lt;h3 id=&quot;an-example-of-poor-design&quot;&gt;An example of Poor Design&lt;/h3&gt;

&lt;p&gt;Let’s take a quick look at the calculateArea method in the Shape class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Shape {
	public double calculateArea(Shape[] shapes) {
		double area = 0;
		for(Shape shape:shapes) {
			if(shape instanceof Rectangle) {
				//Calculate Area of Rectange
			}
			else if(shape instanceof Circle) {
				//Calculate Area of Circle
			}
		}
		return area;
	}
}

class Rectangle extends Shape {
	
}

class Circle extends Shape {
	
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is there a problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method?&lt;/p&gt;

&lt;p&gt;What if we add a new shape? What if we remove a shape? What if we want to change the area algorithm for one of the shapes.&lt;/p&gt;

&lt;p&gt;For all these modifications, &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method needs to change.&lt;/p&gt;

&lt;p&gt;How can we make it better?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parts of the above code below pseudo code, for ease of explanation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class Shape {

	
    abstract double area();
}

class Rectangle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

class Circle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A better solution would be to allow each of the shapes, to define their own &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method. We have created an abstract class called &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; (which could also have been an interface), and have each of the different shapes extend it. Each shape also overrides &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt;’s abstract &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method, to compute its specific area.&lt;/p&gt;

&lt;p&gt;The standalone &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method would now look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;abstract class Shape {
	
	
	public double calculateArea(Shape[] shapes)
	{
		double area = 0;
		for(Shape shape:shapes) {
			area += shape.area();
		}
		return area;
	}
	
    abstract double area();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is now responsible just for looping around the shapes, and invoking the &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method of individual shapes.&lt;/p&gt;

&lt;p&gt;This is a very good example of the OCP.&lt;/p&gt;

&lt;p&gt;If you now want to add another shape, then you need to extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class, and override its &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method:. That’s it.&lt;/p&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class is open to extension, and &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is closed to modification.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we focused on Open Closed Principle.&lt;/p&gt;

&lt;p&gt;Design should be open for extension, but closed for modification.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson4&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson6&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Open Closed Principle is one of the SOLID Principles. You want your code to be extensible. How do you achieve it with minimum fuss? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">4. Software Design - Single Responsibility Principle</title><link href="http://localhost:4000/blog/SwDesignLesson4" rel="alternate" type="text/html" title="4. Software Design - Single Responsibility Principle" /><published>2019-10-14T10:55:00+00:00</published><updated>2019-10-14T10:55:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson4</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson4">&lt;p&gt;For me, Single Responsibility Principle (SRP) is the most important design principle.&lt;/p&gt;

&lt;p&gt;What is Single Responsibility Principle? How do you use it? How does it help with making your software better? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is the Single Responsibility Principle?&lt;/li&gt;
  &lt;li&gt;How do you apply this principle in developing and designing software applications?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-the-single-responsibility-principle-srp&quot;&gt;What Is The Single Responsibility Principle (SRP)?&lt;/h2&gt;

&lt;p&gt;As the term says, this principle is all about having single responsibility.&lt;/p&gt;

&lt;p&gt;In any software system, this principle is applicable at multiple levels&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a variable&lt;/li&gt;
  &lt;li&gt;a method&lt;/li&gt;
  &lt;li&gt;a class&lt;/li&gt;
  &lt;li&gt;a package&lt;/li&gt;
  &lt;li&gt;a component&lt;/li&gt;
  &lt;li&gt;application layers or&lt;/li&gt;
  &lt;li&gt;the entire application itself&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;srp-for-methods&quot;&gt;SRP For Methods&lt;/h2&gt;

&lt;p&gt;Any method that you write should have a single responsibility -  it should either be a high-level method, or a low-level one. Only when a method has a single responsibility, you will be able to give it an appropriate name.&lt;/p&gt;

&lt;h2 id=&quot;srp-for-classes&quot;&gt;SRP For Classes&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A class should have one, and only one reason to change”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s now have a look at a few examples of classes that violate this principle, and then look at how to correct the violation.&lt;/p&gt;

&lt;h3 id=&quot;example-1-the-task-class&quot;&gt;Example 1: The &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; class&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Strign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseTheFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;persistTheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Does the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; adhere to the single responsibility principle? Not at all, because it does a lot of different things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;downloadFile()&lt;/code&gt; downloads the file, by communicating over the internet&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parseTheFile()&lt;/code&gt; parses the file contents&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;persistTheData()&lt;/code&gt; saves the data into a database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A better solution would be to have separate classes for each of the responsibilities currently taken up by &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;. Here is one such solution.&lt;/p&gt;

&lt;h4 id=&quot;identifying-the-low-level-classes&quot;&gt;Identifying The Low-level Classes&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileDownloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseStorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FileDownloader&lt;/code&gt; only downloads the file from the internet&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DataParser&lt;/code&gt; only parses the downloaded file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DatabaseStorer&lt;/code&gt; only stores the parsed data, into the database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are all low-level classes here.&lt;/p&gt;

&lt;h4 id=&quot;adding-a-high-level-class&quot;&gt;Adding A High-Level Class&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadAndStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doEverything&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileDownloader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DatabaseStorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, you can create a high-level class such as &lt;code class=&quot;highlighter-rouge&quot;&gt;DownloadAndStore&lt;/code&gt; that invokes the functionality of these low-level classes to perform the complete task. Such an organization ensures that the low-level classes are reusable.&lt;/p&gt;

&lt;h3 id=&quot;example-2-the-employee-class&quot;&gt;Example 2: The Employee Class&lt;/h3&gt;

&lt;p&gt;Consider next, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; class shown below:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reportHours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; concerns itself with not just calculating the pay of an employee, but also reporting hours for work, and saving these details to the database.&lt;/p&gt;

&lt;p&gt;I will leave it as an exercise to fix the Employee class to adhere to SRP.&lt;/p&gt;

&lt;h2 id=&quot;srp-for-components&quot;&gt;SRP For Components&lt;/h2&gt;

&lt;p&gt;Every enterprise application has parts of its functionality organized as Components. For example, have a look at the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/4/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, the following components are of note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Security component  takes care of user authentication and authorization. Designing such a component helps abstract applications from the low-level security details. All microservices can interact with this component to find out if a user has access.&lt;/li&gt;
  &lt;li&gt;The Logging component - does the low level logging functionality&lt;/li&gt;
  &lt;li&gt;The Archetype component - Can be used to create new microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these components have a single responsibility. If the Security component takes care of logging, it would become less reusable. Therefore, at the component level, a well-defined single responsibility is highly desirable.&lt;/p&gt;

&lt;h3 id=&quot;using-srp-for-common-infrastructure&quot;&gt;Using SRP For Common Infrastructure&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/4/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the diagram shown above, you can identify the following infrastructure components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Naming Service - Has the responsibility to retrieve the service location based on its name&lt;/li&gt;
  &lt;li&gt;API Gateway - All requests go through the API Gateway. Common features like authentication, logging, rate limiting can be implemented in an API Gateway.&lt;/li&gt;
  &lt;li&gt;Centralized Logging - Centralized store for logs from all microservices so that we can easily debug problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with these sub-systems, a single responsibility for each of them is most desirable.&lt;/p&gt;

&lt;h3 id=&quot;using-srp-for-application-layering&quot;&gt;Using SRP For Application Layering&lt;/h3&gt;

&lt;p&gt;Single responsibility is also an important factor in how you layer your application. Have a look at the following conceptual layers in a web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/4/Capture-05-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Layer: All functionality concerned with direct user interaction sits here&lt;/li&gt;
  &lt;li&gt;Business Layer: Houses the core business logic&lt;/li&gt;
  &lt;li&gt;Data layer: All the functionality dealing with storing and retrieving data goes here&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you had the need to talk to other systems, there would have been an additional Enterprise Messaging Layer added onto this setup.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we talked about the Single Responsibility Principle. It is applicable at multiple levels to the parts of an application. This includes methods, classes, packages, components and application layers. With regards to classes, at a low level it means a class has only one reason to change.&lt;/p&gt;

&lt;p&gt;In general, &lt;strong&gt;Single Responsibility ensures high cohesion, low coupling and enhanced reusability&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson3&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson5&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">For me, Single Responsibility Principle (SRP) is the most important design principle.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">3. Object Oriented Software Design - Solid Principles</title><link href="http://localhost:4000/blog/SwDesignLesson3" rel="alternate" type="text/html" title="3. Object Oriented Software Design - Solid Principles" /><published>2019-10-14T10:49:00+00:00</published><updated>2019-10-14T10:49:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson3</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson3">&lt;p&gt;Software design is typically complex. Object oriented design takes it to the next level. There are a number of design patterns to be aware of. Can we make things simple?&lt;/p&gt;

&lt;p&gt;SOLID Principles is a great starting point for Object Oriented Design.&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What are SOLID Principles?&lt;/li&gt;
  &lt;li&gt;What are the best practices in designing objected oriented software?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-are-the-solid-principles&quot;&gt;What Are The SOLID Principles?&lt;/h3&gt;

&lt;p&gt;Plainly listed out, the SOLID principles are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SRP&lt;/strong&gt;: Single Responsibility Principle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OCP&lt;/strong&gt;: Open Closed Principle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LSP&lt;/strong&gt;: Liskov Substitution Principle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ISP&lt;/strong&gt;: Interface Segregation Principle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DIP&lt;/strong&gt;: Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at each of these by turn.&lt;/p&gt;

&lt;h3 id=&quot;single-responsibility-principle-srp&quot;&gt;Single Responsibility Principle (SRP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A class should have one, and only one reason to change”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This principle is not just applicable to a class, but also at the level of a package, a component, an application, or a service. Each of these should each have just one responsibility.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should be able to state what each element does in a single sentence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When your class or component or application has single responsibility, the options for reuse increases significantly.&lt;/p&gt;

&lt;p&gt;Have a look at the following class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public class Task {
		public void downloadFile(String location) {
			//...
		}
		
		public void parseTheFile(File file) {
			//...
		}

		public void persistTheData(Data data) {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; has three main responsibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download a file from a location&lt;/li&gt;
  &lt;li&gt;Parse the contents of the file&lt;/li&gt;
  &lt;li&gt;Save the data obtained to a database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It clearly does not satisfy SRP. Let’s look at another example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public class Employee {
		public Money calculatePay() {
			//...
		}

		public String reportHours() {
			//...
		}

		public void save() {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; has multiple responsibilities as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Calculate the employee’s pay&lt;/li&gt;
  &lt;li&gt;Create a report of hours of work put in&lt;/li&gt;
  &lt;li&gt;Save the employee details to a database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above examples need re-design to meet Single Responsibility Principle.&lt;/p&gt;

&lt;h3 id=&quot;open-closed-principle-ocp&quot;&gt;Open Closed Principle (OCP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Software entities should be open for extension, but closed for modification”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s take a quick look at the calculateArea method in the Shape class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Shape {
	public double calculateArea(Shape[] shapes) {
		double area = 0;
		for(Shape shape:shapes) {
			if(shape instanceof Rectangle) {
				//Calculate Area of Rectange
			}
			else if(shape instanceof Circle) {
				//Calculate Area of Circle
			}
		}
		return area;
	}
}

class Rectangle extends Shape {
	
}

class Circle extends Shape {
	
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is there a problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method?&lt;/p&gt;

&lt;p&gt;What if we add a new shape? What if we remove a shape? What if we want to change the area algorithm for one of the shapes.&lt;/p&gt;

&lt;p&gt;For all these modifications, &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method needs to change.&lt;/p&gt;

&lt;p&gt;How can we make it better?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parts of the above code below pseudo code, for ease of explanation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class Shape {

	
    abstract double area();
}

class Rectangle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

class Circle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A better solution would be to allow each of the shapes, to define their own &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method. We have created an abstract class called &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; (which could also have been an interface), and have each of the different shapes extend it. Each shape also overrides &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt;’s abstract &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method, to compute its specific area.&lt;/p&gt;

&lt;p&gt;The standalone &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method would now look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;abstract class Shape {
	
	
	public double calculateArea(Shape[] shapes)
	{
		double area = 0;
		for(Shape shape:shapes) {
			area += shape.area();
		}
		return area;
	}
	
    abstract double area();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is now responsible just for looping around the shapes, and invoking the &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method of individual shapes.&lt;/p&gt;

&lt;p&gt;This is a very good example of the OCP.&lt;/p&gt;

&lt;p&gt;If you now want to add another shape, then you need to extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class, and override its &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method:. That’s it.&lt;/p&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class is open to extension, and &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is closed to modification.&lt;/p&gt;

&lt;h3 id=&quot;liskov-substitution-principle-lsp&quot;&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt;

&lt;p&gt;According to this principle:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Subtypes must be substitutable for their base types”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the things people try to do with object oriented programming, is to use inheritance even when it is not appropriate. They may do it just for the sake of reusing the code. Have a look at this example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	class Rectangle {
		void setWidth(double w)
		void setHeight(double h)

		double getWidth()
		double getHeight()
	}

	class Square extends Rectangle {
		void setWidth(double w) 	// Set both width and height to w
		void setHeight(double h) 	// Set both height and width to h

		double getWidth()
		double getHeight()
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; class that has methods to set and get its width and height. Suppose we have a fresh requirement for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Instead of implementing it as a separate class, Let’s say we extend &lt;code class=&quot;highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; (as we know from school geometry that a square is a rectangle). &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt; redefines all the set and get methods that it inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; to set both height and width to the same values.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the pair of setters and the pair of getters inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt;  are redundant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider a piece of client code such as this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	void test(Rectangle r) {
		r.setWidth(5);
		r.setHeight(4);

		assertEquals(5*4, r.getWidth() * r.getHeight());
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; is a method to test rectangles. A &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt;, hence &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; can be called on a &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt; object as well. Unfortunately, since both &lt;code class=&quot;highlighter-rouge&quot;&gt;setWidth()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setHeight()&lt;/code&gt; modify both the width and height to be equal, the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;r.getWidth() * r.getHeight()&lt;/code&gt; always amounts to &lt;code class=&quot;highlighter-rouge&quot;&gt;4 * 4&lt;/code&gt;, as that was the last value set. &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; always fails for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;LSP states that inheritance should be used very carefully. Make sure that the super class is always fully replaceable by each of its sub classes.&lt;/p&gt;

&lt;h3 id=&quot;interface-segregation-principle-isp&quot;&gt;Interface Segregation Principle (ISP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;If two systems are communicating to each other, then the dependency should be in the smallest possible interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clients should not be forced to implement interfaces that they don’t use&lt;/p&gt;

&lt;p&gt;Instead of one fat interfaces, a group of smaller interfaces is preferred, each one addressing a sub-module.&lt;/p&gt;

&lt;p&gt;Let’s look at an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public abstract class Animal {
		public abstract void feed();
	}

	public class Dog extends Animal {
		public void feed() {
			//...
		}
	}

	public class Tiger extends Animal {
		public void feed() {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say we now need to add a feature called &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt; to each  kind of &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One option is to add it to &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; as an abstract method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public abstract class Animal {
		public abstract void feed();
		public abstract void groom();
	}

	public class Dog extends Animal {
		public void feed() {
			//...
		}
		
		public void groom() {
			//...
		}
	}

	public class Tiger extends Animal {
		public void feed() {
			//...
		}

		// DUMMY implementation, to keep compiler happy
		public void groom() {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In that case, both &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Tiger&lt;/code&gt; need to provide implementations for &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt; makes sense for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt;, but not so much for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Tiger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, we are forced to provide a dummy implementation in &lt;code class=&quot;highlighter-rouge&quot;&gt;Tiger&lt;/code&gt; to make the code compile.&lt;/p&gt;

&lt;p&gt;Above example does not adhere to ISP.&lt;/p&gt;

&lt;p&gt;Let’s see how to fix this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public abstract class Animal {
		public abstract void feed();
	}

	public class Pet extends Animal {
		public abstract void groom();
		public void feed() {
			//...
		}
	}

	public class Dog extends Pet {
		public void feed() {
			//...
		}
		
		public void groom() {
			//...
		}
	}

	public class Tiger extends Animal {
		public void feed() {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The new interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Pet&lt;/code&gt; extends the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;, and also adds its own abstract method &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt;. Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; will extend &lt;code class=&quot;highlighter-rouge&quot;&gt;Pet&lt;/code&gt;, as it needs both &lt;code class=&quot;highlighter-rouge&quot;&gt;feed()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt;, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;Tiger&lt;/code&gt; chooses to extend just &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;feed()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ISP recommends that you keep your interfaces as small as possible.&lt;/p&gt;

&lt;p&gt;The moment you have a fat interface, any changes to that interface will result in changes in all your implementations.&lt;/p&gt;

&lt;h3 id=&quot;dependency-inversion-principle-dip&quot;&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt;

&lt;p&gt;The Dependency Inversion Principle states that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Depend upon abstract classes (interfaces), not upon concrete classes”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s look at an example of what this means:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class OutputDevice {
	void copy(String device) {
		Keyboard keyboard = new Keyboard();
		int character;
		while ((character = keyboard.read()) != -1) {
			if (device.equals(&quot;Printer&quot;)) {
				writeToPrinter(character);
			} else {
				writeToDevice(character);
			}
		}
	}

	private void writeToDevice(int character) {
		// TODO Auto-generated method stub
		
	}

	private void writeToPrinter(int c) {
		// TODO Auto-generated method stub
		
	}
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What does the &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method do?&lt;/p&gt;

&lt;p&gt;It reads a character from the keyboard, and then decides where this character needs to go. If it’s a printer, write to the printer. Else, send it to the disk.&lt;/p&gt;

&lt;p&gt;The problem here is that as the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;OutputDevice&lt;/code&gt; types increase, the logic of &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; needs to change every single time.&lt;/p&gt;

&lt;p&gt;Let’s look at an alternate implementation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public interface Reader {
		public char read();
	}

	public interface Writer {
		public void write(char ch);
	}

	void copy(Reader r, Writer w) {
		int c;

		while((c = r.read()) != EOF) {
			w.write(c);
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method explicitly states its dependencies - &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; interfaces.&lt;/p&gt;

&lt;p&gt;It inverts responsibility, and leaves the creation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; to its users.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; will not change even when there are new &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; implementations.&lt;/p&gt;

&lt;p&gt;This is called Dependency Inversion principle.&lt;/p&gt;

&lt;p&gt;Frameworks like Spring make it easy to implement Dependency Inversion.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the five SOLID principles: SRP, OCP, LSP, ISP and DIP. We also looked at a few code examples to understand more about each one of them.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson2&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson4&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Software design is typically complex. Object oriented design takes it to the next level. There are a number of design patterns to be aware of. Can we make things simple?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">2. Software Design - Separation Of Concerns</title><link href="http://localhost:4000/blog/SwDesignLesson2" rel="alternate" type="text/html" title="2. Software Design - Separation Of Concerns" /><published>2019-10-14T10:45:00+00:00</published><updated>2019-10-14T10:45:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson2</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson2">&lt;p&gt;&lt;strong&gt;Software architects and programmers love having Seperation of Concerns. What is it? Why is it important? Let’s get started.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What is Separation Of Concerns?&lt;/li&gt;
  &lt;li&gt;What are common examples of implementing Separation Of Concerns in software?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-separation-of-concerns&quot;&gt;What Is Separation Of Concerns?&lt;/h3&gt;

&lt;p&gt;Separation Of Concerns is an important design and architectural principle.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every element of a software application - a component, a layer,a package,a class or a method should have one concern and implement it well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All methods with similar concerns will grouped into a class.&lt;/p&gt;

&lt;p&gt;All classes with similar concerns will be grouped into packages.&lt;/p&gt;

&lt;p&gt;So on and so forth.&lt;/p&gt;

&lt;h3 id=&quot;separation-of-concerns-in-action&quot;&gt;Separation Of Concerns In Action&lt;/h3&gt;

&lt;h4 id=&quot;layered-architecture&quot;&gt;Layered Architecture&lt;/h4&gt;

&lt;p&gt;Organizing an application into separate layers is one way of separating out concerns.&lt;/p&gt;

&lt;p&gt;For example, the following is the typical architecture of a web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/2/Capture-039-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some of the important responsibilities of each of these layers&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Web layer only bothers about how to present data to its users&lt;/li&gt;
  &lt;li&gt;The Business layer focuses on implementing the core application logic, correctly and efficiently&lt;/li&gt;
  &lt;li&gt;The Data layer takes responsibility of talking to the data store.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see that each layer has a concern and implements it well.&lt;/p&gt;

&lt;h4 id=&quot;organizing-microservices&quot;&gt;Organizing Microservices&lt;/h4&gt;

&lt;p&gt;Another good example of Separation Of Concerns is how you split your microservices. Have a look at the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/2/Capture-039-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All the microservices shown are part of a movie application. But each one of them has its own independent concern.&lt;/p&gt;

&lt;h4 id=&quot;identifying-common-components&quot;&gt;Identifying Common Components&lt;/h4&gt;

&lt;p&gt;Seperation of concerns is also an important factor in building common application and infrastructure components.&lt;/p&gt;

&lt;p&gt;Since a large part of the functionality of microservices is common to all of them, it makes sense to extract out the common components. Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/2/Capture-039-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All microservices need features such as security and logging. By identifying common components in your service such as Security and Logging, and providing well defined interfaces with each microservice, the implementation of the microservices gets simpler.&lt;/p&gt;

&lt;p&gt;The same is the case with common infrastructure components. Any microservice can interact with them and use their functionality.&lt;/p&gt;

&lt;p&gt;A few examples of Seperation of Concern in infrastructure components&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Naming Server - Microservice3 can locate the identity of Microservice2.&lt;/li&gt;
  &lt;li&gt;API Gateway - Centralized access to all microservices. You can implement cross cutting microservice concerns here.&lt;/li&gt;
  &lt;li&gt;Distributed Tracing and Centralized Logging - You can trace microservices and find out what’s happending behind the scenes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at separation of concerns, and several examples of it in action - such as in a layered architecture, in the way microservices are split and organized, and in the way common components and infrastructure are identified and extracted out in a microservices architecture.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson3&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Software architects and programmers love having Seperation of Concerns. What is it? Why is it important? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">1. Introduction to Four Principles Of Simple Design</title><link href="http://localhost:4000/blog/SwDesignLesson1" rel="alternate" type="text/html" title="1. Introduction to Four Principles Of Simple Design" /><published>2019-10-14T10:41:00+00:00</published><updated>2019-10-14T10:41:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson1</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson1">&lt;h3 id=&quot;what-is-simple-design&quot;&gt;What is Simple Design?&lt;/h3&gt;

&lt;p&gt;** With agile and extreme programming, the focus is on keeping your design simple. How do you       keep your design simple? How do you decide whether your code is good enough? **&lt;/p&gt;

&lt;p&gt;It is very important to keep the design of your application simple.&lt;/p&gt;

&lt;p&gt;In almost all agile projects, the aim is to meet today’s requirements, with clean code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You go for complex design, only when simple design does not solve your problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;the-four-principles-of-simple-design&quot;&gt;The Four Principles Of Simple Design&lt;/h3&gt;

&lt;p&gt;A software application is said to have a simple design if it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Runs all tests&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contains no duplication&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expresses intent of programmers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minimizes number of classes and methods&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now look at these aspects a little closely, by turn.&lt;/p&gt;

&lt;h4 id=&quot;runs-all-tests&quot;&gt;Runs All Tests&lt;/h4&gt;

&lt;p&gt;We want to keep running all the tests continuously, because we want the code to work, at all times.&lt;/p&gt;

&lt;p&gt;An important corollary of this principle is you need to have a large number of automation tests. All unit, integration and API tests must be automated.&lt;/p&gt;

&lt;p&gt;You should launch these tests as part of your build, and they should also be a part of Continuous Integration (CI).&lt;/p&gt;

&lt;p&gt;With CI, you commit code into the repository, all the tests are run, and immediate feedback is there for you to act on.&lt;/p&gt;

&lt;p&gt;Since the software is being tested all the time, it is stable.&lt;/p&gt;

&lt;h4 id=&quot;contains-no-duplication&quot;&gt;Contains No Duplication&lt;/h4&gt;

&lt;p&gt;The second principle stresses on the fact that your code should have as little duplication as possible.&lt;/p&gt;

&lt;p&gt;A good example is to create common components, whereever possible, in the design of large applications. This helps centralize the logic and allow other applications to reuse them.&lt;/p&gt;

&lt;p&gt;Why do we hate duplication?&lt;/p&gt;

&lt;p&gt;If there is a need for a change, the same change needs to repeated at all these locations. The result : More effort and also possibilities of more defects when you miss making the change in every location. That is a sign of bad design.&lt;/p&gt;

&lt;h4 id=&quot;expresses-intent-of-programmers&quot;&gt;Expresses Intent Of Programmers&lt;/h4&gt;

&lt;p&gt;Your code should be easy to read, and your design, simple to understand. This principle is also called &lt;strong&gt;Clarity Of Code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Have a look at the following piece of code:&lt;/p&gt;

&lt;h5 id=&quot;example-01-v1&quot;&gt;Example-01 v1&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/1/Capture-09-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do you understand what it does?&lt;/p&gt;

&lt;p&gt;Now look at the following version of the same program:&lt;/p&gt;

&lt;h5 id=&quot;example-01-v2&quot;&gt;Example-01 v2&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/1/Capture-09-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do you understand what it’s trying to do?&lt;/p&gt;

&lt;p&gt;Actually, Example-01 v2 results from applying the Four Principles of Simple Design to Example-01 v1.&lt;/p&gt;

&lt;p&gt;Start with creating good names for variables, methods and classes. That improves clarity.&lt;/p&gt;

&lt;h4 id=&quot;minimize-number-of-classes-and-methods&quot;&gt;Minimize number of classes and methods&lt;/h4&gt;

&lt;p&gt;You should have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Small methods&lt;/li&gt;
  &lt;li&gt;Small classes&lt;/li&gt;
  &lt;li&gt;Minimum number classes and methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Isn’t it simple.&lt;/p&gt;

&lt;p&gt;Lesser code you have, lesser code you have to maintain.&lt;/p&gt;

&lt;p&gt;Always aim to keep things simple.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the four principles of simple design. These are the first steps to ensure that the design of your application remains simple. It lays the foundation for applying more advanced principles to improving your design.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson2&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">What is Simple Design?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">8.Typescript arrow functions</title><link href="http://localhost:4000/blog/Lesson8" rel="alternate" type="text/html" title="8.Typescript arrow functions" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson8</id><content type="html" xml:base="http://localhost:4000/blog/Lesson8">&lt;section class=&quot;tstutorial8&quot;&gt;
    &lt;p&gt;Since you already know how to use &lt;code&gt;Named functions&lt;/code&gt; and &lt;code&gt;Anonymous functions&lt;/code&gt; let me show
        you another type of function which you will be dealing with while building Angular Applications&lt;/p&gt;
    &lt;p&gt;Let's have a look at the following sample:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Named function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Call named function&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;You can write the same using &lt;code&gt;arrow functions&lt;/code&gt; (sometimes also called &lt;strong&gt;fat arrow&lt;/strong&gt;
        functions):&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;As you can see they are not that fat :) They are actually, shorter and less verbose than traditional function
        expressions. Arrow functions have two huge advantages, the first one you already know: &lt;/p&gt;
    &lt;h4&gt;1. Shorter syntax:&lt;/h4&gt;
    &lt;p&gt;Arrow functions are &lt;strong&gt;always anonymous&lt;/strong&gt; and turn: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parameters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; expression &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;into:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parameters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;In the case that your function doesn't use any input parameters, you can use even shorter syntax:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Doing some math...'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;When you only have one parameter, the opening parentheses are optional:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;parameters &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; expression &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
z &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; z&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Finally, if you are returning an expression, you can &lt;strong&gt; remove the brackets and return statement&lt;/strong&gt;:
    &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; expression

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
z &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; z&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;h4&gt;2. Handling `this` &lt;/h4&gt;
    &lt;!-- Before we move on, you should have a good understanding of the keyword this and how it works. If you want to learn, or need a refresher, read my post on the subject before continuing. --&gt;
    &lt;p&gt;A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has
        some differences between strict mode and non-strict mode.&lt;/p&gt;
    &lt;p&gt;
        Arrow functions do not have
        &lt;console&gt;this&lt;/console&gt;
        , arguments or other special names bound at all — when the object is being created the name this is found in the
        enclosing scope, not the person object.
    &lt;/p&gt;
    &lt;p&gt;Consider the following example:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;david&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

    shout&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;my name is &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    shout2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;my name is &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &quot;john&quot;&lt;/span&gt;
person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shout2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;david&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;As you can see, when we are using normal functions &lt;code&gt;this&lt;/code&gt; corresponds to the name: &lt;code&gt;john&lt;/code&gt;
        (the closest object), while in case of arrow function, this refers to the global scope: &lt;code&gt;david&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;Why is it important?&lt;/strong&gt; &lt;/p&gt;
    &lt;p&gt;Functions always have their own &lt;code&gt;this&lt;/code&gt;. But that prevents you from accessing the &lt;code&gt;this&lt;/code&gt; of,
        e.g., a surrounding method from inside a callback:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Prefixer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;prefixArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (A)&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (B)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Doesn’t work:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (C)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pre &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Hi '&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pre&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prefixArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Joe'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'Alex'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;This will generate an error: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;TypeError&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Cannot read property &lt;span class=&quot;token string&quot;&gt;'prefix'&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; undefined&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;This is because, in line C, we’d like to access this.prefix, but can’t, because the &lt;code&gt;this&lt;/code&gt; of the
        function from line B shadows the &lt;code&gt;this&lt;/code&gt; of the method from line A. In strict mode, this is undefined
        in non-method functions, which is why we get an error if we use Prefixer.&lt;/p&gt;
    &lt;p&gt;There is a workaround which we can use: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Prefixer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;prefixArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; that &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (A)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; that&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pre &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Hi '&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pre&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prefixArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Joe'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'Alex'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;But this is tricky and makes code more complex, while using an arrow function solves the issue:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Prefixer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;prefixArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pre &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Hi '&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pre&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prefixArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Joe'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'Alex'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;blockquote class=&quot;blockquote bq-primary&quot;&gt;
        &lt;p class=&quot;bq-title&quot;&gt;Lesson summary:&lt;/p&gt;
        &lt;p&gt;Since ES6, you can use arrow functions to make your code less verbose: &lt;/p&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//Multiple input parameters =&amp;gt; mixed output&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;param1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paramN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; statements &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;param1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paramN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;expression&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;param1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paramN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; expression&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Single input (parenthesis are optional)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;singleParam&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; statements &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
singleParam &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; statements &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
singleParam &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; expression


&lt;span class=&quot;token comment&quot;&gt;// Empty list of parameters&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; statements &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;As a disclaimer, there is more to arrow functions than what was explained in this article. But this should give
        you a great base for further learning! As always, leave a comment if you have any great resources on the subject
        for others to explore.&lt;/p&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson8&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Since you already know how to use Named functions and Anonymous functions let me show you another type of function which you will be dealing with while building Angular Applications Let's have a look at the following sample: // Named function function add(x, y) { return x + y; }</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/typescipt_logo.png" /></entry><entry><title type="html">7.Typescript type assertion</title><link href="http://localhost:4000/blog/Lesson7" rel="alternate" type="text/html" title="7.Typescript type assertion" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson7</id><content type="html" xml:base="http://localhost:4000/blog/Lesson7">&lt;section class=&quot;ts_tutorial7&quot;&gt;
    &lt;p&gt;During application development, it may happen that you deal with a situation where you will know more about the
        value than TypeScript does. Most often in a situation, where you know that the type of a certain entity could be
        more specific than it is now.&lt;/p&gt;
    &lt;p&gt;Type assertion is a way to explicitly inform the compiler that you want to treat the entity as it would have a
        different type. This allows you to treat &lt;code&gt;any&lt;/code&gt; as a &lt;code&gt;number&lt;/code&gt;, or a &lt;code&gt;number&lt;/code&gt; as
        a &lt;code&gt;string&lt;/code&gt;. Let's have a look at the following example:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; someValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I am sure I am a string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Although, we are sure that someValue contains a string, for the compiler it still has a type of &lt;code&gt;any&lt;/code&gt;.
        As result, you won't be able to use methods like &lt;code&gt;length()&lt;/code&gt; which is a default method for a string
        type variable. What you can do is to inform the compiler to treat it as a &lt;code&gt;string&lt;/code&gt;. You can do this
        in two ways:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; strLength&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Or using the &lt;code&gt;as&lt;/code&gt; syntax: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; strLength&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someValue &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Probably you already know that in JavaScript you can define functions like the one below: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Named function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Call named function&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;which are so-called &lt;code&gt; Named functions&lt;/code&gt;. You can also use &lt;code&gt;Anonymous functions&lt;/code&gt;:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Anonymous function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;myAdd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// You can call it like this&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;myAdd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// But definitely more common&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;An anonymous function is a function that was declared without any named identifier to refer to it. As such, an
        anonymous function is usually not accessible after its initial creation.&lt;/p&gt;
    &lt;p&gt;One common use for Anonymous functions is as arguments to other functions. Another common use is as a closure,
        for which see also the Closures chapter. Below shows its use as an argument to other functions:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Or call it with parameter: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;

    &lt;p&gt;So basically, you want to use Anonymous functions in all places where you have to &lt;strong&gt;use a function as an
            argument to other function&lt;/strong&gt; or as a &lt;strong&gt;closure&lt;/strong&gt; (we will learn about closures in later
        lessons). &lt;/p&gt;
    &lt;p&gt;In those cases you use the function only once, therefore you don't want to name it (like you would for a
        &lt;code&gt;Named function&lt;/code&gt;) just to use it in a single line.&lt;/p&gt;
    &lt;p&gt;Anonymous functions might look confusing at the start, however, once you start using them you will find them very
        handy. But there is something else, another type of the function called an &lt;code&gt;arrow function&lt;/code&gt; which we
        will learn about in the next lesson.&lt;/p&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson6&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson8&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">During application development, it may happen that you deal with a situation where you will know more about the value than TypeScript does. Most often in a situation, where you know that the type of a certain entity could be more specific than it is now. Type assertion is a way to explicitly inform the compiler that you want to treat the entity as it would have a different type. This allows you to treat any as a number, or a number as a string. Let's have a look at the following example: let someValue: any = &quot;I am sure I am a string&quot;;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/typescipt_logo.png" /></entry><entry><title type="html">6.Default Methods</title><link href="http://localhost:4000/blog/Lesson6" rel="alternate" type="text/html" title="6.Default Methods" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson6</id><content type="html" xml:base="http://localhost:4000/blog/Lesson6">&lt;section class=&quot;ts_tutorial6&quot;&gt;

    &lt;p&gt;As we learned in a previous lesson, TypeScript allows us to use static typing and use different type of
        variables. Each variable defines a certain set of functions which can be used along with them. For instance:&lt;/p&gt;
    &lt;ol&gt;
        &lt;li&gt;Declare the following variables in &lt;code&gt;app.components.ts&lt;/code&gt;:&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre class=&quot;code-toolbar language-markup&quot;&gt;&lt;code class=&quot; language-markup&quot;&gt;let a: number;                    //numeric type
     let b: string;                    //string
     let c: boolean;                   //true or false
     let d: any;                       //any (dynamic)
     let e: number[] = [1,2,3];        //array of numbers
     let f: string[] = ['a','b','c'];  //array of strings
     let g: any[] = [true, 1, 'a'];    //array of any&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;li&gt;In a new line, type each of the variables, followed by dot (ie. &lt;code&gt;a.&lt;/code&gt;) and observe the result:
        &lt;/li&gt;
        &lt;img class=&quot;img-fluid&quot; src=&quot;http://localhost:4000/img/typescript/6/img/01.gif&quot; alt=&quot;Any type&quot;&gt;
        &lt;p&gt;As you may notice, Visual Studio suggests functions which can be used along with each variable type. &lt;/p&gt;
    &lt;/ol&gt;
    &lt;h4&gt;Numeric type methods:&lt;/h4&gt;
    &lt;table class=&quot;table&quot;&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;#&lt;/th&gt;
                &lt;th&gt;Method&lt;/th&gt;
                &lt;th&gt;Description&lt;/th&gt;
                &lt;th&gt;Result&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;1&lt;/th&gt;
                &lt;td&gt;&lt;strong&gt;a = 5.56789;&lt;/strong&gt;&lt;/td&gt;
                &lt;td&gt;Basic assignment&lt;/td&gt;
                &lt;td&gt;&lt;strong&gt;5.56789&lt;/strong&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;2&lt;/th&gt;
                &lt;td&gt;a.toExponential()&lt;/td&gt;
                &lt;td&gt;Convert a number into an exponential notation:&lt;/td&gt;
                &lt;td&gt;5.56789e+0&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;3a&lt;/th&gt;
                &lt;td&gt;a.toFixed()&lt;/td&gt;
                &lt;td rowspan=&quot;2&quot; style=&quot;vertical-align: middle;&quot;&gt;Converts a number to a string keeping a specified number
                    of decimals.&lt;/td&gt;
                &lt;td&gt;6&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;3b&lt;/th&gt;
                &lt;td&gt;a.toFixed(2)&lt;/td&gt;
                &lt;td&gt;5.57&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;4&lt;/th&gt;
                &lt;td&gt;a.toLocaleString('ar-EG')&lt;/td&gt;
                &lt;td&gt;Returns a string with a language sensitive representation of this number.&lt;/td&gt;
                &lt;td&gt;٥٫٥٦٨&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;5&lt;/th&gt;
                &lt;td&gt;a.toPrecision(2)&lt;/td&gt;
                &lt;td&gt;Returns a string representing the Number object to a specified precision. &lt;br&gt;While toFixed(n)
                    provides n length after the decimal point; toPrecision(x) provides x total length.&lt;/td&gt;
                &lt;td&gt;5.6&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;6&lt;/th&gt;
                &lt;td&gt;a.toString()&lt;/td&gt;
                &lt;td&gt;Returns a string representing the Number object.&lt;/td&gt;
                &lt;td&gt;5.56789&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;7&lt;/th&gt;
                &lt;td&gt;a.valueOf()&lt;/td&gt;
                &lt;td&gt;The valueOf() method returns the wrapped primitive value of a Number object.&lt;/td&gt;
                &lt;td&gt;5.56789&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h4&gt;String type methods:&lt;/h4&gt;
    &lt;blockquote class=&quot;blockquote bq-warning&quot;&gt;
        &lt;p class=&quot;bq-title&quot;&gt;Warning&lt;/p&gt;
        &lt;p&gt;The string prototype in TypeScript offers more default methods than described below, however, they are marked
            as &lt;code&gt;deprecated&lt;/code&gt;. That means, that they will be removed in the future so you should avoid using
            them. Some browsers may still support them, though.&lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;table class=&quot;table&quot;&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;#&lt;/th&gt;
                &lt;th&gt;Method&lt;/th&gt;
                &lt;th&gt;Description&lt;/th&gt;
                &lt;th&gt;Result&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;1&lt;/th&gt;
                &lt;td&gt;&lt;strong&gt;b = 'Hello MDB World';&lt;/strong&gt;&lt;/td&gt;
                &lt;td&gt;Basic assignment&lt;/td&gt;
                &lt;td&gt;&lt;strong&gt;Hello MDB World&lt;/strong&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;2&lt;/th&gt;
                &lt;td&gt;b.charAt(6)&lt;/td&gt;
                &lt;td&gt;The String object's charAt() method returns a new string consisting of the single UTF-16 code unit
                    located at the specified offset into the string.&lt;/td&gt;
                &lt;td&gt;M&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;3a&lt;/th&gt;
                &lt;td&gt;b.charCodeAt(6)&lt;/td&gt;
                &lt;td&gt;The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at
                    the given index.&lt;/td&gt;
                &lt;td&gt;77&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;3b&lt;/th&gt;
                &lt;td&gt;b.concat('. It is nice to meet you.');&lt;/td&gt;
                &lt;td&gt;The concat() method combines the text of one or more strings and returns a new string.&lt;/td&gt;
                &lt;td&gt;Hello MDB Wolrd. It is nice to meet you.&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;4&lt;/th&gt;
                &lt;td&gt;b.endsWith('d')&lt;/td&gt;
                &lt;td&gt;The endsWith() method determines whether a string ends with the characters of a specified string,
                    returning true or false as appropriate.&lt;/td&gt;
                &lt;td&gt;true&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;5.1&lt;/th&gt;
                &lt;td&gt;b.includes('B');&lt;/td&gt;
                &lt;td rowspan=&quot;2&quot; style=&quot;vertical-align: middle;&quot;&gt;The includes() method determines whether one string may
                    be found within another string, returning true or false as appropriate.&lt;/td&gt;
                &lt;td&gt;true&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;5.2&lt;/th&gt;
                &lt;td&gt;b.includes('b');&lt;/td&gt;
                &lt;td&gt;false&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;6&lt;/th&gt;
                &lt;td&gt;a.indexOf('M')&lt;/td&gt;
                &lt;td&gt;The indexOf() method returns the index within the calling String object of the first occurrence of
                    the specified value, starting the search at fromIndex. Returns -1 if the value is not found.&lt;/td&gt;
                &lt;td&gt;6&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th scope=&quot;row&quot;&gt;7&lt;/th&gt;
                &lt;td&gt;a.lastIndexOf('l')&lt;/td&gt;
                &lt;td&gt;The lastIndexOf() method returns the index within the calling String object of the last occurrence
                    of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found.
                &lt;/td&gt;
                &lt;td&gt;12&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;p&gt;Coming soon:&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;b.localeCompare()&lt;/li&gt;
        &lt;li&gt;b.match()&lt;/li&gt;
        &lt;li&gt;b.normalize()&lt;/li&gt;
        &lt;li&gt;b.padEnd()&lt;/li&gt;
        &lt;li&gt;b.padStart()&lt;/li&gt;
        &lt;li&gt;b.repeat()&lt;/li&gt;
        &lt;li&gt;b.replace()&lt;/li&gt;
        &lt;li&gt;b.search()&lt;/li&gt;
        &lt;li&gt;b.slice()&lt;/li&gt;
        &lt;li&gt;b.split()&lt;/li&gt;
        &lt;li&gt;b.startsWith()&lt;/li&gt;
        &lt;li&gt;b.substr()&lt;/li&gt;
        &lt;li&gt;b.substring()&lt;/li&gt;
        &lt;li&gt;b.toLocaleLowerCase()&lt;/li&gt;
        &lt;li&gt;b.toLocaleUpperCase()&lt;/li&gt;
        &lt;li&gt;b.toLowerCase()&lt;/li&gt;
        &lt;li&gt;b.toString()&lt;/li&gt;
        &lt;li&gt;b.toUpperCase()&lt;/li&gt;
        &lt;li&gt;b.trim()&lt;/li&gt;
        &lt;li&gt;b.trimLeft()&lt;/li&gt;
        &lt;li&gt;b.trimRight()&lt;/li&gt;
        &lt;li&gt;b.valueOf()&lt;/li&gt;
        &lt;li&gt;b.[@@iterator]()&lt;/li&gt;
        &lt;li&gt;b.raw()&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h4&gt;Any and boolean&lt;/h4&gt;
    &lt;p&gt;The any type doesn't offer any predefined methods. Boolean offers two basic methods — &lt;code&gt;toString&lt;/code&gt; which
        returns a string of either 'true' or 'false, as well as &lt;code&gt;valueOf&lt;/code&gt; which returns the primitive value
        of the Boolean object.&lt;/p&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson5&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson7&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/typescipt_logo.png" /></entry><entry><title type="html">5.Variable Scope</title><link href="http://localhost:4000/blog/Lesson5" rel="alternate" type="text/html" title="5.Variable Scope" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson5</id><content type="html" xml:base="http://localhost:4000/blog/Lesson5">&lt;section class=&quot;ts_tutorial5&quot;&gt;
    &lt;p&gt;In this lesson, we will cover a different type of variables and scopes.&lt;/p&gt;
    &lt;ol&gt;
        &lt;li&gt;Replace the content of the &lt;code&gt;onStartup()&lt;/code&gt; function:&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Counted: '&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
   &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;li&gt;And start our application, what you will see?&lt;/li&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/5/img/01.png&quot;
            alt=&quot;Function output.&quot;&gt;
        &lt;p&gt;Note that although our &lt;code&gt;i&lt;/code&gt; variable was declared inside a &lt;code&gt;for&lt;/code&gt; loop, it is accessible
            to the &lt;code&gt;console.log()&lt;/code&gt; function which is outside of &lt;code&gt;our&lt;/code&gt; code block. Why?&lt;/p&gt;
        &lt;p&gt;This is because we have declared our variable as &lt;code&gt;var&lt;/code&gt;. In JavaScript, all variables declared like
            that have scope to the nearest function, which in our case is &lt;code&gt;count()&lt;/code&gt;.&lt;/p&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/5/img/02.png&quot;
            alt=&quot;var variable scope.&quot;&gt;
        &lt;li&gt;Let's change &lt;code&gt;var&lt;/code&gt;, to &lt;code&gt;let&lt;/code&gt;:&lt;/li&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;Now the scope of our variable is changed to local:&lt;/p&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/5/img/03.png&quot;
            alt=&quot;let variable scope.&quot;&gt;
        &lt;li&gt;Let's have a look at the error which occurred in line 22 after we change the scope of our variable:&lt;/li&gt;
        &lt;img class=&quot;img-fluid&quot;
            src=&quot;http://localhost:4000/img/typescript/5/img/04.png&quot;
            alt=&quot;Error.&quot;&gt;
        &lt;p&gt;and if we save the file, we will see an error in the console during compilation:&lt;/p&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;app&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;component&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; error &lt;span class=&quot;token constant&quot;&gt;TS2304&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Cannot find name &lt;span class=&quot;token string&quot;&gt;'i'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
        &lt;p&gt;Remember when we talked about compile-time errors? This is a beautiful example, the compiler spots this error
            and informs us that we are trying to access a variable which isn't accessible within the current scope
            &lt;strong&gt;before we even tried to run our code in a browser&lt;/strong&gt;. Actually, thanks to Visual Studio
            &lt;strong&gt;we can see an error even before we request the CLI to compile our project&lt;/strong&gt;. The editor shows
            us errors in real-time. That's a really awesome feature which will save you a lot of time.&lt;/p&gt;
    &lt;/ol&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson4&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson6&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">In this lesson, we will cover a different type of variables and scopes. Replace the content of the onStartup() function: onStartup(){ function count(){ for (var i = 0; i &amp;lt; 9; i++){ console.log(i); } console.log('Counted: ' , i); } count();} }</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/typescipt_logo.png" /></entry></feed>