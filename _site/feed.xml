<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-16T14:12:13+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">Software Architecture - Why do we use Layered Architectures?</title><link href="http://localhost:4000/blog/SwArchitectLesson5" rel="alternate" type="text/html" title="Software Architecture - Why do we use Layered Architectures?" /><published>2019-10-15T18:55:00+00:00</published><updated>2019-10-15T18:55:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson5</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson5">&lt;p&gt;In this article, we explore the reasons why we build applications with several layers. We also look at different options for each layer in the Java world.&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will Learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Why Have Multiple Layers?&lt;/li&gt;
  &lt;li&gt;What are typical layers and their responsiblities?&lt;/li&gt;
  &lt;li&gt;What are the typical frameworks used in each layer in the Java world?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-have-multiple-layers&quot;&gt;Why Have Multiple Layers?&lt;/h3&gt;

&lt;p&gt;When we build any large application, such as a web application or service, we try to organize it into multiple layers. We could go for layers such as Web, Business, Access, among others:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The reason we go to such lengths is a very important underlying principle : &lt;strong&gt;separation of concerns&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each of the layers above have different responsibilities. Web layer is responsible for presenting information to the user. The Business layer is responsible for application’s business logic. The Data layer is responsible for taking care of the data access, and configuring and talking to the data stores. You might also have an additional access layer to talk to external applications, or queueing messages for dispatch.&lt;/p&gt;

&lt;p&gt;By defining each layer to have a separate responsibility, you ensure high cohesion with-in each such layer.&lt;/p&gt;

&lt;h3 id=&quot;layers-in-enterprise-java&quot;&gt;Layers In Enterprise Java&lt;/h3&gt;

&lt;p&gt;When it comes to the Java world, the typical organization of enterprise applications follows this schematic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;implementing-the-web-layer&quot;&gt;Implementing The Web Layer&lt;/h3&gt;

&lt;p&gt;Earlier, the web layer of a Java EE application is responsible for rendering the final view to the user with technologies like JSPs and variety of templating languages.  With the advent of RESTful web services and evolution of JavaScript SPA frameworks, this has changed drastically.&lt;/p&gt;

&lt;p&gt;Today, we expose a REST API from the Java Web layer, and a front-end framework (such as AngularJS or ReactJS) handles the user presentation.&lt;/p&gt;

&lt;p&gt;The main responsibility of a web layer is to talk to business layer and send a proper response to REST API calls.&lt;/p&gt;

&lt;p&gt;Another responsibility that a web layer typically handles is authentication and authorizations using a module like Spring Security.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few important decisions when designing your web layer are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Should the application have state? If yes, you need to store session information about the user. Ideally, you should not.&lt;/li&gt;
  &lt;li&gt;Which framework to use? The popular options are Spring Boot (MVC), JAX-RS(REST), JAX-WS(SOAP).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementing-the-business-layer&quot;&gt;Implementing The Business Layer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-05.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets look at the important business layer responsibilities:&lt;/p&gt;

&lt;h4 id=&quot;transaction-management&quot;&gt;Transaction Management&lt;/h4&gt;

&lt;p&gt;This is taken care of by Java Transaction API (JTA) and Spring Transactions.&lt;/p&gt;

&lt;h3 id=&quot;implementing-the-access-layer&quot;&gt;Implementing The Access Layer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-06.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following are the responsibilities of the Access layer:&lt;/p&gt;

&lt;h4 id=&quot;communicating-with-data-store&quot;&gt;Communicating with Data Store&lt;/h4&gt;

&lt;p&gt;If your application communicates with an external database, JPA might be a good choice. If very complex database queries are needed, then you might want to use JDBC or MyBatis.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Data JPA might be a good starting point for using JPA and Hibernate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;communication-with-external-interfaces&quot;&gt;Communication With External Interfaces&lt;/h4&gt;

&lt;p&gt;This layer provides interface with the JMS module. It also communicates with AMQP implementations.&lt;/p&gt;

&lt;h3 id=&quot;other-layers&quot;&gt;Other Layers&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-07.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the most important aspects that needs to be handled in any system is Cross Cutting Concerns. This includes tasks such as logging, performance and security.&lt;/p&gt;

&lt;p&gt;Typically these are implemented using Aspect Oriented Programming. AspectJ and Spring AOP are options to consider.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h3&gt;

&lt;p&gt;Unit testing of the application is another important concern. Typical frameworks that are provided include JUnit, Mockito and Spring Unit.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we understood why we need to have multiple layers in an application. We looked at the layers in a typical Java web application, along with framework options available. We then had a look at the makeup of the individual Data, Business and Access layers of a typical Java web application.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson4&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson5&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we explore the reasons why we build applications with several layers. We also look at different options for each layer in the Java world.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">5 Important Responsibilities of a Software Architect</title><link href="http://localhost:4000/blog/SwArchitectLesson4" rel="alternate" type="text/html" title="5 Important Responsibilities of a Software Architect" /><published>2019-10-15T18:50:00+00:00</published><updated>2019-10-15T18:50:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson4</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson4">&lt;p&gt;In this article, we look at some of the important responsibilities that an architect is expected to handle. Although we chiefly focus on application architects, most of these also hold true for enterprise architects as well.&lt;/p&gt;

&lt;p&gt;Five Responsibilities Of Architects that we look at are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Clean And Simple Architecture&lt;/li&gt;
  &lt;li&gt;Clear Standards&lt;/li&gt;
  &lt;li&gt;Proper Governance&lt;/li&gt;
  &lt;li&gt;Best Engineering Practices&lt;/li&gt;
  &lt;li&gt;Awesome Technical Processes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;clean-and-simple-architecture&quot;&gt;Clean And Simple Architecture&lt;/h3&gt;

&lt;p&gt;Any application that you work on needs to have a very clean and simple architecture. There must be great clarity in the organization on application layers, the use of specific frameworks at each layer, and patterns in communication with external applications.&lt;/p&gt;

&lt;h3 id=&quot;clear-standards&quot;&gt;Clear Standards&lt;/h3&gt;

&lt;p&gt;There needs to be clarity on the sets of standards followed in design, development, deployment and operations.&lt;/p&gt;

&lt;h3 id=&quot;governance&quot;&gt;Governance&lt;/h3&gt;

&lt;p&gt;Architects needs to ensure proper governance around the various standards, and on the creation of common components. In any enterprise application, it always adds great value to have common components that are frequently reused across different applications and application layers.&lt;/p&gt;

&lt;h3 id=&quot;best-engineering-practices&quot;&gt;Best Engineering Practices&lt;/h3&gt;

&lt;p&gt;It is very important to adhere to engineering best practices over the lifetime of an application. Interesting examples are Test Driven Development, Behavior Driven Development, DevOps. Such practices also involve use of consistent build and deployment tools and processes.&lt;/p&gt;

&lt;p&gt;The question you need to ask yourself frequently is - Are you are making the best possible use of these practices, to achieve business goals?&lt;/p&gt;

&lt;h3 id=&quot;awesome-technical-processes&quot;&gt;Awesome Technical Processes&lt;/h3&gt;

&lt;p&gt;You need to make sure that you have great processes in place for the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Development&lt;/li&gt;
  &lt;li&gt;Deployment&lt;/li&gt;
  &lt;li&gt;Continuous Integration&lt;/li&gt;
  &lt;li&gt;Immediate Defect Feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to have complete control over such issues.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the some of the important responsibilities of a software architect.&lt;/p&gt;

&lt;p&gt;Five Responsibilities Of Architects that we looked at are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Clean And Simple Architecture&lt;/li&gt;
  &lt;li&gt;Clear Standards&lt;/li&gt;
  &lt;li&gt;Proper Governance&lt;/li&gt;
  &lt;li&gt;Best Engineering Practices&lt;/li&gt;
  &lt;li&gt;Awesome Technical Processes&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson3&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson5&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we look at some of the important responsibilities that an architect is expected to handle. Although we chiefly focus on application architects, most of these also hold true for enterprise architects as well.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">5 Qualities of a Great Software Architect</title><link href="http://localhost:4000/blog/SwArchitectLesson3" rel="alternate" type="text/html" title="5 Qualities of a Great Software Architect" /><published>2019-10-15T18:30:00+00:00</published><updated>2019-10-15T18:30:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson3</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson3">&lt;p&gt;In this article, we look at some of the important qualities of a great software architect. Although we chiefly focus on application architects, most of these also hold true for enterprise architects as well.&lt;/p&gt;

&lt;p&gt;Five Qualities Of Architects that we look at are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Great Communication&lt;/li&gt;
  &lt;li&gt;Great Technical Skills&lt;/li&gt;
  &lt;li&gt;Forward Thinker&lt;/li&gt;
  &lt;li&gt;Super Diagnostic Skills&lt;/li&gt;
  &lt;li&gt;Hands-on&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;great-communication&quot;&gt;Great Communication&lt;/h3&gt;

&lt;p&gt;Architecture is all about conveying your vision to every member of the team. There are multiple stakeholders who are interested in knowing how we achieve business needs. Within a business, there are architects at multiple levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enterprise Architects&lt;/li&gt;
  &lt;li&gt;Application Architects&lt;/li&gt;
  &lt;li&gt;Core Architects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from them, there are other stakeholders such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Development Team&lt;/li&gt;
  &lt;li&gt;QA Team&lt;/li&gt;
  &lt;li&gt;Operations Team&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is vital that all these stakeholders have a clear view of the future direction of the business and technology.&lt;/p&gt;

&lt;h3 id=&quot;great-technical-skills&quot;&gt;Great Technical Skills&lt;/h3&gt;

&lt;p&gt;You being an architect, it is but natural for us to expect a great understanding of technology from you. You need to have a good grasp of concepts such as tools, languages, frameworks and tools used in the application.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is something taken as a given!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;forward-thinker&quot;&gt;Forward Thinker&lt;/h3&gt;

&lt;p&gt;As an architect, you need to be forward thinking and proactive. You need to understand where technology is heading, what kinds of architectures are trending, what programming languages are becoming popular, in what direction is the business headed, and what could be the business needs of the future.&lt;/p&gt;

&lt;p&gt;You need to be able to have a plan of how to evolve the application to meet future business needs.&lt;/p&gt;

&lt;p&gt;In the modern world of Agile practices, you should be able to break down these future expectations into manageable chunks, in order to evolve the application.&lt;/p&gt;

&lt;h3 id=&quot;super-diagnostic-skills&quot;&gt;Super Diagnostic Skills&lt;/h3&gt;

&lt;p&gt;You need to be able to resolve real world problems the application might face. This is not just about handling exceptions. If the application has a security, scalability or performance issue, then the architect needs to get involved and work out a solution. This requires the ability to look at the big picture, and at the same time understand the minor details.&lt;/p&gt;

&lt;h3 id=&quot;hands-on&quot;&gt;Hands-On&lt;/h3&gt;

&lt;p&gt;When needed, architects should be able to get the system up and running, checking out code from the repository, and start fixing bugs.&lt;/p&gt;

&lt;p&gt;I loved working in organizations where even Enterprise Architects could get their hands dirty when needed. At a minimum, atleast the application architects should be able to write production code.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the top 5 qualities of a great software architect has. Those are great communication, great technical skills, forward thinking, great diagnostic skills, and being hands-on.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson2&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson4&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we look at some of the important qualities of a great software architect. Although we chiefly focus on application architects, most of these also hold true for enterprise architects as well.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Quick Introduction To Software Architecture - What, Why and How?</title><link href="http://localhost:4000/blog/SwArchitectLesson1" rel="alternate" type="text/html" title="Quick Introduction To Software Architecture - What, Why and How?" /><published>2019-10-15T18:17:00+00:00</published><updated>2019-10-15T18:17:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson1</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson1">&lt;p&gt;Good Software Architecture is essential to building great software. What is Software Architecture all about?&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What Is Software Architecture?&lt;/li&gt;
  &lt;li&gt;What do Software Architects do?&lt;/li&gt;
  &lt;li&gt;What are some of the important decisions software architects make?&lt;/li&gt;
  &lt;li&gt;Why do we need Software Architecture?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-software-architecture&quot;&gt;What Is Software Architecture?&lt;/h3&gt;

&lt;p&gt;To understand what software architecture is all about, let us look at the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-087-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This application architecture has multiple microservices - Microservice1, Microservice2 and Microservice3. There are a set of common components that handle functionality such as security, logging, archetype creation, and the like. You also have components to handle common infrastructure concerns/ These include an API Gateway, a naming server, and a centralized logging system.&lt;/p&gt;

&lt;h4 id=&quot;answering-some-important-questions&quot;&gt;Answering Some Important Questions&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Who made the decision that there need to be three microservices, and assigned specific responsibility to each one of them?&lt;/li&gt;
  &lt;li&gt;Who decided that certain functionalities of the application need to be handled by common components?&lt;/li&gt;
  &lt;li&gt;Who designed the mode of interaction between the microservices and the common components?&lt;/li&gt;
  &lt;li&gt;Who classifies the common infrastructure components, and designs their interfaces with each of the microservices?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;architecture-is-all-about-making-decisions&quot;&gt;Architecture Is All About Making Decisions&lt;/h4&gt;

&lt;p&gt;Designing an application architecture is all about making such important decisions. It involves staring from a level that involves these decisions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What are the applications? What are their individual boundaries?&lt;/li&gt;
  &lt;li&gt;What are the interactions between the individual applications? In other words, the services of which other applications are needed by a particular application?&lt;/li&gt;
  &lt;li&gt;What are the common functionalities that can be identified in the system? How do you design them as components, and how to interface them with the other applications/components?&lt;/li&gt;
  &lt;li&gt;What services of the system need to be abstracted into the common infrastructure? How do you decide on how to make these services available to the rest of the system?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-do-we-need-software-architecture&quot;&gt;Why Do We Need Software Architecture?&lt;/h3&gt;

&lt;p&gt;A few decades earlier, software programs built were small and simple. However, things have changed dramatically.&lt;/p&gt;

&lt;p&gt;Software has become quite complex, with the advent of cloud computing, microservices, big data, and what not.&lt;/p&gt;

&lt;p&gt;Factors that have contributed to this complexity include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Distributed Systems&lt;/strong&gt;: Even a single web page that you may view online, might be driven by a cluster of hundreds of systems.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Device Explosion&lt;/strong&gt;: Earlier, devices owned by users were limited to a single PC or laptop per person. Nowadays, you have a choice of mobile phones, tablets, IoT devices, and what not! Software that needs to run on  more than one device, will be complex&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enormous Scale&lt;/strong&gt;: The load or the scale of users that an enterprise application needs to support has also gone up significantly&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Technology Evolution&lt;/strong&gt;: The languages, frameworks, tools and processes used in software development continuously undergo change, and applications need to keep pace with them&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Non Functional Requirements&lt;/strong&gt;: It is very important to ensure that all non functional requirements are adhered to when designing your applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The challenge in such a dynamic scenario, is to develop applications that work today, and adapt to stay relevant tomorrow. This is the puzzle that architects try to solve.&lt;/p&gt;

&lt;p&gt;That’s also the reason why you need to pay attention to the architecture, when you develop applications.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Software architecture is all about making decisions. It mainly involves identifying applications and components, and clearly demarcating their boundaries.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson2&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Good Software Architecture is essential to building great software. What is Software Architecture all about?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">What Is The Goal Of a Software Architect?</title><link href="http://localhost:4000/blog/SwArchitectLesson2" rel="alternate" type="text/html" title="What Is The Goal Of a Software Architect?" /><published>2019-10-15T18:17:00+00:00</published><updated>2019-10-15T18:17:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson2</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson2">&lt;p&gt;In this article, we have a close look at what your goal as an architect should be. Before reading any further, take a piece of paper and put down the list of goals from your perspective.&lt;/p&gt;

&lt;h3 id=&quot;technology-enablessupports-business&quot;&gt;Technology Enables/Supports Business&lt;/h3&gt;

&lt;p&gt;The most important point to understand is that technology enables and supports businesses. That is the primary reason why we build awesome applications and frameworks.&lt;/p&gt;

&lt;p&gt;For example, Netflix built an excellent microservices architecture, in order to support its business and consumer needs. Netflix’s architecture enables them to provide an out-of-this-world movie streaming experience to all their customers. Simply having great technology will not help them survive.&lt;/p&gt;

&lt;p&gt;Your role as an architect is very similar - architect applications that support business needs.&lt;/p&gt;

&lt;h3 id=&quot;what-are-these-business-needs&quot;&gt;What Are These Business Needs?&lt;/h3&gt;

&lt;p&gt;The business needs can be put into the following categories:&lt;/p&gt;

&lt;h4 id=&quot;functional-requirements&quot;&gt;Functional Requirements&lt;/h4&gt;

&lt;p&gt;Netflix might say it needs a web page where all the available movies are listed. A user should then be able to select a movie by clicking on it, and watch it. This is an example of a functional requirement. All businesses have them.&lt;/p&gt;

&lt;h4 id=&quot;non-functional-requirements&quot;&gt;Non Functional Requirements&lt;/h4&gt;

&lt;p&gt;Netflix might put down a condition that the application needs to support over 100,000 users. The amount of time needed to load a page should not exceed 2 seconds. Also, application should be very secure. In addition, the system should be available 99.9999% of the time. These are all non functional requirements.&lt;/p&gt;

&lt;h4 id=&quot;quick-feature-releases&quot;&gt;Quick Feature Releases&lt;/h4&gt;

&lt;p&gt;In general, if you get a fresh requirement today, you don’t want it be delivered 6 months down the line. There is a need for early delivery of features.&lt;/p&gt;

&lt;p&gt;High performance organizations such as Facebook, Twitter, Amazon and Netflix do multiple feature releases in a single day.&lt;/p&gt;

&lt;h4 id=&quot;early-feedback&quot;&gt;Early Feedback&lt;/h4&gt;

&lt;p&gt;Another thing that all businesses need is early feedback. If a system is down, a particular feature is not working as expected, or if a large number of users don’t like a particular feature, the business wants to know of it as early as possible.&lt;/p&gt;

&lt;h4 id=&quot;quick-troubleshooting-and-support&quot;&gt;Quick Troubleshooting And Support&lt;/h4&gt;

&lt;p&gt;In today’s customer-centered world, it is of high importance that you have teams to deliver quick troubleshooting, and excellent customer support services. You also need to solve any problems that customers raise, very quickly.&lt;/p&gt;

&lt;h3 id=&quot;focus-on-the-right-things-as-an-architect&quot;&gt;Focus On The Right Things as an Architect&lt;/h3&gt;

&lt;p&gt;A lot of technology folks are obsessed with technology - tools, frameworks, languages and stuff like that. These are very important in their own right, without a doubt.&lt;/p&gt;

&lt;p&gt;However, the problems comes when we forget the very reason why the application is being built - to enable a business to succeed.&lt;/p&gt;

&lt;p&gt;As an architect, your unwavering focus should be on the business entirely, and look to reach business goals using the right technology solutions.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we focused on what the goals of an architect should be. We saw that most developers focus on the technology, but lose sight of the business goals. Applications are enablers of businesses. We then saw the five categories of business goals that an architect should try to meet through the application design.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson3&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we have a close look at what your goal as an architect should be. Before reading any further, take a piece of paper and put down the list of goals from your perspective.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - Introduction to Evolutionary Design</title><link href="http://localhost:4000/blog/SwDesignLesson13" rel="alternate" type="text/html" title="Software Design - Introduction to Evolutionary Design" /><published>2019-10-15T11:51:00+00:00</published><updated>2019-10-15T11:51:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson13</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson13">&lt;p&gt;With extreme programming and agile, the focus is being lean and doing just in time design. In this context, how do you ensure that your design remains good and evolves along with the application requirements?&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is Evolutionary Design?&lt;/li&gt;
  &lt;li&gt;Why is it important?&lt;/li&gt;
  &lt;li&gt;How can you use Evolutionary Design in the best way possible?&lt;/li&gt;
  &lt;li&gt;What Are The Advantages Of Evolutionary Design?&lt;/li&gt;
  &lt;li&gt;How does Evolutionary Design fit in with agile?&lt;/li&gt;
  &lt;li&gt;What are the best practices with Evolutionary Design?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;waterfall-model-in-perspective&quot;&gt;Waterfall Model In Perspective&lt;/h3&gt;

&lt;p&gt;One of the first software implementation model was the &lt;strong&gt;Waterfall Model&lt;/strong&gt;. Before we start with Evolutionary Design, lets look at how design was done in a Waterfall Model.&lt;/p&gt;

&lt;p&gt;The Waterfall Model typically involves the following project stages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Architecture&lt;/li&gt;
  &lt;li&gt;Design&lt;/li&gt;
  &lt;li&gt;Programming/Coding&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The duration of each of these phases could be a month, two months or even three months.&lt;/p&gt;

&lt;p&gt;Before you can get to the programming step, you need to be involved for a long time in the architecture and design phases. The result of this is that you have the components of your program fully specified - the classes, methods among others - before you even start coding.&lt;/p&gt;

&lt;p&gt;This model assumes that you can design software just like you design your buildings or bridges.&lt;/p&gt;

&lt;p&gt;However, there were several problems with this approach and we quickly moved on to other design approaches as new sotware development models evolved.&lt;/p&gt;

&lt;h3 id=&quot;introducing-evolutionary-design&quot;&gt;Introducing Evolutionary Design&lt;/h3&gt;

&lt;p&gt;In the waterfall model, we architect and design the entire system before we even start coding.&lt;/p&gt;

&lt;p&gt;Evolutionary Design adopts a radically different approach. It focuses on having a simple design that works to start with. Now, what is simple design?&lt;/p&gt;

&lt;p&gt;A software application is said to have a simple design if it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Runs all tests&lt;/strong&gt; : There are good unit tests and all tests succeed all the time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contains no duplication&lt;/strong&gt; : There is no duplication of code or intent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expresses intent of programmers&lt;/strong&gt; : Code is clear, easy to read and simple.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minimizes number of classes and methods&lt;/strong&gt; : Architecture and Design are as simple as possible to get things dones. Classes and Methods are as small as possible without losing clarity or performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thought process behind Evolution Design is that once the design is simple, you can enhance it easily to meet future needs.&lt;/p&gt;

&lt;h3 id=&quot;evolutionary-design-and-agile&quot;&gt;Evolutionary Design and Agile&lt;/h3&gt;

&lt;p&gt;Evolution design fits very well with the agile way of working.&lt;/p&gt;

&lt;p&gt;Agile focuses on getting things done in small cycles. You design a little. You code a little. You test a little. You move your code to production often. Focusing on 4 principles of Simple Design helps you in keeping the design simple and evolve design over a period of time instead of a one time design.&lt;/p&gt;

&lt;h3 id=&quot;architecture-vs-design&quot;&gt;Architecture vs Design&lt;/h3&gt;

&lt;p&gt;While the focus of agile is on just in time design, it is important to distinguish between design decisions and architectural decisions.&lt;/p&gt;

&lt;p&gt;Some decision are difficult to change, once you made the choice. For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What frameworks to use to build your application?&lt;/li&gt;
  &lt;li&gt;How do you integrate with other applications?&lt;/li&gt;
  &lt;li&gt;What is the boundary of the application you are building?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These decisions are what I call - architectural decisions. It is important to take time while making architectural decisions and involve your architecture team as well.&lt;/p&gt;

&lt;h3 id=&quot;how-evolutionary-design-works&quot;&gt;How Evolutionary Design Works&lt;/h3&gt;

&lt;p&gt;In Evolutionary design, we follow an iterative approach:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Does your feature involve an architectural decision? If not, go to next step. Otherwise, get your architecture team involved and possibly do a prototype to test your architecural decision.&lt;/li&gt;
  &lt;li&gt;Code the feature&lt;/li&gt;
  &lt;li&gt;Refactor code to meet 4 Principles of Simple Design&lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-are-the-advantages-of-evolutionary-design&quot;&gt;What Are The Advantages Of Evolutionary Design?&lt;/h3&gt;

&lt;p&gt;The following are the stand-out advantages of Evolutionary Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Avoids over-design&lt;/strong&gt; : When we follow older design methods, we tend to prepare our software to handle future requirements. This is a classic case of over-design.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoids wastage of effort&lt;/strong&gt;: This could happen when we design for future requirements that never happen&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Designs just-in-time&lt;/strong&gt;: It follows an iterative cycle of development, where the focus is on current requirements, delivering current value, and incorporating relevant feedback.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-challenges-arise-with-evolutionary-design&quot;&gt;What Challenges Arise With Evolutionary Design?&lt;/h3&gt;

&lt;p&gt;The following are the significant challenges posed by Evolutionary Design:&lt;/p&gt;

&lt;h4 id=&quot;needs-a-clear-separation-between-architecture-and-design&quot;&gt;Needs a clear separation between Architecture and Design&lt;/h4&gt;

&lt;p&gt;All design cannot be done in the nick of time; architecture decisions are difficult to change and time must be devoted to those. You may want to create a separate category of user story, or even a separate process sprint to cover the architecture decisions. Also, everyone in the project needs to be clear about these two kinds of decisions for the project.&lt;/p&gt;

&lt;h4 id=&quot;need-for-skilled-and-experienced-architects-and-developers&quot;&gt;Need for skilled and experienced architects and developers&lt;/h4&gt;

&lt;p&gt;A group of inexperienced or less experienced developers cannot pull off a well-designed software application, using evolutionary design. You need guidance from experienced people.&lt;/p&gt;

&lt;h4 id=&quot;need-for-continuous-integration&quot;&gt;Need for Continuous Integration&lt;/h4&gt;

&lt;p&gt;Continuous Integration is essential for Evolutionary Design is effective:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To be sure your tests are running regularly&lt;/li&gt;
  &lt;li&gt;To ensure that code quality is under check&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;needs-high-quality-tests&quot;&gt;Needs High Quality Tests&lt;/h4&gt;

&lt;p&gt;Your unit tests need to be really top-class. If these unit tests are not good, then refactoring the code is out of question. This leads to the design getting stagnated, as the 
developers are reluctant to refactor the code. Now, the design is no longer evolutionary!&lt;/p&gt;

&lt;h3 id=&quot;understanding-the-best-practices&quot;&gt;Understanding The Best Practices&lt;/h3&gt;

&lt;p&gt;The two major points to stress on here are:&lt;/p&gt;

&lt;h4 id=&quot;use-test-driven-development-tdd&quot;&gt;Use Test-Driven Development (TDD)&lt;/h4&gt;

&lt;p&gt;This is the best way to ensure that your low-level design is good. With TDD, your focus before you write any code is how you will go about testing it. For example, you start thinking about how someone will use your class and its methods, before you write the method. You thus have an &lt;em&gt;outside-in&lt;/em&gt; perspective, and that’s always good to have as a developer. This results in the software having a good and robust API.&lt;/p&gt;

&lt;p&gt;Another things that results from TDD is you have great unit tests!&lt;/p&gt;

&lt;p&gt;When following TDD, you first write a unit test, make it fail, and then write the code to make it pass. So, you have more reliable tests.&lt;/p&gt;

&lt;h4 id=&quot;use-continuous-integration&quot;&gt;Use Continuous Integration&lt;/h4&gt;

&lt;p&gt;As we saw a short while ago, we need to make sure we keep running the tests we write, regularly. This ensures you get immediate feedback if something has gone wrong.&lt;/p&gt;

&lt;h3 id=&quot;how-to-learn-evolutionary-design&quot;&gt;How To Learn Evolutionary Design?&lt;/h3&gt;

&lt;p&gt;The best way to learn this is by using &lt;strong&gt;pair programming&lt;/strong&gt;: pair with good, experienced programmers. This will give you insights into how to evolve your program’s design, over a period of time.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we gave you an insight into Evolutionary Design. Evolutionary Design helps us avoid over design and keeps our design simple.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson12&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson13&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">With extreme programming and agile, the focus is being lean and doing just in time design. In this context, how do you ensure that your design remains good and evolves along with the application requirements?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - Cohesion - with examples</title><link href="http://localhost:4000/blog/SwDesignLesson12" rel="alternate" type="text/html" title="Software Design - Cohesion - with examples" /><published>2019-10-15T11:36:00+00:00</published><updated>2019-10-15T11:36:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson12</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson12">&lt;p&gt;High Cohesion is one of the important aims when your architect and design your software. What is it all about?&lt;/p&gt;

&lt;h1 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;What is Cohesion?&lt;/li&gt;
  &lt;li&gt;Why is Cohesion important?&lt;/li&gt;
  &lt;li&gt;What are the different parts of applications that need high Cohesion?&lt;/li&gt;
  &lt;li&gt;How do we acheive high cohesion?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-cohesion&quot;&gt;What Is Cohesion?&lt;/h3&gt;

&lt;p&gt;Cohesion is all about grouping related things in your software, together, at one place.&lt;/p&gt;

&lt;p&gt;Drawing from a real-life example, there would be a thousand things in your home. But if asked to fetch your tennis racket, you can get it in a matter of minutes, if not seconds. If you are asked to get a cooking utensil, you immediate go the the kitchen. How is it that you are able to retreive things quickly? Because you have organized them in a highly cohesive way. You have put all the related things together.&lt;/p&gt;

&lt;p&gt;That is cohesion at play in real life.&lt;/p&gt;

&lt;h3 id=&quot;levels-of-cohesion&quot;&gt;Levels Of Cohesion&lt;/h3&gt;

&lt;p&gt;Cohesion in software is applicable at multiple levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Methods: We group related methods together to create a class&lt;/li&gt;
  &lt;li&gt;Classes: We group related classes and create a package&lt;/li&gt;
  &lt;li&gt;Packages: We group related packages to probably create a component&lt;/li&gt;
  &lt;li&gt;Components&lt;/li&gt;
  &lt;li&gt;Applications&lt;/li&gt;
  &lt;li&gt;Microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cohesion-a-first-example&quot;&gt;Cohesion: A First Example&lt;/h3&gt;

&lt;p&gt;Have a look at the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadAndStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFromInternet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doEverything&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;downloadFromInternet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DownloadAndStore&lt;/code&gt; has the responsibility of doing three tasks, and has methods to do each one of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;downloadFromInternet()&lt;/code&gt; connects to a server and downloads a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parseData()&lt;/code&gt; needs an understanding of the data format to get the data from this file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;saveToDatabase()&lt;/code&gt; needs to talk to a database server to save the data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To perform them at one go, it defines another method, aptly named &lt;code class=&quot;highlighter-rouge&quot;&gt;doEverything()&lt;/code&gt; to call the other three.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DownloadAndStore&lt;/code&gt; is a prime example of a class that has &lt;strong&gt;very low cohesion&lt;/strong&gt;. Each of the listed three methods is doing something totally unrelated to the others.&lt;/p&gt;

&lt;h4 id=&quot;an-improved-solution&quot;&gt;An Improved Solution&lt;/h4&gt;

&lt;p&gt;A better solution would be to have an implementation like the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InternetDownloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFromInternet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseStorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadAndStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doEverything&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternetDownloader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;downloadFromInternet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DatabaseStorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;storeToDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this code organization:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Classes named &lt;code class=&quot;highlighter-rouge&quot;&gt;InternetDownloader&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;DataParser&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DatabaseStorer&lt;/code&gt; are defined, each with a single important thing to do&lt;/li&gt;
  &lt;li&gt;Methods of these classes are invoked to accomplish what is needed, within an external class, &lt;code class=&quot;highlighter-rouge&quot;&gt;DownloadAndStore&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a better solution, because it increases the possibilities of code reuse. Let’s explore this a little further.&lt;/p&gt;

&lt;h3 id=&quot;layered-architecture-and-cohesion&quot;&gt;Layered Architecture And Cohesion&lt;/h3&gt;

&lt;p&gt;Consider a simple web application, that is organized into three layers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/12/Capture-08-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Organizing an application into layers helps to allocate responsibility clearly and separately. Here,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;All the UI logic would be confined to the Web layer&lt;/li&gt;
  &lt;li&gt;All the business logic would be the responsibility of the Business layer&lt;/li&gt;
  &lt;li&gt;All the data storage and retrieval would be taken up by the Data layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is an example of cohesion at the application layer level. Each layer is highly cohesive, because it does one specific thing, whether large or small.&lt;/p&gt;

&lt;h3 id=&quot;component-level-cohesion&quot;&gt;Component-Level Cohesion&lt;/h3&gt;

&lt;p&gt;Another instance where cohesion comes into play when you design components to be used in an enterprise application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/12/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Authorization and Authentication approaches might be similar across the microservices in your enterprise. Hence, you could define a common security component. The security component only bothers about whether a given user has the right access and the right credentials - nothing else. It can be easily reused across multiple microservices. It is highly cohesive. It does security and it does it very well.&lt;/p&gt;

&lt;p&gt;Note that if you try to enhance the features of the Security component by adding a logging capability as well, then its reusability goes down greatly. Both security and logging are better off implemented separately, as  independent cohesive reusable components.&lt;/p&gt;

&lt;h3 id=&quot;example-the-spring-framework&quot;&gt;Example: The Spring Framework&lt;/h3&gt;

&lt;p&gt;One of the best examples of cohesion popularly in use is the Spring Framework:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/12/Capture-06-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The framework is not implemented as one big component. It is organized as a set of modules, each one of which can be composed of smaller components. Here is how it is organized, in brief:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Core Container&lt;/strong&gt;: The core feature of Spring is &lt;strong&gt;&lt;em&gt;Dependency Injection&lt;/em&gt;&lt;/strong&gt;. This module is composed of core components such as Beans, Core, Context, and SpEL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AOP, Aspects, Instrumentation and Messaging&lt;/strong&gt; are separate, smaller components&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Spring MVC Framework&lt;/strong&gt; is a separate module with components that handle web application needs&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;Data Access and Integration&lt;/strong&gt; module has components such as JDBC, ORM, Transactions and others&lt;/li&gt;
  &lt;li&gt;With the evolution of microservices, &lt;strong&gt;Spring Cloud&lt;/strong&gt; is an additional module that has been designed to contain a set of cohesive components&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;leveraging-cohesion-in-spring&quot;&gt;Leveraging Cohesion In Spring&lt;/h4&gt;

&lt;p&gt;Each component has its own boundary; it is concerned with taking up a single responsibility, and doing it well. The more cohesive a component is, the more reusable it becomes.&lt;/p&gt;

&lt;p&gt;The modular structure of the Spring framework enables a programmer to pull in only those components that she actually needs. If she needs just the core functionality, the Core components sufficient. If database integration is necessary, then she can make use of the JDBC components, for instance.&lt;/p&gt;

&lt;h3 id=&quot;how-to-make-software-more-cohesive&quot;&gt;How To Make Software More Cohesive?&lt;/h3&gt;

&lt;p&gt;The guiding light that you need to follow to improve the cohesion in your software, is the &lt;strong&gt;Single Responsibility Principle (SRP)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When you look at your method/class/package/component, take to a minute to also think about its &lt;strong&gt;responsibility&lt;/strong&gt;. If you can describe it in a single phrase or sentence, then you’ve done a good job defining it.&lt;/p&gt;

&lt;p&gt;However, if you end up joining together many phrases and sentences with several “and”s, then you violate the SRP. Your software could end up have low cohesion.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this video, we talked about cohesion in significant detail. Cohesion is all about grouping related things together. Cohesion is applicable at multiple levels in a single application, such as method/class/package/component/application. You group related methods into a class, related classes into a package, and related packages perhaps into a component.&lt;/p&gt;

&lt;p&gt;We also examined the fact that cohesive classes and components are highly reusable. In addition, organizing an application into multiple layers also improves their cohesion. Then, we observed how the Spring Framework is organized into cohesive modules, each with a single responsibility. Finally, we looked at how Single Responsibility Principle can be used to build cohesive software.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson11&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson13&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">High Cohesion is one of the important aims when your architect and design your software. What is it all about?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - Coupling - with examples</title><link href="http://localhost:4000/blog/SwDesignLesson11" rel="alternate" type="text/html" title="Software Design - Coupling - with examples" /><published>2019-10-15T11:36:00+00:00</published><updated>2019-10-15T11:36:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson11</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson11">&lt;p&gt;Software architects and programmers love low coupling. What is coupling? Why is coupling important? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What is coupling?&lt;/li&gt;
  &lt;li&gt;What are common examples of coupling in software?&lt;/li&gt;
  &lt;li&gt;How can we reduce the amount of coupling between classes, between components, and the like?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-of-couping&quot;&gt;Example of Couping&lt;/h3&gt;

&lt;p&gt;Let’s start with an example.&lt;/p&gt;

&lt;p&gt;Let’s say a friend of mine is developing a Java component, in the form of a JAR file, for me to use. However, there is an implicit constraint imposed here - I need to use Java (or a JVM Based language) to use the utility JAR file! In other words, developing the component as a Java JAR has &lt;strong&gt;coupled&lt;/strong&gt; me to using Java as well. To break free, I need to &lt;strong&gt;decouple&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;how-to-decouple-an-example&quot;&gt;How to Decouple? An Example:&lt;/h4&gt;

&lt;p&gt;Instead of providing me with a JAR, I could ask my friend to create a web service interface for me to access the same functionality. The concept would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-06-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The web service is created around the JAR, and can be accessed from a Java, a PHP, or a .NET application. We can use any kind of application to invoke the web service.&lt;/p&gt;

&lt;p&gt;This implies we have effectively decoupled from the underlying technology of the component. We are no longer affected by the fact that the component was developed in Java.&lt;/p&gt;

&lt;h3 id=&quot;another-example-for-low-coupling---spring-framework&quot;&gt;Another Example for Low Coupling - Spring Framework&lt;/h3&gt;

&lt;p&gt;Spring Framework has a highly modular structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-06-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Suppose we want to use a specific module from this framework; for instance, the Spring JDBC module.&lt;/p&gt;

&lt;p&gt;What would happen if Spring tells you that you can only use Spring JDBC if you also use the Beans and Context modules?&lt;/p&gt;

&lt;p&gt;You would probably not use it at all, because it introduces additional dependencies such as configuration etc.&lt;/p&gt;

&lt;p&gt;Spring does get this right; it does not force you to use Beans or Context along with JDBC. In other words, Spring modules are not coupled with the other ones.&lt;/p&gt;

&lt;h3 id=&quot;class-level-coupling---the-order-class&quot;&gt;Class-level coupling - The &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class&lt;/h3&gt;

&lt;p&gt;Let’s now go one level deeper. Let’s look at Coupling at the level of classes.&lt;/p&gt;

&lt;p&gt;Let’s look at a simple shopping cart example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salesTax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salexTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;orderTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You would observe that &lt;code class=&quot;highlighter-rouge&quot;&gt;orderTotalPrice()&lt;/code&gt; knows the internal details of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It accesses the &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; field of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; directly&lt;/li&gt;
  &lt;li&gt;It accesses the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt; fields of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt;, also directly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scenario : Try and imagine a situation where we change the name of the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; field of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt;, to something else.&lt;/p&gt;

&lt;p&gt;Approach : Code within &lt;code class=&quot;highlighter-rouge&quot;&gt;orderTotalPrice()&lt;/code&gt; would also need to change.&lt;/p&gt;

&lt;p&gt;If you change the type of the &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; array (possibly to a list) within &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt;, that would also lead to a change within &lt;code class=&quot;highlighter-rouge&quot;&gt;orderTotalPrice()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class is &lt;strong&gt;tightly coupled&lt;/strong&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; classes.&lt;/p&gt;

&lt;p&gt;How do we decouple them?&lt;/p&gt;

&lt;h4 id=&quot;decoupling-the-order-class-example&quot;&gt;Decoupling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class Example&lt;/h4&gt;

&lt;p&gt;Here is one way of achieving this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CartContents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;item:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;CartContents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CartContents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salesTax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the following points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of making the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt; fields accessible, &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; now makes a method named &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; available to &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt; class does something very similar, by also providing a &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; method for &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; to use.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class now only invokes the &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; methhod exposed by &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt;, to compute the total cart value in &lt;code class=&quot;highlighter-rouge&quot;&gt;totalPrice()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; field in &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; has its name changed, only &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; within the same class would be affected&lt;/li&gt;
  &lt;li&gt;If the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; within &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt; is changed from an array to a list, again only the &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; method needs to be altered.&lt;/li&gt;
  &lt;li&gt;The code within &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; is not affected by either of these changes at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have now completely decoupled &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; from both &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;another-coupling-example-with-spring-framework&quot;&gt;Another Coupling Example with Spring Framework&lt;/h3&gt;

&lt;p&gt;Consider the following body of code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorthm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You would notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class is directly dependent on the &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt; class. If we need to change the actual sort algorithm, to use quicksort for instance, then a lot of code within &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; needs to change.&lt;/p&gt;

&lt;p&gt;We can solve this issue by making use of &lt;strong&gt;interfaces&lt;/strong&gt;. Here is how our modified code would look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intrface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you use the Spring framework, you could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; annotation with the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class, to automatically fetch an implementation of an available sort algorithm:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BinarySearchImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we have achieved here is reduce the coupling between &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySeacrhImpl&lt;/code&gt; and a specific sort algorithm.&lt;/p&gt;

&lt;h3 id=&quot;a-practical-viewpoint-of-coupling&quot;&gt;A Practical Viewpoint of Coupling&lt;/h3&gt;

&lt;p&gt;A good way of thinking about coupling, is if you change the inner details of a class or a component, do you need to make changes elsewhere as well?&lt;/p&gt;

&lt;p&gt;Such dependencies are not desirable. If you intend to reuse code from one place to another, the related dependencies should be as few as possible.&lt;/p&gt;

&lt;p&gt;Coupling can occur at multiple levels in an application:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Class-level&lt;/li&gt;
  &lt;li&gt;API-level&lt;/li&gt;
  &lt;li&gt;Component-level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at an example of coupling at component level:&lt;/p&gt;

&lt;h3 id=&quot;component-level-coupling&quot;&gt;Component-Level Coupling&lt;/h3&gt;

&lt;p&gt;Consider the following organization of an enterprise web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the Security component were coupled with the Logging component, then wherever we need Security, we would also need to access Logging. That’s not good.&lt;/p&gt;

&lt;h3 id=&quot;coupling-with-layers&quot;&gt;Coupling With Layers&lt;/h3&gt;

&lt;p&gt;Let’s look at an example of a layered web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-06-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is organized into these three layers. Also assume that from the Web layer Controller, I need to call multiple methods from the Business layer. Let’s say five different methods need to be called for a single such requirement. This is a clear case of coupling.&lt;/p&gt;

&lt;p&gt;A very effective way to avoid such layer-to-layer coupling is to use the &lt;strong&gt;Facade Pattern&lt;/strong&gt;. You can create a Facade component on top of the Business layer, that manages calls to these five methods. The web layer can then make do with calling a  single method from the Facade component.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All in all, decoupling makes the code more reusable and testable.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the concept of coupling at multiple levels: at the class, the component, the API and the layer level. We also looked at how to get around this factor through decoupling, at each of these levels. We identified the key question to ask about coupling:  “If something changes at a particular place, would other things need to change as well? And If I use something, would I be forced to use something else as well?”&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson10&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson12&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Software architects and programmers love low coupling. What is coupling? Why is coupling important? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - Encapsulation - with examples</title><link href="http://localhost:4000/blog/SwDesignLesson10" rel="alternate" type="text/html" title="Software Design - Encapsulation - with examples" /><published>2019-10-15T11:24:00+00:00</published><updated>2019-10-15T11:24:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson10</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson10">&lt;p&gt;Encapsulation is one of the important goals of Software Design. What is Encapsulation? Why is it important? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What does Encapsulation mean?&lt;/li&gt;
  &lt;li&gt;What are the advantages of building encapsulated software?&lt;/li&gt;
  &lt;li&gt;Is encapsulation restricted to Object Oriented Design?&lt;/li&gt;
  &lt;li&gt;How can encapsulation be followed in other programming approaches?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;encapsulation-at-the-basic-level-level-1&quot;&gt;Encapsulation At The Basic Level (Level-1)&lt;/h3&gt;

&lt;p&gt;Let’s look at two implementations of a &lt;code class=&quot;highlighter-rouge&quot;&gt;CricketScorer&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CricketScorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re not familiar the sport of cricket, you could imagine a &lt;code class=&quot;highlighter-rouge&quot;&gt;FootballScorer&lt;/code&gt; class instead. Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;CricketScorer&lt;/code&gt; provides its users with two methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;setScore()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;getScore()&lt;/code&gt;. These form the class interface.&lt;/p&gt;

&lt;p&gt;Let’s next make use of this class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;CrickerScorer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CricketScorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The user here gets to call both &lt;code class=&quot;highlighter-rouge&quot;&gt;getScore()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setScore()&lt;/code&gt;. Let’s say a boundary is scored in the cricket match, which should result in the score getting incremented by &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;. The user is responsible for retrieving the current the current score, incrementing it by &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;, and then setting it.&lt;/p&gt;

&lt;p&gt;There are a few important things to note here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;score&lt;/code&gt; is declared &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, which means users of &lt;code class=&quot;highlighter-rouge&quot;&gt;CricketScorer&lt;/code&gt; cannot access it directly. We are hiding the implementation of ```score`` from the class users. This is what &lt;strong&gt;encapsulation&lt;/strong&gt; is all about.&lt;/li&gt;
  &lt;li&gt;The various Java language keywords such as &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt; are the most basic level of implementing encapsulation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;method-level-encapsulation-level-2&quot;&gt;Method-Level Encapsulation (Level-2)&lt;/h3&gt;

&lt;p&gt;To avoid putting the onus of getting and setting the score on the user, we could define a method such as:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;four&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;CrickerScorer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CricketScorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;scorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;four&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All the user does is call this &lt;code class=&quot;highlighter-rouge&quot;&gt;four()&lt;/code&gt; method, and no longer needs to explicitly manipulate the stored score. Here we have introduced a &lt;code class=&quot;highlighter-rouge&quot;&gt;four()&lt;/code&gt; method to encapsulate the process of getting and setting the score. This is the next level of encapsulation, at the logical level. The user now no longer needs to know how to manipulate the score.&lt;/p&gt;

&lt;h3 id=&quot;abstraction-and-encapsulation&quot;&gt;Abstraction And Encapsulation&lt;/h3&gt;

&lt;p&gt;Abstraction is all about hiding complexity. How do you hide that complexity? By using Encapsulation. Apart from the two levels we saw just now, there are more ways to go with encapsulation. Let’s look at them next.&lt;/p&gt;

&lt;h3 id=&quot;encapsulation-at-the-class-level&quot;&gt;Encapsulation At The Class Level&lt;/h3&gt;

&lt;h4 id=&quot;the-factory-pattern&quot;&gt;The Factory Pattern&lt;/h4&gt;

&lt;p&gt;Have a look at the following example of code.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactoryPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Strinf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;//So on...&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			
			&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
			&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	
			&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;male&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Robinhood&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	
			&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;female&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mary&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Suppose we have a set of classes to represent and create different kinds of persons. Also, we would need a way to do the same in code as well. Also, we would not like the users of the class not to know, that there are underlying implementations of &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; named &lt;code class=&quot;highlighter-rouge&quot;&gt;Male&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Female&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can abstract that detail away by using the &lt;strong&gt;Factory Pattern&lt;/strong&gt;. As we see in the code above, the user creates a male person by passing in a name and a string “M” to the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPerson()&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt;. He has no idea that there are classes called &lt;code class=&quot;highlighter-rouge&quot;&gt;Male&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Female&lt;/code&gt; hidden away from him.&lt;/p&gt;

&lt;h4 id=&quot;the-strategy-pattern&quot;&gt;The Strategy Pattern&lt;/h4&gt;

&lt;p&gt;This is another good example of encapsulation. Consider the following piece of code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrategyPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		
		&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//Ideally, the bubble sort is implemented completely here&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
			&lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAComplexThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;//... logic...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//...logic...&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complexClassInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//This can also be a setter&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;complexClassInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAComplexThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, we created an &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt;. Any class that needs sorting behavior, such as:&lt;/p&gt;

&lt;p&gt;The user of the interface, &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt;, only directly calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; method on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt; interface. It does not worry about what the underlying class that implements &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortbale&lt;/code&gt;, actually is. It does not worry about whether that is a &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSort&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	static class BubbleSort implements Sortable {
			@Override
			public int[] sort(int[] numbers) {
				//Ideally, the bubble sort is implemented completely here
				return numbers;
			}
		}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or a &lt;code class=&quot;highlighter-rouge&quot;&gt;QuickSort&lt;/code&gt;. Whoever uses the class &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt;, needs to create an instance of it, provide an instance of the sorting algorithm, and out class can make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; by accessing the interface.&lt;/p&gt;

&lt;h3 id=&quot;an-interface-example&quot;&gt;An Interface Example&lt;/h3&gt;

&lt;p&gt;We are very much in the habit of playing games, especially those that involve using gaming consoles. How would a computer game allow you to play it? By allowing the console to use it like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Interfaces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarioGame&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jump&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Goes Into A Hole&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
	
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Go Forward&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChessGame&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move Piece Up&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move Piece Down&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move Piece Left&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
				&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move Piece Right&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;games&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarioGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
									&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ChessGame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GamingConsole&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;game:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This shows use of one such console with four buttons: up, down, right and left. We are representing it by an interface, named &lt;code class=&quot;highlighter-rouge&quot;&gt;GamingConsole&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Whoever uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;GamingConsole&lt;/code&gt;, can play a game attached to it, irrespective of what the actual game is. It could be a &lt;code class=&quot;highlighter-rouge&quot;&gt;MarioGame&lt;/code&gt;, a &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessGame&lt;/code&gt;, or whatever. The user knows he can call the &lt;code class=&quot;highlighter-rouge&quot;&gt;up()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;down()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;left()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;right()&lt;/code&gt; operations with ease. The actual game implementations are hidden away. How a &lt;code class=&quot;highlighter-rouge&quot;&gt;MarioGame&lt;/code&gt; reacts to the console, is different from how a &lt;code class=&quot;highlighter-rouge&quot;&gt;ChessGame&lt;/code&gt; responds.&lt;/p&gt;

&lt;p&gt;The fact that we have created a &lt;code class=&quot;highlighter-rouge&quot;&gt;GamingConsole&lt;/code&gt; interface, means the &lt;code class=&quot;highlighter-rouge&quot;&gt;Game&lt;/code&gt; implementations can be hidden away.&lt;/p&gt;

&lt;h3 id=&quot;an-abstract-class-example&quot;&gt;An Abstract Class Example&lt;/h3&gt;

&lt;p&gt;The same high-level concept can be applied by using abstract classes as well. Consider the following abstract class definition:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractRecipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;getReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;doTheDish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTheDish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleasnup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AbstractRecipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTheDish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeWithMicrowave&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AbstractRecipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTheDish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Recipe1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Recipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;recipe1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;RecipeWithMicrowave&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recipeWithMicrowave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecipeWithMicrowave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;recipeWithMicrowave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are implementing a &lt;strong&gt;Template Method Pattern&lt;/strong&gt; in here. For every recipe that we end up creating, we want to make sure it has three steps: getting things ready, doing the dishes, and cleaning up. We are creating an abstract class &lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractRecipe&lt;/code&gt;. Any user who ants to use a recipe, does not need to worry about the fact that an &lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractRecipe&lt;/code&gt; exists. They just create an instance of the particular recipe, and call &lt;code class=&quot;highlighter-rouge&quot;&gt;execute()&lt;/code&gt; on it.&lt;/p&gt;

&lt;p&gt;Underneath all that, is the recipe implementation:&lt;/p&gt;

&lt;h3 id=&quot;our-journey-with-encapsulation-thus-far&quot;&gt;Our Journey With Encapsulation Thus Far&lt;/h3&gt;

&lt;p&gt;We looked at a few examples of how encapsulation is implemented. We saw that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At the very basic level, we achieve that by using built-in keywords such as &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt; around member variables&lt;/li&gt;
  &lt;li&gt;The next level involves defining utility methods, to achieve encapsulation at a more logical level, to hide variable-level operations&lt;/li&gt;
  &lt;li&gt;The next level of abstraction involves creating the appropriate interfaces, or abstract classes&lt;/li&gt;
  &lt;li&gt;Another level involves the use of patterns such as Factory Pattern and Strategy Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thing is, encapsulation does not end at the code level. Let’s look at a few more instances of the same.&lt;/p&gt;

&lt;h3 id=&quot;encapsulation-in-layered-architecture&quot;&gt;Encapsulation In Layered Architecture&lt;/h3&gt;

&lt;p&gt;When we build enterprise web applications, we normally like to structure them in layers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/10/Capture-019-16.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind doing so is that, for example, you do NOT want:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Business layer to be too involved with storing and retrieving data&lt;/li&gt;
  &lt;li&gt;The Web layer to know this, and also how business logic deals with data&lt;/li&gt;
  &lt;li&gt;The Data layer to be bothered about how the application manages communication with other applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We achieve this be creating an interface in each layer. For example, the Data layer exposes an interface which is used by the Business Layer. Similarly, other layers can also expose interfaces.&lt;/p&gt;

&lt;h4 id=&quot;a-specific-example-jpa-and-hibernate&quot;&gt;A Specific Example: JPA And Hibernate&lt;/h4&gt;

&lt;p&gt;Another good example of layered encapsulation is that of JPA and Hibernate. JPA is the interface, and Hibernate is the implementation. An application can make use of the JPA  annotations, without worrying about the fact that underneath that interface, lies a Hibernate implementation.&lt;/p&gt;

&lt;h3 id=&quot;microservices-common-components&quot;&gt;Microservices: Common Components&lt;/h3&gt;

&lt;p&gt;Another example of encapsulation comes from the domain of microservices architecture. Have a look at the following architecture diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/10/Capture-019-17.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Such architectures make heavy use of common components.&lt;/p&gt;

&lt;h4 id=&quot;security-example&quot;&gt;Security Example&lt;/h4&gt;

&lt;p&gt;For example, look at security. Implementation of authentication and authorization  is essentially the same across different microservices. By creating a common security component, you can abstract away how you store the security details of a user. It could be a database, or an LDAP server setup, or whatever.&lt;/p&gt;

&lt;p&gt;The microservice will just end up using the interface that the Security component provides. The microservice will use the mechanism to ask whether a particular user is authorized to perform an action, but the implementation details are abstracted away.&lt;/p&gt;

&lt;h4 id=&quot;web-services&quot;&gt;Web Services&lt;/h4&gt;

&lt;p&gt;This is another scenario where encapsulation is very much used. Suppose we implement one such service using REST. We expose a URL, as an access point for consumers of this service. We would also specify the formats of the messages to be exchanged with users. How the service is implemented underneath - what language and framework is made use of - does not matter to the consumer. All that matters is the interface.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we tried to answer the main question of what Encapsulation is all about. We saw that it is all about hiding the implementation, and providing the right interface to the user. That user might be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A class using your class&lt;/li&gt;
  &lt;li&gt;A component using your component&lt;/li&gt;
  &lt;li&gt;A layer using your layer&lt;/li&gt;
  &lt;li&gt;An end-user calling your service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We looked at encapsulation in great detail, at many different levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At a basic level with member variables&lt;/li&gt;
  &lt;li&gt;At a method level for better utility&lt;/li&gt;
  &lt;li&gt;At an interface or abstract class level&lt;/li&gt;
  &lt;li&gt;At a pattern level&lt;/li&gt;
  &lt;li&gt;At a application layer level&lt;/li&gt;
  &lt;li&gt;At a service component level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In particular, we saw how enterprise applications hide away things behind a component, and provide an interface to it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson9&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson11&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Encapsulation is one of the important goals of Software Design. What is Encapsulation? Why is it important? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - What is Abstraction?</title><link href="http://localhost:4000/blog/SwDesignLesson9" rel="alternate" type="text/html" title="Software Design - What is Abstraction?" /><published>2019-10-15T11:12:00+00:00</published><updated>2019-10-15T11:12:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson9</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson9">&lt;p&gt;Abstraction is one of the fundamental concepts of software engineering. It is all about hiding complexity in building various parts of your application.&lt;/p&gt;

&lt;h1 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h1&gt;

&lt;p&gt;In this guide, we look at:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is Abstraction?&lt;/li&gt;
  &lt;li&gt;A few examples of abstraction&lt;/li&gt;
  &lt;li&gt;Why is Abstraction Important in Software Design?&lt;/li&gt;
  &lt;li&gt;How can you introduce good abstractions?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-abstraction&quot;&gt;What Is Abstraction?&lt;/h3&gt;

&lt;p&gt;Abstraction is one of the fundamental concepts of software engineering.&lt;/p&gt;

&lt;h4 id=&quot;an-example-of-abstraction&quot;&gt;An Example Of Abstraction&lt;/h4&gt;

&lt;p&gt;Consider a real-world analogy. Let’s say you want to ride a motor bike. All you need to start the motor bike is to put the key on, push the start button, and use the accelerator. While riding, you may need to use the brake as well.&lt;/p&gt;

&lt;p&gt;You are not really concerned about how the engine, accelerator and brake are working during the ride. All that is &lt;strong&gt;abstract&lt;/strong&gt; to you, and you are not concerned with it (unless you are mechanic).&lt;/p&gt;

&lt;h4 id=&quot;another-example&quot;&gt;Another Example&lt;/h4&gt;

&lt;p&gt;Take another example - printing a document from your computer. You just open the document, click on the “print” command, and in a short while, the printed document is ready. You are not really bothered about how the computer stores the document in 0s and 1s, nor about hoe it is transferred to the printer.&lt;/p&gt;

&lt;h3 id=&quot;abstraction-in-your-application&quot;&gt;Abstraction In Your Application&lt;/h3&gt;

&lt;p&gt;Whenever we build applications, we do so in layers. Here is the layered architecture of a simple web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/9/Capture-012-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An advantage of doing so is that the Web layer does not need to know anything about the Data layer. It is &lt;strong&gt;abstracted away&lt;/strong&gt; from the Data layer. All that it needs to be concerned with, is that it can delegate requests to the Business layer, and the business layer would take care of rest of the flow. Layering in an application is, in a way, abstracting away complexity.&lt;/p&gt;

&lt;h3 id=&quot;abstraction-in-programming&quot;&gt;Abstraction In Programming&lt;/h3&gt;

&lt;p&gt;Let’s go one level deeper and look at what happens underneath the hood when we write computer programs.&lt;/p&gt;

&lt;h4 id=&quot;programming-in-high-level-languages&quot;&gt;Programming In High-Level Languages&lt;/h4&gt;

&lt;p&gt;Have you ever written an assembly language program? Those funny ones with 1s and 0s. Actually, thats the only language that your computer would understand.&lt;/p&gt;

&lt;p&gt;If you want to develop a web service, will we use Assembly Language? Far from it. We would instead use a high-level language such as Java or Python, to do that. These are human readable languages, that spare us the task of programming in 0s and 1s.&lt;/p&gt;

&lt;p&gt;The high level programming languages are an abstraction on top of machine or assembly language.&lt;/p&gt;

&lt;h4 id=&quot;writing-sql-queries&quot;&gt;Writing SQL Queries&lt;/h4&gt;

&lt;p&gt;Think of how you write SQL queries to interact with a database. You just write what data you are concerned with, without paying heed to how it is stored in, or retrieved from the database. We expect the database to take care of all that.&lt;/p&gt;

&lt;p&gt;SQL is an abstraction layer for retrieving data from your database.&lt;/p&gt;

&lt;h4 id=&quot;calling-built-in-methods&quot;&gt;Calling Built-In Methods&lt;/h4&gt;

&lt;p&gt;In a high level programming language, calling built in utility methods available in its packages is another example of abstraction. Here is an example in Python:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we call the built-in utility &lt;code class=&quot;highlighter-rouge&quot;&gt;endswith()&lt;/code&gt;, we are not concerned with how it is implemented. We only care about the fact that when called with &lt;code class=&quot;highlighter-rouge&quot;&gt;World&lt;/code&gt; as a parameter on &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt;, it returns &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Same is the case with &lt;code class=&quot;highlighter-rouge&quot;&gt;islower()&lt;/code&gt;.Their implementations are abstracted away from you.&lt;/p&gt;

&lt;h3 id=&quot;abstraction-in-microservices&quot;&gt;Abstraction In Microservices&lt;/h3&gt;

&lt;p&gt;Consider the following enterprise application architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/9/Capture-012-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is quite common in such architectures to have common components for security, logging and archetype. The reason we have them is that we want them to take care of a specific responsibility.&lt;/p&gt;

&lt;p&gt;Let’s say you want to handle authorization and authentication. By using a specific Security component to handle this functionality, you are abstracting away this logic from the rest of the application. The higher level microservices shown only need to know how to integrate with the security component. It does not need to know the inner details of the security component.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we had a look at what abstraction is, and understood that it is the basic pillar used to hide complexity. We also saw that abstraction takes up different forms at different levels. We looked at a number of examples to explore the same.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson8&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson10&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Abstraction is one of the fundamental concepts of software engineering. It is all about hiding complexity in building various parts of your application.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry></feed>