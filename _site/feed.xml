<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-28T15:30:00+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">8. String in Python</title><link href="http://localhost:4000/blog/PyhtonStrings" rel="alternate" type="text/html" title="8. String in Python" /><published>2019-09-26T00:00:00+05:30</published><updated>2019-09-26T00:00:00+05:30</updated><id>http://localhost:4000/blog/PyhtonStrings</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonStrings">&lt;section class=&quot;Ptutorial8&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Strings: Replace, Join, Split, Reverse, Uppercase &amp;amp; Lowercase &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;
           &lt;p&gt;In Python everything is object and string are an object too. Python string can be created simply by
                enclosing characters in the double quote. &lt;/p&gt;
            &lt;p&gt;For example: &lt;/p&gt;
            &lt;p&gt;var = &lt;strong&gt;&quot;Hello World!&quot; &lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn - &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Accessing Values in Strings &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Various String Operators &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Some more examples &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Python String replace() Method &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Changing upper and lower case strings &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Using &quot;join&quot; function for the string &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Reversing String &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Split Strings &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;Accessing Values in Strings&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Python does not support a character type&lt;/strong&gt;, these are treated as strings of length one,
                also considered as substring. &lt;/p&gt;
            &lt;p&gt;We use square brackets for slicing along with the index or indices to obtain a substring. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                var1 = &quot;Girish99!&quot;
                var2 = &quot;Software Testing&quot;
                print (&quot;var1[0]:&quot;,var1[0])
                print (&quot;var2[1:5]:&quot;,var2[1:5])
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Various String Operators&lt;/h2&gt;
            &lt;p&gt;There are various string operators that can be used in different ways like concatenating different
                string. &lt;/p&gt;
            &lt;p&gt;Suppose if a=Girish and b=99 then a+b= &quot;Girish99&quot;. Similarly, if you are using a*2, it will &quot;GirishGirish&quot;.
                Likewise, you can use other operators in string.&lt;/p&gt;
            &lt;div&gt;
                &lt;table class=&quot;table1 table-striped table-bordered&quot; &gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th width=&quot;10%&quot;&gt;&lt;p&gt;&lt;strong&gt;Operator&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
                            &lt;th width=&quot;25%&quot;&gt;&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
                            &lt;th width=&quot;40%&quot;&gt;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
                            &lt;th&gt; &lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[]&lt;/td&gt;
                            &lt;td&gt;Slice- it gives the letter from the given index&lt;/td&gt;
                            &lt;td&gt;a[1] will give &quot;u&quot; from the word Girish as such ( 0=G, 1=u, 2=r and 3=u)&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot;
                                    print x[1]
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[ : ]&lt;/td&gt;
                            &lt;td&gt;Range slice-it gives the characters from the given range&lt;/td&gt;
                            &lt;td&gt;x [1:3] it will give &quot;ur&quot; from the word Girish. Remember it will not consider 0 which is
                                G, it will consider word after that is ur. &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    print x[1:3]
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;in&lt;/td&gt;
                            &lt;td&gt;Membership-returns true if a letter exist in the given string&lt;/td&gt;
                            &lt;td&gt;u is present in word Girish and hence it will give 1 (True)&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    print &quot;u&quot; in x
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;not in&lt;/td&gt;
                            &lt;td&gt;Membership-returns true if a letter exist is not in the given string&lt;/td&gt;
                            &lt;td&gt;l not present in word Girish and hence it will give 1&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    print &quot;l&quot; not in x
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;r/R&lt;/td&gt;
                            &lt;td&gt;Raw string suppresses actual meaning of escape characters. &lt;/td&gt;
                            &lt;td&gt;Print r'\n' prints \n and print R'/n' prints \n&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;% - Used for string format&lt;/td&gt;
                            &lt;td&gt;%r - It insert the canonical string representation of the object (i.e., repr(o)) %s- It
                                insert the presentation string representation of the object (i.e., str(o)) %d- it will
                                format a number for display &lt;/td&gt;
                            &lt;td&gt; The output of this code will be &quot;Girish 99&quot;. &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    name = 'Girish'
                                    number = 99
                                    print'%s %d' % (name,number)	
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;+&lt;/td&gt;
                            &lt;td&gt;It concatenates 2 strings&lt;/td&gt;
                            &lt;td&gt;It concatenate strings and gives the result&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    y=&quot;99&quot; 
                                    print x+y
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;*&lt;/td&gt;
                            &lt;td&gt;Repeat &lt;/td&gt;
                            &lt;td&gt;It prints the character twice.&lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
                                    x=&quot;Girish&quot; 
                                    y=&quot;99&quot; 
                                    print x*2
                                &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Some more examples&lt;/h2&gt;
            &lt;p&gt;You can update Python String by re-assigning a variable to another string. The new value can be related
                to previous value or to a completely different string all together. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                x = &quot;Hello World!&quot;
                print(x[:6]) 
                print(x[0:6] + &quot;Girish99&quot;)
            &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : - Slice:6 or 0:6 has the same effect &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Python String replace() Method&lt;/h2&gt;
            &lt;p&gt;The method replace() returns a copy of the string in which the values of old string have been replaced
                with the new value. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                oldstring = 'I like Girish99' 
                newstring = oldstring.replace('like', 'love')
                print(newstring)
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Changing upper and lower case strings&lt;/h2&gt;
            &lt;p&gt;In Python, you can even change the string to upper case or lower case.&lt;/p&gt;
            
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                string=&quot;python at Girish99&quot;
                print(string.upper())
            &lt;/pre&gt;
            &lt;p&gt;Likewise, you can also do for other function as well like capitalize &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                string=&quot;python at Girish99&quot;		
                print(string.capitalize())
            &lt;/pre&gt;
            &lt;p&gt;You can also convert your string to lower case &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                string=&quot;PYTHON AT Girish99&quot;
                print(string.lower())
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Using &quot;join&quot; function for the string&lt;/h2&gt;
            &lt;p&gt;The join function is a more flexible way for concatenating string. With join function, you can add any
                character into the string. &lt;/p&gt;
            &lt;p&gt;For example, if you want to add a colon (:) after every character in the string &quot;Python&quot; you can use the
                following code. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                print(&quot;:&quot;.join(&quot;Python&quot;))
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Reversing String&lt;/h2&gt;
            &lt;p&gt;By using the reverse function, you can reverse the string. For example, if we have string &quot;12345&quot; and
                then if you apply the code for the reverse function as shown below. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                string=&quot;12345&quot;		
                print(''.join(reversed(string)))
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Split Strings&lt;/h2&gt;
            &lt;p&gt;Split strings is another function that can be applied in Python let see for string &quot;Girish99 career
                Girish99&quot;. First here we will split the string by using the command word.split and get the result. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                word=&quot;Girish99 career Girish99&quot;		
                print(word.split(' '))
            &lt;/pre&gt;
            &lt;p&gt;To understand this better we will see one more example of split, instead of space (' ') we will replace
                it with ('r') and it will split the string wherever 'r' is mentioned in the string &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                word=&quot;Girish99 career Girish99&quot;		
                print(word.split('r'))
            &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;In Python, Strings are immutable. &lt;/strong&gt;&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Consider the following code&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                x = &quot;Girish99&quot;
                x.replace(&quot;Girish99&quot;,&quot;Python&quot;)
                print(x)
            &lt;/pre&gt;
            &lt;p&gt;will still return Girish99. This is because x.replace(&quot;Girish99&quot;,&quot;Python&quot;) returns &lt;strong&gt;a copy of
                &lt;/strong&gt;&lt;strong&gt;X with replacements made&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;You will need to use the following code to observe changes&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                x = &quot;Girish99&quot;
                x = x.replace(&quot;Girish99&quot;,&quot;Python&quot;)
                print(x)
            &lt;/pre&gt;
            &lt;p&gt;Above codes are Python 3 examples, If you want to run in Python 2 please consider following code. &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                #Accessing Values in Strings
                var1 = &quot;Girish99!&quot;
                var2 = &quot;Software Testing&quot;
                print &quot;var1[0]:&quot;,var1[0]
                print &quot;var2[1:5]:&quot;,var2[1:5]
                #Some more examples
                x = &quot;Hello World!&quot;
                print x[:6] 
                print x[0:6] + &quot;Girish99&quot;
                #Python String replace() Method
                oldstring = 'I like Girish99' 
                newstring = oldstring.replace('like', 'love')
                print newstring
                #Changing upper and lower case strings
                string=&quot;python at Girish99&quot;
                print string.upper()
                string=&quot;python at Girish99&quot;		
                print string.capitalize()
                string=&quot;PYTHON AT Girish99&quot;
                print string.lower()
                #Using &quot;join&quot; function for the string
                print&quot;:&quot;.join(&quot;Python&quot;)		
                #Reversing String
                string=&quot;12345&quot;		
                print''.join(reversed(string))
                #Split Strings
                word=&quot;Girish99 career Girish99&quot;		
                print word.split(' ')
                word=&quot;Girish99 career Girish99&quot;		
                print word.split('r')
                x = &quot;Girish99&quot;
                x.replace(&quot;Girish99&quot;,&quot;Python&quot;)
                print x
                x = &quot;Girish99&quot;
                x = x.replace(&quot;Girish99&quot;,&quot;Python&quot;)
                print x
            &lt;/pre&gt;
            &lt;p&gt;Python has introduced a .format function which does way with using the cumbersome %d and so on for string
                formatting. &lt;/p&gt;
            &lt;h2&gt;Summary:&lt;/h2&gt;
            &lt;p&gt;Since Python is an object-oriented programming language, many functions can be applied to Python objects.
                A notable feature of Python is its indenting source statements to make the code easier to read.&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;div&gt;Accessing values through slicing - square brackets are used for slicing along with the index or
                        indices to obtain a substring.&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;In slicing, if range is declared [1:5], it can actually fetch the value from range [1:4]
                        &lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;You can update Python String by re-assigning a variable to another string&lt;/li&gt;
                &lt;li&gt;
                    &lt;div&gt;Method replace() returns a copy of the string in which the occurrence of old is replaced with
                        new.&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Syntax for method replace: oldstring.replace(&quot;value to change&quot;,&quot;value to be replaced&quot;)&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;String operators like [], [ : ], in, Not in, etc. can be applied to concatenate the string, fetching
                    or inserting specific characters into the string, or to check whether certain character exist in the
                    string&lt;/li&gt;
                &lt;li&gt;
                    &lt;div&gt;Other string operations include&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Changing upper and lower case &lt;/li&gt;
                        &lt;li&gt;Join function to glue any character into the string&lt;/li&gt;
                        &lt;li&gt;Reversing string&lt;/li&gt;
                        &lt;li&gt;Split string&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            
        &lt;/div&gt;
        
    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PyhtonVariables&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonTuple&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Strings: Replace, Join, Split, Reverse, Uppercase &amp;amp; Lowercase In Python everything is object and string are an object too. Python string can be created simply by enclosing characters in the double quote. For example: var = &quot;Hello World!&quot; In this tutorial, we will learn - Accessing Values in Strings Various String Operators Some more examples Python String replace() Method Changing upper and lower case strings Using &quot;join&quot; function for the string Reversing String Split Strings Accessing Values in Strings Python does not support a character type, these are treated as strings of length one, also considered as substring. We use square brackets for slicing along with the index or indices to obtain a substring. var1 = &quot;Girish99!&quot; var2 = &quot;Software Testing&quot; print (&quot;var1[0]:&quot;,var1[0]) print (&quot;var2[1:5]:&quot;,var2[1:5]) Various String Operators There are various string operators that can be used in different ways like concatenating different string. Suppose if a=Girish and b=99 then a+b= &quot;Girish99&quot;. Similarly, if you are using a*2, it will &quot;GirishGirish&quot;. Likewise, you can use other operators in string. Operator Description Example [] Slice- it gives the letter from the given index a[1] will give &quot;u&quot; from the word Girish as such ( 0=G, 1=u, 2=r and 3=u) x=&quot;Girish&quot; print x[1] [ : ] Range slice-it gives the characters from the given range x [1:3] it will give &quot;ur&quot; from the word Girish. Remember it will not consider 0 which is G, it will consider word after that is ur. x=&quot;Girish&quot; print x[1:3] in Membership-returns true if a letter exist in the given string u is present in word Girish and hence it will give 1 (True) x=&quot;Girish&quot; print &quot;u&quot; in x not in Membership-returns true if a letter exist is not in the given string l not present in word Girish and hence it will give 1 x=&quot;Girish&quot; print &quot;l&quot; not in x r/R Raw string suppresses actual meaning of escape characters. Print r'\n' prints \n and print R'/n' prints \n % - Used for string format %r - It insert the canonical string representation of the object (i.e., repr(o)) %s- It insert the presentation string representation of the object (i.e., str(o)) %d- it will format a number for display The output of this code will be &quot;Girish 99&quot;. name = 'Girish' number = 99 print'%s %d' % (name,number) + It concatenates 2 strings It concatenate strings and gives the result x=&quot;Girish&quot; y=&quot;99&quot; print x+y * Repeat It prints the character twice. x=&quot;Girish&quot; y=&quot;99&quot; print x*2 Some more examples You can update Python String by re-assigning a variable to another string. The new value can be related to previous value or to a completely different string all together. x = &quot;Hello World!&quot; print(x[:6]) print(x[0:6] + &quot;Girish99&quot;) Note : - Slice:6 or 0:6 has the same effect Python String replace() Method The method replace() returns a copy of the string in which the values of old string have been replaced with the new value. oldstring = 'I like Girish99' newstring = oldstring.replace('like', 'love') print(newstring) Changing upper and lower case strings In Python, you can even change the string to upper case or lower case. string=&quot;python at Girish99&quot; print(string.upper()) Likewise, you can also do for other function as well like capitalize string=&quot;python at Girish99&quot; print(string.capitalize()) You can also convert your string to lower case string=&quot;PYTHON AT Girish99&quot; print(string.lower()) Using &quot;join&quot; function for the string The join function is a more flexible way for concatenating string. With join function, you can add any character into the string. For example, if you want to add a colon (:) after every character in the string &quot;Python&quot; you can use the following code. print(&quot;:&quot;.join(&quot;Python&quot;)) Reversing String By using the reverse function, you can reverse the string. For example, if we have string &quot;12345&quot; and then if you apply the code for the reverse function as shown below. string=&quot;12345&quot; print(''.join(reversed(string))) Split Strings Split strings is another function that can be applied in Python let see for string &quot;Girish99 career Girish99&quot;. First here we will split the string by using the command word.split and get the result. word=&quot;Girish99 career Girish99&quot; print(word.split(' ')) To understand this better we will see one more example of split, instead of space (' ') we will replace it with ('r') and it will split the string wherever 'r' is mentioned in the string word=&quot;Girish99 career Girish99&quot; print(word.split('r')) Important Note: In Python, Strings are immutable. Consider the following code x = &quot;Girish99&quot; x.replace(&quot;Girish99&quot;,&quot;Python&quot;) print(x) will still return Girish99. This is because x.replace(&quot;Girish99&quot;,&quot;Python&quot;) returns a copy of X with replacements made You will need to use the following code to observe changes x = &quot;Girish99&quot; x = x.replace(&quot;Girish99&quot;,&quot;Python&quot;) print(x) Above codes are Python 3 examples, If you want to run in Python 2 please consider following code. Python 2 Example #Accessing Values in Strings var1 = &quot;Girish99!&quot; var2 = &quot;Software Testing&quot; print &quot;var1[0]:&quot;,var1[0] print &quot;var2[1:5]:&quot;,var2[1:5] #Some more examples x = &quot;Hello World!&quot; print x[:6] print x[0:6] + &quot;Girish99&quot; #Python String replace() Method oldstring = 'I like Girish99' newstring = oldstring.replace('like', 'love') print newstring #Changing upper and lower case strings string=&quot;python at Girish99&quot; print string.upper() string=&quot;python at Girish99&quot; print string.capitalize() string=&quot;PYTHON AT Girish99&quot; print string.lower() #Using &quot;join&quot; function for the string print&quot;:&quot;.join(&quot;Python&quot;) #Reversing String string=&quot;12345&quot; print''.join(reversed(string)) #Split Strings word=&quot;Girish99 career Girish99&quot; print word.split(' ') word=&quot;Girish99 career Girish99&quot; print word.split('r') x = &quot;Girish99&quot; x.replace(&quot;Girish99&quot;,&quot;Python&quot;) print x x = &quot;Girish99&quot; x = x.replace(&quot;Girish99&quot;,&quot;Python&quot;) print x Python has introduced a .format function which does way with using the cumbersome %d and so on for string formatting. Summary: Since Python is an object-oriented programming language, many functions can be applied to Python objects. A notable feature of Python is its indenting source statements to make the code easier to read. Accessing values through slicing - square brackets are used for slicing along with the index or indices to obtain a substring. In slicing, if range is declared [1:5], it can actually fetch the value from range [1:4] You can update Python String by re-assigning a variable to another string Method replace() returns a copy of the string in which the occurrence of old is replaced with new. Syntax for method replace: oldstring.replace(&quot;value to change&quot;,&quot;value to be replaced&quot;) String operators like [], [ : ], in, Not in, etc. can be applied to concatenate the string, fetching or inserting specific characters into the string, or to check whether certain character exist in the string Other string operations include Changing upper and lower case Join function to glue any character into the string Reversing string Split string</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">9. Tuple in Python</title><link href="http://localhost:4000/blog/PyhtonTuple" rel="alternate" type="text/html" title="9. Tuple in Python" /><published>2019-09-26T00:00:00+05:30</published><updated>2019-09-26T00:00:00+05:30</updated><id>http://localhost:4000/blog/PyhtonTuple</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonTuple">&lt;section class=&quot;Ptutorial9&quot;&gt;
        &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
            &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
            &lt;div class=&quot;page-header&quot;&gt;
               &lt;h2 itemprop=&quot;headline&quot;&gt; Python TUPLE - Pack, Unpack, Compare, Slicing, Delete, Key &lt;/h2&gt;
            &lt;/div&gt;
            
            &lt;div itemprop=&quot;articleBody&quot;&gt;
               &lt;h3&gt;What is Tuple in Python?&lt;/h3&gt;
               &lt;p&gt;A tuple is just like a list of a sequence of immutable python objects. The difference between list and tuple is that list are declared in square brackets and can be changed while &lt;strong&gt;tuple is declared in parentheses&lt;/strong&gt; and cannot be changed. However, you can take portions of existing tuples to make new tuples. &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Tuple Syntax&lt;/strong&gt; &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;Tup = ('Jan','feb','march')&lt;/pre&gt;
               &lt;p&gt;To write an empty tuple, you need to write as two parentheses containing nothing- &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;tup1 = ();&lt;/pre&gt;
               &lt;p&gt;For writing tuple for a single value, you need to include a comma, even though there is a single value. Also at the end you need to write semicolon as shown below. &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;Tup1 = (50,);&lt;/pre&gt;
               &lt;p&gt;Tuple indices begin at 0, and they can be concatenated, sliced and so on. &lt;/p&gt;
               &lt;p&gt;In this tutorial, we will learn- &lt;/p&gt;
               &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Packing and Unpacking &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Comparing tuples &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Using tuples as keys in dictionaries &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Deleting Tuples &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Slicing of Tuple &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Built-in functions with Tuple &lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Advantages of tuple over list &lt;/a&gt;&lt;/li&gt;
               &lt;/ul&gt;
               &lt;p&gt;&lt;strong&gt;Tuple Assignment &lt;/strong&gt; &lt;/p&gt;
               &lt;p&gt;Python has tuple assignment feature which enables you to assign more than one variable at a time. In here, we have assigned tuple 1 with the persons information like name, surname, birth year, etc. and another tuple 2 with the values in it like number (1,2,3,….,7). &lt;/p&gt;
               &lt;p&gt;For Example, &lt;/p&gt;
               &lt;p&gt; (name, surname, birth year, favorite movie and year, profession, birthplace) = Robert &lt;/p&gt;
               &lt;p&gt;Here is the code, &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;tup1 = ('Robert', 'Carlos','1965','Terminator 1995', 'Actor','Florida');
         tup2 = (1,2,3,4,5,6,7);
         print(tup1[0])
         print(tup2[1:4])&lt;/pre&gt;
               &lt;ul&gt;
                  &lt;li&gt;Tuple 1 includes list of information of Robert&lt;/li&gt;
                  &lt;li&gt;Tuple 2 includes list of numbers in it&lt;/li&gt;
                  &lt;li&gt;We call the value for [0] in tuple and for tuple 2 we call the value between 1 and 4&lt;/li&gt;
                  &lt;li&gt;Run the code- It gives name Robert for first tuple while for second tuple it gives number (2,3 and 4)&lt;/li&gt;
               &lt;/ul&gt;
               &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;Packing and Unpacking&lt;/h2&gt;
               &lt;p&gt;In packing, we place value into a new tuple while in unpacking we extract those values back into variables. &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;x = (&quot;Guru99&quot;, 20, &quot;Education&quot;)    # tuple packing
         (company, emp, profile) = x    # tuple unpacking
         print(company)
         print(emp)
         print(profile)&lt;/pre&gt;
               &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Comparing tuples&lt;/h2&gt;
               &lt;p&gt;A comparison operator in Python can work with tuples. &lt;/p&gt;
               &lt;p&gt;The comparison starts with a first element of each tuple. If they do not compare to =,&amp;lt; or &amp;gt; then it proceed to the second element and so on. &lt;/p&gt;
               &lt;p&gt;It starts with comparing the first element from each of the tuples&lt;/p&gt;
               
               &lt;p&gt;Let's study this with an example- &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;#case 1&lt;/strong&gt; &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;a=(5,6)
         b=(1,4)
         if (a&amp;gt;b):print(&quot;a is bigger&quot;)
         else: print(&quot;b is bigger&quot;)
         &lt;/pre&gt;
               &lt;p&gt;&lt;strong&gt;#case 2&lt;/strong&gt; &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;a=(5,6)
         b=(5,4)
         if (a&amp;gt;b):print(&quot;a is bigger&quot;)
         else: print (&quot;b is bigger&quot;)&lt;/pre&gt;
               &lt;p&gt;&lt;strong&gt;#case 3&lt;/strong&gt; &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;a=(5,6)
         b=(6,4)
         if (a&amp;gt;b):print(&quot;a is bigger&quot;)
         else: print(&quot;b is bigger&quot;)&lt;/pre&gt;
               &lt;p&gt;&lt;strong&gt;Case1:&lt;/strong&gt; Comparison starts with a first element of each tuple. In this case 5&amp;gt;1, so the output a is bigger &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Case 2:&lt;/strong&gt; Comparison starts with a first element of each tuple. In this case 5&amp;gt;5 which is inconclusive. So it proceeds to the next element. 6&amp;gt;4, so the output a is bigger &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Case 3:&lt;/strong&gt; Comparison starts with a first element of each tuple. In this case 5&amp;gt;6 which is false. So it goes into the else block and prints &quot;b is bigger.&quot; &lt;/p&gt;
               &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Using tuples as keys in dictionaries&lt;/h2&gt;
               &lt;p&gt;Since tuples are hashable, and list is not, we must use tuple as the key if we need to create a composite key to use in a dictionary. &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: We would come across a composite key if we need to create a telephone directory that maps, first-name, last-name, pairs of telephone numbers, etc. Assuming that we have declared the variables as last and first number, we could write a dictionary assignment statement as shown below: &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;directory[last,first] = number&lt;/pre&gt;
               &lt;p&gt;Inside the brackets, the expression is a tuple. We could use tuple assignment in a for loop to navigate this dictionary. &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;for last, first in directory:&lt;/pre&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;    print first, last, directory[last, first]&lt;/pre&gt;
               &lt;p&gt;This loop navigates the keys in the directory, which are tuples. It assigns the elements of each tuple to last and first and then prints the name and corresponding telephone number. &lt;/p&gt;
               &lt;p&gt;&lt;strong&gt;Tuples and dictionary&lt;/strong&gt;&lt;/p&gt;
               &lt;p&gt;Dictionary can return the list of tuples by calling items, where each tuple is a key value pair. &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;a = {'x':100, 'y':200}
         b = list(a.items())
         print(b) 
         &lt;/pre&gt;
               &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Deleting Tuples&lt;/h2&gt;
               &lt;p&gt;Tuples are immutable and cannot be deleted. You cannot delete or remove items from a tuple. But deleting tuple entirely is possible by using the keyword &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;del&lt;/pre&gt;
               &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Slicing of Tuple&lt;/h2&gt;
               &lt;p&gt;To fetch specific sets of sub-elements from tuple or list, we use this unique function called slicing. Slicing is not only applicable to tuple but also for array and list. &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;x = (&quot;a&quot;, &quot;b&quot;,&quot;c&quot;, &quot;d&quot;, &quot;e&quot;)
         print(x[2:4])&lt;/pre&gt;
               &lt;p&gt;The output of this code will be ('c', 'd'). &lt;/p&gt;
               &lt;p&gt;&lt;b&gt;Here is the Python 2 Code for all above example&lt;/b&gt; &lt;/p&gt;
               &lt;pre class=&quot;code-toolbar&quot;&gt;tup1 = ('Robert', 'Carlos','1965','Terminator 1995', 'Actor','Florida');
         tup2 = (1,2,3,4,5,6,7);
         print  tup1[0]
         print  tup2[1:4]
         
         #Packing and Unpacking
         x = (&quot;Guru99&quot;, 20, &quot;Education&quot;)    # tuple packing
         (company, emp, profile) = x    # tuple unpacking
         print company
         print emp
         print profile
         
         #Comparing tuples
         #case 1
         a=(5,6)
         b=(1,4)
         if (a&amp;gt;b):print &quot;a is bigger&quot;
         else: print &quot;b is bigger&quot;
         
         #case 2
         a=(5,6)
         b=(5,4)
         if (a&amp;gt;b):print &quot;a is bigger&quot;
         else: print &quot;b is bigger&quot;
         
         #case 3
         a=(5,6)
         b=(6,4)
         if (a&amp;gt;b):print &quot;a is bigger&quot;
         else: print &quot;b is bigger&quot;
         
         #Tuples and dictionary
         a = {'x':100, 'y':200}
         b = a.items()
         print b 
         
         #Slicing of Tuple
         x = (&quot;a&quot;, &quot;b&quot;,&quot;c&quot;, &quot;d&quot;, &quot;e&quot;)
         print x[2:4]
         
         &lt;/pre&gt;
               &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Built-in functions with Tuple&lt;/h2&gt;
               &lt;p&gt;To perform different task, tuple allows you to use many built-in functions like all(), any(), enumerate(), max(), min(), sorted(), len(), tuple(), etc. &lt;/p&gt;
               &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Advantages of tuple over list&lt;/h2&gt;
               &lt;ul&gt;
                  &lt;li&gt;Iterating through tuple is faster than with list, since tuples are immutable. &lt;/li&gt;
                  &lt;li&gt;Tuples that consist of immutable elements can be used as key for dictionary, which is not possible with list&lt;/li&gt;
                  &lt;li&gt;If you have data that is immutable, implementing it as tuple will guarantee that it remains write-protected&lt;/li&gt;
               &lt;/ul&gt;
               &lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;: &lt;/p&gt;
               &lt;p&gt;Python has tuple assignment feature which enables you to assign more than one variable at a time. &lt;/p&gt;
               &lt;ul&gt;
                  &lt;li&gt;
                     &lt;div&gt;Packing and Unpacking of Tuples&lt;/div&gt;
                     &lt;ul&gt;
                        &lt;li&gt;In packing, we place value into a new tuple while in unpacking we extract those values back into variables. &lt;/li&gt;
                     &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;A comparison operator in Python can work with tuples.&lt;/li&gt;
                  &lt;li&gt;
                     &lt;div&gt;Using tuples as keys in dictionaries&lt;/div&gt;
                     &lt;ul&gt;
                        &lt;li&gt;Tuples are hashable, and list are not&lt;/li&gt;
                        &lt;li&gt;We must use tuple as the key if we need to create a composite key to use in a dictionary&lt;/li&gt;
                        &lt;li&gt;Dictionary can return the list of tuples by calling items, where each tuple is a key value pair&lt;/li&gt;
                     &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;Tuples are immutable and cannot be deleted. You cannot delete or remove items from a tuple. But deleting tuple entirely is possible by using the keyword &quot;del&quot;&lt;/li&gt;
                  &lt;li&gt;To fetch specific sets of sub-elements from tuple or list, we use this unique function called slicing&lt;/li&gt;
               &lt;/ul&gt;
             
            &lt;/div&gt;
            
         &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PyhtonStrings&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonDictionary&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python TUPLE - Pack, Unpack, Compare, Slicing, Delete, Key What is Tuple in Python? A tuple is just like a list of a sequence of immutable python objects. The difference between list and tuple is that list are declared in square brackets and can be changed while tuple is declared in parentheses and cannot be changed. However, you can take portions of existing tuples to make new tuples. Tuple Syntax Tup = ('Jan','feb','march') To write an empty tuple, you need to write as two parentheses containing nothing- tup1 = (); For writing tuple for a single value, you need to include a comma, even though there is a single value. Also at the end you need to write semicolon as shown below. Tup1 = (50,); Tuple indices begin at 0, and they can be concatenated, sliced and so on. In this tutorial, we will learn- Packing and Unpacking Comparing tuples Using tuples as keys in dictionaries Deleting Tuples Slicing of Tuple Built-in functions with Tuple Advantages of tuple over list Tuple Assignment Python has tuple assignment feature which enables you to assign more than one variable at a time. In here, we have assigned tuple 1 with the persons information like name, surname, birth year, etc. and another tuple 2 with the values in it like number (1,2,3,….,7). For Example, (name, surname, birth year, favorite movie and year, profession, birthplace) = Robert Here is the code, tup1 = ('Robert', 'Carlos','1965','Terminator 1995', 'Actor','Florida'); tup2 = (1,2,3,4,5,6,7); print(tup1[0]) print(tup2[1:4]) Tuple 1 includes list of information of Robert Tuple 2 includes list of numbers in it We call the value for [0] in tuple and for tuple 2 we call the value between 1 and 4 Run the code- It gives name Robert for first tuple while for second tuple it gives number (2,3 and 4) Packing and Unpacking In packing, we place value into a new tuple while in unpacking we extract those values back into variables. x = (&quot;Guru99&quot;, 20, &quot;Education&quot;) # tuple packing (company, emp, profile) = x # tuple unpacking print(company) print(emp) print(profile) Comparing tuples A comparison operator in Python can work with tuples. The comparison starts with a first element of each tuple. If they do not compare to =,&amp;lt; or &amp;gt; then it proceed to the second element and so on. It starts with comparing the first element from each of the tuples Let's study this with an example- #case 1 a=(5,6) b=(1,4) if (a&amp;gt;b):print(&quot;a is bigger&quot;) else: print(&quot;b is bigger&quot;) #case 2 a=(5,6) b=(5,4) if (a&amp;gt;b):print(&quot;a is bigger&quot;) else: print (&quot;b is bigger&quot;) #case 3 a=(5,6) b=(6,4) if (a&amp;gt;b):print(&quot;a is bigger&quot;) else: print(&quot;b is bigger&quot;) Case1: Comparison starts with a first element of each tuple. In this case 5&amp;gt;1, so the output a is bigger Case 2: Comparison starts with a first element of each tuple. In this case 5&amp;gt;5 which is inconclusive. So it proceeds to the next element. 6&amp;gt;4, so the output a is bigger Case 3: Comparison starts with a first element of each tuple. In this case 5&amp;gt;6 which is false. So it goes into the else block and prints &quot;b is bigger.&quot; Using tuples as keys in dictionaries Since tuples are hashable, and list is not, we must use tuple as the key if we need to create a composite key to use in a dictionary. Example: We would come across a composite key if we need to create a telephone directory that maps, first-name, last-name, pairs of telephone numbers, etc. Assuming that we have declared the variables as last and first number, we could write a dictionary assignment statement as shown below: directory[last,first] = number Inside the brackets, the expression is a tuple. We could use tuple assignment in a for loop to navigate this dictionary. for last, first in directory: print first, last, directory[last, first] This loop navigates the keys in the directory, which are tuples. It assigns the elements of each tuple to last and first and then prints the name and corresponding telephone number. Tuples and dictionary Dictionary can return the list of tuples by calling items, where each tuple is a key value pair. a = {'x':100, 'y':200} b = list(a.items()) print(b) Deleting Tuples Tuples are immutable and cannot be deleted. You cannot delete or remove items from a tuple. But deleting tuple entirely is possible by using the keyword del Slicing of Tuple To fetch specific sets of sub-elements from tuple or list, we use this unique function called slicing. Slicing is not only applicable to tuple but also for array and list. x = (&quot;a&quot;, &quot;b&quot;,&quot;c&quot;, &quot;d&quot;, &quot;e&quot;) print(x[2:4]) The output of this code will be ('c', 'd'). Here is the Python 2 Code for all above example tup1 = ('Robert', 'Carlos','1965','Terminator 1995', 'Actor','Florida'); tup2 = (1,2,3,4,5,6,7); print tup1[0] print tup2[1:4] #Packing and Unpacking x = (&quot;Guru99&quot;, 20, &quot;Education&quot;) # tuple packing (company, emp, profile) = x # tuple unpacking print company print emp print profile #Comparing tuples #case 1 a=(5,6) b=(1,4) if (a&amp;gt;b):print &quot;a is bigger&quot; else: print &quot;b is bigger&quot; #case 2 a=(5,6) b=(5,4) if (a&amp;gt;b):print &quot;a is bigger&quot; else: print &quot;b is bigger&quot; #case 3 a=(5,6) b=(6,4) if (a&amp;gt;b):print &quot;a is bigger&quot; else: print &quot;b is bigger&quot; #Tuples and dictionary a = {'x':100, 'y':200} b = a.items() print b #Slicing of Tuple x = (&quot;a&quot;, &quot;b&quot;,&quot;c&quot;, &quot;d&quot;, &quot;e&quot;) print x[2:4] Built-in functions with Tuple To perform different task, tuple allows you to use many built-in functions like all(), any(), enumerate(), max(), min(), sorted(), len(), tuple(), etc. Advantages of tuple over list Iterating through tuple is faster than with list, since tuples are immutable. Tuples that consist of immutable elements can be used as key for dictionary, which is not possible with list If you have data that is immutable, implementing it as tuple will guarantee that it remains write-protected Summary: Python has tuple assignment feature which enables you to assign more than one variable at a time. Packing and Unpacking of Tuples In packing, we place value into a new tuple while in unpacking we extract those values back into variables. A comparison operator in Python can work with tuples. Using tuples as keys in dictionaries Tuples are hashable, and list are not We must use tuple as the key if we need to create a composite key to use in a dictionary Dictionary can return the list of tuples by calling items, where each tuple is a key value pair Tuples are immutable and cannot be deleted. You cannot delete or remove items from a tuple. But deleting tuple entirely is possible by using the keyword &quot;del&quot; To fetch specific sets of sub-elements from tuple or list, we use this unique function called slicing</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">5. Print in Python</title><link href="http://localhost:4000/blog/PythonPrint" rel="alternate" type="text/html" title="5. Print in Python" /><published>2019-09-25T00:00:00+05:30</published><updated>2019-09-25T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonPrint</id><content type="html" xml:base="http://localhost:4000/blog/PythonPrint">&lt;section class=&quot;Ptutorial5&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; How to Print in Python with Examples &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;p&gt;In this tutorial, you will learn- &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to print simple string?&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to print blank lines&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Print end command&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to print simple string?&lt;/h2&gt;
            &lt;p&gt;More often then not you require to Print strings in your coding construct. &lt;/p&gt;
            &lt;p&gt;Here is how to do it in Python 3 &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example: 1&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;To print the Welcome to GirishG, use the print () function as follows: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (&quot;Welcome to GirishG&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Welcome to GirishG &lt;/p&gt;
            &lt;p&gt;In Python 2, same example will look like &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print &quot;Welcome to GirishG&quot;&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;If you want to print the name of five countries, you can write: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print(&quot;USA&quot;)
     print(&quot;Canada&quot;)
     print(&quot;Germany&quot;)
     print(&quot;France&quot;)
     print(&quot;Japan&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;USA
     Canada
     Germany
     France
     Japan&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to print blank lines&lt;/h2&gt;
            &lt;p&gt;Sometimes you need to print one blank line in your Python program. Following are an example to perform
                this task. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
            &lt;p&gt;Let us print 8 blank lines. You can type: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (8 * &quot;\n&quot;)&lt;/pre&gt;
            &lt;p&gt;or: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (&quot;\n\n\n\n\n\n\n\n\n&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here is the code&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (&quot;Welcome to GirishG&quot;)
     print (8 * &quot;\n&quot;)
     print (&quot;Welcome to GirishG&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;Welcome to GirishG
     
     
     
     
     
     
     
     Welcome to GirishG&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Print end command&lt;/h2&gt;
            &lt;p&gt;By default, python's print() function ends with a newline. This function comes with a parameter called
                'end.' The default value of this parameter is '\n,' i.e., the new line character. You can end a print
                statement with any character or string using this parameter. This is available in only in Python 3+ &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print (&quot;Welcome to&quot;, end = ' ') 
     print (&quot;GirishG&quot;, end = '!')&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Welcome to GirishG! &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;# ends the output with '@.' &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;print(&quot;Python&quot; , end = '@')&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Python@ &lt;/p&gt;
            &lt;p id=&quot;slidetag&quot;&gt;&amp;nbsp;&lt;/p&gt;
        &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFirstProgram&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMainFunction&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">How to Print in Python with Examples</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">6. Main Function in Python</title><link href="http://localhost:4000/blog/PythonMainFunction" rel="alternate" type="text/html" title="6. Main Function in Python" /><published>2019-09-25T00:00:00+05:30</published><updated>2019-09-25T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonMainFunction</id><content type="html" xml:base="http://localhost:4000/blog/PythonMainFunction">&lt;section class=&quot;Ptutorial6&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Main Function with Examples: Understand __main__ &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;p&gt;Before we jump more into Python coding, we get familiarize with Python Main function and its importance.
            &lt;/p&gt;
            &lt;p&gt;Consider the following code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def main():
                print &quot;hello world!&quot;
                print &quot;Guru99&quot;
            &lt;/pre&gt;
            &lt;p&gt;Here we got two pieces of print one is defined within a main function that is &quot;Hello World&quot; and the other
                is independent which is &quot;Guru99&quot;. When you run the function def main (): &lt;br&gt;&lt;br&gt;&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Only &quot;Guru99&quot; prints out &lt;/li&gt;
                &lt;li&gt;and not the code &quot;Hello World.&quot;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/6/Python4_1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot;
                        alt=&quot;Learn Python Main Function with Examples: Understand __main__&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/6/Python4_1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;It is because we did not declare the call &lt;strong&gt;function &quot;if__name__== &quot;__main__&quot;.&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;When Python interpreter reads a source file, it will execute all the code found in it. &lt;/li&gt;
                &lt;li&gt;When Python runs the &quot;source file&quot; as the main program, it sets the special variable (__name__) to
                    have a value (&quot;__main__&quot;). &lt;/li&gt;
                &lt;li&gt;When you execute the main function, it will then read the &quot;if&quot; statement and checks whether __name__
                    does equal to __main__.&lt;/li&gt;
                &lt;li&gt;In Python &lt;strong&gt;&quot;if__name__== &quot;__main__&quot; &lt;/strong&gt;allows you to run the Python files either as
                    &lt;strong&gt;reusable modules or standalone programs&lt;/strong&gt;. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Like C, Python uses == for comparison while = for assignment. Python interpreter uses the main function
                in two ways &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;div&gt;import: __name__= module's filename&lt;/div&gt;
                    &lt;p&gt;if statement==false, and the script in __main__ will not be executed&lt;/p&gt;

                &lt;/li&gt;
                &lt;li&gt;
                    &lt;div&gt;direct run:__name__=__main__&lt;/div&gt;
                    &lt;p&gt;if statement == True, and the script in _main_will be executed&lt;/p&gt;
                &lt;/li&gt;
                &lt;li&gt;So when the code is executed, it will check for module name with &quot;if.&quot;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;It is important that after defining the main function, you call the code by if__name__== &quot;__main__&quot; and
                then run the code, only then you will get the output &quot;hello world!&quot; in the programming console as shown
                below. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/6/Python4_22.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot;
                        alt=&quot;Learn Python Main Function with Examples: Understand __main__&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/6/Python4_22.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Make sure that after defining a main function, you leave some indent and not
                declare the code right below the def main(): function otherwise it will give indent error. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def main():
                print(&quot;Hello World!&quot;)
       
                if __name__== &quot;__main__&quot;:
                    main()
     
                 print(&quot;Guru99&quot;)
            &lt;/pre&gt;
            &lt;p&gt;Above examples are Python 3 codes, if you want to use Python 2, please consider following code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def main():
                print &quot;Hello World!&quot;
       
                if __name__== &quot;__main__&quot;:
                main()
     
                print &quot;Guru99&quot;
            &lt;/pre&gt;
            &lt;p class=&quot;alert alert-success&quot;&gt; In Python 3, you do not need to use if__name. Following code also works &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def main():
                print(&quot;Hello World!&quot;)
       
                 main()
                print(&quot;Guru99&quot;)
            &lt;/pre&gt;
            &lt;p id=&quot;slidetag&quot;&gt;&amp;nbsp;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonPrint&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMainFunction&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Main Function with Examples: Understand __main__</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/python/tutorial/6/Python4_1.png" /></entry><entry><title type="html">4. First Python Program</title><link href="http://localhost:4000/blog/PythonFirstProgram" rel="alternate" type="text/html" title="4. First Python Program" /><published>2019-09-25T00:00:00+05:30</published><updated>2019-09-25T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonFirstProgram</id><content type="html" xml:base="http://localhost:4000/blog/PythonFirstProgram">&lt;section class=&quot;Ptutorial4&quot;&gt;
    &lt;div class=&quot;page-header&quot;&gt;
        &lt;h2 itemprop=&quot;headline&quot;&gt; Hello World: Create your First Python Program &lt;/h2&gt;
     &lt;/div&gt;
     
     &lt;div itemprop=&quot;articleBody&quot;&gt;
        
        &lt;p&gt;In the last tutorial, we completed our Python installation and setup. It's time to create your first program. &lt;/p&gt;
        &lt;h2&gt;Creating First Program&lt;/h2&gt;
        &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Open PyCharm Editor. You can see the introductory screen for PyCharm. To create a new project, click on “Create New Project”. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/Python3.1.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/Python3.1.png&quot; width=&quot;70%&quot; height=&quot;70%&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 2) &lt;/strong&gt;You will need to select a location. &lt;/p&gt;
        &lt;ol&gt;
           &lt;li&gt;You can select the location where you want the project to be created. If you don’t want to change location than keep it as it is but at least change the name from “untitled” to something more meaningful, like “FirstProject”.&lt;/li&gt;
           &lt;li&gt;PyCharm should have found the Python interpreter you installed earlier.&lt;/li&gt;
           &lt;li&gt;Next Click the “Create” Button.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.2.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.2.png&quot; width=&quot;70%&quot; height=&quot;70%&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 3) &lt;/strong&gt;Now Go up to the “File” menu and select “New”. Next, select “Python File”. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.3.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.3.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 4) &lt;/strong&gt;A new pop up will appear. Now type the name of the file you want (Here we give “HelloWorld”) and hit “OK”. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.4.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.4.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 5) &lt;/strong&gt;Now type a simple program - print (‘Hello World!’).&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.5.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 6) &lt;/strong&gt;Now Go up to the “Run” menu and select “Run” to run your program. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.6.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/PythonS3.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 7) &lt;/strong&gt;You can see the output of your program at the bottom of the screen. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/Python3.5.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/Python3.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 8) &lt;/strong&gt;Don't worry if you don't have Pycharm Editor installed, you can still run the code from the command prompt. Enter the correct path of a file in command prompt to run the program. &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/Python3.6.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/Python3.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        &lt;p&gt;The output of the code would be &lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/4/Python3.7.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Creating Your First Python Program&quot; alt=&quot;Creating Your First Python Program&quot; src=&quot;http://localhost:4000/img/python/tutorial/4/Python3.7.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
        
  &lt;/pre&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonInstaller&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFirstProgram&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Hello World: Create your First Python Program In the last tutorial, we completed our Python installation and setup. It's time to create your first program. Creating First Program Step 1) Open PyCharm Editor. You can see the introductory screen for PyCharm. To create a new project, click on “Create New Project”. Step 2) You will need to select a location. You can select the location where you want the project to be created. If you don’t want to change location than keep it as it is but at least change the name from “untitled” to something more meaningful, like “FirstProject”. PyCharm should have found the Python interpreter you installed earlier. Next Click the “Create” Button. Step 3) Now Go up to the “File” menu and select “New”. Next, select “Python File”. Step 4) A new pop up will appear. Now type the name of the file you want (Here we give “HelloWorld”) and hit “OK”. Step 5) Now type a simple program - print (‘Hello World!’). Step 6) Now Go up to the “Run” menu and select “Run” to run your program. Step 7) You can see the output of your program at the bottom of the screen. Step 8) Don't worry if you don't have Pycharm Editor installed, you can still run the code from the command prompt. Enter the correct path of a file in command prompt to run the program. The output of the code would be</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/python/tutorial/4/Python3.1.png" /></entry><entry><title type="html">7. Variables in Python</title><link href="http://localhost:4000/blog/PyhtonVariables" rel="alternate" type="text/html" title="7. Variables in Python" /><published>2019-09-25T00:00:00+05:30</published><updated>2019-09-25T00:00:00+05:30</updated><id>http://localhost:4000/blog/PyhtonVariables</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonVariables">&lt;section class=&quot;Ptutorial7&quot;&gt;
   &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
      &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
      &lt;div class=&quot;page-header&quot;&gt;
         &lt;h2 itemprop=&quot;headline&quot;&gt; Python Variables: Declare, Concatenate, Global &amp;amp; Local &lt;/h2&gt;
      &lt;/div&gt;
      &lt;div itemprop=&quot;articleBody&quot;&gt;
         &lt;h2&gt; What is a Variable in Python? &lt;/h2&gt;
         &lt;p&gt;A Python variable is a reserved memory location to store values. In other words, a variable in a python
            program gives data to the computer for processing. &lt;/p&gt;
         &lt;p&gt;Every value in Python has a datatype. Different data types in Python are Numbers, List, Tuple, Strings,
            Dictionary, etc. Variables can be declared by any name or even alphabets like a, aa, abc, etc. &lt;/p&gt;
         &lt;p&gt;In this tutorial, we will learn, &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to Declare and use a Variable &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Re-declare a Variable &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Concatenate Variables &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Local &amp;amp; Global Variables &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Delete a variable &lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
         &lt;div&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to Declare and use a Variable&lt;/h2&gt;
            &lt;p&gt;Let see an example. We will declare variable &quot;a&quot; and print it. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               a=100 
               print a
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Re-declare a Variable&lt;/h2&gt;
            &lt;p&gt;You can re-declare the variable even after you have declared it once. &lt;/p&gt;
            &lt;p&gt;Here we have variable initialized to f=0. &lt;/p&gt;
            &lt;p&gt;Later, we re-assign the variable f to value &quot;guru99&quot; &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.1.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.1.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.1.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               # Declare a variable and initialize it
               f = 0
               print f
               # re-declaring the variable works
               f = 'guru99'
               print f
            &lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               # Declare a variable and initialize it
               f = 0
               print(f)
               # re-declaring the variable works
               f = 'guru99'
               print(f)
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Concatenate Variables&lt;/h2&gt;
            &lt;p&gt;Let's see whether you can concatenate different data types like string and number together. For example,
               we will concatenate &quot;Guru&quot; with the number &quot;99&quot;. &lt;/p&gt;
            &lt;p&gt;Unlike Java, which concatenates number with string without declaring number as string, Python requires
               declaring the number as string otherwise it will show a TypeError&lt;/p&gt;
            
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.2.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.2.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.2.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;For the following code, you will get undefined output - &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               a=&quot;Guru&quot;
               b = 99
               print a+b
            &lt;/pre&gt;
            &lt;p&gt;Once the integer is declared as string, it can concatenate both &quot;Guru&quot; + &lt;strong&gt;str&lt;/strong&gt;(&quot;99&quot;)=
               &quot;Guru99&quot; in the output. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               a=&quot;Guru&quot;
               b = 99
               print(a+str(b))
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Local &amp;amp; Global Variables&lt;/h2&gt;
            &lt;p&gt;In Python when you want to use the same variable for rest of your program or module you declare it a
               global variable, while if you want to use the variable in a specific function or method, you use a local
               variable. &lt;/p&gt;
            &lt;p&gt;Let's understand this difference between local and global variable with the below program. &lt;/p&gt;
            &lt;ol&gt;
               &lt;li&gt;Variable &quot;f&quot; is &lt;strong&gt;global&lt;/strong&gt; in scope and is assigned value 101 which is printed in output
               &lt;/li&gt;
               &lt;li&gt;Variable f is again declared in function and assumes &lt;strong&gt;local&lt;/strong&gt; scope. It is assigned
                  value &quot;I am learning Python.&quot; which is printed out as an output. This variable is different from the
                  global variable &quot;f&quot; define earlier&lt;/li&gt;
               &lt;li&gt;Once the function call is over, the local variable f is destroyed. At line 12, when we again, print
                  the value of &quot;f&quot; is it displays the value of global variable f=101&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.3.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.3.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.3.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               # Declare a variable and initialize it
               f = 101
               print f
               # Global vs. local variables in functions
               def someFunction():
               # global f
                  f = 'I am learning Python'
                  print f
               someFunction()
               print f
            &lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               # Declare a variable and initialize it
               f = 101
               print(f)
               # Global vs. local variables in functions
               def someFunction():
               # global f
                  f = 'I am learning Python'
                  print(f)
               someFunction()
               print(f)
            &lt;/pre&gt;
            &lt;p&gt;Using the keyword &lt;strong&gt;global, &lt;/strong&gt;you can reference the global variable inside a function.&lt;/p&gt;
            
            &lt;ol&gt;
               &lt;li&gt;Variable &quot;f&quot; is &lt;strong&gt;global&lt;/strong&gt; in scope and is assigned value 101 which is printed in output
               &lt;/li&gt;
               &lt;li&gt;Variable f is declared using the keyword &lt;strong&gt;global&lt;/strong&gt;. This is &lt;strong&gt;NOT&lt;/strong&gt; a
                  &lt;strong&gt;local variable&lt;/strong&gt;, but the same global variable declared earlier. Hence when we print
                  its value, the output is 101&lt;/li&gt;
               &lt;li&gt;
                  &lt;div&gt;We changed the value of &quot;f&quot; inside the function. Once the function call is over, the changed
                     value of the variable &quot;f&quot; persists. At line 12, when we again, print the value of &quot;f&quot; is it
                     displays the value &quot;changing global variable&quot;&lt;/div&gt;
               &lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.4.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.4.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.4.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               f = 101;
               print f
               # Global vs.local variables in functions
               def someFunction():
               global f
               print f
               f = &quot;changing global variable&quot;
               someFunction()
               print f
            &lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               f = 101;
               print(f)
               # Global vs.local variables in functions
               def someFunction():
               global f
               print(f)
               f = &quot;changing global variable&quot;
               someFunction()
               print(f)
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Delete a variable&lt;/h2&gt;
            &lt;p&gt;You can also delete variable using the command &lt;strong&gt;del&lt;/strong&gt; &quot;variable name&quot;. &lt;/p&gt;
            &lt;p&gt;In the example below, we deleted variable f, and when we proceed to print it, we get error
               &quot;&lt;strong&gt;variable name is not defined&lt;/strong&gt;&quot; which means you have deleted the variable. &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;modal&quot;
                  href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.5.png&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/7/Python5.5.png&quot;
                  class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Variables in Python&quot;
                     src=&quot;http://localhost:4000/img/python/tutorial/7/Python5.5.png&quot; alt=&quot;Variables in Python&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
               f = 11;
               print(f)
               del f
               print(f)
            &lt;/pre&gt;
            &lt;h2&gt;Summary:&lt;/h2&gt;
            &lt;ul&gt;
               &lt;li&gt;Variables are referred to &quot;envelop&quot; or &quot;buckets&quot; where information can be maintained and referenced.
                  Like any other programming language Python also uses a variable to store the information.&lt;/li&gt;
               &lt;li&gt;Variables can be declared by any name or even alphabets like a, aa, abc, etc.&lt;/li&gt;
               &lt;li&gt;Variables can be re-declared even after you have declared them for once&lt;/li&gt;
               &lt;li&gt;In Python you cannot concatenate string with number directly, you need to declare them as a separate
                  variable, and after that, you can concatenate number with string&lt;/li&gt;
               &lt;li&gt;Declare local variable when you want to use it for current function&lt;/li&gt;
               &lt;li&gt;Declare Global variable when you want to use the same variable for rest of the program&lt;/li&gt;
               &lt;li&gt;
                  &lt;div&gt;To delete a variable, it uses keyword &quot;del&quot;.&lt;/div&gt;
               &lt;/li&gt;
            &lt;/ul&gt;

         &lt;/div&gt;

      &lt;/div&gt;
   &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMainFunction&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PyhtonStrings&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Variables: Declare, Concatenate, Global &amp;amp; Local What is a Variable in Python? A Python variable is a reserved memory location to store values. In other words, a variable in a python program gives data to the computer for processing. Every value in Python has a datatype. Different data types in Python are Numbers, List, Tuple, Strings, Dictionary, etc. Variables can be declared by any name or even alphabets like a, aa, abc, etc. In this tutorial, we will learn, How to Declare and use a Variable Re-declare a Variable Concatenate Variables Local &amp;amp; Global Variables Delete a variable How to Declare and use a Variable Let see an example. We will declare variable &quot;a&quot; and print it. a=100 print a Re-declare a Variable You can re-declare the variable even after you have declared it once. Here we have variable initialized to f=0. Later, we re-assign the variable f to value &quot;guru99&quot; Python 2 Example # Declare a variable and initialize it f = 0 print f # re-declaring the variable works f = 'guru99' print f Python 3 Example # Declare a variable and initialize it f = 0 print(f) # re-declaring the variable works f = 'guru99' print(f) Concatenate Variables Let's see whether you can concatenate different data types like string and number together. For example, we will concatenate &quot;Guru&quot; with the number &quot;99&quot;. Unlike Java, which concatenates number with string without declaring number as string, Python requires declaring the number as string otherwise it will show a TypeError For the following code, you will get undefined output - a=&quot;Guru&quot; b = 99 print a+b Once the integer is declared as string, it can concatenate both &quot;Guru&quot; + str(&quot;99&quot;)= &quot;Guru99&quot; in the output. a=&quot;Guru&quot; b = 99 print(a+str(b)) Local &amp;amp; Global Variables In Python when you want to use the same variable for rest of your program or module you declare it a global variable, while if you want to use the variable in a specific function or method, you use a local variable. Let's understand this difference between local and global variable with the below program. Variable &quot;f&quot; is global in scope and is assigned value 101 which is printed in output Variable f is again declared in function and assumes local scope. It is assigned value &quot;I am learning Python.&quot; which is printed out as an output. This variable is different from the global variable &quot;f&quot; define earlier Once the function call is over, the local variable f is destroyed. At line 12, when we again, print the value of &quot;f&quot; is it displays the value of global variable f=101 Python 2 Example # Declare a variable and initialize it f = 101 print f # Global vs. local variables in functions def someFunction(): # global f f = 'I am learning Python' print f someFunction() print f Python 3 Example # Declare a variable and initialize it f = 101 print(f) # Global vs. local variables in functions def someFunction(): # global f f = 'I am learning Python' print(f) someFunction() print(f) Using the keyword global, you can reference the global variable inside a function. Variable &quot;f&quot; is global in scope and is assigned value 101 which is printed in output Variable f is declared using the keyword global. This is NOT a local variable, but the same global variable declared earlier. Hence when we print its value, the output is 101 We changed the value of &quot;f&quot; inside the function. Once the function call is over, the changed value of the variable &quot;f&quot; persists. At line 12, when we again, print the value of &quot;f&quot; is it displays the value &quot;changing global variable&quot; Python 2 Example f = 101; print f # Global vs.local variables in functions def someFunction(): global f print f f = &quot;changing global variable&quot; someFunction() print f Python 3 Example f = 101; print(f) # Global vs.local variables in functions def someFunction(): global f print(f) f = &quot;changing global variable&quot; someFunction() print(f) Delete a variable You can also delete variable using the command del &quot;variable name&quot;. In the example below, we deleted variable f, and when we proceed to print it, we get error &quot;variable name is not defined&quot; which means you have deleted the variable. f = 11; print(f) del f print(f) Summary: Variables are referred to &quot;envelop&quot; or &quot;buckets&quot; where information can be maintained and referenced. Like any other programming language Python also uses a variable to store the information. Variables can be declared by any name or even alphabets like a, aa, abc, etc. Variables can be re-declared even after you have declared them for once In Python you cannot concatenate string with number directly, you need to declare them as a separate variable, and after that, you can concatenate number with string Declare local variable when you want to use it for current function Declare Global variable when you want to use the same variable for rest of the program To delete a variable, it uses keyword &quot;del&quot;.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/python/tutorial/6/Python4_1.png" /></entry><entry><title type="html">15.Add new Event</title><link href="http://localhost:4000/blog/AgendaApp10" rel="alternate" type="text/html" title="15.Add new Event" /><published>2019-09-24T00:00:00+05:30</published><updated>2019-09-24T00:00:00+05:30</updated><id>http://localhost:4000/blog/AgendaApp10</id><content type="html" xml:base="http://localhost:4000/blog/AgendaApp10">&lt;section class=&quot;tutorial15&quot;&gt;

    &lt;div class=&quot;angular-tutorial tutorial&quot;&gt;


        &lt;h2&gt;Add new Event&lt;/h2&gt;

        &lt;p&gt;Finally, the last thing we have to do is to handle our form on submit and add new event to the list.&lt;/p&gt;

        &lt;ol&gt;
            &lt;li&gt;Add new function to &lt;code&gt;app.component.ts&lt;/code&gt;&lt;/li&gt;

            &lt;!-- mdbsnippet --&gt;
            &lt;div class=&quot;docs-pills&quot;&gt;
                &lt;div class=&quot;d-flex justify-content-between&quot;&gt;
                    &lt;ul class=&quot;nav md-pills pills-grey&quot;&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;nav-link active show&quot; data-toggle=&quot;tab&quot;
                                href=&quot;#mdb79feea82146939d545fda76b9e905910&quot; role=&quot;tab&quot;&gt;app.component.ts&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
                &lt;div class=&quot;tab-content&quot;&gt;
                    &lt;div class=&quot;tab-pane fade active show&quot; id=&quot;mdb79feea82146939d545fda76b9e905910&quot; role=&quot;tabpanel&quot;&gt;
                        &lt;div class=&quot;code-toolbar&quot;&gt;
                            &lt;pre
                                class=&quot;grey lighten-3 px-3 mb-0 line-numbers  language-js&quot;&gt;&lt;code class=&quot; language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;addNewEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newEvent&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; any &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            time&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            subject&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;subjectInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            location&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;locationInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;descriptionInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;subjectInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;locationInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;descriptionInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;modal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
                            &lt;div class=&quot;toolbar&quot;&gt;
                                
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;&lt;!-- /.mdbsnippet --&gt;

            &lt;p&gt;As you probably already see our new functions does four things

            &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Creates a &lt;mark&gt;newEvent&lt;/mark&gt; object with values from the form&lt;/li&gt;
                &lt;li&gt;Adds the new object to the &lt;mark&gt;events&lt;/mark&gt; array &lt;/li&gt;
                &lt;li&gt;Clears the form's inputs&lt;/li&gt;
                &lt;li&gt;Hides modal&lt;/li&gt;

            &lt;/ol&gt;

            &lt;p&gt;&lt;/p&gt;

            &lt;li&gt;Update the button in a Modal Footer with call to &lt;mark&gt;addNewEvent()&lt;/mark&gt;&lt;/li&gt;

            &lt;!-- mdbsnippet --&gt;
            &lt;div class=&quot;docs-pills&quot;&gt;
                &lt;div class=&quot;d-flex justify-content-between&quot;&gt;
                    &lt;ul class=&quot;nav md-pills pills-grey&quot;&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;nav-link active show&quot; data-toggle=&quot;tab&quot;
                                href=&quot;#mdb53cad2dc0b560f4dce03be8100b3be8a&quot; role=&quot;tab&quot;&gt;app.component.html&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
                &lt;div class=&quot;tab-content&quot;&gt;
                    &lt;div class=&quot;tab-pane fade active show&quot; id=&quot;mdb53cad2dc0b560f4dce03be8100b3be8a&quot; role=&quot;tabpanel&quot;&gt;
                        &lt;div class=&quot;code-toolbar&quot;&gt;
                            &lt;pre
                                class=&quot;grey lighten-3 px-3 mb-0 line-numbers  language-js&quot;&gt;&lt;code class=&quot; language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button
          type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;
          mdbBtn
          color&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;info&quot;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;waves-effect&quot;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;click&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;addNewEvent()&quot;&lt;/span&gt;
          mdbWavesEffect
        &lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
          Add
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
                            &lt;div class=&quot;toolbar&quot;&gt;
                                
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;&lt;!-- /.mdbsnippet --&gt;

            &lt;li&gt;Save and test the app&lt;/li&gt;

            &lt;img class=&quot;img-fluid&quot;
                src=&quot;http://localhost:4000/img/angular/tutorials/agenda-app/10/final.gif&quot;
                alt=&quot;Add new event&quot;&gt;&lt;br&gt;



        &lt;/ol&gt;


    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/AgendaApp9&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="AgendaApp" /><category term="programming" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/angular/tutorials/agenda-app/10/final.gif" /></entry><entry><title type="html">1.Introduction to Python</title><link href="http://localhost:4000/blog/PythonIntro" rel="alternate" type="text/html" title="1.Introduction to Python" /><published>2019-09-24T00:00:00+05:30</published><updated>2019-09-24T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonIntro</id><content type="html" xml:base="http://localhost:4000/blog/PythonIntro">&lt;section class=&quot;Ptutorial1&quot;&gt;
    &lt;h1&gt;Python Overview&lt;/h1&gt;
    &lt;p&gt;Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be
        highly readable. It uses English keywords frequently where as other languages use punctuation, and it has fewer
        syntactical constructions than other languages.&lt;/p&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Python is Interpreted&lt;/b&gt; − Python is processed at runtime by the interpreter. You do not need to
                compile your program before executing it. This is similar to PERL and PHP.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Python is Interactive&lt;/b&gt; − You can actually sit at a Python prompt and interact with the interpreter
                directly to write your programs.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Python is Object-Oriented&lt;/b&gt; − Python supports Object-Oriented style or technique of programming that
                encapsulates code within objects.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Python is a Beginner's Language&lt;/b&gt; − Python is a great language for the beginner-level programmers
                and supports the development of a wide range of applications from simple text processing to WWW browsers
                to games.&lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;h2&gt;History of Python&lt;/h2&gt;
    &lt;p&gt;Python was developed by Guido van Rossum in the late eighties and early nineties at the National Research
        Institute for Mathematics and Computer Science in the Netherlands.&lt;/p&gt;
    &lt;p&gt;Python is derived from many other languages, including ABC, Modula-3, C, C++, Algol-68, SmallTalk, and Unix shell
        and other scripting languages.&lt;/p&gt;
    &lt;p&gt;Python is copyrighted. Like Perl, Python source code is now available under the GNU General Public License (GPL).
    &lt;/p&gt;
    &lt;p&gt;Python is now maintained by a core development team at the institute, although Guido van Rossum still holds a
        vital role in directing its progress.&lt;/p&gt;
    &lt;h2&gt;Python Features&lt;/h2&gt;
    &lt;p&gt;Python's features include −&lt;/p&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Easy-to-learn&lt;/b&gt; − Python has few keywords, simple structure, and a clearly defined syntax. This
                allows the student to pick up the language quickly.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Easy-to-read&lt;/b&gt; − Python code is more clearly defined and visible to the eyes.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Easy-to-maintain&lt;/b&gt; − Python's source code is fairly easy-to-maintain.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;A broad standard library&lt;/b&gt; − Python's bulk of the library is very portable and cross-platform
                compatible on UNIX, Windows, and Macintosh.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Interactive Mode&lt;/b&gt; − Python has support for an interactive mode which allows interactive testing and
                debugging of snippets of code.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Portable&lt;/b&gt; − Python can run on a wide variety of hardware platforms and has the same interface on
                all platforms.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Extendable&lt;/b&gt; − You can add low-level modules to the Python interpreter. These modules enable
                programmers to add to or customize their tools to be more efficient.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Databases&lt;/b&gt; − Python provides interfaces to all major commercial databases.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;GUI Programming&lt;/b&gt; − Python supports GUI applications that can be created and ported to many system
                calls, libraries and windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix.
            &lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Scalable&lt;/b&gt; − Python provides a better structure and support for large programs than shell scripting.
            &lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;Apart from the above-mentioned features, Python has a big list of good features, few are listed below −&lt;/p&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li&gt;
            &lt;p&gt;It supports functional and structured programming methods as well as OOP.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;It can be used as a scripting language or can be compiled to byte-code for building large applications.
            &lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;It provides very high-level dynamic data types and supports dynamic type checking.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;It supports automatic garbage collection.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.&lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonIntro&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonInstaller&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Overview Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be highly readable. It uses English keywords frequently where as other languages use punctuation, and it has fewer syntactical constructions than other languages. Python is Interpreted − Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP. Python is Interactive − You can actually sit at a Python prompt and interact with the interpreter directly to write your programs. Python is Object-Oriented − Python supports Object-Oriented style or technique of programming that encapsulates code within objects. Python is a Beginner's Language − Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games. History of Python Python was developed by Guido van Rossum in the late eighties and early nineties at the National Research Institute for Mathematics and Computer Science in the Netherlands. Python is derived from many other languages, including ABC, Modula-3, C, C++, Algol-68, SmallTalk, and Unix shell and other scripting languages. Python is copyrighted. Like Perl, Python source code is now available under the GNU General Public License (GPL). Python is now maintained by a core development team at the institute, although Guido van Rossum still holds a vital role in directing its progress. Python Features Python's features include − Easy-to-learn − Python has few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language quickly. Easy-to-read − Python code is more clearly defined and visible to the eyes. Easy-to-maintain − Python's source code is fairly easy-to-maintain. A broad standard library − Python's bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh. Interactive Mode − Python has support for an interactive mode which allows interactive testing and debugging of snippets of code. Portable − Python can run on a wide variety of hardware platforms and has the same interface on all platforms. Extendable − You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools to be more efficient. Databases − Python provides interfaces to all major commercial databases. GUI Programming − Python supports GUI applications that can be created and ported to many system calls, libraries and windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix. Scalable − Python provides a better structure and support for large programs than shell scripting. Apart from the above-mentioned features, Python has a big list of good features, few are listed below − It supports functional and structured programming methods as well as OOP. It can be used as a scripting language or can be compiled to byte-code for building large applications. It provides very high-level dynamic data types and supports dynamic type checking. It supports automatic garbage collection. It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java. Previous Lesson Next Lesson</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">3. Install Python and PyCharm</title><link href="http://localhost:4000/blog/PythonInstaller2" rel="alternate" type="text/html" title="3. Install Python and PyCharm" /><published>2019-09-24T00:00:00+05:30</published><updated>2019-09-24T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonInstaller2</id><content type="html" xml:base="http://localhost:4000/blog/PythonInstaller2">&lt;section class=&quot;Ptutorial3&quot;&gt;
    &lt;div class=&quot;page-header&quot;&gt;
        &lt;h2 itemprop=&quot;headline&quot;&gt; How to Install Python  &amp; Pycharm IDEon Windows  &lt;/h2&gt;
    &lt;/div&gt;
    
    &lt;div itemprop=&quot;articleBody&quot;&gt;
        &lt;p&gt;PyCharm is a cross-platform editor developed by JetBrains. Pycharm provides all the tools you need for
            productive Python development.&lt;/p&gt;
        &lt;p&gt;Below are the detailed steps for installing Python and PyCharm&lt;/p&gt;
        &lt;h2&gt;Installing Python&lt;/h2&gt;
        &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; To download and install Python visit the official website of Python
            http://www.python.org/downloads/ and choose your version. We have chosen Python version 3.6.3&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.1.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Python&quot; alt=&quot;How to Install Python on Windows&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.1.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; Once the download is complete, run the exe for install Python. Now click on Install
            Now.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.2.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Python&quot; alt=&quot;How to Install Python on Windows&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.2.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; You can see Python installing at this point.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.3.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Python&quot; alt=&quot;How to Install Python on Windows&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.3.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; When it finishes, you can see a screen that says the Setup was successful. Now click
            on &quot;Close&quot;.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.4.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Python&quot; alt=&quot;How to Install Python on Windows&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.4.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;h2&gt;Installing Pycharm&lt;/h2&gt;
        &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; To download PyCharm visit the website https://www.jetbrains.com/pycharm/download/
            and Click the &quot;DOWNLOAD&quot; link under the Community Section.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.5.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Pycharm&quot; alt=&quot;How to Install Python on Windows with Pycharm IDE&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.5.png&quot; width=&quot;80%&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; Once the download is complete, run the exe for install PyCharm. The setup wizard
            should have started. Click “Next”.&lt;/p&gt;
        &lt;div&gt;
            &lt;div id=&quot;div-gpt-ad-9092914-1&quot; data-google-query-id=&quot;CJrYp4L97-QCFRWT5godVuYBTA&quot;&gt;
                &lt;div id=&quot;google_ads_iframe_/24132379/guru99.com_728x90_0__container__&quot; style=&quot;border: 0pt none;&quot;&gt;
                    &lt;iframe id=&quot;google_ads_iframe_/24132379/guru99.com_728x90_0&quot; title=&quot;3rd party ad content&quot;
                        name=&quot;google_ads_iframe_/24132379/guru99.com_728x90_0&quot; width=&quot;728&quot; height=&quot;90&quot; scrolling=&quot;no&quot;
                        marginwidth=&quot;0&quot; marginheight=&quot;0&quot; frameborder=&quot;0&quot; srcdoc=&quot;&quot; data-google-container-id=&quot;2&quot;
                        style=&quot;border: 0px; vertical-align: bottom;&quot; data-load-complete=&quot;true&quot;&gt;&lt;/iframe&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.6.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Pycharm&quot; alt=&quot;How to Install Python on Windows with Pycharm IDE&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.6.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; On the next screen, Change the installation path if required. Click “Next”.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.7.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Pycharm&quot; alt=&quot;How to Install Python on Windows with Pycharm IDE&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.7.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; On the next screen, you can create a desktop shortcut if you want and click on
            “Next”.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.8.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Pycharm&quot; alt=&quot;How to Install Python on Windows with Pycharm IDE&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.8.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 5)&lt;/strong&gt; Choose the start menu folder. Keep selected JetBrains and click on “Install”.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.9.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Pycharm&quot; alt=&quot;How to Install Python on Windows with Pycharm IDE&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.9.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 6)&lt;/strong&gt; Wait for the installation to finish.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.10.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Pycharm&quot; alt=&quot;How to Install Python on Windows with Pycharm IDE&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.10.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 7)&lt;/strong&gt; Once installation finished, you should receive a message screen that PyCharm is
            installed. If you want to go ahead and run it, click the “Run PyCharm Community Edition” box first and click
            “Finish”.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.11.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Pycharm&quot; alt=&quot;How to Install Python on Windows with Pycharm IDE&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.11.png&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;&lt;strong&gt;Step 8) &lt;/strong&gt;After you click on &quot;Finish,&quot; the Following screen will appear.&lt;/p&gt;
        &lt;p style=&quot;text-align: center; &quot;&gt;
            &lt;a href=&quot;http://localhost:4000/img/python/tutorial/3/Python2.last.png&quot; class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;
                &lt;img title=&quot;How to Install Pycharm&quot; alt=&quot;How to Install Python on Windows with Pycharm IDE&quot;
                    src=&quot;http://localhost:4000/img/python/tutorial/3/Python2.last.png&quot; height=&quot;60%&quot; width=&quot;60%&quot;&gt;
            &lt;/a&gt;
        &lt;/p&gt;
        &lt;p id=&quot;slidetag&quot;&gt;&amp;nbsp;&lt;/p&gt;
    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonInstaller&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFirstProgram&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">How to Install Python &amp; Pycharm IDEon Windows PyCharm is a cross-platform editor developed by JetBrains. Pycharm provides all the tools you need for productive Python development. Below are the detailed steps for installing Python and PyCharm Installing Python Step 1) To download and install Python visit the official website of Python http://www.python.org/downloads/ and choose your version. We have chosen Python version 3.6.3 Step 2) Once the download is complete, run the exe for install Python. Now click on Install Now. Step 3) You can see Python installing at this point. Step 4) When it finishes, you can see a screen that says the Setup was successful. Now click on &quot;Close&quot;. Installing Pycharm Step 1) To download PyCharm visit the website https://www.jetbrains.com/pycharm/download/ and Click the &quot;DOWNLOAD&quot; link under the Community Section. Step 2) Once the download is complete, run the exe for install PyCharm. The setup wizard should have started. Click “Next”. Step 3) On the next screen, Change the installation path if required. Click “Next”. Step 4) On the next screen, you can create a desktop shortcut if you want and click on “Next”. Step 5) Choose the start menu folder. Keep selected JetBrains and click on “Install”. Step 6) Wait for the installation to finish. Step 7) Once installation finished, you should receive a message screen that PyCharm is installed. If you want to go ahead and run it, click the “Run PyCharm Community Edition” box first and click “Finish”. Step 8) After you click on &quot;Finish,&quot; the Following screen will appear. &amp;nbsp;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/python/tutorial/3/Python2.1.png" /></entry><entry><title type="html">2.Python - Environment Setup</title><link href="http://localhost:4000/blog/PythonInstaller" rel="alternate" type="text/html" title="2.Python - Environment Setup" /><published>2019-09-24T00:00:00+05:30</published><updated>2019-09-24T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonInstaller</id><content type="html" xml:base="http://localhost:4000/blog/PythonInstaller">&lt;section class=&quot;Ptutorial2&quot;&gt;
    &lt;h1&gt;Python - Environment Setup&lt;/h1&gt;
    &lt;p&gt;Python is available on a wide variety of platforms including Linux and Mac OS X. Let's understand how to set up
        our Python environment.&lt;/p&gt;
    &lt;h2&gt;Local Environment Setup&lt;/h2&gt;
    &lt;p&gt;Open a terminal window and type &quot;python&quot; to find out if it is already installed and which version is installed.
    &lt;/p&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li&gt;Unix (Solaris, Linux, FreeBSD, AIX, HP/UX, SunOS, IRIX, etc.)&lt;/li&gt;
        &lt;li&gt;Win 9x/NT/2000&lt;/li&gt;
        &lt;li&gt;Macintosh (Intel, PPC, 68K)&lt;/li&gt;
        &lt;li&gt;OS/2&lt;/li&gt;
        &lt;li&gt;DOS (multiple versions)&lt;/li&gt;
        &lt;li&gt;PalmOS&lt;/li&gt;
        &lt;li&gt;Nokia mobile phones&lt;/li&gt;
        &lt;li&gt;Windows CE&lt;/li&gt;
        &lt;li&gt;Acorn/RISC OS&lt;/li&gt;
        &lt;li&gt;BeOS&lt;/li&gt;
        &lt;li&gt;Amiga&lt;/li&gt;
        &lt;li&gt;VMS/OpenVMS&lt;/li&gt;
        &lt;li&gt;QNX&lt;/li&gt;
        &lt;li&gt;VxWorks&lt;/li&gt;
        &lt;li&gt;Psion&lt;/li&gt;
        &lt;li&gt;Python has also been ported to the Java and .NET virtual machines&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h2&gt;Getting Python&lt;/h2&gt;
    &lt;p&gt;The most up-to-date and current source code, binaries, documentation, news, etc., is available on the &lt;strong&gt;  official
        website of Python &lt;a href=&quot;https://www.python.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://www.python.org/&lt;/a&gt;&lt;/strong&gt;
    &lt;/p&gt;
    &lt;p&gt;You can download &lt;strong&gt;Python documentation from &lt;a href=&quot;https://www.python.org/doc/&quot; target=&quot;_blank&quot;
            rel=&quot;nofollow&quot;&gt;https://www.python.org/doc/&lt;/a&gt; &lt;/strong&gt;. The documentation is available in HTML, PDF, and PostScript
        formats.&lt;/p&gt;
    &lt;h2&gt;Installing Python&lt;/h2&gt;
    &lt;p&gt;Python distribution is available for a wide variety of platforms. You need to download only the binary code
        applicable for your platform and install Python.&lt;/p&gt;
    &lt;p&gt;If the binary code for your platform is not available, you need a C compiler to compile the source code manually.
        Compiling the source code offers more flexibility in terms of choice of features that you require in your
        installation.&lt;/p&gt;
        &lt;p&gt;Here is a quick overview of installing Python on various platforms −&lt;/p&gt;
        &lt;div class=&quot;nav-tabs&quot;&gt;
                &lt;div class=&quot;tabs-wrapper&quot;&gt;
                    &lt;ul class=&quot;nav nav-tabs&quot; role=&quot;tablist&quot;&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;
                            &lt;a class=&quot;nav-link waves-light active waves-effect waves-light&quot; data-toggle=&quot;tab&quot; href=&quot;#panel11&quot;
                                role=&quot;tab&quot;&gt;&lt;i class=&quot;fab fa-windows fa-2x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;br&gt; Windows&lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;
                            &lt;a class=&quot;nav-link waves-light waves-effect waves-light&quot; data-toggle=&quot;tab&quot; href=&quot;#panel12&quot;
                                role=&quot;tab&quot;&gt;&lt;i class=&quot;fab fa-apple fa-2x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;br&gt; macOS&lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;
                            &lt;a class=&quot;nav-link waves-light waves-effect waves-light&quot; data-toggle=&quot;tab&quot; href=&quot;#panel13&quot;
                                role=&quot;tab&quot;&gt;&lt;i class=&quot;fab fa-linux fa-2x&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;br&gt; Linux&lt;/a&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
                &lt;!-- Tab panels --&gt;
                &lt;div class=&quot;tab-content card my-2&quot; style=&quot;background-color: black;color:white&quot;&gt;
                    &lt;!--Panel 1--&gt;
                    &lt;div class=&quot;tab-pane fade in show active mx-4&quot; id=&quot;panel11&quot; role=&quot;tabpanel&quot;&gt;
                            &lt;h3&gt;Windows Installation&lt;/h3&gt;
                            &lt;p&gt;Here are the steps to install Python on Windows machine.&lt;/p&gt;
                            &lt;ul class=&quot;list&quot;&gt;
                                &lt;li&gt;
                                    &lt;p&gt;Open a Web browser and go to &lt;a href=&quot;https://www.python.org/downloads/&quot; target=&quot;_blank&quot;
                                            rel=&quot;nofollow&quot;&gt;https://www.python.org/downloads/&lt;/a&gt;.&lt;/p&gt;
                                &lt;/li&gt;
                                &lt;li&gt;
                                    &lt;p&gt;Follow the link for the Windows installer &lt;i&gt;python-XYZ.msi&lt;/i&gt; file where XYZ is the version you need to
                                        install.&lt;/p&gt;
                                &lt;/li&gt;
                                &lt;li&gt;
                                    &lt;p&gt;To use this installer &lt;i&gt;python-XYZ.msi&lt;/i&gt;, the Windows system must support Microsoft Installer 2.0.
                                        Save the installer file to your local machine and then run it to find out if your machine supports MSI.
                                    &lt;/p&gt;
                                &lt;/li&gt;
                                &lt;li&gt;
                                    &lt;p&gt;Run the downloaded file. This brings up the Python install wizard, which is really easy to use. Just
                                        accept the default settings, wait until the install is finished, and you are done.&lt;/p&gt;
                                &lt;/li&gt;
                            &lt;/ul&gt;
                    &lt;/div&gt;
                    &lt;!--/.Panel 1--&gt;
                    &lt;!--Panel 2--&gt;
                    &lt;div class=&quot;tab-pane fade mx-4&quot; id=&quot;panel12&quot; role=&quot;tabpanel&quot;&gt;
                            &lt;h3&gt;Macintosh Installation&lt;/h3&gt;
                            &lt;p&gt;Recent Macs come with Python installed, but it may be several years out of date. See &lt;a
                                    href=&quot;https://www.python.org/download/mac/&quot; target=&quot;_blank&quot;
                                    rel=&quot;nofollow&quot;&gt;http://www.python.org/download/mac/&lt;/a&gt; for instructions on getting the current version along
                                with extra tools to support development on the Mac. For older Mac OS's before Mac OS X 10.3 (released in 2003),
                                MacPython is available.&lt;/p&gt;
                            &lt;p&gt;Jack Jansen maintains it and you can have full access to the entire documentation at his website − &lt;a
                                    href=&quot;http://www.cwi.nl/~jack/macpython.html&quot; target=&quot;_blank&quot;
                                    rel=&quot;nofollow&quot;&gt;http://www.cwi.nl/~jack/macpython.html&lt;/a&gt;. You can find complete installation details for
                                Mac OS installation.&lt;/p&gt;
                    &lt;/div&gt;
                    &lt;!--/.Panel 2--&gt;
                    &lt;!--Panel 3--&gt;
                    &lt;div class=&quot;tab-pane fade mx-4&quot; id=&quot;panel13&quot; role=&quot;tabpanel&quot;&gt;
                            &lt;h3&gt;Unix and Linux Installation&lt;/h3&gt;
                            &lt;p&gt;Here are the simple steps to install Python on Unix/Linux machine.&lt;/p&gt;
                            &lt;ul class=&quot;list&quot;&gt;
                                &lt;li&gt;
                                    &lt;p&gt;Open a Web browser and go to &lt;a href=&quot;https://www.python.org/downloads/&quot; target=&quot;_blank&quot;
                                            rel=&quot;nofollow&quot;&gt;https://www.python.org/downloads/&lt;/a&gt;.&lt;/p&gt;
                                &lt;/li&gt;
                                &lt;li&gt;
                                    &lt;p&gt;Follow the link to download zipped source code available for Unix/Linux.&lt;/p&gt;
                                &lt;/li&gt;
                                &lt;li&gt;
                                    &lt;p&gt;Download and extract files.&lt;/p&gt;
                                &lt;/li&gt;
                                &lt;li&gt;
                                    &lt;p&gt;Editing the &lt;i&gt;Modules/Setup&lt;/i&gt; file if you want to customize some options.&lt;/p&gt;
                                &lt;/li&gt;
                                &lt;li&gt;
                                    &lt;p&gt;run ./configure script&lt;/p&gt;
                                &lt;/li&gt;
                                &lt;li&gt;
                                    &lt;p&gt;make&lt;/p&gt;
                                &lt;/li&gt;
                                &lt;li&gt;
                                    &lt;p&gt;make install&lt;/p&gt;
                                &lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;This installs Python at standard location &lt;i&gt;/usr/local/bin&lt;/i&gt; and its libraries at
                                &lt;i&gt;/usr/local/lib/pythonXX&lt;/i&gt; where XX is the version of Python.&lt;/p&gt;
                    &lt;/div&gt;
                    &lt;!--/.Panel 3--&gt;
                &lt;/div&gt;
            &lt;/div&gt;
    
        
    
    &lt;h2&gt;Setting up PATH&lt;/h2&gt;
    &lt;p&gt;Programs and other executable files can be in many directories, so operating systems provide a search path that
        lists the directories that the OS searches for executables.&lt;/p&gt;
    &lt;p&gt;The path is stored in an environment variable, which is a named string maintained by the operating system. This
        variable contains information available to the command shell and other programs.&lt;/p&gt;
    &lt;p&gt;The &lt;b&gt;path&lt;/b&gt; variable is named as PATH in Unix or Path in Windows (Unix is case sensitive; Windows is not).
    &lt;/p&gt;
    &lt;p&gt;In Mac OS, the installer handles the path details. To invoke the Python interpreter from any particular
        directory, you must add the Python directory to your path.&lt;/p&gt;
    &lt;h2&gt;Setting path at Unix/Linux&lt;/h2&gt;
    &lt;p&gt;To add the Python directory to the path for a particular session in Unix −&lt;/p&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;In the csh shell&lt;/b&gt; − type setenv PATH &quot;$PATH:/usr/local/bin/python&quot; and press Enter.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;In the bash shell (Linux)&lt;/b&gt; − type export PATH=&quot;$PATH:/usr/local/bin/python&quot; and press Enter.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;In the sh or ksh shell&lt;/b&gt; − type PATH=&quot;$PATH:/usr/local/bin/python&quot; and press Enter.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Note&lt;/b&gt; − /usr/local/bin/python is the path of the Python directory&lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;h2&gt;Setting path at Windows&lt;/h2&gt;
    &lt;p&gt;To add the Python directory to the path for a particular session in Windows −&lt;/p&gt;
    &lt;p&gt;&lt;b&gt;At the command prompt&lt;/b&gt; − type path %path%;C:\Python and press Enter.&lt;/p&gt;
    &lt;p&gt;&lt;b&gt;Note&lt;/b&gt; − C:\Python is the path of the Python directory&lt;/p&gt;
    &lt;h2&gt;Python Environment Variables&lt;/h2&gt;
    &lt;p&gt;Here are important environment variables, which can be recognized by Python −&lt;/p&gt;
    &lt;table class=&quot;table table-bordered&quot;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;th style=&quot;text-align:center;&quot;&gt;&lt;p&gt;&lt;b&gt;Sr.No.&lt;/b&gt;&lt;/p&gt;&lt;/th&gt;
                &lt;th style=&quot;text-align:center;&quot;&gt;&lt;p&gt;&lt;b&gt;Variable &amp;amp; Description&lt;p&gt;&lt;/b&gt;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;1&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;PYTHONPATH&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;It has a role similar to PATH. This variable tells the Python interpreter where to locate the
                        module files imported into a program. It should include the Python source library directory and
                        the directories containing Python source code. PYTHONPATH is sometimes preset by the Python
                        installer.&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;2&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;PYTHONSTARTUP&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;It contains the path of an initialization file containing Python source code. It is executed
                        every time you start the interpreter. It is named as .pythonrc.py in Unix and it
                        contains commands that load utilities or modify PYTHONPATH.&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;3&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;PYTHONCASEOK&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;It is used in Windows to instruct Python to find the first case-insensitive match in an import
                        statement. Set this variable to any value to activate it.&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;4&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;PYTHONHOME&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;It is an alternative module search path. It is usually embedded in the PYTHONSTARTUP or
                        PYTHONPATH directories to make switching module libraries easy.&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h2&gt;Running Python&lt;/h2&gt;
    &lt;p&gt;There are three different ways to start Python −&lt;/p&gt;
    &lt;h3&gt;Interactive Interpreter&lt;/h3&gt;
    &lt;p&gt;You can start Python from Unix, DOS, or any other system that provides you a command-line interpreter or shell
        window.&lt;/p&gt;
    &lt;p&gt;Enter &lt;b&gt;python&lt;/b&gt; the command line.&lt;/p&gt;
    &lt;p&gt;Start coding right away in the interactive interpreter.&lt;/p&gt;
    &lt;pre class=&quot;code-toolbar&quot;&gt;&lt;code class=&quot; language-php&quot;&gt;
        $python # Unix/Linux
        or
        python% # Unix/Linux
        or
        C:&amp;gt; python # Windows/DOS
    &lt;/code&gt;
        &lt;/pre&gt;
    &lt;p&gt;Here is the list of all the available command line options −&lt;/p&gt;
    &lt;table class=&quot;table table-bordered&quot;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;th style=&quot;text-align:center;&quot;&gt;&lt;p&gt;&lt;b&gt;Sr.No.&lt;/b&gt;&lt;/p&gt;&lt;/th&gt;
                &lt;th style=&quot;text-align:center;&quot;&gt;&lt;p&gt;&lt;b&gt;Option &amp;amp; Description&lt;/b&gt;&lt;/p&gt;&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;1&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;-d&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;It provides debug output.&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;2&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;-O&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;It generates optimized bytecode (resulting in .pyo files).&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;3&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;-S&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;Do not run import site to look for Python paths on startup.&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;4&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;-v&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;verbose output (detailed trace on import statements).&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;5&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;-X&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;disable class-based built-in exceptions (just use strings); obsolete starting with version 1.6.
                    &lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;6&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;-c cmd&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;run Python script sent in as cmd string&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;ts&quot;&gt;7&lt;/td&gt;
                &lt;td&gt;
                    &lt;p&gt;&lt;b&gt;file&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;run Python script from given file&lt;/p&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h3&gt;Script from the Command-line&lt;/h3&gt;
    &lt;p&gt;A Python script can be executed at command line by invoking the interpreter on your application, as in the
        following −&lt;/p&gt;
    &lt;pre class=&quot;code-toolbar&quot;&gt;
        $python script.py # Unix/Linux
        
        or
        
        python% script.py # Unix/Linux
        
        or 
        
        C: &amp;gt;python script.py # Windows/DOS
        &lt;/pre&gt;
    &lt;p&gt;&lt;b&gt;Note&lt;/b&gt; − Be sure the file permission mode allows execution.&lt;/p&gt;
    &lt;h3&gt;Integrated Development Environment&lt;/h3&gt;
    &lt;p&gt;You can run Python from a Graphical User Interface (GUI) environment as well, if you have a GUI application on
        your system that supports Python.&lt;/p&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Unix&lt;/b&gt; − IDLE is the very first Unix IDE for Python.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Windows&lt;/b&gt; − PythonWin is the first Windows interface for Python and is an IDE with a GUI.&lt;/p&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;p&gt;&lt;b&gt;Macintosh&lt;/b&gt; − The Macintosh version of Python along with the IDLE IDE is available from the main
                website, downloadable as either MacBinary or BinHex'd files.&lt;/p&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;If you are not able to set up the environment properly, then you can take help from your system admin. Make sure
        the Python environment is properly set up and working perfectly fine.&lt;/p&gt;
    &lt;p&gt;&lt;b&gt;Note&lt;/b&gt; − All the examples given in subsequent chapters are executed with Python 2.4.3 version available on
        CentOS flavor of Linux.&lt;/p&gt;
    &lt;p&gt;We already have set up Python Programming environment online, so that you can execute all the available examples
        online at the same time when you are learning theory. Feel free to modify any example and execute it online.&lt;/p&gt;
    
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonIntro&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Installerlesson2&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python - Environment Setup Python is available on a wide variety of platforms including Linux and Mac OS X. Let's understand how to set up our Python environment. Local Environment Setup Open a terminal window and type &quot;python&quot; to find out if it is already installed and which version is installed. Unix (Solaris, Linux, FreeBSD, AIX, HP/UX, SunOS, IRIX, etc.) Win 9x/NT/2000 Macintosh (Intel, PPC, 68K) OS/2 DOS (multiple versions) PalmOS Nokia mobile phones Windows CE Acorn/RISC OS BeOS Amiga VMS/OpenVMS QNX VxWorks Psion Python has also been ported to the Java and .NET virtual machines Getting Python The most up-to-date and current source code, binaries, documentation, news, etc., is available on the official website of Python https://www.python.org/ You can download Python documentation from https://www.python.org/doc/ . The documentation is available in HTML, PDF, and PostScript formats. Installing Python Python distribution is available for a wide variety of platforms. You need to download only the binary code applicable for your platform and install Python. If the binary code for your platform is not available, you need a C compiler to compile the source code manually. Compiling the source code offers more flexibility in terms of choice of features that you require in your installation. Here is a quick overview of installing Python on various platforms − Windows macOS Linux Windows Installation Here are the steps to install Python on Windows machine. Open a Web browser and go to https://www.python.org/downloads/. Follow the link for the Windows installer python-XYZ.msi file where XYZ is the version you need to install. To use this installer python-XYZ.msi, the Windows system must support Microsoft Installer 2.0. Save the installer file to your local machine and then run it to find out if your machine supports MSI. Run the downloaded file. This brings up the Python install wizard, which is really easy to use. Just accept the default settings, wait until the install is finished, and you are done. Macintosh Installation Recent Macs come with Python installed, but it may be several years out of date. See http://www.python.org/download/mac/ for instructions on getting the current version along with extra tools to support development on the Mac. For older Mac OS's before Mac OS X 10.3 (released in 2003), MacPython is available. Jack Jansen maintains it and you can have full access to the entire documentation at his website − http://www.cwi.nl/~jack/macpython.html. You can find complete installation details for Mac OS installation. Unix and Linux Installation Here are the simple steps to install Python on Unix/Linux machine. Open a Web browser and go to https://www.python.org/downloads/. Follow the link to download zipped source code available for Unix/Linux. Download and extract files. Editing the Modules/Setup file if you want to customize some options. run ./configure script make make install This installs Python at standard location /usr/local/bin and its libraries at /usr/local/lib/pythonXX where XX is the version of Python. Setting up PATH Programs and other executable files can be in many directories, so operating systems provide a search path that lists the directories that the OS searches for executables. The path is stored in an environment variable, which is a named string maintained by the operating system. This variable contains information available to the command shell and other programs. The path variable is named as PATH in Unix or Path in Windows (Unix is case sensitive; Windows is not). In Mac OS, the installer handles the path details. To invoke the Python interpreter from any particular directory, you must add the Python directory to your path. Setting path at Unix/Linux To add the Python directory to the path for a particular session in Unix − In the csh shell − type setenv PATH &quot;$PATH:/usr/local/bin/python&quot; and press Enter. In the bash shell (Linux) − type export PATH=&quot;$PATH:/usr/local/bin/python&quot; and press Enter. In the sh or ksh shell − type PATH=&quot;$PATH:/usr/local/bin/python&quot; and press Enter. Note − /usr/local/bin/python is the path of the Python directory Setting path at Windows To add the Python directory to the path for a particular session in Windows − At the command prompt − type path %path%;C:\Python and press Enter. Note − C:\Python is the path of the Python directory Python Environment Variables Here are important environment variables, which can be recognized by Python − Sr.No. Variable &amp;amp; Description 1 PYTHONPATH It has a role similar to PATH. This variable tells the Python interpreter where to locate the module files imported into a program. It should include the Python source library directory and the directories containing Python source code. PYTHONPATH is sometimes preset by the Python installer. 2 PYTHONSTARTUP It contains the path of an initialization file containing Python source code. It is executed every time you start the interpreter. It is named as .pythonrc.py in Unix and it contains commands that load utilities or modify PYTHONPATH. 3 PYTHONCASEOK It is used in Windows to instruct Python to find the first case-insensitive match in an import statement. Set this variable to any value to activate it. 4 PYTHONHOME It is an alternative module search path. It is usually embedded in the PYTHONSTARTUP or PYTHONPATH directories to make switching module libraries easy. Running Python There are three different ways to start Python − Interactive Interpreter You can start Python from Unix, DOS, or any other system that provides you a command-line interpreter or shell window. Enter python the command line. Start coding right away in the interactive interpreter. $python # Unix/Linux or python% # Unix/Linux or C:&amp;gt; python # Windows/DOS Here is the list of all the available command line options − Sr.No. Option &amp;amp; Description 1 -d It provides debug output. 2 -O It generates optimized bytecode (resulting in .pyo files). 3 -S Do not run import site to look for Python paths on startup. 4 -v verbose output (detailed trace on import statements). 5 -X disable class-based built-in exceptions (just use strings); obsolete starting with version 1.6. 6 -c cmd run Python script sent in as cmd string 7 file run Python script from given file Script from the Command-line A Python script can be executed at command line by invoking the interpreter on your application, as in the following − $python script.py # Unix/Linux or python% script.py # Unix/Linux or C: &amp;gt;python script.py # Windows/DOS Note − Be sure the file permission mode allows execution. Integrated Development Environment You can run Python from a Graphical User Interface (GUI) environment as well, if you have a GUI application on your system that supports Python. Unix − IDLE is the very first Unix IDE for Python. Windows − PythonWin is the first Windows interface for Python and is an IDE with a GUI. Macintosh − The Macintosh version of Python along with the IDLE IDE is available from the main website, downloadable as either MacBinary or BinHex'd files. If you are not able to set up the environment properly, then you can take help from your system admin. Make sure the Python environment is properly set up and working perfectly fine. Note − All the examples given in subsequent chapters are executed with Python 2.4.3 version available on CentOS flavor of Linux. We already have set up Python Programming environment online, so that you can execute all the available examples online at the same time when you are learning theory. Feel free to modify any example and execute it online. Previous Lesson Next Lesson</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry></feed>