<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-16T05:29:25+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">Design Patterns For Beginners - with Java Examples</title><link href="http://localhost:4000/blog/SwDesignLesson8" rel="alternate" type="text/html" title="Design Patterns For Beginners - with Java Examples" /><published>2019-10-15T09:32:00+00:00</published><updated>2019-10-15T09:32:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson8</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson8">&lt;p&gt;In this guide, we give you an introduction to the world of design patterns.For each pattern, we understand 1) the pattern a2) the context in which it is applicable -  with a real-world example.&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What are Design Patterns?&lt;/li&gt;
  &lt;li&gt;Why do you use Design Patterns?&lt;/li&gt;
  &lt;li&gt;What are the different types of Design Patterns?&lt;/li&gt;
  &lt;li&gt;When do you use Design Patterns?&lt;/li&gt;
  &lt;li&gt;How do you implement different Design Patterns in Java?&lt;/li&gt;
  &lt;li&gt;What are the real world examples for Design Patterns?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-are-design-patterns&quot;&gt;What Are Design Patterns?&lt;/h3&gt;

&lt;p&gt;We have been building object-oriented software for over 40 years now, starting with Smalltalk, which was the first object-oriented language.&lt;/p&gt;

&lt;p&gt;The programming world has encountered a large number of problems, and a variety of solution have been proposed to tackle them.&lt;/p&gt;

&lt;p&gt;An attempt was made by a group of four people, famously called the “Gang-Of-Four” or GoF, to come up with a set of common problems and solutions for them, in the given context.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This catalog of common problems and their solutions is labeled as GOF (Gang of Four) Design Patterns.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;why-design-patterns&quot;&gt;Why Design Patterns?&lt;/h3&gt;

&lt;p&gt;The advantages of design patterns are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To provide standard terminology that everybody understands&lt;/li&gt;
  &lt;li&gt;Not to repeat the same mistakes over and over again&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-are-the-types-of-design-patterns&quot;&gt;What Are The Types Of Design Patterns?&lt;/h3&gt;

&lt;p&gt;The design patterns we talk about here, are from the perspective of an object-oriented world. There are mainly three different kinds of design patterns:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creational Patterns&lt;/li&gt;
  &lt;li&gt;Structural Patterns&lt;/li&gt;
  &lt;li&gt;Behavioral Patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;creational&quot;&gt;Creational&lt;/h4&gt;

&lt;p&gt;Creational patterns deal with the creation of objects.&lt;/p&gt;

&lt;h4 id=&quot;structural&quot;&gt;Structural&lt;/h4&gt;

&lt;p&gt;Structural patterns deal with the composition of objects.&lt;/p&gt;

&lt;p&gt;It deals with questions such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What does a class contain?&lt;/li&gt;
  &lt;li&gt;What are the relationships of a class with other classes? Is it inheritance or composition?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;behavioral&quot;&gt;Behavioral&lt;/h4&gt;

&lt;p&gt;Behavioral patterns focus more on the behavior of objects, or more precisely, interactions between objects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How does an object communicate with another object?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;exploring-creational-design-patterns&quot;&gt;Exploring Creational Design Patterns&lt;/h3&gt;

&lt;p&gt;We explore the following creational design patterns:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-prototype-pattern&quot;&gt;The Prototype Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Prototype represents a fully initialized instance, to be copied or cloned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s take an example:&lt;/p&gt;

&lt;p&gt;Let’s consider the design of a Chess game. Every game of Chess has the same initial setup - The King, Queen, Rook, Bishop, Knight and the Pawns all have their specific places. Let’s say we want to build software to model a Chess game.&lt;/p&gt;

&lt;p&gt;Every time a new Chess game is played, we need to create the initial board layout.&lt;/p&gt;

&lt;p&gt;Instead of repeating the creation of chess board each time&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We can create an object that contains the initial setup&lt;/li&gt;
  &lt;li&gt;Clone from it - each time a new Chess game is played.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The object with the initial setup of the chess board is the prototype. And, we are using the prototype pattern.&lt;/p&gt;

&lt;p&gt;Isn’t it simple?&lt;/p&gt;

&lt;p&gt;In the Prototype pattern, you have a fully initialized instance - here, the initial board layout - that is readily available.&lt;/p&gt;

&lt;p&gt;Whenever a new Chess game is started - for example, in any of the numerous online Chess portals - this initialized instance is merely copied, or cloned.&lt;/p&gt;

&lt;h4 id=&quot;the-builder-pattern&quot;&gt;The Builder Pattern&lt;/h4&gt;

&lt;p&gt;The Builder Pattern separates object construction from its representation. What does that mean?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-05.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Assume that you go out for a multi-course dinner to a Restaurant. Such a dinner would have many options, such as Starters, Main course and Desserts. You would probably choose two or three out of the presented options. A particular client may want to have dinner with the first two options only, leaving out the Desserts option. Yet another would prefer the Main course and Desserts, skipping the Starters entirely.&lt;/p&gt;

&lt;p&gt;Similar situations might arise in designing software. You may need to build an object using a subset of the options that are available - or, create the object in multiple ways. This is where the Builder pattern comes in handy.&lt;/p&gt;

&lt;p&gt;To understand it further, let’s look at a small piece of code.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuilderPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sugar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;milk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sugar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;milk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Coffee [type=%s, sugar=%s, milk=%s, size=%s]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Coffee&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BuilderPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mocha&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;milk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Large&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coffee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say you’re writing software for a machine that prepares coffee. The main ingredients of coffee are coffee, milk and sugar.&lt;/p&gt;

&lt;p&gt;Depending from which part of the world you are from, you choose whether or not you have sugar and milk.&lt;/p&gt;

&lt;p&gt;The Builder pattern steps in to provide these Coffee creation options for you.&lt;/p&gt;

&lt;p&gt;Have a look at the code inside &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What we have inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;Coffee&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Builder&lt;/code&gt;, to which we pass the &lt;em&gt;mandatory&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; of the coffee.  Chained to that call, we make other calls adding in our preferences of the other ingredients.&lt;/p&gt;

&lt;p&gt;Someone else who wants a different coffee can easily build it. This leads to a huge amount of flexibility in building objects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Other approaches to solving this problem, such as the use of setters, have many inherent problems. These solutions lead to code that is difficult to read, and also behave erratically in multithreaded programs. The Builder pattern solves all those problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The advantages of using the Builder pattern are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It simplifies object creation&lt;/li&gt;
  &lt;li&gt;Leads to more readable code&lt;/li&gt;
  &lt;li&gt;Does not allow the values to be modified&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-singleton-pattern&quot;&gt;The Singleton Pattern&lt;/h4&gt;

&lt;p&gt;The Singleton pattern is the most famous among all the design patterns. What this pattern does is very clear from its name - allow only one instance of a class per JVM at any point in time.&lt;/p&gt;

&lt;p&gt;A good real-world comparison would probably be the President of a Nation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-06.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there is a disclaimer here - there can only be one instance of that class, &lt;strong&gt;per JVM&lt;/strong&gt;. If you have a Java application that runs as part of a cluster of application servers, each server runs a separate JVM instance. Therefore, you are allowed to have one instance of the Singleton created on each application server, at any given point of time.&lt;/p&gt;

&lt;p&gt;There are a few things to remember whenever you create a Singleton class.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The constructor needs to be &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, to prevent the possibility of other objects creating instances of your class.&lt;/li&gt;
  &lt;li&gt;In Java, build a Singleton using a &lt;code class=&quot;highlighter-rouge&quot;&gt;Enum&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;JEE 7 has a built-in annotation named &lt;code class=&quot;highlighter-rouge&quot;&gt;@Singleton&lt;/code&gt;, along with other related annotations.&lt;/li&gt;
  &lt;li&gt;The main disadvantage of using the Singleton pattern is that the resulting code is difficult to unit test. Make a clear decision as to where you absolutely need to use a Singleton, and where you don’t.&lt;/li&gt;
  &lt;li&gt;In frameworks such as Spring, the objects that are managed are called beans, and beans are Singletons by default. What Spring does well is to ensure all this is in the background.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-factory-method-pattern&quot;&gt;The Factory Method Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-07.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The intent of the Factory Method pattern is to create a family of object types. Let’s look at a code example.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactoryPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// So on&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Male&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Female&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Miss/Mrs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;male&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Robinhood&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;female&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mary&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;female&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNameAndSalutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code implements a &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt;. This class has a static method named &lt;code class=&quot;highlighter-rouge&quot;&gt;getPerson()&lt;/code&gt; that accepts a person’s name and gender as parameters. Depending on the gender &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; passed in, it either returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;Male&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;Female&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If somebody wants to create a male person, they invoke the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPerson()&lt;/code&gt; method on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt; with a gender argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;M&quot;&lt;/code&gt;. Similarly, you can create a female person by invoking the &lt;code class=&quot;highlighter-rouge&quot;&gt;getPerson()&lt;/code&gt; method on the &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt; with a gender argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;F&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are passing in an  identifier of the type of object we need, at the time of creation, while still referring to the generic type, &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Male&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Female&lt;/code&gt; classes are hidden behind the &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt; implementation.&lt;/p&gt;

&lt;p&gt;The advantage of using the Abstract Method pattern is that you can add additional types to the factory, without much change in the other classes using this class. In our example, you can add more types of gender, without affecting the existing code that deals with other genders, which all use &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What about the complexity involved in creating an object?&lt;/p&gt;

&lt;p&gt;It greatly simplifies the task of object creation. The &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonFactory&lt;/code&gt; makes the decision of what object to create, and delivers it to us.&lt;/p&gt;

&lt;h3 id=&quot;structural-design-patterns&quot;&gt;Structural Design Patterns&lt;/h3&gt;

&lt;p&gt;Let us now have a look at the structural design patterns we want to explore.&lt;/p&gt;

&lt;h4 id=&quot;the-proxy-pattern&quot;&gt;The Proxy Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-08.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Proxy is an object that represents another object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s look at a real-world example.&lt;/p&gt;

&lt;p&gt;Your debit card is a proxy for your bank account.  Whenever you make a transaction using a debit card, the corresponding money is deducted from the bank account.&lt;/p&gt;

&lt;p&gt;The debit card is a proxy for your bank account, which is the actual object.&lt;/p&gt;

&lt;p&gt;Similar to that, in programming, you might have to program interactions with remote objects. In such situations, you create a proxy object that takes care of all external communications. You would communicate with the proxy as if it were residing on your local machine.&lt;/p&gt;

&lt;p&gt;Good examples are the EJB Home and Remote interfaces.&lt;/p&gt;

&lt;p&gt;A proxy hides the complexity involved in communicating with the real object.&lt;/p&gt;

&lt;h4 id=&quot;the-decorator-pattern&quot;&gt;The Decorator Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Decorator pattern allows us to add responsibilities to objects, dynamically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-09.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In object-oriented programming, we typically use a lot of inheritance.&lt;/p&gt;

&lt;h5 id=&quot;example-1&quot;&gt;Example 1&lt;/h5&gt;

&lt;p&gt;Let’s say a particular Pizza outlet has ten types of pizza. Our implementation has ten classes for these Pizza types.&lt;/p&gt;

&lt;p&gt;Now there is a requirement to make these pizzas available with three types of toppings. If we would want to create individual classes for each pizza and topping combination, we have a total of 30 classes to manage.&lt;/p&gt;

&lt;p&gt;Instead of doing this, can we make the pizza-topping relationship dynamic? Can we add a topping on top of an existing pizza?&lt;/p&gt;

&lt;p&gt;We need to use a topping as a decorator on top of any pizza.&lt;/p&gt;

&lt;h5 id=&quot;example-2&quot;&gt;Example 2&lt;/h5&gt;

&lt;p&gt;Another example would be adding a discount on a pizza order.&lt;/p&gt;

&lt;p&gt;Let’s say, you have an order, and based on some criteria, you want to offer a discount to the customer. There might be a variety of discounts which might be applicable at different times. If you add a different type of a discount to every kind of order, then in a static relationship, you need to maintain hundreds of classes.&lt;/p&gt;

&lt;p&gt;Treating a discount as a decorator on order makes the relationship dynamic.&lt;/p&gt;

&lt;h5 id=&quot;example-3&quot;&gt;Example 3&lt;/h5&gt;

&lt;p&gt;A perfect example where the Decorator pattern is implemented in Java is the Java I/O packages. This is reflected in the way we create an input stream in an I/O program:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LineNumberInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You have a &lt;code class=&quot;highlighter-rouge&quot;&gt;FileInputStream&lt;/code&gt;. If you want to make it buffered, then add a decorator to it in the form of a &lt;code class=&quot;highlighter-rouge&quot;&gt;BufferedInputStream&lt;/code&gt;. If you want the buffered &lt;code class=&quot;highlighter-rouge&quot;&gt;FileInputStream&lt;/code&gt; to have line numbers also, then add a decorator for a &lt;code class=&quot;highlighter-rouge&quot;&gt;LineNumberInputStream&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;summary&quot;&gt;Summary&lt;/h5&gt;

&lt;p&gt;Decorator Pattern enables you to add behavior to existing objects, at run time. This allows the user of the interface to decide, how he/she wants to create the objects.&lt;/p&gt;

&lt;p&gt;The drawback of this approach is the complexity involved in creating objects. The user needs to understand a lot of classes and their relationships before being able to use the power of the Decorator.&lt;/p&gt;

&lt;h4 id=&quot;the-facade-pattern&quot;&gt;The Facade Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-10.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Facade is a single class that represents an entire subsystem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s take the example of an event manager. An event manager is a go-to person when you want to organize an event. He/She would handle several aspects of an event such as the decorations, the food, sending out invitations to guests, the music arrangements, and similar things.  The event manager acts as the facade of the event organization subsystem.&lt;/p&gt;

&lt;p&gt;Consider the case of a distributed system. You typically have the need for multiple calls, across layers.&lt;/p&gt;

&lt;p&gt;Take for instance, a system that offers the service for online book orders. Whenever an order comes in, several things need to be taken care of, such as checking for the stock, reserving the order, accepting the payment, updating the stock, and generating the invoice.&lt;/p&gt;

&lt;p&gt;We can create a single facade, such as the order interface, which would manage all incoming orders and provide an interface to the customer.&lt;/p&gt;

&lt;p&gt;The advantage of using the Facade pattern is that it reduces the number of network calls, as well as reduces coupling among classes.&lt;/p&gt;

&lt;p&gt;It succeeds in establishing a transaction boundary between communicating objects. Facades, like services, are good hubs to implement transactions.&lt;/p&gt;

&lt;p&gt;As long as the interface of the facade remains the same, the implementation details of the subsystem can change.&lt;/p&gt;

&lt;h4 id=&quot;the-adapter-pattern&quot;&gt;The Adapter Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;An Adapter is used to match interfaces of different classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-11.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take the real world example of power adapters.&lt;/p&gt;

&lt;p&gt;Problem : If you buy a mobile phone in India, it comes with a charger that only works with power sockets used in India. If you take the same charger to the US for example, it will not work, as it will not fit into sockets there.&lt;/p&gt;

&lt;p&gt;Solution : The solution is to use a travel adapter, to use with your charger when you travel. You can plug in your charger into the travel adapter, and the travel adapter is used to connect to the socket in a particular country.&lt;/p&gt;

&lt;p&gt;Similarly, when you try to talk to a system that uses a different message format or a language, you need an adapter to translate messages.&lt;/p&gt;

&lt;p&gt;An interesting example is a communication between a Java program and a web service. Before sending out the data to the service, we need to convert the object into XML or JSON format. We are implementing the Adapter pattern!&lt;/p&gt;

&lt;h4 id=&quot;the-flyweight-pattern&quot;&gt;The Flyweight Pattern&lt;/h4&gt;

&lt;p&gt;Let’s consider a few scenarios&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creation of an object takes a lot of time and involves multiple instances&lt;/li&gt;
  &lt;li&gt;Each instance of an object occupies a lot of memory&lt;/li&gt;
  &lt;li&gt;Some objects might be used several times across the same application with the same values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In these scenarios, you might not want to create a new instance every time it is needed.&lt;/p&gt;

&lt;p&gt;How about caching an instance and reusing it when needed?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Flyweight represents creating a fine-grained instance, that is being used for efficient sharing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-12.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;example-1-1&quot;&gt;Example 1&lt;/h5&gt;

&lt;p&gt;A really good real work example is the public switched telephone network (PSTN).&lt;/p&gt;

&lt;p&gt;In the PSTN, there are always a limited number of lines, and for simplicity, let’s assume this number is 10. However, there are thousands of customers that use these lines. Since all 1000 customers would not make calls at about the same time, it is possible to efficiently switch calls coming in, among the existing 10 lines.&lt;/p&gt;

&lt;h5 id=&quot;example-2-1&quot;&gt;Example 2&lt;/h5&gt;

&lt;p&gt;In the software world, a good example of a Flyweight pattern is JDBC connections.&lt;/p&gt;

&lt;p&gt;A connection pool is a set of connections to the database. The application may be firing a lot of queries, but we don’t create a new connection whenever a new query comes in. As soon as a query comes in, we match it to an available connection, and the query gets fired. Once query execution is done, the connection is released back into the pool.&lt;/p&gt;

&lt;p&gt;Using such a pool allows us to avoid the cost involved in creating and closing a connection.&lt;/p&gt;

&lt;h3 id=&quot;behavioral-design-patterns&quot;&gt;Behavioral Design Patterns&lt;/h3&gt;

&lt;p&gt;Let us now have a look at the behavioral design patterns.&lt;/p&gt;

&lt;h4 id=&quot;the-chain-of-responsibility-pattern&quot;&gt;The Chain Of Responsibility Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-13.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Chain Of Responsibility Pattern represents a way of passing a request between a chain of objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;example-1-2&quot;&gt;Example 1&lt;/h5&gt;

&lt;p&gt;The best example of this pattern can be seen in the exception handling mechanism of most programming languages.&lt;/p&gt;

&lt;p&gt;Suppose you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;method1()&lt;/code&gt; calling &lt;code class=&quot;highlighter-rouge&quot;&gt;method2()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;method2()&lt;/code&gt; in turn calls &lt;code class=&quot;highlighter-rouge&quot;&gt;method3()&lt;/code&gt;. Assume that &lt;code class=&quot;highlighter-rouge&quot;&gt;method3()&lt;/code&gt; throws an exception.&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;method3()&lt;/code&gt; has no exception handling, then the exception is passed on to &lt;code class=&quot;highlighter-rouge&quot;&gt;method2()&lt;/code&gt; to handle it. If again &lt;code class=&quot;highlighter-rouge&quot;&gt;method2()&lt;/code&gt; has no exception handling inside it, then the exception is passed on to &lt;code class=&quot;highlighter-rouge&quot;&gt;method1()&lt;/code&gt;. If even &lt;code class=&quot;highlighter-rouge&quot;&gt;method1()&lt;/code&gt; cannot handle it, it gets thrown out of &lt;code class=&quot;highlighter-rouge&quot;&gt;method1()&lt;/code&gt; as well.&lt;/p&gt;

&lt;h5 id=&quot;example-2-2&quot;&gt;Example 2&lt;/h5&gt;

&lt;p&gt;Consider a real-world example of a loan approval process.&lt;/p&gt;

&lt;p&gt;A bank clerk has permissions to approve loans within a certain amount. If the amount goes above that, then it goes to the supervisor. The supervisor has a similar, albeit larger loan approval limit set for him. If the loan amount exceeds that limit, then it goes to his supervisor, and so on.&lt;/p&gt;

&lt;h5 id=&quot;summary-1&quot;&gt;Summary&lt;/h5&gt;

&lt;p&gt;With Chain Of Responsibility, we have a chain of objects already ready, that wait to process requests. When a new request enters the system, it goes to the first object in the chain to attempt processing. Depending on the processing condition, the request travels up the chain and gets fully processed at some level, or maybe not processed at all.&lt;/p&gt;

&lt;h4 id=&quot;the-iterator-pattern&quot;&gt;The Iterator Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-14.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Iterator pattern is one of the most simple design patterns. You have a set of elements arranged in a collection, and you want to access those elements sequentially. A good example of an Iterator is a TV remote, which has the “next” and “previous” buttons to surf TV channels. Pressing the “next” button takes me one channel in the forward direction, and pressing the “previous” button takes me one channel in the backward direction.&lt;/p&gt;

&lt;p&gt;In the programming works, examples of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterator&lt;/code&gt; class and the enhanced &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop in Java are examples of the Iterator pattern.&lt;/p&gt;

&lt;h4 id=&quot;the-state-pattern&quot;&gt;The State Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The State Pattern is used to alter an object’s behavior when its state changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-15.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take a look at this Java example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StatePattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fan Wall Control [current = %s]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;speedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Off&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel3&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpeedLevel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FanWallControl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fanWallControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take the example of a fan wall control. The fan wall control controls the speed with a fan rotates. It has speed levels ranging from 0 to 5. When it is at level 0, the fan does not rotate, and it rotates the fastest at level 5.&lt;/p&gt;

&lt;p&gt;When you rotate the knob of the fan control, the level changes, and this causes the speed of the fan to change as well. This is a classic case of a change in state (level) causing a change in behavior (speed).&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;FanwallControl&lt;/code&gt; object is composed of a &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel&lt;/code&gt; object. &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel&lt;/code&gt; is an interface that has four different implementations. Initially, the level is at &lt;code class=&quot;highlighter-rouge&quot;&gt;Off&lt;/code&gt;, and when you click rotate at that time, the new speed is at &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel1&lt;/code&gt;. The happens successively, and if you rotate at &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel3&lt;/code&gt;, the level returns to &lt;code class=&quot;highlighter-rouge&quot;&gt;Off&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In case you need to define an additional speed level, just add in a new class that implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;SpeedLevel&lt;/code&gt; interface, and implement its rotate method.&lt;/p&gt;

&lt;p&gt;This is an excellent example that highlights the advantages of an extensible class.&lt;/p&gt;

&lt;h4 id=&quot;the-strategy-pattern&quot;&gt;The Strategy Pattern&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-16.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The strategy has the task of encapsulating an algorithm inside a class. Let’s look at a Java code example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StrategyPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//sort using bubble sort algorithm&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSort&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; 
                &lt;span class=&quot;c1&quot;&gt;//sort using quicksort algorithm&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Sortable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doAComplexThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//logic...&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;sorter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//logic...&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complexClassInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;complexClassInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAComplexThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The class &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt; intends to perform a lot of complex logic within it. One part of that logic is to sort a set of values. One direct way would be to implement the entire sorting logic within &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt;. This would make it very inflexible, since if you wanted to change the sorting logic tomorrow, that entire code needs to change.&lt;/p&gt;

&lt;p&gt;When we use the Strategy pattern, we separate the algorithm of how the sorting is done, from &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We define an interface named &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt;, which has a method named &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;. Any actual sort algorithm is an implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt;, and needs to override &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexClass&lt;/code&gt; is given a particular &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt; implementation as a constructor argument. &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithm&lt;/code&gt; does not care what exact sorting algorithm is being used; it is happy that that object implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; method of &lt;code class=&quot;highlighter-rouge&quot;&gt;Sortable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A lot of flexibility results due to the use of the Strategy pattern. You can dynamically change the strategy, and pass in the right one according to the context.&lt;/p&gt;

&lt;h4 id=&quot;the-observer-pattern&quot;&gt;The Observer Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Observer pattern is a way of notifying a change, to a number of classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-17.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are a fan of cricket, you may want to know whenever Sachin Tendulkar scores a century, so that you can celebrate.&lt;/p&gt;

&lt;p&gt;All such similar people would register themselves to the event of Sachin scoring a century. Each of these people is now an Observer for that event. Whenever Sachin does score a century, a centralized program will notify each observer.&lt;/p&gt;

&lt;p&gt;Another example is that of online bidding. A group of bidders at an auction register themselves to receive notifications when a higher bid is placed. As soon as a bid higher than the current one is placed, all the registered bidders get to know about it.&lt;/p&gt;

&lt;p&gt;There are two main parts to implementing the Observer design pattern.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Registration - where the interested objects register themselves with the centralized program to receive notifications&lt;/li&gt;
  &lt;li&gt;Notification - where the registered observers receive notifications from the centralized program&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a simple implementation of the Observer pattern:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinCenturyNotifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
            
            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sachinScoredACentury&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fan:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;fan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;announce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            
            &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;announce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; notified&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;SachinCenturyNotifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinCenturyNotifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ranga&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ramya&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SachinFan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Veena&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;notifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sachinScoredACentury&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have created an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;SachinCenturyNotifier&lt;/code&gt;, and registered three fans with it.&lt;/p&gt;

&lt;p&gt;Whenever Sachin scores a century, the call &lt;code class=&quot;highlighter-rouge&quot;&gt;notifier.sachinScoredACentury()&lt;/code&gt; would be made, and all three fans would be notified.&lt;/p&gt;

&lt;h4 id=&quot;the-visitor-pattern&quot;&gt;The Visitor Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Visitor pattern allows us to add a new operation to a class, without changing the class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-18.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of scenarios when designing frameworks, where we don’t want other people to modify the code in the framework. We want others to extend the functionality without touching the framework code. They are allowed to add new operations, but not to change the existing operations.&lt;/p&gt;

&lt;p&gt;The Visitor pattern allows you to do this.&lt;/p&gt;

&lt;p&gt;A good real-world example of the Visitor pattern is the operation of a taxi company.&lt;/p&gt;

&lt;p&gt;As soon as a person calls a taxi company, and a cab is dispatched, the company accepts a visitor. Once the visitor, or customer enters the taxi, he is no longer in control of where he is going. The cab driver is now in control.&lt;/p&gt;

&lt;p&gt;If we look at it as object-oriented code, the driver class is in control of the customer class. The driver class can add new operations on top of the customer/visitor.&lt;/p&gt;

&lt;h4 id=&quot;the-template-method-pattern&quot;&gt;The Template Method Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Template Method pattern is used to defer the exact steps of an algorithm, to a subclass.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-19.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A good real-world example of this pattern is how we go about creating a house plan. Any good house plan consists of a floor plan, the foundation, plumbing, framing and wiring. Such a plan is almost identical for each house.&lt;/p&gt;

&lt;p&gt;If you were to model this in software, you could create a template class with this standard behavior defined. A subclass could extend this and give actual implementations. Such details could include the wooden flooring type, the wall paint colors, and any added wings as required.&lt;/p&gt;

&lt;p&gt;A good example of the Template Method pattern is within the Spring framework, in the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;AbstractController&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;checkRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prepareResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;synchronizeOnSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;ObjectMutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSessionMutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
                &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequestInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRequestInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handleRequest()&lt;/code&gt; merely takes care of the basic things. However, it leaves the lions to share for the implementation to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;handleRequestInternal()&lt;/code&gt;. This method is defined by subclasses, where more specific logic can be implemented.&lt;/p&gt;

&lt;p&gt;The Template Method pattern is all about doing the high-level steps, and leaving the low-level details to the subclasses. The subclasses can override the low steps and provide their own implementation.&lt;/p&gt;

&lt;h4 id=&quot;the-command-pattern&quot;&gt;The Command Pattern&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Command pattern encapsulates a command request as an object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-20.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a real-world example.&lt;/p&gt;

&lt;p&gt;Consider the scenario when a customer goes to a restaurant and wants to place an order for a meal. The writer merely writes the order he gets on a piece of paper, and passes it on to the chef. The chef executes the order, and then prepares the meal. He passes the piece of paper to the manager.&lt;/p&gt;

&lt;p&gt;The verbal order from the customer has now become a paper object. This piece of paper is the command object. The command object contains all the details needed to execute the request.&lt;/p&gt;

&lt;p&gt;Similarly in object-oriented programming, we can encapsulate all the details of a request into an object, and pass that object to execute it.&lt;/p&gt;

&lt;p&gt;In web applications, when a user types in the details on a form, these details are captured in a single request object, which is then passed across.&lt;/p&gt;

&lt;p&gt;The interface &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Runnable&lt;/code&gt; is also a good example of how this pattern is implemented. We create threads in Java by extending the &lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt; interface, which has all the logic for execution in its &lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt; method. When we want to create and start a thread, we pass this class to the &lt;code class=&quot;highlighter-rouge&quot;&gt;start()&lt;/code&gt; method.&lt;/p&gt;

&lt;h4 id=&quot;the-memento-method&quot;&gt;The Memento Method&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Memento pattern captures and later restores an object’s internal state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-21.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A lot of games that we play offer the option of performing an intermediate save. At a certain point in the game, you can save it and later come back to it.&lt;/p&gt;

&lt;p&gt;To implement this, we need to save the internal states of the game objects, and restore them at a certain point in time.&lt;/p&gt;

&lt;p&gt;This save-revert functionality can be implemented by using serialization in a language such as Java.&lt;/p&gt;

&lt;p&gt;The memento pattern is very useful for implementing undo/redo operations.&lt;/p&gt;

&lt;p&gt;For example, if you are working on a text document in a word processor. If at a certain point, you decide to undo changes, you can see each undo until you reach a point where you are satisfied. You have now reverted to an earlier saved state of the document.&lt;/p&gt;

&lt;h4 id=&quot;the-mediator-pattern&quot;&gt;The Mediator Pattern&lt;/h4&gt;

&lt;p&gt;The Mediator pattern is used to define simplified communication between classes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/8/Capture-109-22.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take the example of an Air Traffic Controller (ATC). Let’s say that at any point of time in India, we have about 500 flights in the air. We need to decide the routes that each of these flights needs to take. This also includes deciding the times at which each of these flights takes off and lands. It will be a highly complex situation if each of these 500 flights needs to talk with each other and arrive at an acceptable schedule of routes.&lt;/p&gt;

&lt;p&gt;That’s why we have the concept of an ATC. The flights communicate with the ATC, and having assimilated the information from all the flights, the ATC makes the decisions and communicates them back the flights.&lt;/p&gt;

&lt;p&gt;In the software world, a good example of the Mediator pattern is the ESB (Enterprise Service Bus). In a distributed system, instead of letting the applications talk to each other, an application drops in a message to the ESB. The ESB routes the request to the application that needs to handle the request. It acts as the Mediator.&lt;/p&gt;

&lt;h3 id=&quot;summary-2&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we had a quick look over a variety of design patterns.&lt;/p&gt;

&lt;p&gt;A design pattern is an approach to solve a problem in a given context. We focused on understanding the context in which a particular pattern may be applicable with real-world examples.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson7&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson9&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this guide, we give you an introduction to the world of design patterns.For each pattern, we understand 1) the pattern a2) the context in which it is applicable - with a real-world example.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - How do you keep your design simple?</title><link href="http://localhost:4000/blog/SwDesignLesson7" rel="alternate" type="text/html" title="Software Design - How do you keep your design simple?" /><published>2019-10-15T09:14:00+00:00</published><updated>2019-10-15T09:14:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson7</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson7">&lt;p&gt;With extreme programming and agile, the focus is being lean and keeping your design simple. In this context, how do you ensure that your design remains good and evolves along with the application requirements? Here are a five tips you can focus on.&lt;/p&gt;

&lt;h4 id=&quot;the-four-principle-of-simple-design&quot;&gt;The Four Principle Of Simple Design&lt;/h4&gt;

&lt;p&gt;These are the foundation for keeping your design simple. When you try to learn the ropes using Extreme Programming, you really need to focus on these principles.&lt;/p&gt;

&lt;p&gt;A software application is said to have a simple design if it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Runs all tests&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contains no duplication&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expresses intent of programmers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minimizes number of classes and methods&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about it &lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;solid-principles&quot;&gt;SOLID Principles&lt;/h4&gt;

&lt;p&gt;This represents a good aim to have when designing Object Object Software. The term SOLID is an acronym for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single Responsibility Principle&lt;/li&gt;
  &lt;li&gt;Open-Closed Principle&lt;/li&gt;
  &lt;li&gt;Liskov Substitution Principle&lt;/li&gt;
  &lt;li&gt;Interface Segregation Principle&lt;/li&gt;
  &lt;li&gt;Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about it &lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;appropriate-patterns&quot;&gt;Appropriate Patterns&lt;/h4&gt;

&lt;p&gt;Be choosy about the design pattern you use. Do not fill up your design with patterns, just because they are available. Understand the context of your application and the context of the design pattern. Make sure they make the right match before implementing design pattern.&lt;/p&gt;

&lt;h4 id=&quot;simple-hand-drawn-diagrams&quot;&gt;Simple Hand-drawn Diagrams&lt;/h4&gt;

&lt;p&gt;Simple, hand-drawn diagrams are quite sufficient to communicate the initial design to the stakeholders and your peers. Trying to produce stunning, intricate diagrams only leads to a wastage of precious time.&lt;/p&gt;

&lt;p&gt;Once the design is stabilized, you can work on more concrete diagrams.&lt;/p&gt;

&lt;h4 id=&quot;great-unit-tests&quot;&gt;Great Unit Tests&lt;/h4&gt;

&lt;p&gt;This is a very important requirement for a simple design. Tests help to keep your design evolving, because they give you feed back on how correct your code is. If that is not the case, you won;t be confident of changing your design, and  the design would no longer evolve.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we discussed a few tips on simple design.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson7&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson8&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">With extreme programming and agile, the focus is being lean and keeping your design simple. In this context, how do you ensure that your design remains good and evolves along with the application requirements? Here are a five tips you can focus on.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">6. Software Design - What is Dependency Inversion Principle?</title><link href="http://localhost:4000/blog/SwDesignLesson6" rel="alternate" type="text/html" title="6. Software Design - What is Dependency Inversion Principle?" /><published>2019-10-14T11:05:00+00:00</published><updated>2019-10-14T11:05:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson6</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson6">&lt;p&gt;Dependency Inversion Principle is one of the important SOLID Principles. Dependency Inversion Principle is implemented by one of the most popular Java frameworks - Spring. What is it all about? How does it help you design good applications?&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will Learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is Dependency Inversion Principle?&lt;/li&gt;
  &lt;li&gt;How are Dependency Inversion Principle and Spring Framework related?&lt;/li&gt;
  &lt;li&gt;A few examples of Dependency Inversion Principle in action&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-dependency-inversion-principle-dip&quot;&gt;What Is Dependency Inversion principle (DIP)?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Depend Upon Abstractions (interfaces), not Implementations (concrete classes)”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this statement mean? Let’s try understanding that with an example:&lt;/p&gt;

&lt;p&gt;Let’s look at an example of what this means:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class OutputDevice {
	void copy(String device) {
		Keyboard keyboard = new Keyboard();
		int character;
		while ((character = keyboard.read()) != -1) {
			if (device.equals(&quot;Printer&quot;)) {
				writeToPrinter(character);
			} else {
				writeToDevice(character);
			}
		}
	}

	private void writeToDevice(int character) {
		// TODO Auto-generated method stub
		
	}

	private void writeToPrinter(int c) {
		// TODO Auto-generated method stub
		
	}
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What does the &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method do?&lt;/p&gt;

&lt;p&gt;It reads a character from the keyboard, and then decides where this character needs to go. If it’s a printer, write to the printer. Else, send it to the disk.&lt;/p&gt;

&lt;p&gt;The problem here is that as the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;OutputDevice&lt;/code&gt; types increase, the logic of &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; needs to change every single time.&lt;/p&gt;

&lt;p&gt;Let’s look at an alternate implementation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public interface Reader {
		public char read();
	}

	public interface Writer {
		public void write(char ch);
	}

	void copy(Reader r, Writer w) {
		int c;

		while((c = r.read()) != EOF) {
			w.write(c);
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we have done here is define two separate interfaces, one to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;, and the other to define the &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;The responsibility of the &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method is quite clear here: it reads from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt;, and writes whatever it gets to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; now focuses only on the actual operation, and it does so by identifying everything else as its dependencies.&lt;/p&gt;

&lt;p&gt;It can now work with any implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; interfaces.&lt;/p&gt;

&lt;h3 id=&quot;dip-and-the-spring-framework&quot;&gt;DIP and The Spring Framework&lt;/h3&gt;

&lt;p&gt;DIP is one of the core principles that the Spring Framework enables. Have a look at this example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorthm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; directly creates an instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt;. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt; is a dependency of &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt;, and as we saw in our previous example, directly accessing it is not a great idea. If you want to switch from a bubble-sort to a quicksort algorithm later, you need to change quite a lot of code inside &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Better Approach for &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; is to make use of an interface - sort algorithm. Here is how our modified code would look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intrface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BinarySearchImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;User of the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class, can also pass in a specific implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt;, such as a bubble-sort or a quick-sort implementation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; is &lt;strong&gt;decoupled&lt;/strong&gt; from which &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you use the Spring framework, you could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; annotation with the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class, to automatically auto wire an implementation of an available sort algorithm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;By applying the DIP, you make your code more testable. The test code could pass in dependency mocks to properly test the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Dependency Inversion is about identifying dependencies and externalizing them. You can use a framework like Spring to simplify Dependency Inversion. DIP makes your code more maintainable, reusable and testable.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson5&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson6&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Dependency Inversion Principle is one of the important SOLID Principles. Dependency Inversion Principle is implemented by one of the most popular Java frameworks - Spring. What is it all about? How does it help you design good applications?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">5. Software Design - Open Closed Principle Principle</title><link href="http://localhost:4000/blog/SwDesignLesson5" rel="alternate" type="text/html" title="5. Software Design - Open Closed Principle Principle" /><published>2019-10-14T11:00:00+00:00</published><updated>2019-10-14T11:00:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson5</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson5">&lt;p&gt;Open Closed Principle is one of the SOLID Principles. You want your code to be extensible. How do you achieve it with minimum fuss? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is the Open Closed Principle?&lt;/li&gt;
  &lt;li&gt;How do you apply this principle in developing and designing software applications?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-closed-principle&quot;&gt;Open Closed Principle&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your classes should be open to extension, but closed to modification&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean? Let’s look at a simple example to understand what this means.&lt;/p&gt;

&lt;h3 id=&quot;an-example-of-poor-design&quot;&gt;An example of Poor Design&lt;/h3&gt;

&lt;p&gt;Let’s take a quick look at the calculateArea method in the Shape class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Shape {
	public double calculateArea(Shape[] shapes) {
		double area = 0;
		for(Shape shape:shapes) {
			if(shape instanceof Rectangle) {
				//Calculate Area of Rectange
			}
			else if(shape instanceof Circle) {
				//Calculate Area of Circle
			}
		}
		return area;
	}
}

class Rectangle extends Shape {
	
}

class Circle extends Shape {
	
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is there a problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method?&lt;/p&gt;

&lt;p&gt;What if we add a new shape? What if we remove a shape? What if we want to change the area algorithm for one of the shapes.&lt;/p&gt;

&lt;p&gt;For all these modifications, &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method needs to change.&lt;/p&gt;

&lt;p&gt;How can we make it better?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parts of the above code below pseudo code, for ease of explanation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class Shape {

	
    abstract double area();
}

class Rectangle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

class Circle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A better solution would be to allow each of the shapes, to define their own &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method. We have created an abstract class called &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; (which could also have been an interface), and have each of the different shapes extend it. Each shape also overrides &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt;’s abstract &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method, to compute its specific area.&lt;/p&gt;

&lt;p&gt;The standalone &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method would now look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;abstract class Shape {
	
	
	public double calculateArea(Shape[] shapes)
	{
		double area = 0;
		for(Shape shape:shapes) {
			area += shape.area();
		}
		return area;
	}
	
    abstract double area();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is now responsible just for looping around the shapes, and invoking the &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method of individual shapes.&lt;/p&gt;

&lt;p&gt;This is a very good example of the OCP.&lt;/p&gt;

&lt;p&gt;If you now want to add another shape, then you need to extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class, and override its &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method:. That’s it.&lt;/p&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class is open to extension, and &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is closed to modification.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we focused on Open Closed Principle.&lt;/p&gt;

&lt;p&gt;Design should be open for extension, but closed for modification.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson4&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson6&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Open Closed Principle is one of the SOLID Principles. You want your code to be extensible. How do you achieve it with minimum fuss? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">4. Software Design - Single Responsibility Principle</title><link href="http://localhost:4000/blog/SwDesignLesson4" rel="alternate" type="text/html" title="4. Software Design - Single Responsibility Principle" /><published>2019-10-14T10:55:00+00:00</published><updated>2019-10-14T10:55:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson4</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson4">&lt;p&gt;For me, Single Responsibility Principle (SRP) is the most important design principle.&lt;/p&gt;

&lt;p&gt;What is Single Responsibility Principle? How do you use it? How does it help with making your software better? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is the Single Responsibility Principle?&lt;/li&gt;
  &lt;li&gt;How do you apply this principle in developing and designing software applications?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-the-single-responsibility-principle-srp&quot;&gt;What Is The Single Responsibility Principle (SRP)?&lt;/h2&gt;

&lt;p&gt;As the term says, this principle is all about having single responsibility.&lt;/p&gt;

&lt;p&gt;In any software system, this principle is applicable at multiple levels&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a variable&lt;/li&gt;
  &lt;li&gt;a method&lt;/li&gt;
  &lt;li&gt;a class&lt;/li&gt;
  &lt;li&gt;a package&lt;/li&gt;
  &lt;li&gt;a component&lt;/li&gt;
  &lt;li&gt;application layers or&lt;/li&gt;
  &lt;li&gt;the entire application itself&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;srp-for-methods&quot;&gt;SRP For Methods&lt;/h2&gt;

&lt;p&gt;Any method that you write should have a single responsibility -  it should either be a high-level method, or a low-level one. Only when a method has a single responsibility, you will be able to give it an appropriate name.&lt;/p&gt;

&lt;h2 id=&quot;srp-for-classes&quot;&gt;SRP For Classes&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A class should have one, and only one reason to change”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s now have a look at a few examples of classes that violate this principle, and then look at how to correct the violation.&lt;/p&gt;

&lt;h3 id=&quot;example-1-the-task-class&quot;&gt;Example 1: The &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; class&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Strign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseTheFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;persistTheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Does the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; adhere to the single responsibility principle? Not at all, because it does a lot of different things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;downloadFile()&lt;/code&gt; downloads the file, by communicating over the internet&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parseTheFile()&lt;/code&gt; parses the file contents&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;persistTheData()&lt;/code&gt; saves the data into a database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A better solution would be to have separate classes for each of the responsibilities currently taken up by &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;. Here is one such solution.&lt;/p&gt;

&lt;h4 id=&quot;identifying-the-low-level-classes&quot;&gt;Identifying The Low-level Classes&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileDownloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseStorer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FileDownloader&lt;/code&gt; only downloads the file from the internet&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DataParser&lt;/code&gt; only parses the downloaded file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DatabaseStorer&lt;/code&gt; only stores the parsed data, into the database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are all low-level classes here.&lt;/p&gt;

&lt;h4 id=&quot;adding-a-high-level-class&quot;&gt;Adding A High-Level Class&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DownloadAndStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doEverything&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileDownloader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;downloadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DatabaseStorer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;storeIntoDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, you can create a high-level class such as &lt;code class=&quot;highlighter-rouge&quot;&gt;DownloadAndStore&lt;/code&gt; that invokes the functionality of these low-level classes to perform the complete task. Such an organization ensures that the low-level classes are reusable.&lt;/p&gt;

&lt;h3 id=&quot;example-2-the-employee-class&quot;&gt;Example 2: The Employee Class&lt;/h3&gt;

&lt;p&gt;Consider next, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; class shown below:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reportHours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; concerns itself with not just calculating the pay of an employee, but also reporting hours for work, and saving these details to the database.&lt;/p&gt;

&lt;p&gt;I will leave it as an exercise to fix the Employee class to adhere to SRP.&lt;/p&gt;

&lt;h2 id=&quot;srp-for-components&quot;&gt;SRP For Components&lt;/h2&gt;

&lt;p&gt;Every enterprise application has parts of its functionality organized as Components. For example, have a look at the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/4/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, the following components are of note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Security component  takes care of user authentication and authorization. Designing such a component helps abstract applications from the low-level security details. All microservices can interact with this component to find out if a user has access.&lt;/li&gt;
  &lt;li&gt;The Logging component - does the low level logging functionality&lt;/li&gt;
  &lt;li&gt;The Archetype component - Can be used to create new microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these components have a single responsibility. If the Security component takes care of logging, it would become less reusable. Therefore, at the component level, a well-defined single responsibility is highly desirable.&lt;/p&gt;

&lt;h3 id=&quot;using-srp-for-common-infrastructure&quot;&gt;Using SRP For Common Infrastructure&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/4/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the diagram shown above, you can identify the following infrastructure components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Naming Service - Has the responsibility to retrieve the service location based on its name&lt;/li&gt;
  &lt;li&gt;API Gateway - All requests go through the API Gateway. Common features like authentication, logging, rate limiting can be implemented in an API Gateway.&lt;/li&gt;
  &lt;li&gt;Centralized Logging - Centralized store for logs from all microservices so that we can easily debug problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with these sub-systems, a single responsibility for each of them is most desirable.&lt;/p&gt;

&lt;h3 id=&quot;using-srp-for-application-layering&quot;&gt;Using SRP For Application Layering&lt;/h3&gt;

&lt;p&gt;Single responsibility is also an important factor in how you layer your application. Have a look at the following conceptual layers in a web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/4/Capture-05-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Layer: All functionality concerned with direct user interaction sits here&lt;/li&gt;
  &lt;li&gt;Business Layer: Houses the core business logic&lt;/li&gt;
  &lt;li&gt;Data layer: All the functionality dealing with storing and retrieving data goes here&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you had the need to talk to other systems, there would have been an additional Enterprise Messaging Layer added onto this setup.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we talked about the Single Responsibility Principle. It is applicable at multiple levels to the parts of an application. This includes methods, classes, packages, components and application layers. With regards to classes, at a low level it means a class has only one reason to change.&lt;/p&gt;

&lt;p&gt;In general, &lt;strong&gt;Single Responsibility ensures high cohesion, low coupling and enhanced reusability&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson3&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson5&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">For me, Single Responsibility Principle (SRP) is the most important design principle.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">3. Object Oriented Software Design - Solid Principles</title><link href="http://localhost:4000/blog/SwDesignLesson3" rel="alternate" type="text/html" title="3. Object Oriented Software Design - Solid Principles" /><published>2019-10-14T10:49:00+00:00</published><updated>2019-10-14T10:49:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson3</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson3">&lt;p&gt;Software design is typically complex. Object oriented design takes it to the next level. There are a number of design patterns to be aware of. Can we make things simple?&lt;/p&gt;

&lt;p&gt;SOLID Principles is a great starting point for Object Oriented Design.&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What are SOLID Principles?&lt;/li&gt;
  &lt;li&gt;What are the best practices in designing objected oriented software?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-are-the-solid-principles&quot;&gt;What Are The SOLID Principles?&lt;/h3&gt;

&lt;p&gt;Plainly listed out, the SOLID principles are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SRP&lt;/strong&gt;: Single Responsibility Principle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OCP&lt;/strong&gt;: Open Closed Principle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LSP&lt;/strong&gt;: Liskov Substitution Principle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ISP&lt;/strong&gt;: Interface Segregation Principle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DIP&lt;/strong&gt;: Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at each of these by turn.&lt;/p&gt;

&lt;h3 id=&quot;single-responsibility-principle-srp&quot;&gt;Single Responsibility Principle (SRP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A class should have one, and only one reason to change”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This principle is not just applicable to a class, but also at the level of a package, a component, an application, or a service. Each of these should each have just one responsibility.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should be able to state what each element does in a single sentence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When your class or component or application has single responsibility, the options for reuse increases significantly.&lt;/p&gt;

&lt;p&gt;Have a look at the following class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public class Task {
		public void downloadFile(String location) {
			//...
		}
		
		public void parseTheFile(File file) {
			//...
		}

		public void persistTheData(Data data) {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; has three main responsibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download a file from a location&lt;/li&gt;
  &lt;li&gt;Parse the contents of the file&lt;/li&gt;
  &lt;li&gt;Save the data obtained to a database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It clearly does not satisfy SRP. Let’s look at another example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public class Employee {
		public Money calculatePay() {
			//...
		}

		public String reportHours() {
			//...
		}

		public void save() {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; has multiple responsibilities as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Calculate the employee’s pay&lt;/li&gt;
  &lt;li&gt;Create a report of hours of work put in&lt;/li&gt;
  &lt;li&gt;Save the employee details to a database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above examples need re-design to meet Single Responsibility Principle.&lt;/p&gt;

&lt;h3 id=&quot;open-closed-principle-ocp&quot;&gt;Open Closed Principle (OCP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Software entities should be open for extension, but closed for modification”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s take a quick look at the calculateArea method in the Shape class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Shape {
	public double calculateArea(Shape[] shapes) {
		double area = 0;
		for(Shape shape:shapes) {
			if(shape instanceof Rectangle) {
				//Calculate Area of Rectange
			}
			else if(shape instanceof Circle) {
				//Calculate Area of Circle
			}
		}
		return area;
	}
}

class Rectangle extends Shape {
	
}

class Circle extends Shape {
	
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is there a problem with &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method?&lt;/p&gt;

&lt;p&gt;What if we add a new shape? What if we remove a shape? What if we want to change the area algorithm for one of the shapes.&lt;/p&gt;

&lt;p&gt;For all these modifications, &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method needs to change.&lt;/p&gt;

&lt;p&gt;How can we make it better?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parts of the above code below pseudo code, for ease of explanation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class Shape {

	
    abstract double area();
}

class Rectangle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

class Circle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A better solution would be to allow each of the shapes, to define their own &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method. We have created an abstract class called &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; (which could also have been an interface), and have each of the different shapes extend it. Each shape also overrides &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt;’s abstract &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method, to compute its specific area.&lt;/p&gt;

&lt;p&gt;The standalone &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; method would now look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;abstract class Shape {
	
	
	public double calculateArea(Shape[] shapes)
	{
		double area = 0;
		for(Shape shape:shapes) {
			area += shape.area();
		}
		return area;
	}
	
    abstract double area();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is now responsible just for looping around the shapes, and invoking the &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method of individual shapes.&lt;/p&gt;

&lt;p&gt;This is a very good example of the OCP.&lt;/p&gt;

&lt;p&gt;If you now want to add another shape, then you need to extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class, and override its &lt;code class=&quot;highlighter-rouge&quot;&gt;area()&lt;/code&gt; method:. That’s it.&lt;/p&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;Shape&lt;/code&gt; class is open to extension, and &lt;code class=&quot;highlighter-rouge&quot;&gt;calculateArea()&lt;/code&gt; is closed to modification.&lt;/p&gt;

&lt;h3 id=&quot;liskov-substitution-principle-lsp&quot;&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt;

&lt;p&gt;According to this principle:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Subtypes must be substitutable for their base types”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the things people try to do with object oriented programming, is to use inheritance even when it is not appropriate. They may do it just for the sake of reusing the code. Have a look at this example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	class Rectangle {
		void setWidth(double w)
		void setHeight(double h)

		double getWidth()
		double getHeight()
	}

	class Square extends Rectangle {
		void setWidth(double w) 	// Set both width and height to w
		void setHeight(double h) 	// Set both height and width to h

		double getWidth()
		double getHeight()
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; class that has methods to set and get its width and height. Suppose we have a fresh requirement for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Instead of implementing it as a separate class, Let’s say we extend &lt;code class=&quot;highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; (as we know from school geometry that a square is a rectangle). &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt; redefines all the set and get methods that it inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt; to set both height and width to the same values.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the pair of setters and the pair of getters inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt;  are redundant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider a piece of client code such as this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	void test(Rectangle r) {
		r.setWidth(5);
		r.setHeight(4);

		assertEquals(5*4, r.getWidth() * r.getHeight());
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; is a method to test rectangles. A &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt;, hence &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; can be called on a &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt; object as well. Unfortunately, since both &lt;code class=&quot;highlighter-rouge&quot;&gt;setWidth()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setHeight()&lt;/code&gt; modify both the width and height to be equal, the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;r.getWidth() * r.getHeight()&lt;/code&gt; always amounts to &lt;code class=&quot;highlighter-rouge&quot;&gt;4 * 4&lt;/code&gt;, as that was the last value set. &lt;code class=&quot;highlighter-rouge&quot;&gt;test()&lt;/code&gt; always fails for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Square&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;LSP states that inheritance should be used very carefully. Make sure that the super class is always fully replaceable by each of its sub classes.&lt;/p&gt;

&lt;h3 id=&quot;interface-segregation-principle-isp&quot;&gt;Interface Segregation Principle (ISP)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;If two systems are communicating to each other, then the dependency should be in the smallest possible interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clients should not be forced to implement interfaces that they don’t use&lt;/p&gt;

&lt;p&gt;Instead of one fat interfaces, a group of smaller interfaces is preferred, each one addressing a sub-module.&lt;/p&gt;

&lt;p&gt;Let’s look at an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public abstract class Animal {
		public abstract void feed();
	}

	public class Dog extends Animal {
		public void feed() {
			//...
		}
	}

	public class Tiger extends Animal {
		public void feed() {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say we now need to add a feature called &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt; to each  kind of &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One option is to add it to &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; as an abstract method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public abstract class Animal {
		public abstract void feed();
		public abstract void groom();
	}

	public class Dog extends Animal {
		public void feed() {
			//...
		}
		
		public void groom() {
			//...
		}
	}

	public class Tiger extends Animal {
		public void feed() {
			//...
		}

		// DUMMY implementation, to keep compiler happy
		public void groom() {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In that case, both &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Tiger&lt;/code&gt; need to provide implementations for &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt; makes sense for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt;, but not so much for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Tiger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, we are forced to provide a dummy implementation in &lt;code class=&quot;highlighter-rouge&quot;&gt;Tiger&lt;/code&gt; to make the code compile.&lt;/p&gt;

&lt;p&gt;Above example does not adhere to ISP.&lt;/p&gt;

&lt;p&gt;Let’s see how to fix this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public abstract class Animal {
		public abstract void feed();
	}

	public class Pet extends Animal {
		public abstract void groom();
		public void feed() {
			//...
		}
	}

	public class Dog extends Pet {
		public void feed() {
			//...
		}
		
		public void groom() {
			//...
		}
	}

	public class Tiger extends Animal {
		public void feed() {
			//...
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The new interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Pet&lt;/code&gt; extends the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;, and also adds its own abstract method &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt;. Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;Dog&lt;/code&gt; will extend &lt;code class=&quot;highlighter-rouge&quot;&gt;Pet&lt;/code&gt;, as it needs both &lt;code class=&quot;highlighter-rouge&quot;&gt;feed()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;groom()&lt;/code&gt;, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;Tiger&lt;/code&gt; chooses to extend just &lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;feed()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ISP recommends that you keep your interfaces as small as possible.&lt;/p&gt;

&lt;p&gt;The moment you have a fat interface, any changes to that interface will result in changes in all your implementations.&lt;/p&gt;

&lt;h3 id=&quot;dependency-inversion-principle-dip&quot;&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt;

&lt;p&gt;The Dependency Inversion Principle states that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Depend upon abstract classes (interfaces), not upon concrete classes”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s look at an example of what this means:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
abstract class OutputDevice {
	void copy(String device) {
		Keyboard keyboard = new Keyboard();
		int character;
		while ((character = keyboard.read()) != -1) {
			if (device.equals(&quot;Printer&quot;)) {
				writeToPrinter(character);
			} else {
				writeToDevice(character);
			}
		}
	}

	private void writeToDevice(int character) {
		// TODO Auto-generated method stub
		
	}

	private void writeToPrinter(int c) {
		// TODO Auto-generated method stub
		
	}
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What does the &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method do?&lt;/p&gt;

&lt;p&gt;It reads a character from the keyboard, and then decides where this character needs to go. If it’s a printer, write to the printer. Else, send it to the disk.&lt;/p&gt;

&lt;p&gt;The problem here is that as the number of &lt;code class=&quot;highlighter-rouge&quot;&gt;OutputDevice&lt;/code&gt; types increase, the logic of &lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; needs to change every single time.&lt;/p&gt;

&lt;p&gt;Let’s look at an alternate implementation:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public interface Reader {
		public char read();
	}

	public interface Writer {
		public void write(char ch);
	}

	void copy(Reader r, Writer w) {
		int c;

		while((c = r.read()) != EOF) {
			w.write(c);
		}
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; method explicitly states its dependencies - &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; interfaces.&lt;/p&gt;

&lt;p&gt;It inverts responsibility, and leaves the creation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; to its users.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy()&lt;/code&gt; will not change even when there are new &lt;code class=&quot;highlighter-rouge&quot;&gt;Writer&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Reader&lt;/code&gt; implementations.&lt;/p&gt;

&lt;p&gt;This is called Dependency Inversion principle.&lt;/p&gt;

&lt;p&gt;Frameworks like Spring make it easy to implement Dependency Inversion.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the five SOLID principles: SRP, OCP, LSP, ISP and DIP. We also looked at a few code examples to understand more about each one of them.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson2&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson4&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Software design is typically complex. Object oriented design takes it to the next level. There are a number of design patterns to be aware of. Can we make things simple?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">2. Software Design - Separation Of Concerns</title><link href="http://localhost:4000/blog/SwDesignLesson2" rel="alternate" type="text/html" title="2. Software Design - Separation Of Concerns" /><published>2019-10-14T10:45:00+00:00</published><updated>2019-10-14T10:45:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson2</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson2">&lt;p&gt;&lt;strong&gt;Software architects and programmers love having Seperation of Concerns. What is it? Why is it important? Let’s get started.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What is Separation Of Concerns?&lt;/li&gt;
  &lt;li&gt;What are common examples of implementing Separation Of Concerns in software?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-separation-of-concerns&quot;&gt;What Is Separation Of Concerns?&lt;/h3&gt;

&lt;p&gt;Separation Of Concerns is an important design and architectural principle.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Every element of a software application - a component, a layer,a package,a class or a method should have one concern and implement it well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All methods with similar concerns will grouped into a class.&lt;/p&gt;

&lt;p&gt;All classes with similar concerns will be grouped into packages.&lt;/p&gt;

&lt;p&gt;So on and so forth.&lt;/p&gt;

&lt;h3 id=&quot;separation-of-concerns-in-action&quot;&gt;Separation Of Concerns In Action&lt;/h3&gt;

&lt;h4 id=&quot;layered-architecture&quot;&gt;Layered Architecture&lt;/h4&gt;

&lt;p&gt;Organizing an application into separate layers is one way of separating out concerns.&lt;/p&gt;

&lt;p&gt;For example, the following is the typical architecture of a web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/2/Capture-039-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some of the important responsibilities of each of these layers&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The Web layer only bothers about how to present data to its users&lt;/li&gt;
  &lt;li&gt;The Business layer focuses on implementing the core application logic, correctly and efficiently&lt;/li&gt;
  &lt;li&gt;The Data layer takes responsibility of talking to the data store.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see that each layer has a concern and implements it well.&lt;/p&gt;

&lt;h4 id=&quot;organizing-microservices&quot;&gt;Organizing Microservices&lt;/h4&gt;

&lt;p&gt;Another good example of Separation Of Concerns is how you split your microservices. Have a look at the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/2/Capture-039-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All the microservices shown are part of a movie application. But each one of them has its own independent concern.&lt;/p&gt;

&lt;h4 id=&quot;identifying-common-components&quot;&gt;Identifying Common Components&lt;/h4&gt;

&lt;p&gt;Seperation of concerns is also an important factor in building common application and infrastructure components.&lt;/p&gt;

&lt;p&gt;Since a large part of the functionality of microservices is common to all of them, it makes sense to extract out the common components. Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/2/Capture-039-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All microservices need features such as security and logging. By identifying common components in your service such as Security and Logging, and providing well defined interfaces with each microservice, the implementation of the microservices gets simpler.&lt;/p&gt;

&lt;p&gt;The same is the case with common infrastructure components. Any microservice can interact with them and use their functionality.&lt;/p&gt;

&lt;p&gt;A few examples of Seperation of Concern in infrastructure components&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Naming Server - Microservice3 can locate the identity of Microservice2.&lt;/li&gt;
  &lt;li&gt;API Gateway - Centralized access to all microservices. You can implement cross cutting microservice concerns here.&lt;/li&gt;
  &lt;li&gt;Distributed Tracing and Centralized Logging - You can trace microservices and find out what’s happending behind the scenes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at separation of concerns, and several examples of it in action - such as in a layered architecture, in the way microservices are split and organized, and in the way common components and infrastructure are identified and extracted out in a microservices architecture.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson3&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Software architects and programmers love having Seperation of Concerns. What is it? Why is it important? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">1. Introduction to Four Principles Of Simple Design</title><link href="http://localhost:4000/blog/SwDesignLesson1" rel="alternate" type="text/html" title="1. Introduction to Four Principles Of Simple Design" /><published>2019-10-14T10:41:00+00:00</published><updated>2019-10-14T10:41:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson1</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson1">&lt;h3 id=&quot;what-is-simple-design&quot;&gt;What is Simple Design?&lt;/h3&gt;

&lt;p&gt;** With agile and extreme programming, the focus is on keeping your design simple. How do you       keep your design simple? How do you decide whether your code is good enough? **&lt;/p&gt;

&lt;p&gt;It is very important to keep the design of your application simple.&lt;/p&gt;

&lt;p&gt;In almost all agile projects, the aim is to meet today’s requirements, with clean code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You go for complex design, only when simple design does not solve your problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;the-four-principles-of-simple-design&quot;&gt;The Four Principles Of Simple Design&lt;/h3&gt;

&lt;p&gt;A software application is said to have a simple design if it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Runs all tests&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contains no duplication&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expresses intent of programmers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minimizes number of classes and methods&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now look at these aspects a little closely, by turn.&lt;/p&gt;

&lt;h4 id=&quot;runs-all-tests&quot;&gt;Runs All Tests&lt;/h4&gt;

&lt;p&gt;We want to keep running all the tests continuously, because we want the code to work, at all times.&lt;/p&gt;

&lt;p&gt;An important corollary of this principle is you need to have a large number of automation tests. All unit, integration and API tests must be automated.&lt;/p&gt;

&lt;p&gt;You should launch these tests as part of your build, and they should also be a part of Continuous Integration (CI).&lt;/p&gt;

&lt;p&gt;With CI, you commit code into the repository, all the tests are run, and immediate feedback is there for you to act on.&lt;/p&gt;

&lt;p&gt;Since the software is being tested all the time, it is stable.&lt;/p&gt;

&lt;h4 id=&quot;contains-no-duplication&quot;&gt;Contains No Duplication&lt;/h4&gt;

&lt;p&gt;The second principle stresses on the fact that your code should have as little duplication as possible.&lt;/p&gt;

&lt;p&gt;A good example is to create common components, whereever possible, in the design of large applications. This helps centralize the logic and allow other applications to reuse them.&lt;/p&gt;

&lt;p&gt;Why do we hate duplication?&lt;/p&gt;

&lt;p&gt;If there is a need for a change, the same change needs to repeated at all these locations. The result : More effort and also possibilities of more defects when you miss making the change in every location. That is a sign of bad design.&lt;/p&gt;

&lt;h4 id=&quot;expresses-intent-of-programmers&quot;&gt;Expresses Intent Of Programmers&lt;/h4&gt;

&lt;p&gt;Your code should be easy to read, and your design, simple to understand. This principle is also called &lt;strong&gt;Clarity Of Code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Have a look at the following piece of code:&lt;/p&gt;

&lt;h5 id=&quot;example-01-v1&quot;&gt;Example-01 v1&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/1/Capture-09-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do you understand what it does?&lt;/p&gt;

&lt;p&gt;Now look at the following version of the same program:&lt;/p&gt;

&lt;h5 id=&quot;example-01-v2&quot;&gt;Example-01 v2&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/1/Capture-09-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do you understand what it’s trying to do?&lt;/p&gt;

&lt;p&gt;Actually, Example-01 v2 results from applying the Four Principles of Simple Design to Example-01 v1.&lt;/p&gt;

&lt;p&gt;Start with creating good names for variables, methods and classes. That improves clarity.&lt;/p&gt;

&lt;h4 id=&quot;minimize-number-of-classes-and-methods&quot;&gt;Minimize number of classes and methods&lt;/h4&gt;

&lt;p&gt;You should have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Small methods&lt;/li&gt;
  &lt;li&gt;Small classes&lt;/li&gt;
  &lt;li&gt;Minimum number classes and methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Isn’t it simple.&lt;/p&gt;

&lt;p&gt;Lesser code you have, lesser code you have to maintain.&lt;/p&gt;

&lt;p&gt;Always aim to keep things simple.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the four principles of simple design. These are the first steps to ensure that the design of your application remains simple. It lays the foundation for applying more advanced principles to improving your design.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-design-principles&quot;&gt;Software Design Principles&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on important Software Design Principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson1&quot; target=&quot;_blank&quot;&gt;1 - Introduction to Four Principles Of Simple Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson2&quot; target=&quot;_blank&quot;&gt;2 - Software Design - Separation Of Concerns - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson3&quot; target=&quot;_blank&quot;&gt;3 - Object Oriented Software Design - Solid Principles - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson4&quot; target=&quot;_blank&quot;&gt;4 - Software Design - Single Responsibility Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Design - Open Closed Principle - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson6&quot; target=&quot;_blank&quot;&gt;6 - Software Design - What is Dependency Inversion Principle?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson2&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">What is Simple Design?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">8.Typescript arrow functions</title><link href="http://localhost:4000/blog/Lesson8" rel="alternate" type="text/html" title="8.Typescript arrow functions" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson8</id><content type="html" xml:base="http://localhost:4000/blog/Lesson8">&lt;section class=&quot;tstutorial8&quot;&gt;
    &lt;p&gt;Since you already know how to use &lt;code&gt;Named functions&lt;/code&gt; and &lt;code&gt;Anonymous functions&lt;/code&gt; let me show
        you another type of function which you will be dealing with while building Angular Applications&lt;/p&gt;
    &lt;p&gt;Let's have a look at the following sample:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Named function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Call named function&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;You can write the same using &lt;code&gt;arrow functions&lt;/code&gt; (sometimes also called &lt;strong&gt;fat arrow&lt;/strong&gt;
        functions):&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; x&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;As you can see they are not that fat :) They are actually, shorter and less verbose than traditional function
        expressions. Arrow functions have two huge advantages, the first one you already know: &lt;/p&gt;
    &lt;h4&gt;1. Shorter syntax:&lt;/h4&gt;
    &lt;p&gt;Arrow functions are &lt;strong&gt;always anonymous&lt;/strong&gt; and turn: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parameters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; expression &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;into:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parameters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;In the case that your function doesn't use any input parameters, you can use even shorter syntax:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;expression&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Doing some math...'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;When you only have one parameter, the opening parentheses are optional:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;parameters &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; expression &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
z &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; z&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Finally, if you are returning an expression, you can &lt;strong&gt; remove the brackets and return statement&lt;/strong&gt;:
    &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; expression

&lt;span class=&quot;token comment&quot;&gt;// Example:&lt;/span&gt;
z &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; z&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;z&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;h4&gt;2. Handling `this` &lt;/h4&gt;
    &lt;!-- Before we move on, you should have a good understanding of the keyword this and how it works. If you want to learn, or need a refresher, read my post on the subject before continuing. --&gt;
    &lt;p&gt;A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has
        some differences between strict mode and non-strict mode.&lt;/p&gt;
    &lt;p&gt;
        Arrow functions do not have
        &lt;console&gt;this&lt;/console&gt;
        , arguments or other special names bound at all — when the object is being created the name this is found in the
        enclosing scope, not the person object.
    &lt;/p&gt;
    &lt;p&gt;Consider the following example:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;david&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

    shout&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;my name is &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    shout2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;my name is &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &quot;john&quot;&lt;/span&gt;
person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shout2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;david&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;As you can see, when we are using normal functions &lt;code&gt;this&lt;/code&gt; corresponds to the name: &lt;code&gt;john&lt;/code&gt;
        (the closest object), while in case of arrow function, this refers to the global scope: &lt;code&gt;david&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;Why is it important?&lt;/strong&gt; &lt;/p&gt;
    &lt;p&gt;Functions always have their own &lt;code&gt;this&lt;/code&gt;. But that prevents you from accessing the &lt;code&gt;this&lt;/code&gt; of,
        e.g., a surrounding method from inside a callback:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Prefixer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;prefixArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (A)&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (B)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Doesn’t work:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (C)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pre &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Hi '&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pre&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prefixArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Joe'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'Alex'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;This will generate an error: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;TypeError&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Cannot read property &lt;span class=&quot;token string&quot;&gt;'prefix'&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; undefined&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;This is because, in line C, we’d like to access this.prefix, but can’t, because the &lt;code&gt;this&lt;/code&gt; of the
        function from line B shadows the &lt;code&gt;this&lt;/code&gt; of the method from line A. In strict mode, this is undefined
        in non-method functions, which is why we get an error if we use Prefixer.&lt;/p&gt;
    &lt;p&gt;There is a workaround which we can use: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Prefixer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;prefixArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; that &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (A)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; that&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pre &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Hi '&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pre&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prefixArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Joe'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'Alex'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;But this is tricky and makes code more complex, while using an arrow function solves the issue:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
Prefixer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;prefixArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prefix &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pre &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Prefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Hi '&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pre&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prefixArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'Joe'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'Alex'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;blockquote class=&quot;blockquote bq-primary&quot;&gt;
        &lt;p class=&quot;bq-title&quot;&gt;Lesson summary:&lt;/p&gt;
        &lt;p&gt;Since ES6, you can use arrow functions to make your code less verbose: &lt;/p&gt;
        &lt;div class=&quot;code-toolbar&quot;&gt;
            &lt;pre
                class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//Multiple input parameters =&amp;gt; mixed output&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;param1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paramN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; statements &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;param1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paramN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;expression&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;param1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; param2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paramN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; expression&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Single input (parenthesis are optional)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;singleParam&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; statements &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
singleParam &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; statements &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
singleParam &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; expression


&lt;span class=&quot;token comment&quot;&gt;// Empty list of parameters&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; statements &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

        &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;As a disclaimer, there is more to arrow functions than what was explained in this article. But this should give
        you a great base for further learning! As always, leave a comment if you have any great resources on the subject
        for others to explore.&lt;/p&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson8&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Since you already know how to use Named functions and Anonymous functions let me show you another type of function which you will be dealing with while building Angular Applications Let's have a look at the following sample: // Named function function add(x, y) { return x + y; }</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/typescipt_logo.png" /></entry><entry><title type="html">7.Typescript type assertion</title><link href="http://localhost:4000/blog/Lesson7" rel="alternate" type="text/html" title="7.Typescript type assertion" /><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><id>http://localhost:4000/blog/Lesson7</id><content type="html" xml:base="http://localhost:4000/blog/Lesson7">&lt;section class=&quot;ts_tutorial7&quot;&gt;
    &lt;p&gt;During application development, it may happen that you deal with a situation where you will know more about the
        value than TypeScript does. Most often in a situation, where you know that the type of a certain entity could be
        more specific than it is now.&lt;/p&gt;
    &lt;p&gt;Type assertion is a way to explicitly inform the compiler that you want to treat the entity as it would have a
        different type. This allows you to treat &lt;code&gt;any&lt;/code&gt; as a &lt;code&gt;number&lt;/code&gt;, or a &lt;code&gt;number&lt;/code&gt; as
        a &lt;code&gt;string&lt;/code&gt;. Let's have a look at the following example:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; someValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I am sure I am a string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Although, we are sure that someValue contains a string, for the compiler it still has a type of &lt;code&gt;any&lt;/code&gt;.
        As result, you won't be able to use methods like &lt;code&gt;length()&lt;/code&gt; which is a default method for a string
        type variable. What you can do is to inform the compiler to treat it as a &lt;code&gt;string&lt;/code&gt;. You can do this
        in two ways:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; strLength&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Or using the &lt;code&gt;as&lt;/code&gt; syntax: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-typescript&quot;&gt;&lt;code class=&quot; language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; strLength&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someValue &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Probably you already know that in JavaScript you can define functions like the one below: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Named function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Call named function&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;which are so-called &lt;code&gt; Named functions&lt;/code&gt;. You can also use &lt;code&gt;Anonymous functions&lt;/code&gt;:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Anonymous function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;myAdd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// You can call it like this&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;myAdd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// But definitely more common&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;An anonymous function is a function that was declared without any named identifier to refer to it. As such, an
        anonymous function is usually not accessible after its initial creation.&lt;/p&gt;
    &lt;p&gt;One common use for Anonymous functions is as arguments to other functions. Another common use is as a closure,
        for which see also the Closures chapter. Below shows its use as an argument to other functions:&lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
    &lt;p&gt;Or call it with parameter: &lt;/p&gt;
    &lt;div class=&quot;code-toolbar&quot;&gt;
        &lt;pre
            class=&quot;code-toolbar language-javascript&quot;&gt;&lt;code class=&quot; language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;

    &lt;p&gt;So basically, you want to use Anonymous functions in all places where you have to &lt;strong&gt;use a function as an
            argument to other function&lt;/strong&gt; or as a &lt;strong&gt;closure&lt;/strong&gt; (we will learn about closures in later
        lessons). &lt;/p&gt;
    &lt;p&gt;In those cases you use the function only once, therefore you don't want to name it (like you would for a
        &lt;code&gt;Named function&lt;/code&gt;) just to use it in a single line.&lt;/p&gt;
    &lt;p&gt;Anonymous functions might look confusing at the start, however, once you start using them you will find them very
        handy. But there is something else, another type of the function called an &lt;code&gt;arrow function&lt;/code&gt; which we
        will learn about in the next lesson.&lt;/p&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson6&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Lesson8&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">During application development, it may happen that you deal with a situation where you will know more about the value than TypeScript does. Most often in a situation, where you know that the type of a certain entity could be more specific than it is now. Type assertion is a way to explicitly inform the compiler that you want to treat the entity as it would have a different type. This allows you to treat any as a number, or a number as a string. Let's have a look at the following example: let someValue: any = &quot;I am sure I am a string&quot;;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/typescipt_logo.png" /></entry></feed>