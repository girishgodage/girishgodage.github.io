<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-30T22:37:05+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">15. Class in Python</title><link href="http://localhost:4000/blog/PythonClass" rel="alternate" type="text/html" title="15. Class in Python" /><published>2019-09-30T05:30:00+05:30</published><updated>2019-09-30T05:30:00+05:30</updated><id>http://localhost:4000/blog/PythonClass</id><content type="html" xml:base="http://localhost:4000/blog/PythonClass">&lt;section class=&quot;Ptutorial15&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python OOPs: Class, Object, Inheritance and Constructor with Example &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h3&gt;What is a Class?&lt;/h3&gt;
            &lt;p&gt;A Class is a logical grouping of data and functions. It gives the freedom to create data structures that
                contains arbitrary content and hence easily accessible. &lt;/p&gt;
            &lt;p&gt;For example, for any bank employee who want to fetch the customer details online would go to
                &lt;strong&gt;customer class&lt;/strong&gt;, where all its attributes like transaction details, withdrawal and
                deposit details, outstanding debt, etc. would be listed out. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn, &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to define Python classes &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;How Inheritance works &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Python Constructors &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to define Python classes&lt;/h2&gt;
            &lt;p&gt;To define class you need to consider following points&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; In Python, classes are defined by the &lt;strong&gt;&quot;Class&quot; &lt;/strong&gt;keyword &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         class myClass():
             &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; Inside classes, you can define functions or methods that are part of this class
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def method1 (self):
            print &quot;Guru99&quot;
         def method2 (self,someString): 
            print &quot;Software Testing:&quot; + someString
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;Here we have defined method1 that prints &quot;Guru99.&quot;&lt;/li&gt;
                &lt;li&gt;Another method we have defined is method2 that prints &quot;Software Testing&quot;+ SomeString. SomeString is
                    the variable supplied by the calling method&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; Everything in a class is indented, just like the code in the function, loop, if
                statement, etc. Anything not indented is not in the class &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/15/071515_1030_PythonClass1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;Python Class &amp;amp; Objects: Object Oriented Programming (OOP’s)&quot;
                        alt=&quot;Python Class &amp;amp; Objects: Define Class, Inheritance - OOP Tutorial&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/15/071515_1030_PythonClass1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: About using &quot;self&quot; in Python &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;The self-argument refers to the object itself. Hence the use of the word self. So inside this
                    method, self will refer to the specific instance of this object that's being operated on.&lt;/li&gt;
                &lt;li&gt;Self is the name preferred by convention by Pythons to indicate the first parameter of instance
                    methods in Python. It is part of the Python syntax to access members of objects&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; To make an object of the class &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         c = myClass()
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Step 5)&lt;/strong&gt; To call a method in a class &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;    c.method1()
             c.method2(&quot; Testing is fun&quot;)
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;Notice that when we call the method1 or method2, we don't have to supply the self-keyword. That's
                    automatically handled for us by the Python runtime. &lt;/li&gt;
                &lt;li&gt;Python runtime will pass &quot;self&quot; value when you call an instance method on in instance, whether you
                    provide it deliberately or not&lt;/li&gt;
                &lt;li&gt;You just have to care about the non-self arguments&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 6) &lt;/strong&gt;Here is the complete code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         # Example file for working with classes
         class myClass():
           def method1(self):
               print(&quot;Guru99&quot;)
                 
           def method2(self,someString):    
               print(&quot;Software Testing:&quot; + someString)
           
               
         def main():           
           # exercise the class methods
           c = myClass ()
           c.method1()
           c.method2(&quot; Testing is fun&quot;)
           
         if __name__== &quot;__main__&quot;:
           main()&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;How Inheritance works&lt;/h2&gt;
            &lt;p&gt;Inheritance is a feature used in object-oriented programming; it refers to defining a new class with less
                or no modification to an existing class. The new class is called &lt;strong&gt;derived class&lt;/strong&gt; and from
                one which it inherits is called the &lt;strong&gt;base&lt;/strong&gt;. Python supports inheritance; it also supports
                &lt;strong&gt;multiple inheritances&lt;/strong&gt;. A class can inherit attributes and behavior methods from another
                class called subclass or heir class. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;/http://localhost:4000/img/python/tutorial/15/071515_1030_PythonClass2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;Python Class &amp;amp; Objects: Object Oriented Programming (OOP’s)&quot;
                        alt=&quot;Python Class &amp;amp; Objects: Define Class, Inheritance - OOP Tutorial&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/15//071515_1030_PythonClass2.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;

            &lt;p&gt;&lt;strong&gt;Python Inheritance Syntax&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         class DerivedClass(BaseClass):
             body_of_derived_class
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Run the following code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         # Example file for working with classes
         class myClass():
           def method1(self):
               print(&quot;Guru99&quot;)
                 
           
         class childClass(myClass):
           #def method1(self):
                 #myClass.method1(self);
                 #print (&quot;childClass Method1&quot;)
                 
           def method2(self):
                 print(&quot;childClass method2&quot;)     
                  
         def main():           
           # exercise the class methods
           c2 = childClass()
           c2.method1()
           #c2.method2()
         
         if __name__== &quot;__main__&quot;:
           main()
         &lt;/pre&gt;
            &lt;p&gt;Notice that the in childClass, method1 is not defined but it is derived from the parent myClass. The
                output is &quot;Guru99.&quot; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; Uncomment Line # 8 &amp;amp; 10. Run the code &lt;/p&gt;
            &lt;p&gt;Now, the method 1 is defined in the childClass and output &quot;childClass Method1&quot; is correctly shown. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; Uncomment Line #9. Run the code &lt;/p&gt;
            &lt;p&gt;You can a method of the parent class using the syntax &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;	ParentClassName.MethodName(self)
         &lt;/pre&gt;
            &lt;p&gt;In our case, we call, myClass.method1(self) and Guru99 is printed as expected &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;) Uncomment Line #19. Run the code. &lt;/p&gt;
            &lt;p&gt;Method 2 of the child class is called and &quot;childClass method2&quot; is printed as expected.&lt;/p&gt;

            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Python Constructors&lt;/h2&gt;
            &lt;p&gt;A constructor is a class function that instantiates an object to predefined values. &lt;/p&gt;
            &lt;p&gt;It begins with a double underscore (_). It __init__() method &lt;/p&gt;
            &lt;p&gt;In below example we are taking name of the user using constructor. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         class User:
             name = &quot;&quot;
         
             def __init__(self, name):
                 self.name = name
         
             def sayHello(self):
                 print(&quot;Welcome to Guru99, &quot; + self.name)
         
         User1 = User(&quot;Alex&quot;)
         User1.sayHello()
         &lt;/pre&gt;
            &lt;p&gt;Output will be: &lt;/p&gt;
            &lt;p&gt;Welcome to Guru99, Alex &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;p&gt;Above codes are Python 3 examples, If you want to run in Python 2 please consider following code. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         # How to define Python classes
         # Example file for working with classes
         class myClass():
           def method1(self):
               print &quot;Guru99&quot;
                 
           def method2(self,someString):    
               print &quot;Software Testing:&quot; + someString
               
            
               
         def main():           
           # exercise the class methods
           c = myClass ()
           c.method1()
           c.method2(&quot; Testing is fun&quot;)
           
         if __name__== &quot;__main__&quot;:
           main()
         
         
         #How Inheritance works
         # Example file for working with classes
         class myClass():
           def method1(self):
               print &quot;Guru99&quot;
                 
               
         class childClass(myClass):
           #def method1(self):
                 #myClass.method1(self);
                 #print &quot;childClass Method1&quot; 
                 
           def method2(self):
                 print &quot;childClass method2&quot;     
                  
         def main():           
           # exercise the class methods
           c2 = childClass()
           c2.method1()
           #c2.method2()
         
         if __name__== &quot;__main__&quot;:
           main()
         &lt;/pre&gt;
            &lt;h3&gt;Summary:&lt;/h3&gt;
            &lt;p&gt;&quot;Class&quot; is a logical grouping of functions and data. Python class provides all the standard features of
                Object Oriented Programming. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Class inheritance mechanism&lt;/li&gt;
                &lt;li&gt;A derived class that override any method of its base class&lt;/li&gt;
                &lt;li&gt;A method can call the method of a base class with the same name&lt;/li&gt;
                &lt;li&gt;Python Classes are defined by keyword &lt;strong&gt;&quot;class&quot;&lt;/strong&gt; itself&lt;/li&gt;
                &lt;li&gt;Inside classes, you can define functions or methods that are part of the class&lt;/li&gt;
                &lt;li&gt;Everything in a class is indented, just like the code in the function, loop, if statement, etc.&lt;/li&gt;
                &lt;li&gt;The self argument in Python refers to the object itself. Self is the name preferred by convention by
                    Pythons to indicate the first parameter of instance methods in Python&lt;/li&gt;
                &lt;li&gt;
                    &lt;div&gt;Python runtime will pass &quot;self&quot; value automatically when you call an instance method on in
                        instance, whether you provide it deliberately or not&lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;In Python, a class can inherit attributes and behavior methods from another class called subclass or
                    heir class. &lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonClass&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonExpressions&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python OOPs: Class, Object, Inheritance and Constructor with Example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">14. Loop in Python</title><link href="http://localhost:4000/blog/PythonLoop" rel="alternate" type="text/html" title="14. Loop in Python" /><published>2019-09-30T05:30:00+05:30</published><updated>2019-09-30T05:30:00+05:30</updated><id>http://localhost:4000/blog/PythonLoop</id><content type="html" xml:base="http://localhost:4000/blog/PythonLoop">&lt;section class=&quot;Ptutorial14&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python For &amp;amp; While Loops: Enumerate, Break, Continue Statement &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h3&gt;What is Loop?&lt;/h3&gt;
            &lt;p&gt;Loops can execute a block of code number of times until a certain condition is met. Their usage is fairly
                common in programming. Unlike other programming language that have For Loop, while loop, dowhile, etc.
            &lt;/p&gt;
            &lt;h3&gt;What is For Loop?&lt;/h3&gt;
            &lt;p&gt;For loop is used to iterate over elements of a sequence. It is often used when you have a piece of code
                which you want to repeat &quot;n&quot; number of time. &lt;/p&gt;
            &lt;p&gt;&lt;/p&gt;
            &lt;h3&gt;What is While Loop?&lt;/h3&gt;
            &lt;p&gt;While Loop is used to repeat a block of code. Instead of running the code block once, It executes the
                code block multiple times until a certain condition is met. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to use &quot;While Loop&quot; &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to use &quot;For Loop&quot; &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;How to use For Loop for set of other things besides numbers &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Break statements in For Loop &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Continue statement in For Loop &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Enumerate function for For Loop &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Pratical Example&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;How to use for loop to repeat the same statement over and again &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to use &quot;While Loop&quot;&lt;/h2&gt;
            &lt;p&gt;While loop does the exactly same thing what &quot;if statement&quot; does, but instead of running the code block
                once, they jump back to the point where it began the code and repeats the whole process again. &lt;/p&gt;
            &lt;p&gt;Syntax &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;while expression
          Statement  
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         #Example file for working with loops
         #
         def main():
             x=0
             #define a while loop
             while(x &amp;lt;4):
                 print(x)
                 x = x+1
         
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;Code Line 4: Variable x is set to 0&lt;/li&gt;
                &lt;li&gt;Code Line 7: While loop checks for condition x&amp;lt;4. The current value of x is 0. Condition is true.
                    Flow of control enters into while Loop&lt;/li&gt;
                &lt;li&gt;Code Line 8: Value of x is printed&lt;/li&gt;
                &lt;li&gt;Code Line 9: x is incremented by 1. Flow of control goes back to line 7. Now the value of x is 1
                    which is less than 4. The condition is true, and again the while loop is executed. This continues
                    till x becomes 4, and the while condition becomes false.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to use &quot;For Loop&quot;&lt;/h2&gt;
            &lt;p&gt;In Python, &quot;for loops&quot; are called &lt;strong&gt;iterators.&lt;/strong&gt;&lt;/p&gt;
            &lt;p&gt;Just like while loop, &quot;For Loop&quot; is also used to repeat the program. &lt;/p&gt;
            &lt;p&gt;But unlike while loop which depends on condition true or false. &quot;For Loop&quot; depends on the elements it has
                to iterate. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         #Example file for working with loops
         #
         def main():
             x=0
             #define a while loop
         #	while(x &amp;lt;4):
         #		print x
         #		x = x+1
         
         
             #Define a for loop 
         for x in range(2,7):
                 print(x)
         
         
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;For Loop iterates with number declared in the range. &lt;/p&gt;
            &lt;p&gt;For example, &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;For Loop&lt;/strong&gt; for x in range (2,7) &lt;/p&gt;
            &lt;p&gt;When this code is executed, it will print the number between 2 and 7 (2,3,4,5,6). In this code, number 7
                is not considered inside the range. &lt;/p&gt;
            &lt;p&gt;For Loops can also be used for a set of other things and not just number. We will see thin in next
                section. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;How to use For Loop for String &lt;/h2&gt;
            &lt;p&gt;In this step, we will see how &quot;for loops&quot; can also be used for other things besides numbers. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
             #use a for loop over a collection
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for m in Months:
                 print(m)
                 
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;Code Line 3: We store the months (&quot;Jan, Feb , Mar,April,May,June&quot;) in variable Months &lt;/p&gt;
            &lt;p&gt;Code Line 4: We iterate the for loop over each value in Months. The current value of Months in stored in
                variable m&lt;/p&gt;

            &lt;p&gt;Code Line 5: Print the month &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;How to use break statements in For Loop&lt;/h2&gt;
            &lt;p&gt;Breakpoint is a unique function in For Loop that allows you to break or terminate the execution of the
                for loop &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
             #use a for loop over a collection
             #Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             #for m in Months:
                 #print m
                 
         # use the break and continue statements
                 
                 
                 for x in range (10,20):
                     if (x == 15): break
                     #if (x % 2 == 0) : continue
                     print(x)
         
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;In this example, we declared the numbers from 10-20, but we want that our for loop to terminate at number 15
            and stop executing further. For that, we declare break function by defining (x==15): break, so as soon as
            the code calls the number 15 it terminates the program Code Line 10 declare variable x between range (10,
            20)&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Code Line 11 declare the condition for breakpoint at x==15,&lt;/li&gt;
                &lt;li&gt;Code Line 12 checks and repeats the steps until it reaches number 15&lt;/li&gt;
                &lt;li&gt;Code Line 13 Print the result in output &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;How to use &quot;continue statement&quot; in For Loop&lt;/h2&gt;
            &lt;p&gt;Continue function, as the name indicates, will terminate the current iteration of the for loop BUT will
                continue execution of the remaining iterations. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
             #use a for loop over a collection
             #Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             #for m in Months:
                 #print m
                 
         # use the break and continue statements
                 
                 
                 for x in range (10,20):
                     #if (x == 15): break
                     if (x % 5 == 0) : continue
                     print(x)
         
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;Continue statement can be used in for loop when you want to fetch a specific value from the list. &lt;/p&gt;
            &lt;p&gt;In our example, we have declared value 10-20, but between these numbers we only want those number that
                are NOT divisible by 5 or in other words which don't give zero when divided by 5. &lt;/p&gt;
            &lt;p&gt; So, in our range (10,11, 12….19,20) only 3 numbers falls (10,15,20) that are divisible by 5 and rest are
                not. &lt;/p&gt;
            &lt;p&gt;So except number 10,15 &amp;amp; 20 the &quot;for loop&quot; will not continue and print out those number as output.
            &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Code line 10 declare the variable x for range (10, 20)&lt;/li&gt;
                &lt;li&gt;Code line 12 declare the condition for x divided by 5=0 continue&lt;/li&gt;
                &lt;li&gt;Code line 13 print the result &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;How to use &quot;enumerate&quot; function for &quot;For Loop&quot;&lt;/h2&gt;
            &lt;p&gt;Enumerate function in &quot;for loop&quot; does two things &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;It returns the index number for the member &lt;/li&gt;
                &lt;li&gt;And the member of the collection that we are looking at&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;p&gt;Enumerate function is used for the numbering or indexing the members in the list. &lt;/p&gt;
            &lt;p&gt;Suppose, we want to do numbering for our month ( Jan, Feb, Marc, ….June), so we declare the variable i
                that enumerate the numbers while m will print the number of month in list. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
             #use a for loop over a collection
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for i, m in enumerate (Months):
                 print(i,m)
                 
         # use the break and continue statements
                 
                 
                 #for x in range (10,20):
                 #if (x == 15): break
                 #if (x % 5 == 0) : continue
                 #print x
         
         
                 
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;When code is executed the output of the enumerate function returns the months name with an index number
                like (0-Jan), (1- Feb), (2- March), etc. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Code Line 3 declares the list of months [ Jan, Feb,…Jun]&lt;/li&gt;
                &lt;li&gt;Code Line 4 declares variable i and m for For Loop &lt;/li&gt;
                &lt;li&gt;Code Line 5 will print the result and again enter the For Loop for the rest of the months to
                    enumerate&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Pratical Example&lt;/h2&gt;
            &lt;p&gt;Let see another example for For Loop to repeat the same statement over and again. &lt;/p&gt;
            &lt;div&gt;
                &lt;table class=&quot;table table-striped table-bordered&quot; width=&quot;100%&quot;&gt;
                    &lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;&lt;strong&gt;Python loop&lt;/strong&gt;&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;p&gt;&lt;strong&gt;Working Code for all exercises&lt;/strong&gt;&lt;/p&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;Code for while loop&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
            x=0    
            while (x&amp;lt;4):
               
                print x
                x= x+1
         if __name__== &quot;__main__&quot;:
           main()  
         &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;For Loop Simple Example&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
            x=0 
               
            for x in range (2,7):
               
                print x
             
         if __name__== &quot;__main__&quot;:
           main()        
             
            &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;Use of for loop in string&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
                
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for m in (Months):
                 print m
                 
         if __name__== &quot;__main__&quot;:
          main()
         
         &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;Use break-statement in for loop&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
                
            for x in range (10,20):
                if (x == 15): break
                print x
             
         if __name__== &quot;__main__&quot;:
           main()  
         
         &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;Use of Continue statement in for loop&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
                
            for x in range (10,20):
                if (x % 5 == 0): continue
                print x
             
         if __name__== &quot;__main__&quot;:
           main()        
         
           &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td width=&quot;50%&quot;&gt;
                                &lt;p&gt;Code for &quot;enumerate function&quot; with &quot;for loop&quot;&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
              
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for i, m in enumerate (Months):
                 print i,m
                 
         if __name__== &quot;__main__&quot;:
           main()     
               &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;How to use for loop to repeat the same statement over and again&lt;/h2&gt;
            &lt;p&gt;You can use for loop for even repeating the same statement over and again. Here in the example we have
                printed out word &quot;guru99&quot; three times. &lt;/p&gt;
            &lt;p&gt;Example: To repeat same statement number of times, we have declared the number in variable i (i in 123).
                So when you run the code as shown below, it prints the statement (guru99) that many times the number
                declared for our the variable in ( i in 123). &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;for i in '123':
          print &quot;guru99&quot;,i,&lt;/pre&gt;
            &lt;p&gt;Like other programming languages, Python also uses a loop but instead of using a range of different loops
                it is restricted to only two loops &quot;While loop&quot; and &quot;for loop&quot;. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;While loops are executed based on whether the conditional statement is true or false.&lt;/li&gt;
                &lt;li&gt;For loops are called iterators, it iterates the element based on the condition set&lt;/li&gt;
                &lt;li&gt;Python For loops can also be used for a set of various other things (specifying the collection of
                    elements we want to loop over)&lt;/li&gt;
                &lt;li&gt;Breakpoint is used in For Loop to break or terminate the program at any particular point&lt;/li&gt;
                &lt;li&gt;Continue statement will continue to print out the statement, and prints out the result as per the
                    condition set&lt;/li&gt;
                &lt;li&gt;Enumerate function in &quot;for loop&quot; returns the member of the collection that we are looking at with
                    the index number&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;p&gt;Above codes are Python 3 examples, If you want to run in Python 2 please consider following code. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         # How to use &quot;While Loop&quot;
         #Example file for working with loops
         #
         def main():
             x=0
             #define a while loop
             while(x &amp;lt;4):
                 print x
                 x = x+1
         
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use &quot;For Loop&quot;
         #Example file for working with loops
         #
         def main():
             x=0
             #define a while loop
         #	while(x &amp;lt;4):
         #		print x
         #		x = x+1
         
         
         #Define a for loop 
         for x in range(2,7):
                 print x
         
         
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use For Loop for String
         def main():
             #use a for loop over a collection
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for m in Months:
                 print m
                 
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use break statements in For Loop
         def main():
             #use a for loop over a collection
             #Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             #for m in Months:
                 #print m
                 
         # use the break and continue statements
                 for x in range (10,20):
                     if (x == 15): break
                     #if (x % 2 == 0) : continue
                     print x
         
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use &quot;continue statement&quot; in For Loop
         def main():
             #use a for loop over a collection
             #Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             #for m in Months:
                 #print m
                 
         # use the break and continue statements		
                 for x in range (10,20):
                     #if (x == 15): break
                     if (x % 5 == 0) : continue
                     print x
         
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use &quot;enumerate&quot; function for &quot;For Loop&quot;
         def main():
             #use a for loop over a collection
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for i, m in enumerate (Months):
                 print i,m
                 
         # use the break and continue statements
                 #for x in range (10,20):
                 #if (x == 15): break
                 #if (x % 5 == 0) : continue
                 #print x
             
         if __name__ == &quot;__main__&quot;:
             main()
         &lt;/pre&gt;


        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonIf&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonClass&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python For &amp;amp; While Loops: Enumerate, Break, Continue Statement</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">13. IF in Python</title><link href="http://localhost:4000/blog/PythonIf" rel="alternate" type="text/html" title="13. IF in Python" /><published>2019-09-30T05:30:00+05:30</published><updated>2019-09-30T05:30:00+05:30</updated><id>http://localhost:4000/blog/PythonIf</id><content type="html" xml:base="http://localhost:4000/blog/PythonIf">&lt;section class=&quot;Ptutorial13&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python IF, ELSE, ELIF, Nested IF &amp;amp; Switch Case Statement &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;h3&gt;What are Conditional Statements?&lt;/h3&gt;
            &lt;p&gt;Conditional Statement in Python perform different computations or actions depending on whether a specific
                Boolean constraint evaluates to true or false. Conditional statements are handled by IF statements in
                Python. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will see how to apply conditional statements in Python. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is If Statement? How to Use it? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;What happen when &quot;if condition&quot; does not meet &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;How to use &quot;else condition&quot; &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;When &quot;else condition&quot; does not work &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;How to use &quot;elif&quot; condition &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;How to execute conditional statement with minimal code &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Nested IF Statement &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Switch Statement &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is If Statement? How to Use it?&lt;/h2&gt;
            &lt;p&gt;In Python, If Statement is used for decision making. It will run the body of code only when IF statement
                is true. &lt;/p&gt;
            &lt;p&gt;When you want to justify one condition while the other condition is not true, then you use &quot;if
                statement&quot;. &lt;/p&gt;
            &lt;p&gt;Syntax: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
if expression
 Statement
else 
 Statement
&lt;/pre&gt;
            &lt;p&gt;Let see an &lt;strong&gt;example&lt;/strong&gt;- &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/13/Python11.1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Python Conditional Statements&quot;
                        alt=&quot;Python Conditional Statements&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/13/Python11.1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
#
#Example file for working with conditional statement
#
def main():
	x,y =2,8
	
	if(x &amp;lt; y):
		st= &quot;x is less than y&quot;
	print(st)
	
if __name__ == &quot;__main__&quot;:
	main()&lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;Code Line 5: We define two variables x, y = 2, 8 &lt;/li&gt;
                &lt;li&gt;Code Line 7: The if Statement checks for condition x&amp;lt;y which is &lt;strong&gt;True&lt;/strong&gt; in this
                    case&lt;/li&gt;
                &lt;li&gt;Code Line 8: The variable st is set to &quot;x is less than y.&quot;&lt;/li&gt;
                &lt;li&gt;Code Line 9: The line print st will output the value of variable st which is &quot;x is less than y&quot;,
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;What happen when &quot;if condition&quot; does not meet&lt;/h2&gt;
            &lt;p&gt;In this step, we will see what happens when your &quot;if condition&quot; does not meet. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/13/Python11.2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;If Statement: Python Conditional Structures&quot;
                        alt=&quot;Python Conditional Statements: IF, ELIF, ELSE Nested IF&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/13/Python11.2.png&quot; &quot;=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
      &lt;ul&gt;
         &lt;li&gt;Code Line 5: We define two variables x, y = 8, 4&lt;/li&gt;
         &lt;li&gt;Code Line 7: The if Statement checks for condition x&amp;lt;y which is &lt;strong&gt;False&lt;/strong&gt; in this case&lt;/li&gt;
         &lt;li&gt;Code Line 8: The variable st is &lt;strong&gt;NOT&lt;/strong&gt; set to &quot; x is less than y.&quot;&lt;/li&gt; &lt;li&gt;Code Line 9: The
                    line print st - is trying to print the value of a variable that was never declared. Hence, we get an
                    error.&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;How to use &quot;else condition&quot;&lt;/h2&gt;
                    &lt;p&gt;The &quot;else condition&quot; is usually used when you have to judge one statement on the basis of other.
                        If one condition goes wrong, then there should be another condition that should justify the
                        statement or logic. &lt;/p&gt;
                    &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
                    &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                            href=&quot;http://localhost:4000/img/python/tutorial/13/Python11.3.png&quot;
                            class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                                title=&quot;If Statement: Python Conditional Structures&quot;
                                alt=&quot;Python Conditional Statements: IF, ELIF, ELSE Nested IF&quot;
                                src=&quot;http://localhost:4000/img/python/tutorial/13/Python11.3.png&quot; &quot;=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
      &lt;pre class=&quot; code-toolbar&quot;&gt;#
                            #Example file for working with conditional statement
                            #
                            def main():
                            x,y =8,4

                            if(x &amp;lt; y):
                            st= &quot;x is less than y&quot;
                            else:
                            st= &quot;x is greater than y&quot;
                            print (st)

                            if __name__ == &quot;__main__&quot;:
                            main()
            &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;Code Line 5: We define two variables x, y = 8, 4&lt;/li&gt;
                &lt;li&gt;Code Line 7: The if Statement checks for condition x&amp;lt;y which is &lt;strong&gt;False&lt;/strong&gt; in this
                    case&lt;/li&gt;
                &lt;li&gt;Code Line 9: The flow of program control goes to else condition &lt;/li&gt;
                &lt;li&gt;Code Line 10: The variable st is set to &quot;x is &lt;strong&gt;greater&lt;/strong&gt; than y.&quot;&lt;/li&gt;
                &lt;li&gt;Code Line 11: The line print st will output the value of variable st which is &quot;x is greater than y&quot;,
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;When &quot;else condition&quot; does not work&lt;/h2&gt;
            &lt;p&gt;There might be many instances when your &quot;else condition&quot; won't give you the desired result. It will print
                out the wrong result as there is a mistake in program logic. In most cases, this happens when you have
                to justify more than two statement or condition in a program. &lt;/p&gt;
            &lt;p&gt; An &lt;strong&gt;example&lt;/strong&gt; will better help you to understand this concept. &lt;/p&gt;
            &lt;p&gt;Here both the variables are same (8,8) and the program output is &lt;strong&gt;&quot;x is greater than y&quot;,&lt;/strong&gt;
                which is &lt;strong&gt;WRONG&lt;/strong&gt;. This is because it checks the first condition (if condition), and if it
                fails, then it prints out the second condition (else condition) as default. In next step, we will see
                how we can correct this error.&lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/13/Python11.4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;If Statement: Python Conditional Structures&quot;
                        alt=&quot;Python Conditional Statements: IF, ELIF, ELSE Nested IF&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/13/Python11.4.png&quot; &quot;=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
      &lt;pre class=&quot; code-toolbar&quot;&gt;#
                    #Example file for working with conditional statement
                    #
                    def main():
                    x,y =8,8

                    if(x &amp;lt; y):
                    st= &quot;x is less than y&quot;
                    else:
                    st= &quot;x is greater than y&quot;
                    print(st)

                    if __name__ == &quot;__main__&quot;:
                    main()
            &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;How to use &quot;elif&quot; condition&lt;/h2&gt;
            &lt;p&gt;To correct the previous error made by &quot;else condition&quot;, we can use &lt;strong&gt;&quot;elif&quot;&lt;/strong&gt; statement. By
                using &quot;&lt;strong&gt;elif&lt;/strong&gt;&quot; condition, you are telling the program to print out the third condition or
                possibility when the other condition goes wrong or incorrect. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/13/Python11.5.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;If Statement: Python Conditional Structures&quot;
                        alt=&quot;Python Conditional Statements: IF, ELIF, ELSE Nested IF&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/13/Python11.5.jpg&quot; &quot;=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
      &lt;pre class=&quot; code-toolbar&quot;&gt;#
                    #Example file for working with conditional statement
                    #
                    def main():
                    x,y =8,8

                    if(x &amp;lt; y):
                    st= &quot;x is less than y&quot;

                    elif (x == y):
                    st= &quot;x is same as y&quot;

                    else:
                    st=&quot;x is greater than y&quot;
                    print(st)

                    if __name__ == &quot;__main__&quot;:
                    main()&lt;/pre&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Code Line 5: We define two variables x, y = 8, 8&lt;/li&gt;
                        &lt;li&gt;Code Line 7: The if Statement checks for condition x&amp;lt;y which is &lt;strong&gt;False&lt;/strong&gt; in
                            this case&lt;/li&gt;
                        &lt;li&gt;Code Line 10: The flow of program control goes to the elseif condition. It checks whether
                            x==y which is true&lt;/li&gt;
                        &lt;li&gt;Code Line 11: The variable st is set to &quot;x is &lt;strong&gt;same as &lt;/strong&gt; y.&quot;&lt;/li&gt;
                        &lt;li&gt;Code Line 15: The &lt;strong&gt;flow of program control exits the if Statement (it will not get to
                                the else Statement).&lt;/strong&gt; And print the variable st. The output is &quot;x is same as y&quot;
                            which is correct&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;How to execute conditional statement with minimal code&lt;/h2&gt;
                    &lt;p&gt;In this step, we will see how we can condense out the conditional statement. Instead of executing
                        code for each condition separately, we can use them with a single code. &lt;/p&gt;
                    &lt;p&gt;Syntax &lt;/p&gt;
                    &lt;pre class=&quot;code-toolbar&quot;&gt;	A If B else C
&lt;/pre&gt;
                    &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
                    &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                            href=&quot;http://localhost:4000/img/python/tutorial/13/Python11.6.jpg&quot;
                            class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                                title=&quot;If Statement: Python Conditional Structures&quot;
                                alt=&quot;Python Conditional Statements: IF, ELIF, ELSE Nested IF&quot;
                                src=&quot;http://localhost:4000/img/python/tutorial/13/Python11.6.jpg&quot;
                                width=&quot;90%&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                    &lt;pre class=&quot;code-toolbar&quot;&gt;
def main():
	x,y = 10,8
	st = &quot;x is less than y&quot; if (x &amp;lt; y) else &quot;x is greater than or equal to y&quot;
	print(st)
	
if __name__ == &quot;__main__&quot;:
	main()&lt;/pre&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Code Line 2: We define two variables x, y = 10, 8&lt;/li&gt;
                        &lt;li&gt;Code Line 3: Variable st is set to &quot;x is less than y &quot;if x&amp;lt;y or else it is set to &quot;x is
                            greater than or equal to y&quot;. In this x&amp;gt;y variable st is set to &lt;strong&gt;&quot;x is greater than
                                or equal to y.&quot;&lt;/strong&gt; &lt;/li&gt;
                        &lt;li&gt;Code Line 4: Prints the value of st and gives the correct output&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;ul&gt;
                        &lt;li&gt;
                            &lt;div&gt;Instead of writing long code for conditional statements, Python gives you the freedom
                                to write code in a short and concise way. &lt;/div&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Nested IF Statement&lt;/h2&gt;
                    &lt;p&gt;Following example demonstrates nested if Statement &lt;/p&gt;
                    &lt;pre class=&quot;code-toolbar&quot;&gt;total = 100
#country = &quot;US&quot;
country = &quot;AU&quot;
if country == &quot;US&quot;:
    if total &amp;lt;= 50:
        print(&quot;Shipping Cost is  $50&quot;)
elif total &amp;lt;= 100:
        print(&quot;Shipping Cost is $25&quot;)
elif total &amp;lt;= 150:
	    print(&quot;Shipping Costs $5&quot;)
else:
        print(&quot;FREE&quot;)
if country == &quot;AU&quot;: 
	  if total &amp;lt;= 50:
	    print(&quot;Shipping Cost is  $100&quot;)
else:
	    print(&quot;FREE&quot;)&lt;/pre&gt;
                    &lt;p&gt;Uncomment Line 2 in above code and comment Line 3 and run the code again &lt;/p&gt;
                    &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Switch Statement&lt;/h2&gt;
                    &lt;p&gt;&lt;b&gt;What is switch statement?&lt;/b&gt;&lt;/p&gt;
                    &lt;p&gt;A switch statement is a multiway branch statement that compares the value of a variable to the
                        values specified in case statements. &lt;/p&gt;
                    &lt;p&gt;Python language doesn’t have a switch statement. &lt;/p&gt;
                    &lt;p&gt;Python uses dictionary mapping to implement switch statement in Python &lt;/p&gt;
                    &lt;p&gt;&lt;b&gt;Example&lt;/b&gt; &lt;/p&gt;
                    &lt;pre class=&quot;code-toolbar&quot;&gt;function(argument){
    switch(argument) {
        case 0:
            return &quot;This is Case Zero&quot;;
        case 1:
            return &quot; This is Case One&quot;;
        case 2:
            return &quot; This is Case Two &quot;;
        default:
            return &quot;nothing&quot;;
    };
};

&lt;/pre&gt;
                    &lt;p&gt;For the above switch statement Alternative in Python &lt;/p&gt;
                    &lt;pre class=&quot;code-toolbar&quot;&gt;def SwitchExample(argument):
    switcher = {
        0: &quot; This is Case Zero &quot;,
        1: &quot; This is Case One &quot;,
        2: &quot; This is Case Two &quot;,
    }
    return switcher.get(argument, &quot;nothing&quot;)


if __name__ == &quot;__main__&quot;:
    argument = 1
    print (SwitchExample(argument))
&lt;/pre&gt;
                    &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
                    &lt;p&gt;Above codes are Python 3 examples, If you want to run in Python 2 please consider following code.
                    &lt;/p&gt;
                    &lt;pre class=&quot;code-toolbar&quot;&gt;
# If Statement 
#Example file for working with conditional statement
#
def main():
	x,y =2,8
	
	if(x &amp;lt; y):
		st= &quot;x is less than y&quot;
	print st
	
if __name__ == &quot;__main__&quot;:
	main()



# How to use &quot;else condition&quot;
#Example file for working with conditional statement
#
def main():
	x,y =8,4
	
	if(x &amp;lt; y):
		st= &quot;x is less than y&quot;
	else:
		st= &quot;x is greater than y&quot;
	print st
	
if __name__ == &quot;__main__&quot;:
	main()



# When &quot;else condition&quot; does not work
#Example file for working with conditional statement
#
def main():
	x,y =8,8
	
	if(x &amp;lt; y):
		st= &quot;x is less than y&quot;
	else:
		st= &quot;x is greater than y&quot;
	print st
	
if __name__ == &quot;__main__&quot;:
	main()


# How to use &quot;elif&quot; condition
#Example file for working with conditional statement
#
def main():
	x,y =8,8
	
	if(x &amp;lt; y):
		st= &quot;x is less than y&quot;
	
	elif (x == y):
		st= &quot;x is same as y&quot;
	
	else:
		st=&quot;x is greater than y&quot;
	print st
	
if __name__ == &quot;__main__&quot;:
	main()


# How to execute conditional statement with minimal code
def main():
	x,y = 10,8
	st = &quot;x is less than y&quot; if (x &amp;lt; y) else &quot;x is greater than or equal to y&quot;
	print st
	
if __name__ == &quot;__main__&quot;:
	main()


# Nested IF Statement
total = 100
#country = &quot;US&quot;
country = &quot;AU&quot;
if country == &quot;US&quot;:
    if total &amp;lt;= 50:
        print &quot;Shipping Cost is  $50&quot;
elif total &amp;lt;= 100:
        print &quot;Shipping Cost is $25&quot;
elif total &amp;lt;= 150:
	    print &quot;Shipping Costs $5&quot;
else:
        print &quot;FREE&quot;
if country == &quot;AU&quot;: 
	  if total &amp;lt;= 50:
	    print &quot;Shipping Cost is  $100&quot;
else:
	    print &quot;FREE&quot;


#Switch Statement
def SwitchExample(argument):
    switcher = {
        0: &quot; This is Case Zero &quot;,
        1: &quot; This is Case One &quot;,
        2: &quot; This is Case Two &quot;,
    }
    return switcher.get(argument, &quot;nothing&quot;)


if __name__ == &quot;__main__&quot;:
    argument = 1
    print SwitchExample(argument)
&lt;/pre&gt;
                    &lt;h3&gt;Summary:&lt;/h3&gt;
                    &lt;p&gt;A conditional statement in Python is handled by if statements and we saw various other ways we
                        can use conditional statements like if and else over here. &lt;/p&gt;
                    &lt;ul&gt;
                        &lt;li&gt; &quot;if condition&quot; – It is used when you need to print out the result when one of the
                            conditions is true or false.&lt;/li&gt;
                        &lt;li&gt; &quot;else condition&quot;- it is used when you want to print out the statement when your one
                            condition fails to meet the requirement&lt;/li&gt;
                        &lt;li&gt; &quot;elif condition&quot; – It is used when you have third possibility as the outcome. You can use
                            multiple elif conditions to check for 4&lt;sup&gt;th&lt;/sup&gt;,5&lt;sup&gt;th&lt;/sup&gt;,6&lt;sup&gt;th&lt;/sup&gt;
                            possibilities in your code&lt;/li&gt;
                        &lt;li&gt;We can use minimal code to execute conditional statements by declaring all condition in
                            single statement to run the code &lt;/li&gt;
                        &lt;li&gt;If Statement can be nested&lt;/li&gt;
                    &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFunctions&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonLoop&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python IF, ELSE, ELIF, Nested IF &amp;amp; Switch Case Statement What are Conditional Statements? Conditional Statement in Python perform different computations or actions depending on whether a specific Boolean constraint evaluates to true or false. Conditional statements are handled by IF statements in Python. In this tutorial, we will see how to apply conditional statements in Python. What is If Statement? How to Use it? What happen when &quot;if condition&quot; does not meet How to use &quot;else condition&quot; When &quot;else condition&quot; does not work How to use &quot;elif&quot; condition How to execute conditional statement with minimal code Nested IF Statement Switch Statement What is If Statement? How to Use it? In Python, If Statement is used for decision making. It will run the body of code only when IF statement is true. When you want to justify one condition while the other condition is not true, then you use &quot;if statement&quot;. Syntax: if expression Statement else Statement Let see an example- # #Example file for working with conditional statement # def main(): x,y =2,8 if(x &amp;lt; y): st= &quot;x is less than y&quot; print(st) if __name__ == &quot;__main__&quot;: main() Code Line 5: We define two variables x, y = 2, 8 Code Line 7: The if Statement checks for condition x&amp;lt;y which is True in this case Code Line 8: The variable st is set to &quot;x is less than y.&quot; Code Line 9: The line print st will output the value of variable st which is &quot;x is less than y&quot;, What happen when &quot;if condition&quot; does not meet In this step, we will see what happens when your &quot;if condition&quot; does not meet. Code Line 5: We define two variables x, y = 8, 4 Code Line 7: The if Statement checks for condition x&amp;lt;y which is False in this case Code Line 8: The variable st is NOT set to &quot; x is less than y.&quot; Code Line 9: The line print st - is trying to print the value of a variable that was never declared. Hence, we get an error. How to use &quot;else condition&quot; The &quot;else condition&quot; is usually used when you have to judge one statement on the basis of other. If one condition goes wrong, then there should be another condition that should justify the statement or logic. Example: # #Example file for working with conditional statement # def main(): x,y =8,4</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">16. Expressions in Python</title><link href="http://localhost:4000/blog/PythonExpressions" rel="alternate" type="text/html" title="16. Expressions in Python" /><published>2019-09-30T05:30:00+05:30</published><updated>2019-09-30T05:30:00+05:30</updated><id>http://localhost:4000/blog/PythonExpressions</id><content type="html" xml:base="http://localhost:4000/blog/PythonExpressions">&lt;section class=&quot;Ptutorial16&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Regex: re.match(), re.search(), re.findall() with Example &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;h3&gt;What is Regular Expression?&lt;/h3&gt;
            &lt;p&gt;A regular expression in a programming language is a special text string used for describing a search
                pattern. It is extremely useful for extracting information from text such as code, files, log,
                spreadsheets or even documents. &lt;/p&gt;
            &lt;p&gt;While using the regular expression the first thing is to recognize is that everything is essentially a
                character, and we are writing patterns to match a specific sequence of characters also referred as
                string. Ascii or latin letters are those that are on your keyboards and Unicode is used to match the
                foreign text. It includes digits and punctuation and all special characters like $#@!%, etc. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn- &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Regular Expression Syntax &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Example of w+ and ^ Expression &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Example of \s expression in re.split function &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Using regular expression methods &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Using re.match() &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Finding Pattern in Text (re.search()) &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Using re.findall for text &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Python Flags &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Example of re.M or Multiline Flags &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;For instance, a regular expression could tell a program to search for specific text from the string and
                then to print out the result accordingly. Expression can include &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Text matching&lt;/li&gt;
                &lt;li&gt;Repetition&lt;/li&gt;
                &lt;li&gt;Branching&lt;/li&gt;
                &lt;li&gt;Pattern-composition etc.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In Python, a regular expression is denoted as RE (REs, regexes or regex pattern) are imported through
                &lt;strong&gt;re module&lt;/strong&gt;. Python supports regular expression through libraries. In Python regular
                expression supports various things like &lt;strong&gt;Modifiers, Identifiers, and White space
                    characters&lt;/strong&gt;. &lt;/p&gt;
            &lt;div&gt;
                &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                    &lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;&lt;strong&gt; Identifiers&lt;/strong&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;strong&gt;Modifiers&lt;/strong&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;strong&gt;White space characters&lt;/strong&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;strong&gt;Escape required&lt;/strong&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;\d= any number (a digit)&lt;/td&gt;
                            &lt;td&gt;\d represents a digit.Ex: \d{1,5} it will declare digit between 1,5 like 424,444,545
                                etc.&lt;/td&gt;
                            &lt;td&gt;\n = new line&lt;/td&gt;
                            &lt;td&gt;. + * ? [] $ ^ () {} | \&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;\D= anything but a number (a non-digit)&lt;/td&gt;
                            &lt;td&gt;+ = matches 1 or more&lt;/td&gt;
                            &lt;td&gt;\s= space&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;\s = space (tab,space,newline etc.)&lt;/td&gt;
                            &lt;td&gt;? = matches 0 or 1&lt;/td&gt;
                            &lt;td&gt;\t =tab&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;\S= anything but a space&lt;/td&gt;
                            &lt;td&gt;* = 0 or more&lt;/td&gt;
                            &lt;td&gt;\e = escape&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;\w = letters ( Match alphanumeric character, including &quot;_&quot;)&lt;/td&gt;
                            &lt;td&gt;$ match end of a string&lt;/td&gt;
                            &lt;td&gt;\r = carriage return&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;\W =anything but letters ( Matches a non-alphanumeric character excluding &quot;_&quot;)&lt;/td&gt;
                            &lt;td&gt;^ match start of a string&lt;/td&gt;
                            &lt;td&gt;\f= form feed&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;. = anything but letters (periods)&lt;/td&gt;
                            &lt;td&gt;| matches either or x/y&lt;/td&gt;
                            &lt;td&gt;-----------------&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;\b = any character except for new line&lt;/td&gt;
                            &lt;td&gt;[] = range or &quot;variance&quot;&lt;/td&gt;
                            &lt;td&gt;----------------&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;\.&lt;/td&gt;
                            &lt;td&gt;{x} = this amount of preceding code&lt;/td&gt;
                            &lt;td&gt;-----------------&lt;/td&gt;
                            &lt;td&gt; &lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;Regular Expression Syntax&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;RE &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;	import re
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&quot;re&quot; module included with Python primarily used for string searching and manipulation &lt;/li&gt;
                &lt;li&gt;Also used frequently for web page &quot;Scraping&quot; (extract large amount of data from websites)&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;We will begin the expression tutorial with this simple exercise by using the expressions (w+) and (^).
            &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Example of w+ and ^ Expression&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;&quot;^&quot;: &lt;/strong&gt;This expression matches the start of a string&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;&quot;w+&lt;/strong&gt;&quot;: This expression matches the alphanumeric character in the string&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Here we will see an example of how we can use w+ and ^ expression in our code. We cover re.findall
                function later in this tutorial but for a while we simply focus on \w+ and \^ expression. &lt;/p&gt;
            &lt;p&gt; For example, for our string &quot;guru99, education is fun&quot; if we execute the code with w+ and^, it will give
                the output &quot;guru99&quot;. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/16/Python14.1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;Python Regular Expressions: Complete Tutorial&quot;
                        alt=&quot;Python Regex Tutorial: re.match(),re.search(), re.findall(), Flags&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/16/Python14.1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import re
         xx = &quot;guru99,education is fun&quot;
         r1 = re.findall(r&quot;^\w+&quot;,xx)
         print(r1)&lt;/pre&gt;
            &lt;p&gt;Remember, if you remove +sign from the w+, the output will change, and it will only give the first
                character of the first letter, i.e., [g] &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Example of \s expression in re.split function&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;&quot;s&quot;: This expression is used for creating a space in the string&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;To understand how this regular expression works in Python, we begin with a simple example of a split
                function. In the example, we have split each word using the &quot;re.split&quot; function and at the same time we
                have used expression \s that allows to parse each word in the string separately. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/16/Python14.2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;Python Regular Expressions: Complete Tutorial&quot;
                        alt=&quot;Python Regex Tutorial: re.match(),re.search(), re.findall(), Flags&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/16/Python14.2.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;When you execute this code it will give you the output ['we', 'are', 'splitting', 'the', 'words']. &lt;/p&gt;
            &lt;p&gt;Now, let see what happens if you remove &quot;\&quot; from s. There is no 's' alphabet in the output, this is
                because we have removed '\' from the string, and it evaluates &quot;s&quot; as a regular character and thus split
                the words wherever it finds &quot;s&quot; in the string. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/16/Python14.3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;Python Regular Expressions: Complete Tutorial&quot;
                        alt=&quot;Python Regex Tutorial: re.match(),re.search(), re.findall(), Flags&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/16/Python14.3.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Similarly, there are series of other regular expressions in Python that you can use in various ways in
                Python like \d,\D,$,\.,\b, etc. &lt;/p&gt;
            &lt;p&gt;Here is the complete code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import re
         xx = &quot;guru99,education is fun&quot;
         r1 = re.findall(r&quot;^\w+&quot;, xx)
         print((re.split(r'\s','we are splitting the words')))
         print((re.split(r's','split the words')))&lt;/pre&gt;
            &lt;p&gt;Next, we will going to see the types of methods that are used with regular expressions. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Using regular expression methods&lt;/h2&gt;
            &lt;p&gt;The &quot;re&quot; package provides several methods to actually perform queries on an input string. The method we
                going to see are &lt;/p&gt;

            &lt;ul&gt;
                &lt;li&gt;re.match()&lt;/li&gt;
                &lt;li&gt;re.search()&lt;/li&gt;
                &lt;li&gt;re.findall()&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Based on the regular expressions, Python offers two different primitive
                operations. The match method checks for a match only at the beginning of the string while search checks
                for a match anywhere in the string. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Using re.match()&lt;/h2&gt;
            &lt;p&gt;The match function is used to match the RE pattern to string with optional flags. In this method, the
                expression &quot;w+&quot; and &quot;\W&quot; will match the words starting with letter 'g' and thereafter, anything which is
                not started with 'g' is not identified. To check match for each element in the list or string, we run
                the forloop. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/16/Python14.4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;Python Regular Expressions: Complete Tutorial&quot;
                        alt=&quot;Python Regex Tutorial: re.match(),re.search(), re.findall(), Flags&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/16/Python14.4.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Finding Pattern in Text (re.search())&lt;/h2&gt;
            &lt;p&gt;A regular expression is commonly used to search for a pattern in a text. This method takes a regular
                expression pattern and a string and searches for that pattern with the string. &lt;/p&gt;
            &lt;p&gt;In order to use search() function, you need to import re first and then execute the code. The search()
                function takes the &quot;pattern&quot; and &quot;text&quot; to scan from our main string and returns a match object when the
                pattern is found or else not match if the pattern is not found. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/16/Python14.5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;Python Regular Expressions: Complete Tutorial&quot;
                        alt=&quot;Python Regex Tutorial: re.match(),re.search(), re.findall(), Flags&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/16/Python14.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;For example here we look for two literal strings &quot;Software testing&quot; &quot;guru99&quot;, in a text string
                &quot;Software&lt;a href=&quot;/software-testing.html&quot;
                    onclick=&quot;ga('send', 'event', 'internal_linking', 'Python Regex Tutorial: re.match(),re.search(), re.findall(), Flags', 'Python Regex Tutorial: re.match(),re.search(), re.findall(), Flags');&quot;&gt;
                    Testing &lt;/a&gt;is fun&quot;. For &quot;software testing&quot; we found the match hence it returns the output as &quot;found
                a match&quot;, while for word &quot;guru99&quot; we could not found in string hence it returns the output as &quot;No
                match&quot;. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Using re.findall for text&lt;/h2&gt;
            &lt;p&gt;Re.findall() module is used when you want to iterate over the lines of the file, it will return a list of
                all the matches in a single step. For example, here we have a list of e-mail addresses, and we want all
                the e-mail addresses to be fetched out from the list, we use the re.findall method. It will find all the
                e-mail addresses from the list. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/16/Python14.6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;Python Regular Expressions: Complete Tutorial&quot;
                        alt=&quot;Python Regex Tutorial: re.match(),re.search(), re.findall(), Flags&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/16/Python14.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Here is the complete code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import re
         
         list = [&quot;guru99 get&quot;, &quot;guru99 give&quot;, &quot;guru Selenium&quot;]
         for element in list:
             z = re.match(&quot;(g\w+)\W(g\w+)&quot;, element)
         if z:
             print((z.groups()))
             
         patterns = ['software testing', 'guru99']
         text = 'software testing is fun?'
         for pattern in patterns:
             print('Looking for &quot;%s&quot; in &quot;%s&quot; -&amp;gt;' % (pattern, text), end=' ')
             if re.search(pattern, text):
                 print('found a match!')
         else:
             print('no match')
         abc = &lt;span id=&quot;cloakb423dbe997bf5ce49a8608254902d46c&quot;&gt;&lt;a href=&quot;mailto:'guru99@google.com&quot;&gt;'guru99@google.com&lt;/a&gt;&lt;/span&gt;&lt;script src=&quot;/media/plg_jchoptimize/cache/js/b6bec3fdcab9c764d07ac6eb67aa12a4_0.js&quot;&gt;&lt;/script&gt;
             &lt;script&gt;document.getElementById('cloakb423dbe997bf5ce49a8608254902d46c').innerHTML = ''; var prefix = '&amp;#109;a' + 'i&amp;#108;' + '&amp;#116;o'; var path = 'hr' + 'ef' + '='; var addyb423dbe997bf5ce49a8608254902d46c = '&amp;#039;g&amp;#117;r&amp;#117;99' + '&amp;#64;'; addyb423dbe997bf5ce49a8608254902d46c = addyb423dbe997bf5ce49a8608254902d46c + 'g&amp;#111;&amp;#111;gl&amp;#101;' + '&amp;#46;' + 'c&amp;#111;m'; var addy_textb423dbe997bf5ce49a8608254902d46c = '&amp;#039;g&amp;#117;r&amp;#117;99' + '&amp;#64;' + 'g&amp;#111;&amp;#111;gl&amp;#101;' + '&amp;#46;' + 'c&amp;#111;m'; document.getElementById('cloakb423dbe997bf5ce49a8608254902d46c').innerHTML += '&lt;a ' + path + '\'' + prefix + ':' + addyb423dbe997bf5ce49a8608254902d46c + '\'&gt;' + addy_textb423dbe997bf5ce49a8608254902d46c + '&lt;\/a&gt;';&lt;/script&gt;, &lt;span id=&quot;cloak28a8928c51f23b3066d076110cb02d1d&quot;&gt;&lt;a href=&quot;mailto:careerguru99@hotmail.com&quot;&gt;careerguru99@hotmail.com&lt;/a&gt;&lt;/span&gt;&lt;script&gt;document.getElementById('cloak28a8928c51f23b3066d076110cb02d1d').innerHTML = ''; var prefix = '&amp;#109;a' + 'i&amp;#108;' + '&amp;#116;o'; var path = 'hr' + 'ef' + '='; var addy28a8928c51f23b3066d076110cb02d1d = 'c&amp;#97;r&amp;#101;&amp;#101;rg&amp;#117;r&amp;#117;99' + '&amp;#64;'; addy28a8928c51f23b3066d076110cb02d1d = addy28a8928c51f23b3066d076110cb02d1d + 'h&amp;#111;tm&amp;#97;&amp;#105;l' + '&amp;#46;' + 'c&amp;#111;m'; var addy_text28a8928c51f23b3066d076110cb02d1d = 'c&amp;#97;r&amp;#101;&amp;#101;rg&amp;#117;r&amp;#117;99' + '&amp;#64;' + 'h&amp;#111;tm&amp;#97;&amp;#105;l' + '&amp;#46;' + 'c&amp;#111;m'; document.getElementById('cloak28a8928c51f23b3066d076110cb02d1d').innerHTML += '&lt;a ' + path + '\'' + prefix + ':' + addy28a8928c51f23b3066d076110cb02d1d + '\'&gt;' + addy_text28a8928c51f23b3066d076110cb02d1d + '&lt;\/a&gt;';&lt;/script&gt;, &lt;span id=&quot;cloak1b474f05b5758d526118ba6d92a65a9b&quot;&gt;&lt;a href=&quot;mailto:users@yahoomail.com&quot;&gt;users@yahoomail.com&lt;/a&gt;&lt;/span&gt;&lt;script&gt;document.getElementById('cloak1b474f05b5758d526118ba6d92a65a9b').innerHTML = ''; var prefix = '&amp;#109;a' + 'i&amp;#108;' + '&amp;#116;o'; var path = 'hr' + 'ef' + '='; var addy1b474f05b5758d526118ba6d92a65a9b = '&amp;#117;s&amp;#101;rs' + '&amp;#64;'; addy1b474f05b5758d526118ba6d92a65a9b = addy1b474f05b5758d526118ba6d92a65a9b + 'y&amp;#97;h&amp;#111;&amp;#111;m&amp;#97;&amp;#105;l' + '&amp;#46;' + 'c&amp;#111;m'; var addy_text1b474f05b5758d526118ba6d92a65a9b = '&amp;#117;s&amp;#101;rs' + '&amp;#64;' + 'y&amp;#97;h&amp;#111;&amp;#111;m&amp;#97;&amp;#105;l' + '&amp;#46;' + 'c&amp;#111;m'; document.getElementById('cloak1b474f05b5758d526118ba6d92a65a9b').innerHTML += '&lt;a ' + path + '\'' + prefix + ':' + addy1b474f05b5758d526118ba6d92a65a9b + '\'&gt;' + addy_text1b474f05b5758d526118ba6d92a65a9b + '&lt;\/a&gt;';&lt;/script&gt;'
         emails = re.findall(r'[\w\.-]+@[\w\.-]+', abc)
         for email in emails:
             print(email)&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Python Flags&lt;/h2&gt;
            &lt;p&gt;Many Python Regex Methods and Regex functions take an optional argument called Flags. This flags can
                modify the meaning of the given Regex pattern. To understand these we will see one or two example of
                these Flags.&lt;/p&gt;
            &lt;p&gt;Various flags used in Python includes&lt;/p&gt;
            &lt;div&gt;
                &lt;table class=&quot;table table-striped&quot;&gt;
                    &lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;&lt;strong&gt;Syntax for Regex Flags&lt;/strong&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;strong&gt; What does this flag do&lt;/strong&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[re.M]&lt;/td&gt;
                            &lt;td&gt;Make begin/end consider each line&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[re.I]&lt;/td&gt;
                            &lt;td&gt;It ignores case&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[re.S]&lt;/td&gt;
                            &lt;td&gt;Make [ . ] &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[re.U]&lt;/td&gt;
                            &lt;td&gt;Make { \w,\W,\b,\B} follows Unicode rules&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[re.L]&lt;/td&gt;
                            &lt;td&gt;Make {\w,\W,\b,\B} follow locale&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;[re.X]&lt;/td&gt;
                            &lt;td&gt;Allow comment in Regex&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Example of re.M or Multiline Flags&lt;/h2&gt;
            &lt;p&gt;In multiline the pattern character [^] match the first character of the string and the beginning of each
                line (following immediately after the each newline). While expression small &quot;w&quot; is used to mark the
                space with characters. When you run the code the first variable &quot;k1&quot; only prints out the character 'g'
                for word guru99, while when you add multiline flag, it fetches out first characters of all the elements
                in the string. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/16/Python14.7.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;Python Regular Expressions: Complete Tutorial&quot;
                        alt=&quot;Python Regex Tutorial: re.match(),re.search(), re.findall(), Flags&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/16/Python14.7.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Here is the code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import re
         xx = &quot;&quot;&quot;guru99 
         careerguru99	
         selenium&quot;&quot;&quot;
         k1 = re.findall(r&quot;^\w&quot;, xx)
         k2 = re.findall(r&quot;^\w&quot;, xx, re.MULTILINE)
         print(k1)
         print(k2)&lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;We declared the variable xx for string &quot; guru99…. careerguru99….selenium&quot;&lt;/li&gt;
                &lt;li&gt;Run the code without using flags multiline, it gives the output only 'g' from the lines&lt;/li&gt;
                &lt;li&gt;Run the code with flag &quot;multiline&quot;, when you print 'k2' it gives the output as 'g', 'c' and 's'
                &lt;/li&gt;
                &lt;li&gt;So, the difference we can see after and before adding multi-lines in above example.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Likewise, you can also use other Python flags like re.U (Unicode), re.L (Follow locale), re.X (Allow
                Comment), etc. &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;p&gt;Above codes are Python 3 examples, If you want to run in Python 2 please consider following code. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;# Example of w+ and ^ Expression
         import re
         xx = &quot;guru99,education is fun&quot;
         r1 = re.findall(r&quot;^\w+&quot;,xx)
         print r1
         
         # Example of \s expression in re.split function
         import re
         xx = &quot;guru99,education is fun&quot;
         r1 = re.findall(r&quot;^\w+&quot;, xx)
         print (re.split(r'\s','we are splitting the words'))
         print (re.split(r's','split the words'))
         
         # Using re.findall for text
         import re
         
         list = [&quot;guru99 get&quot;, &quot;guru99 give&quot;, &quot;guru Selenium&quot;]
         for element in list:
             z = re.match(&quot;(g\w+)\W(g\w+)&quot;, element)
         if z:
             print(z.groups())
             
         patterns = ['software testing', 'guru99']
         text = 'software testing is fun?'
         for pattern in patterns:
             print 'Looking for &quot;%s&quot; in &quot;%s&quot; -&amp;gt;' % (pattern, text),
             if re.search(pattern, text):
                 print 'found a match!'
         else:
             print 'no match'
         abc = &lt;span id=&quot;cloak7e3c445ef7094b61fb031021bd034781&quot;&gt;&lt;a href=&quot;mailto:'guru99@google.com&quot;&gt;'guru99@google.com&lt;/a&gt;&lt;/span&gt;&lt;script&gt;document.getElementById('cloak7e3c445ef7094b61fb031021bd034781').innerHTML = ''; var prefix = '&amp;#109;a' + 'i&amp;#108;' + '&amp;#116;o'; var path = 'hr' + 'ef' + '='; var addy7e3c445ef7094b61fb031021bd034781 = '&amp;#039;g&amp;#117;r&amp;#117;99' + '&amp;#64;'; addy7e3c445ef7094b61fb031021bd034781 = addy7e3c445ef7094b61fb031021bd034781 + 'g&amp;#111;&amp;#111;gl&amp;#101;' + '&amp;#46;' + 'c&amp;#111;m'; var addy_text7e3c445ef7094b61fb031021bd034781 = '&amp;#039;g&amp;#117;r&amp;#117;99' + '&amp;#64;' + 'g&amp;#111;&amp;#111;gl&amp;#101;' + '&amp;#46;' + 'c&amp;#111;m'; document.getElementById('cloak7e3c445ef7094b61fb031021bd034781').innerHTML += '&lt;a ' + path + '\'' + prefix + ':' + addy7e3c445ef7094b61fb031021bd034781 + '\'&gt;' + addy_text7e3c445ef7094b61fb031021bd034781 + '&lt;\/a&gt;';&lt;/script&gt;, &lt;span id=&quot;cloakeea47a6c47b3606d4442b8620b6630d0&quot;&gt;&lt;a href=&quot;mailto:careerguru99@hotmail.com&quot;&gt;careerguru99@hotmail.com&lt;/a&gt;&lt;/span&gt;&lt;script&gt;document.getElementById('cloakeea47a6c47b3606d4442b8620b6630d0').innerHTML = ''; var prefix = '&amp;#109;a' + 'i&amp;#108;' + '&amp;#116;o'; var path = 'hr' + 'ef' + '='; var addyeea47a6c47b3606d4442b8620b6630d0 = 'c&amp;#97;r&amp;#101;&amp;#101;rg&amp;#117;r&amp;#117;99' + '&amp;#64;'; addyeea47a6c47b3606d4442b8620b6630d0 = addyeea47a6c47b3606d4442b8620b6630d0 + 'h&amp;#111;tm&amp;#97;&amp;#105;l' + '&amp;#46;' + 'c&amp;#111;m'; var addy_texteea47a6c47b3606d4442b8620b6630d0 = 'c&amp;#97;r&amp;#101;&amp;#101;rg&amp;#117;r&amp;#117;99' + '&amp;#64;' + 'h&amp;#111;tm&amp;#97;&amp;#105;l' + '&amp;#46;' + 'c&amp;#111;m'; document.getElementById('cloakeea47a6c47b3606d4442b8620b6630d0').innerHTML += '&lt;a ' + path + '\'' + prefix + ':' + addyeea47a6c47b3606d4442b8620b6630d0 + '\'&gt;' + addy_texteea47a6c47b3606d4442b8620b6630d0 + '&lt;\/a&gt;';&lt;/script&gt;, &lt;span id=&quot;cloak0fe0bb819b137f4365c98714691287ca&quot;&gt;&lt;a href=&quot;mailto:users@yahoomail.com&quot;&gt;users@yahoomail.com&lt;/a&gt;&lt;/span&gt;&lt;script&gt;document.getElementById('cloak0fe0bb819b137f4365c98714691287ca').innerHTML = ''; var prefix = '&amp;#109;a' + 'i&amp;#108;' + '&amp;#116;o'; var path = 'hr' + 'ef' + '='; var addy0fe0bb819b137f4365c98714691287ca = '&amp;#117;s&amp;#101;rs' + '&amp;#64;'; addy0fe0bb819b137f4365c98714691287ca = addy0fe0bb819b137f4365c98714691287ca + 'y&amp;#97;h&amp;#111;&amp;#111;m&amp;#97;&amp;#105;l' + '&amp;#46;' + 'c&amp;#111;m'; var addy_text0fe0bb819b137f4365c98714691287ca = '&amp;#117;s&amp;#101;rs' + '&amp;#64;' + 'y&amp;#97;h&amp;#111;&amp;#111;m&amp;#97;&amp;#105;l' + '&amp;#46;' + 'c&amp;#111;m'; document.getElementById('cloak0fe0bb819b137f4365c98714691287ca').innerHTML += '&lt;a ' + path + '\'' + prefix + ':' + addy0fe0bb819b137f4365c98714691287ca + '\'&gt;' + addy_text0fe0bb819b137f4365c98714691287ca + '&lt;\/a&gt;';&lt;/script&gt;'
         emails = re.findall(r'[\w\.-]+@[\w\.-]+', abc)
         for email in emails:
             print email
         
         # Example of re.M or Multiline Flags
         import re
         xx = &quot;&quot;&quot;guru99 
         careerguru99	
         selenium&quot;&quot;&quot;
         k1 = re.findall(r&quot;^\w&quot;, xx)
         k2 = re.findall(r&quot;^\w&quot;, xx, re.MULTILINE)
         print k1
         print k2
         &lt;/pre&gt;
            &lt;h3&gt;Summary&lt;/h3&gt;
            &lt;p&gt;A regular expression in a programming language is a special text string used for describing a search
                pattern. It includes digits and punctuation and all special characters like $#@!%, etc. Expression can
                include literal &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Text matching&lt;/li&gt;
                &lt;li&gt;Repetition&lt;/li&gt;
                &lt;li&gt;Branching&lt;/li&gt;
                &lt;li&gt;Pattern-composition etc.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In Python, a regular expression is denoted as RE (REs, regexes or regex pattern) are embedded through re
                module. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&quot;re&quot; module included with Python primarily used for string searching and manipulation &lt;/li&gt;
                &lt;li&gt;Also used frequently for webpage &quot;Scraping&quot; (extract large amount of data from websites)&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Regular Expression Methods include&lt;/strong&gt; re.match(),re.search()&amp;amp; re.findall()&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Python Flags&lt;/strong&gt; Many Python Regex Methods and Regex functions take an optional
                    argument called Flags&lt;/li&gt;
                &lt;li&gt;This flags can modify the meaning of the given Regex pattern&lt;/li&gt;
                &lt;li&gt;Various Python flags used in Regex Methods are re.M, re.I, re.S, etc. &lt;/li&gt;
            &lt;/ul&gt;


        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonClass&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonDateTime&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Regex: re.match(), re.search(), re.findall() with Example What is Regular Expression? A regular expression in a programming language is a special text string used for describing a search pattern. It is extremely useful for extracting information from text such as code, files, log, spreadsheets or even documents. While using the regular expression the first thing is to recognize is that everything is essentially a character, and we are writing patterns to match a specific sequence of characters also referred as string. Ascii or latin letters are those that are on your keyboards and Unicode is used to match the foreign text. It includes digits and punctuation and all special characters like $#@!%, etc. In this tutorial, we will learn- Regular Expression Syntax Example of w+ and ^ Expression Example of \s expression in re.split function Using regular expression methods Using re.match() Finding Pattern in Text (re.search()) Using re.findall for text Python Flags Example of re.M or Multiline Flags For instance, a regular expression could tell a program to search for specific text from the string and then to print out the result accordingly. Expression can include Text matching Repetition Branching Pattern-composition etc. In Python, a regular expression is denoted as RE (REs, regexes or regex pattern) are imported through re module. Python supports regular expression through libraries. In Python regular expression supports various things like Modifiers, Identifiers, and White space characters. Identifiers Modifiers White space characters Escape required \d= any number (a digit) \d represents a digit.Ex: \d{1,5} it will declare digit between 1,5 like 424,444,545 etc. \n = new line . + * ? [] $ ^ () {} | \ \D= anything but a number (a non-digit) + = matches 1 or more \s= space \s = space (tab,space,newline etc.) ? = matches 0 or 1 \t =tab \S= anything but a space * = 0 or more \e = escape \w = letters ( Match alphanumeric character, including &quot;_&quot;) $ match end of a string \r = carriage return \W =anything but letters ( Matches a non-alphanumeric character excluding &quot;_&quot;) ^ match start of a string \f= form feed . = anything but letters (periods) | matches either or x/y ----------------- \b = any character except for new line [] = range or &quot;variance&quot; ---------------- \. {x} = this amount of preceding code ----------------- Regular Expression Syntax RE import re &quot;re&quot; module included with Python primarily used for string searching and manipulation Also used frequently for web page &quot;Scraping&quot; (extract large amount of data from websites) We will begin the expression tutorial with this simple exercise by using the expressions (w+) and (^). Example of w+ and ^ Expression &quot;^&quot;: This expression matches the start of a string &quot;w+&quot;: This expression matches the alphanumeric character in the string Here we will see an example of how we can use w+ and ^ expression in our code. We cover re.findall function later in this tutorial but for a while we simply focus on \w+ and \^ expression. For example, for our string &quot;guru99, education is fun&quot; if we execute the code with w+ and^, it will give the output &quot;guru99&quot;. import re xx = &quot;guru99,education is fun&quot; r1 = re.findall(r&quot;^\w+&quot;,xx) print(r1) Remember, if you remove +sign from the w+, the output will change, and it will only give the first character of the first letter, i.e., [g] Example of \s expression in re.split function &quot;s&quot;: This expression is used for creating a space in the string To understand how this regular expression works in Python, we begin with a simple example of a split function. In the example, we have split each word using the &quot;re.split&quot; function and at the same time we have used expression \s that allows to parse each word in the string separately. When you execute this code it will give you the output ['we', 'are', 'splitting', 'the', 'words']. Now, let see what happens if you remove &quot;\&quot; from s. There is no 's' alphabet in the output, this is because we have removed '\' from the string, and it evaluates &quot;s&quot; as a regular character and thus split the words wherever it finds &quot;s&quot; in the string. Similarly, there are series of other regular expressions in Python that you can use in various ways in Python like \d,\D,$,\.,\b, etc. Here is the complete code import re xx = &quot;guru99,education is fun&quot; r1 = re.findall(r&quot;^\w+&quot;, xx) print((re.split(r'\s','we are splitting the words'))) print((re.split(r's','split the words'))) Next, we will going to see the types of methods that are used with regular expressions. Using regular expression methods The &quot;re&quot; package provides several methods to actually perform queries on an input string. The method we going to see are</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">17. DateTime in Python</title><link href="http://localhost:4000/blog/PythonDateTime" rel="alternate" type="text/html" title="17. DateTime in Python" /><published>2019-09-30T05:30:00+05:30</published><updated>2019-09-30T05:30:00+05:30</updated><id>http://localhost:4000/blog/PythonDateTime</id><content type="html" xml:base="http://localhost:4000/blog/PythonDateTime">&lt;section class=&quot;Ptutorial17&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python DateTime, TimeDelta, Strftime(Format) with Examples &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;p&gt;In Python, &lt;strong&gt;date, time and datetime&lt;/strong&gt; classes provides a number of function to deal with
                dates, times and time intervals. Date and datetime are an object in Python, so when you manipulate them,
                you are actually manipulating objects and not string or timestamps. Whenever you manipulate dates or
                time, you need to import datetime function. &lt;/p&gt;
            &lt;p&gt;The datetime classes in Python are categorized into main 5 classes. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;date – Manipulate just date ( Month, day, year)&lt;/li&gt;
                &lt;li&gt;time – Time independent of the day (Hour, minute, second, microsecond)&lt;/li&gt;
                &lt;li&gt;datetime – Combination of time and date (Month, day, year, hour, second, microsecond)&lt;/li&gt;
                &lt;li&gt;timedelta— A duration of time used for manipulating dates&lt;/li&gt;
                &lt;li&gt;tzinfo— An abstract class for dealing with time zones&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In this tutorial, we will learn- &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to Use Date &amp;amp; DateTime Class &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Print Date using date.today() &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Python Current Date and Time: now() today() &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;How to Format Date and Time Output with Strftime()&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;How to use Timedelta Objects &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to Use Date &amp;amp; DateTime Class&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;) Before you run the code for datetime, it is important that you import the date
                time modules as shown in the screenshot below. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;These import statements are pre-defined pieces of functionality in the Python library that let you
                manipulates dates and times, without writing any code. &lt;/p&gt;
            &lt;p&gt;Consider the following points before executing the datetime code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;from datetime import date&lt;/pre&gt;
            &lt;p&gt;This line tells the Python interpreter that from the datetime module import the date class We are not
                writing the code for this date functionality alas just importing it for our use &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;) Next, we create an instance of the date object. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.2.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;) Next, we print the date and run the code. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.3.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;The output is as expected. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Print Date using date.today()&lt;/h2&gt;
            &lt;p&gt;&lt;code&gt;date.today&lt;/code&gt; function has several properties associated with it. We can print individual
                day/month/year and many other things &lt;/p&gt;
            &lt;p&gt; Let's see an example &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.4.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h3&gt;Today's Weekday Number&lt;/h3&gt;
            The date.today() function also gives you the weekday number. Here is the Weekday Table which start with
            Monday as 0 and Sunday as 6
            &lt;div&gt;
                &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                    &lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;th&gt;
                                &lt;strong&gt;
                                    &lt;center&gt;Day&lt;/center&gt;
                                &lt;/strong&gt;
                            &lt;/th&gt;
                            &lt;th&gt;
                                &lt;strong&gt;
                                    &lt;center&gt;WeekDay Number&lt;/center&gt;
                                &lt;/strong&gt;
                            &lt;/th&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;strong&gt;
                                    &lt;center&gt;Monday&lt;/center&gt;
                                &lt;/strong&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;center&gt;0&lt;/center&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;strong&gt;
                                    &lt;center&gt;Tuesday&lt;/center&gt;
                                &lt;/strong&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;center&gt;1&lt;/center&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;strong&gt;
                                    &lt;center&gt;Wednesday&lt;/center&gt;
                                &lt;/strong&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;center&gt;2&lt;/center&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;strong&gt;
                                    &lt;center&gt;Thursday&lt;/center&gt;
                                &lt;/strong&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;center&gt;3&lt;/center&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;strong&gt;
                                    &lt;center&gt;Friday&lt;/center&gt;
                                &lt;/strong&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;center&gt;4&lt;/center&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;strong&gt;
                                    &lt;center&gt;Saturday&lt;/center&gt;
                                &lt;/strong&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;center&gt;5&lt;/center&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;strong&gt;
                                    &lt;center&gt;Sunday&lt;/center&gt;
                                &lt;/strong&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;center&gt;6&lt;/center&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;
            &lt;p&gt;Weekday Number is useful for arrays whose index is dependent on the Day of the week. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Python Current Date and Time: now() today()&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Like Date Objects, we can also use &lt;strong&gt;&quot;DATETIME OBJECTS&quot;&lt;/strong&gt; in
                Python. It gives date along with time in &lt;strong&gt;hours, minutes, seconds and milliseconds.&lt;/strong&gt; &lt;/p&gt;

            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;When we execute the code for datetime, it gives the output with current date and time. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; With &quot;DATETIME OBJECT&quot;, you can also call time class. &lt;/p&gt;
            &lt;p&gt;Suppose we want to print just the current time without the date. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;t = datetime.time(datetime.now())
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;We had imported the time class. We will be assigning it the current value of time using
                    datetime.now()&lt;/li&gt;
                &lt;li&gt;We are assigning the value of the current time to the variable t.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;And this will give me just the time. So let's run this program. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.7.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.7.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Okay, so you can see that here I got the date and time. And then the next line, I've got just the time by
                itself &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; We will apply our weekday indexer to our weekday's arrayList to know which day
                is today &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Weekdays operator (wd) is assigned the number from (0-6) number depending on what the current
                    weekday is. Here we declared the array of the list for days (Mon, Tue, Wed…Sun). &lt;/li&gt;
                &lt;li&gt;Use that index value to know which day it is. In our case, it is #2, and it represents Wednesday, so
                    in the output it will print out &quot;Which is a Wednesday.&quot;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.8.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.8.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Here is the complete code to get current date and time using datetime now &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Here is the complete code to get current date and time using datetime now &lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from datetime import date
         from datetime import time
         from datetime import datetime
         def main():
             ##DATETIME OBJECTS
             #Get today's date from datetime class
             today=datetime.now()
             #print (today)
             # Get the current time
             #t = datetime.time(datetime.now())
             #print &quot;The current time is&quot;, t
             #weekday returns 0 (monday) through 6 (sunday)
             wd=date.weekday(today)
             #Days start at 0 for monday
             days= [&quot;monday&quot;,&quot;tuesday&quot;,&quot;wednesday&quot;,&quot;thursday&quot;,&quot;friday&quot;,&quot;saturday&quot;,&quot;sunday&quot;]
             print(&quot;Today is day number %d&quot; % wd)
             print(&quot;which is a &quot; + days[wd])
         
         if __name__== &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;How to Format Date and Time Output with Strftime()&lt;/h2&gt;
            &lt;p&gt;As of now we have learned, how to use datetime and date object in Python. We will advance a step further
                and learn how to use a formatting function to format Time and Date. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1) &lt;/strong&gt;First we will see a simple step of how to format the year. It is better to
                understand with an example. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.9.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.9.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;We used the &quot;&lt;strong&gt;strftime function&quot;&lt;/strong&gt; for formatting. &lt;/li&gt;
                &lt;li&gt;This function uses different &lt;strong&gt;control code&lt;/strong&gt; to give an output. &lt;/li&gt;
                &lt;li&gt;Each control code resembles different parameters like year,month, weekday and date &lt;strong&gt;[(%y/%Y –
                        Year), (%a/%A- weekday), (%b/%B- month), (%d - day of month)] . &lt;/strong&gt; &lt;/li&gt;
                &lt;li&gt;In our case, it is &lt;strong&gt;(&quot;%Y&quot;) &lt;/strong&gt;which resembles year, it prints out the full year with
                    the century (e.g., 2018).&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 2) &lt;/strong&gt;Now if you replace (&quot;%Y&quot;) with lowercase, i.e., ( &quot;%y) and execute the code the
                output will display only (18) and not (2018). The century of the year will not display as shown in the
                screenshot below &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.10.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.10.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; Strf function can declare the date, day, month and year separately. Also with
                small changes in the control code in strftime function you can format the style of the text. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.11.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.11.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Inside the strftime function if you replace (%a) with capital A, i.e., (%A) the output will print out as
                &quot;Firday&quot; instead of just an abbreviation &quot;Fri&quot;. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.12.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.12.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; With the help of &quot;Strftime&quot; function we can also retrieve local system time,
                date or both. &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;%C- indicates the local date and time&lt;/li&gt;
                &lt;li&gt;%x- indicates the local date&lt;/li&gt;
                &lt;li&gt;%X- indicates the local time&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.13.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.13.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;In the output, you can see the result as expected &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 5)&lt;/strong&gt; The &quot;strftime function&quot; allows you to call the time in any format 24 hours or 12
                hours. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.14.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.14.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Just by defining control code like %I/H for hour, % M for minute, %S for second, one can call time for
                different formats &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;12 hours&lt;/strong&gt; time is declared [print now.strftime(&quot;%I:%M:%S %P) ] &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;24 hours &lt;/strong&gt;time is declared [print now.strftime(&quot;%H:%M&quot;)] &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Here is the complete code to convert datetime to String object.&lt;/b&gt;&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         #Example file for formatting time and date output
         #
         from datetime import datetime
         def main():
            #Times and dates can be formatted using a set of predefined string
            #Control codes
               now= datetime.now() #get the current date and time
               #%c - local date and time, %x-local's date, %X- local's time
               print(now.strftime(&quot;%c&quot;))
               print(now.strftime(&quot;%x&quot;))
               print(now.strftime(&quot;%X&quot;))
         ##### Time Formatting ####
               #%I/%H - 12/24 Hour, %M - minute, %S - second, %p - local's AM/PM
               print(now.strftime(&quot;%I:%M:%S %p&quot;)) # 12-Hour:Minute:Second:AM
               print(now.strftime(&quot;%H:%M&quot;)) # 24-Hour:Minute
         
         if __name__== &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;How to use Timedelta Objects&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;With timedelta objects, you can estimate the time for both future and the past.&lt;/strong&gt; In other
                words, it is a timespan to predict any special day, date or time. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Remember this function is not for printing out the time or date, but something to CALCULATE about
                    the future or past&lt;/strong&gt;. Let's see an example to understand it better. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; To run Timedelta Objects, you need to declare the import statement first and
                then execute the code &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.15.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.15.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Write import statement for timedelta&lt;/li&gt;
                &lt;li&gt;Now write the code to print out object from time delta as shown in screen shot&lt;/li&gt;
                &lt;li&gt;Run the code. The timedelta represents a span of 365 days, 8 hrs and 15 minutes and prints the same
                &lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;Confusing? Next step will help- &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; Let's get today's date and time to check whether our import statement is working
                well. When code is executed, it prints out today's date which means our import statement is working well
            &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.16.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.16.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; We will see how we can retrieve date a year from now through delta objects. When
                we run the code, it gives the output as expected. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.17.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.17.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; Another example of how time delta can be used to calculate future date from
                current date and time &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.18.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.18.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 5)&lt;/strong&gt; Let's look into a more complex example. I would like to determine how many days
                past the New Year. Here is how we will proceed &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Using today= date.today() we will get todays date&lt;/li&gt;
                &lt;li&gt;We know the newyear is always on 1-Jan, but the year could be different. Using nyd=
                    date(today.year,1,1) we store the new year in variable nyd&lt;/li&gt;
                &lt;li&gt;if nyd &amp;lt; today: compares whether the current date is greater than the new year. If yes, it enters
                    the while loop&lt;/li&gt;
                &lt;li&gt;((today-nyd).days) gives the difference between a current date and new year in DAYS&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/17/Python15.19.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Date, time and datetime classes in Python&quot;
                        alt=&quot;Python Date &amp;amp; Time Tutorial: Timedelta, Datetime, &amp;amp; Strftime&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/17/Python15.19.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;The output shows that &quot;New Year Day already went by 11 days ago.&quot; &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Here is the complete working code&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         # Example file for working with timedelta objects
         #
         from datetime import date
         from datetime import time
         from datetime import datetime
         from datetime import timedelta
         
         # construct a basic timedelta and print it
         print (timedelta(days=365, hours=8, minutes=15))
         # print today's date
         print (&quot;today is: &quot; + str(datetime.now()))
         # print today's date one year from now
         print (&quot;one year from now it will be:&quot; + str(datetime.now() + timedelta(days=365)))
         # create a timedelta that uses more than one argument
         # print (in one week and 4 days it will be &quot; + str(datetime.now() + timedelta(weeks=1, days=4)))
         # How many days until New Year's Day?
         today = date.today()  # get todays date
         nyd = date(today.year, 1, 1)  # get New Year Day for the same year
         # use date comparison to see if New Year Day has already gone for this year
         # if it has, use the replace() function to get the date for next year
         if nyd &amp;lt; today:
             print (&quot;New Year day is already went by %d days ago&quot; % ((today - nyd).days))&lt;/pre&gt;
            &lt;h2&gt;Python 2 Example&lt;/h2&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from datetime import date
         from datetime import time
         from datetime import datetime
         def main():
              ##DATETIME OBJECTS
             #Get today's date from datetime class
             today=datetime.now()
             #print today
             # Get the current time
             #t = datetime.time(datetime.now())
             #print &quot;The current time is&quot;, t
             #weekday returns 0 (monday) through 6 (sunday)
                 wd = date.weekday(today)
             #Days start at 0 for monday
                 days= [&quot;monday&quot;,&quot;tuesday&quot;,&quot;wednesday&quot;,&quot;thursday&quot;,&quot;friday&quot;,&quot;saturday&quot;,&quot;sunday&quot;]
                 print &quot;Today is day number %d&quot; % wd
                 print &quot;which is a &quot; + days[wd]
         
         if __name__== &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         #Example file for formatting time and date output
         #
         from datetime import datetime
         def main():
            #Times and dates can be formatted using a set of predefined string
            #Control codes
               now= datetime.now() #get the current date and time
               #%c - local date and time, %x-local's date, %X- local's time
               print now.strftime(&quot;%c&quot;)
               print now.strftime(&quot;%x&quot;)
               print now.strftime(&quot;%X&quot;)
         ##### Time Formatting ####   
               #%I/%H - 12/24 Hour, %M - minute, %S - second, %p - local's AM/PM
               print now.strftime(&quot;%I:%M:%S %p&quot;) # 12-Hour:Minute:Second:AM
               print now.strftime(&quot;%H:%M&quot;) # 24-Hour:Minute   
         
         if __name__== &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         # Example file for working with timedelta objects
         #
         from datetime import date
         from datetime import time
         from datetime import datetime
         from datetime import timedelta
         
         # construct a basic timedelta and print it
         print timedelta(days=365, hours=8, minutes=15)
         # print today's date
         print &quot;today is: &quot; + str(datetime.now())
         # print today's date one year from now
         print &quot;one year from now it will be:&quot; + str(datetime.now() + timedelta(days=365))
         # create a timedelta that uses more than one argument
         # print &quot;in one week and 4 days it will be &quot; + str(datetime.now() + timedelta(weeks=1, days=4))
         # How many days until New Year's Day?
         today = date.today()  # get todays date
         nyd = date(today.year, 1, 1)  # get New Year Day for the same year
         # use date comparison to see if New Year Day has already gone for this year
         # if it has, use the replace() function to get the date for next year
         if nyd &amp;lt; today:
             print &quot;New Year day is already went by %d days ago&quot; % ((today - nyd).days)&lt;/pre&gt;
            &lt;h3&gt;Summary&lt;/h3&gt;
            &lt;p&gt;For manipulating dates and times in both simple and complex ways datetime module supplies different
                classes or categories like &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;date – Manipulate just date ( Month, day, year)&lt;/li&gt;
                &lt;li&gt;time – Time independent of the day (Hour, minute, second, microsecond)&lt;/li&gt;
                &lt;li&gt;datetime – Combination of time and date (Month, day, year, hour, second, microsecond)&lt;/li&gt;
                &lt;li&gt;timedelta— A duration of time used for manipulating dates&lt;/li&gt;
                &lt;li&gt;tzinfo— An abstract class for dealing with timezones&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Using datetime objects &lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Importing datetime objects before executing the code is mandatory&lt;/li&gt;
                &lt;li&gt;Using date.today function for printing individual date/month/year as well as indexing the day&lt;/li&gt;
                &lt;li&gt;Using date.time object to get time in hours, minutes, seconds and milliseconds&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Formatting Time-Out with &quot;str f time function&quot;&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Use &quot;str f time function&quot; to change the format of the year&lt;/li&gt;
                &lt;li&gt;Print day, date, month and year separately,&lt;/li&gt;
                &lt;li&gt;Call out time for any format 12 hrs or 24 hrs&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Timedelta Objects&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;With timedelta objects, you can estimate the time for both future and the past&lt;/li&gt;
                &lt;li&gt;Calculate the total days left for the special day(birthday) from the current time&lt;/li&gt;
                &lt;li&gt;Calculate the total days passed for special day(birthday) from the current time&lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonClass&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonCalendar&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python DateTime, TimeDelta, Strftime(Format) with Examples In Python, date, time and datetime classes provides a number of function to deal with dates, times and time intervals. Date and datetime are an object in Python, so when you manipulate them, you are actually manipulating objects and not string or timestamps. Whenever you manipulate dates or time, you need to import datetime function. The datetime classes in Python are categorized into main 5 classes. date – Manipulate just date ( Month, day, year) time – Time independent of the day (Hour, minute, second, microsecond) datetime – Combination of time and date (Month, day, year, hour, second, microsecond) timedelta— A duration of time used for manipulating dates tzinfo— An abstract class for dealing with time zones In this tutorial, we will learn- How to Use Date &amp;amp; DateTime Class Print Date using date.today() Python Current Date and Time: now() today() How to Format Date and Time Output with Strftime() How to use Timedelta Objects How to Use Date &amp;amp; DateTime Class Step 1) Before you run the code for datetime, it is important that you import the date time modules as shown in the screenshot below. These import statements are pre-defined pieces of functionality in the Python library that let you manipulates dates and times, without writing any code. Consider the following points before executing the datetime code from datetime import date This line tells the Python interpreter that from the datetime module import the date class We are not writing the code for this date functionality alas just importing it for our use Step 2) Next, we create an instance of the date object. Step 3) Next, we print the date and run the code. The output is as expected. Print Date using date.today() date.today function has several properties associated with it. We can print individual day/month/year and many other things Let's see an example Today's Weekday Number The date.today() function also gives you the weekday number. Here is the Weekday Table which start with Monday as 0 and Sunday as 6 Day WeekDay Number Monday 0 Tuesday 1 Wednesday 2 Thursday 3 Friday 4 Saturday 5 Sunday 6 Weekday Number is useful for arrays whose index is dependent on the Day of the week. Python Current Date and Time: now() today() Step 1) Like Date Objects, we can also use &quot;DATETIME OBJECTS&quot; in Python. It gives date along with time in hours, minutes, seconds and milliseconds.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">18. Calendar in Python</title><link href="http://localhost:4000/blog/PythonCalendar" rel="alternate" type="text/html" title="18. Calendar in Python" /><published>2019-09-30T00:00:00+05:30</published><updated>2019-09-30T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonCalendar</id><content type="html" xml:base="http://localhost:4000/blog/PythonCalendar">&lt;section class=&quot;Ptutorial18&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python CALENDAR Tutorial with Example &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;p&gt;Calendar module in Python has the calendar class that allows the calculations for various task based on
                date, month, and year. On top of it, the TextCalendar and HTMLCalendar class in Python allows you to
                edit the calendar and use as per your requirement. &lt;/p&gt;
            &lt;p&gt;Let see what we can do with Python Calendar. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step1)&lt;/strong&gt; Run the code. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/18/Python16.1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Calendar in Python&quot;
                        alt=&quot;Python CALENDAR Tutorial with Example&quot; src=&quot;http://localhost:4000/img/python/tutorial/18/Python16.1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Code Line # 1: We begin with &quot;import calendar&quot; which will import all the classes of this module.
                &lt;/li&gt;
                &lt;li&gt;Code Line # 3: c= calendar.TextCalendar(calendar.SUNDAY) tells the interpreter to create a text
                    calendar. Start of the month will be Sunday. In Python, you can format the calendar as you can
                    change the day of the month to begin with&lt;/li&gt;
                &lt;li&gt;Code Line # 4: str= c.formatmonth(2025,1) We are creating calendar for the year 2025, Month 1 –
                    January&lt;/li&gt;
                &lt;li&gt;Code Line # 5: print str will print the output.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Let's quickly change the value from Sunday to Thursday and check the output &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/18/Python16.2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Calendar in Python&quot;
                        alt=&quot;Python CALENDAR Tutorial with Example&quot; src=&quot;http://localhost:4000/img/python/tutorial/18/Python16.2.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; You can also print out the Calendar in HTML format, this feature is helpful for
                developer if they want to make any changes in the look and feel of calendar &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/18/Python16.3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Calendar in Python&quot;
                        alt=&quot;Python CALENDAR Tutorial with Example&quot; src=&quot;http://localhost:4000/img/python/tutorial/18/Python16.3.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; Loops over the days of a month by using c.itermonthday (2025,4), it will fetch
                the total number of days for that month.&lt;/p&gt;

            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/18/Python16.4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Calendar in Python&quot;
                        alt=&quot;Python CALENDAR Tutorial with Example&quot; src=&quot;http://localhost:4000/img/python/tutorial/18/Python16.4.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;When you execute the code to get the total number of days for a specific month say &quot;April&quot; then you
                    will get 30 days in the output but you will also see some zeros along with these days at the
                    beginning and sometimes at the end of it. &lt;/li&gt;
                &lt;li&gt;Zeros in the output mean that the day of the week is in an overlapping month, which means it does
                    not belong to that month.&lt;/li&gt;
                &lt;li&gt;These zeros appears in output because, in your code you have mentioned day (Thursday), so when you
                    call function &quot;c.itermonthdays&quot;, it will start counting days from Thursday and your Thursday may not
                    start with date 1&lt;sup&gt;st&lt;/sup&gt; of April it might be 28&lt;sup&gt;th &lt;/sup&gt;or 29&lt;sup&gt;th&lt;/sup&gt; of March, so
                    when you execute the code it will start counting days from 28&lt;sup&gt;th&lt;/sup&gt; of march and any days
                    after that till 1&lt;sup&gt;st&lt;/sup&gt; of April. These days will be counted as zero and in the output you
                    will see these zeroes and same is applicable to the end of the month.&lt;/li&gt;
                &lt;li&gt;So except date 1-30 all the dates from previous as well as post month will appear in the output as
                    zeroes. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; You can fetch the data from the local system, like months or weekdays, etc &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/18/Python16.5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Calendar in Python&quot;
                        alt=&quot;Python CALENDAR Tutorial with Example&quot; src=&quot;http://localhost:4000/img/python/tutorial/18/Python16.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;The output over here shows that we have printed out the months name from the local system. Likewise,
                    you can also fetch the weekdays name as shown below&lt;/li&gt;
                &lt;li&gt;
                    &lt;div&gt;The output will depend on the local system, suppose if your local system is some other
                        countries then it will give the output as per the local settings of that country. Here we have
                        months so it won't be a difference but if it is a week or day, it will certainly differ.&lt;/div&gt;
                    &lt;p&gt; &lt;/p&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/18/Python16.6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Calendar in Python&quot;
                        alt=&quot;Python CALENDAR Tutorial with Example&quot; src=&quot;http://localhost:4000/img/python/tutorial/18/Python16.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 5)&lt;/strong&gt; You can fetch the list of the specific day for a whole year. For example, there
                is an audit day on every first Monday of a week. You want to know the date of first Monday for each
                month. You can use this code&lt;/p&gt;

            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/18/Python16.7.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Calendar in Python&quot;
                        alt=&quot;Python CALENDAR Tutorial with Example&quot; src=&quot;http://localhost:4000/img/python/tutorial/18/Python16.7.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;mycal = calendar.monthcalendar(2025, month) will create calendar for the month&lt;/li&gt;
                &lt;li&gt;Set variables week1 and week2 to the First and second week of the calendar&lt;/li&gt;
                &lt;li&gt;Check if Week 1 contains Monday, set audit day&lt;/li&gt;
                &lt;li&gt;Else set audit day as the first Monday in week 2&lt;/li&gt;
                &lt;li&gt;The output shows the date for the first Monday that falls in that month. &lt;/li&gt;
                &lt;li&gt;The length of this Cal object is going to be a certain length, based on how many weeks there in the
                    month. In our case, it's going to be one or two as such first Monday of the week will be in the
                    first week most often but if not then consider the second week. Let see in detail why we also
                    consider the second week.&lt;/li&gt;
                &lt;li&gt;Here we are using the calendar's constant Monday, the calendar object gives you constants that
                    represent Sunday, Monday, Tuesday, so on, so forth. We've seen these previously. So, if in week one
                    the day represented by the Monday constant is not equal to 0, remember zeros means days that belong
                    to another month. So, in this case, if it's zero, it's going to be a Monday that belongs to the
                    previous month. But if the first Monday is not equal to 0, that means that my audit day will be
                    within the week one. Otherwise, if that is 0, then the first Monday isn't in the first week of the
                    month, it's gotta be in the second. &lt;/li&gt;
                &lt;li&gt;So, then I say okay, set my audit day variable to be the Monday represented by Week two. So, audit
                    day is going to come back with whatever the day is for either the first or second week. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Here is the complete code &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
     import calendar
     # Create a plain text calendar
     c = calendar.TextCalendar(calendar.THURSDAY)
     str = c.formatmonth(2025, 1, 0, 0)
     print str
     
     # Create an HTML formatted calendar
     hc = calendar.HTMLCalendar(calendar.THURSDAY)
     str = hc.formatmonth(2025, 1)
     print str
     # loop over the days of a month
     # zeroes indicate that the day of the week is in a next month or overlapping month
     for i in c.itermonthdays(2025, 4):
         print i
     
         # The calendar can give info based on local such a names of days and months (full and abbreviated forms)
         for name in calendar.month_name:
             print name
         for day in calendar.day_name:
             print day
         # calculate days based on a rule: For instance an audit day on the second Monday of every month
         # Figure out what days that would be for each month, we can use the script as shown here
         for month in range(1, 13):
             # It retrieves a list of weeks that represent the month
             mycal = calendar.monthcalendar(2025, month)
             # The first MONDAY has to be within the first two weeks
             week1 = mycal[1]
             week2 = mycal[2]
             if week1[calendar.MONDAY] != 0:
                 auditday = week1[calendar.MONDAY]
             else:
             # if the first MONDAY isn't in the first week, it must be in the second week
             auditday = week2[calendar.MONDAY]
         print &quot;%10s %2d&quot; % (calendar.month_name[month], auditday)
            &lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
     import calendar
     # Create a plain text calendar
     c = calendar.TextCalendar(calendar.THURSDAY)
     str = c.formatmonth(2025, 1, 0, 0)
     print(str)
     
     # Create an HTML formatted calendar
     hc = calendar.HTMLCalendar(calendar.THURSDAY)
     str = hc.formatmonth(2025, 1)
     print(str)
     # loop over the days of a month
     # zeroes indicate that the day of the week is in a next month or overlapping month
     for i in c.itermonthdays(2025, 4):
         print(i)
     
         # The calendar can give info based on local such a names of days and months (full and abbreviated forms)
         for name in calendar.month_name:
             print(name)
         for day in calendar.day_name:
             print(day)
         # calculate days based on a rule: For instance an audit day on the second Monday of every month
         # Figure out what days that would be for each month, we can use the script as shown here
         for month in range(1, 13):
             # It retrieves a list of weeks that represent the month
             mycal = calendar.monthcalendar(2025, month)
             # The first MONDAY has to be within the first two weeks
             week1 = mycal[1]
             week2 = mycal[2]
             if week1[calendar.MONDAY] != 0:
                 auditday = week1[calendar.MONDAY]
             else:
             # if the first MONDAY isn't in the first week, it must be in the second week
             auditday = week2[calendar.MONDAY]
         print(&quot;%10s %2d&quot; % (calendar.month_name[month], auditday))
             &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;In Python, you can format the calendar the way you want as you can change the day of the month to
                    begin&lt;/li&gt;
                &lt;li&gt;Print out the Calendar in HTML format&lt;/li&gt;
                &lt;li&gt;Fetch the data from the local system, like months or weekdays&lt;/li&gt;
                &lt;li&gt;Fetch the list of the specific day for a whole year&lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonDateTime&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonList&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python CALENDAR Tutorial with Example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">19. List in Python</title><link href="http://localhost:4000/blog/PythonList" rel="alternate" type="text/html" title="19. List in Python" /><published>2019-09-30T00:00:00+05:30</published><updated>2019-09-30T00:00:00+05:30</updated><id>http://localhost:4000/blog/PythonList</id><content type="html" xml:base="http://localhost:4000/blog/PythonList">&lt;section class=&quot;Ptutorial19&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python List: Comprehension, Apend, Sort, Length, Reverse EXAMPLES &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is a Python List?&lt;/h2&gt;
            &lt;p&gt;A list is exactly what it sounds like, a container that contains different Python objects, which could be
                integers, words, values, etc. It is the equivalent of an array in other programming languages. It is
                represented by square brackets (and this is one of the attributes that differentiates it from tuples,
                which are separated by parentheses). It is also mutable, that is, it can be modified or updated; unlike
                tuples, which are immutable. &lt;/p&gt;
            &lt;p&gt;In this python tutorial, you will learn: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is a Python List? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Examples of Python lists: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Accessing values within lists &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;List slicing &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Updating lists &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Deleting list elements &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Appending list elements &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;List built-in functions (methods) &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Looping through lists &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;List comprehensions &lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Examples of Python lists:&lt;/h2&gt;
            &lt;p&gt;Python lists can be homogeneous, meaning that they can contain the same type of objects; or
                heterogeneous, including different types of objects. &lt;/p&gt;
            &lt;p&gt;Examples of homogeneous lists include: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list of integers =  [1, 2, 3, 8, 33]
         list of animals = ['dog', 'cat', 'goat']
         list of names = ['John', 'Travis', 'Sheila']
         list of floating numbers = [2.2, 4.5, 9.8, 10.4]
         &lt;/pre&gt;
            &lt;p&gt;Examples of heterogeneous lists include: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         [2, 'cat', 34.33, 'Travis']
         [2.22, 33, 'pen']
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Accessing values within lists&lt;/h2&gt;
            &lt;p&gt;To access values within lists, the index of the objects inside the lists can be used. An index in Python
                lists refers to the position of an element within an ordered list. For example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list = [3, 22, 30, 5.3, 20]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;The first value in the list above, 3, has an index of 0&lt;/li&gt;
                &lt;li&gt;The second value, 22, has an index of 1&lt;/li&gt;
                &lt;li&gt;The third value, 30, has an index of 2&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;and so on. To access each of the values from the list, you would use: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list[0] to access 3
         list[1] to access 22
         list[2] to access 30
         list[3] to access 5.3
         list[4] to access 20
         &lt;/pre&gt;
            &lt;p&gt;The last member of a list can also be accessed by using the index -1. For example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;list[-1] = 20
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;List slicing&lt;/h2&gt;
            &lt;p&gt;List slicing is the method of splitting a subset of a list, and the indices of the list objects are also
                used for this. For example, using the same list example above; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list[:] = [3, 22, 30, 5.3, 20] (all the members of the list];
         list[1:3] = [22, 30] (members of the list from index 1 to index 3, without the member at index 3);
         list[:4] = [3, 22, 30, 5.3] (members of the list from index 0 to index 4, without the member at index 4)
         list[2:-1] = [30, 5.3] (members of the list from index 2, which is the third element, to the second to the last element in the list, which is 5.3).
         &lt;/pre&gt;
            &lt;p&gt;Python lists are upper-bound exclusive, and this means that the last index during list slicing is usually
                ignored. That is why &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list[2:-1] = [30, 5.3] &lt;/pre&gt;
            , and not [30, 5.3, 20]. The same goes for all the other list slicing examples given above.
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Updating lists&lt;/h2&gt;
            &lt;p&gt;Let's say you have a list = [physics, chemistry, mathematics], and you want to change the list to
                [biology, chemistry, mathematics], effectively changing the member at index 0. That can easily be done
                by assigning that index to the new member you want. &lt;/p&gt;
            &lt;p&gt;That is, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list = [physics, chemistry, mathematics]
         list[0] = biology
         print(list)
            &lt;/pre&gt;
            &lt;p&gt;Output: [biology, chemistry, mathematics] &lt;/p&gt;
            &lt;p&gt;This replaces the member at index 0 (physics) with the new value you want (chemistry). This can be done
                for any member or subset of the list you want to change. &lt;/p&gt;
            &lt;p&gt;To give another example; let's say you have a list called integers and containing the numbers [2, 5, 9,
                20, 27]. To replace 5 in that list with 10, you can do that with: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         integers = [2, 5, 9, 20, 27]
         integers[1] = 10
         print(integers)
         
         &amp;gt;&amp;gt;&amp;gt; [2, 10, 9, 20, 27]
         &lt;/pre&gt;
            &lt;p&gt;To replace the last member of the list of integers, which is 27, with a free number like 30.5, you would
                use: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         integers = [2, 5, 9, 20, 27]
         integers[-1] = 30.5
         print(integers)
         
         &amp;gt;&amp;gt;&amp;gt; [2, 5, 9, 20, 30.5]
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Deleting list elements&lt;/h2&gt;
            &lt;p&gt;There are 3 Python methods for deleting list elements: list.remove(), list.pop(), and del operator.
                Remove method takes the particular element to be removed as an argument while pop and del take the index
                of the element to be removed as an argument. For example: &lt;/p&gt;
            &lt;p&gt; list = [3, 5, 7, 8, 9, 20] &lt;/p&gt;
            &lt;p&gt;To delete 3 (the 1st element) from the list, you could use:&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt; list.remove(3) or&lt;/li&gt;
                &lt;li&gt; list.pop[0], or&lt;/li&gt;
                &lt;li&gt; del list[0]&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;To delete 8, the item at index 3, from the list, you could use: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt; list.remove(8), or&lt;/li&gt;
                &lt;li&gt; list.pop[3]&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Appending list elements&lt;/h2&gt;
            &lt;p&gt;To append elements to a list, the append method is used, and this adds the element to the end of the
                list. &lt;/p&gt;
            &lt;p&gt;For example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             list_1 = [3, 5, 7, 8, 9, 20]
             list_1.append(3.33)
             print(list_1)
         
             &amp;gt;&amp;gt;&amp;gt; list_1 = [3, 5, 7, 8, 9, 20, 3.33]
         
             list_1.append(&quot;cats&quot;)
             print(list_1)
             &amp;gt;&amp;gt;&amp;gt; list_1 = [3, 5, 7, 8, 9, 20, 3.33, &quot;cats&quot;]
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;List built-in functions (methods)&lt;/h2&gt;
            &lt;p&gt;The following is a list of list built-in functions and methods with their descriptions: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;len(list):&lt;/strong&gt; this gives the length of the list as output. For example:&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9]
         print(len(numbers))
         &amp;gt;&amp;gt;&amp;gt; 4
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;max(list):&lt;/strong&gt; returns the item in the list with the maximum value. For example:&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9]
         print(max(numbers))
         &amp;gt;&amp;gt;&amp;gt; 9
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;min(list):&lt;/strong&gt; returns the item in the list with the maximum value. For example:&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9]
         print(min(numbers))
         &amp;gt;&amp;gt;&amp;gt; 2
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list(tuple):&lt;/strong&gt; converts a tuple object a list. For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;animals = (cat, dog, fish, cow)
         print(list(animals))
         &amp;gt;&amp;gt;&amp;gt; [cat, dog, fish, cow]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.append&lt;/strong&gt;(element): appends the element to the list. For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9]
         numbers.append(15)
         print(numbers)
         &amp;gt;&amp;gt;&amp;gt; [2, 5, 7, 9, 15]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.pop&lt;/strong&gt;(index): removes the element at the specified index from the list. For
                    example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9, 15]
         numbers.pop(2)
         print(numbers)
         &amp;gt;&amp;gt;&amp;gt; [2, 5, 9, 15]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.remove&lt;/strong&gt;(element):deletes the element from the list.For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;values = [2, 5, 7, 9]
         values.remove(2)
         print(values)
         &amp;gt;&amp;gt;&amp;gt; [5, 7, 9]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.reverse&lt;/strong&gt;(): reverses the objects of the list. For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;values = [2, 5, 7, 10]
         values.reverse()
         print(values)
         &amp;gt;&amp;gt;&amp;gt; [10, 7, 5, 2]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.index&lt;/strong&gt;(element): to get the index value of an element within the list. For
                    example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;animals = ['cat', 'dog', 'fish', 'cow', 'goat']
         fish_index = animals.index('fish')
         print(fish_index)
         &amp;gt;&amp;gt;&amp;gt; 2
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;sum&lt;/strong&gt;(list): to get the sum of all the values in the list, if the values are all
                    numbers (integers or decimals). For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;values = [2, 5, 10]
         sum_of_values = sum(values)
         print(sum_of_values)
         
         &amp;gt;&amp;gt;&amp;gt; 17
         &lt;/pre&gt;
            &lt;p&gt;If the list contains any element that is not a number, such as a string, the sum method would not work.
                You would get an error saying: &quot;&lt;strong&gt;TypeError&lt;/strong&gt;: unsupported operand type(s) for +: 'int' and
                'str'&quot; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;list.sort(): to arrange a list of integers, floating point numbers, or strings, in ascending or
                    descending order. For example: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;values = [1, 7, 9, 3, 5]
         # To sort the values in ascending order:
         values.sort()
         print(values)
         
         &amp;gt;&amp;gt;&amp;gt; [1, 3, 5, 7, 9]
         &lt;/pre&gt;
            &lt;p&gt;Another example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         values = [2, 10, 7, 14, 50]
         # To sort the values in descending order:
         values.sort(reverse = True)
         print(values)
         
         &amp;gt;&amp;gt;&amp;gt; [50, 14, 10, 7, 2]
         &lt;/pre&gt;
            &lt;p&gt;A list of strings can also be sorted, either alphabetically, or by length of the strings. For example;
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         # to sort the list by length of the elements
         strings = ['cat', 'mammal', 'goat', 'is']
         sort_by_alphabet = strings.sort()
         sort_by_length = strings.sort(key = len)
         print(sort_by_alphabet)
         print(sort_by_length)
         
         &amp;gt;&amp;gt;&amp;gt; ['cat', 'goat', 'is', 'mammal']
                 ['is', 'cat', 'goat', 'mammal']
         &lt;/pre&gt;
            &lt;p&gt;We can sort the same list alphabetically by using 'strings. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Looping through lists&lt;/h2&gt;
            &lt;p&gt;Looping through lists can be done in just the same way as any other looping function in Python. This way,
                a method can be performed on multiple elements of a list at the same time. For example: &lt;/p&gt;
            &lt;p&gt;list = [10, 20, 30, 40, 50, 60, 70]. &lt;/p&gt;
            &lt;p&gt;To loop through all the elements of this list, and let's say, add 10 to each element: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                 for elem in list:
                 elem = elem + 5
                 print(elem)
             
             &amp;gt;&amp;gt;&amp;gt;&amp;gt;15
                 25
                 35
                 45
                 55
                 65
                 75
         &lt;/pre&gt;
            &lt;p&gt;To loop through the first three elements of the list, and delete all of them; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             for elem in list[:3]:
             list.remove(elem)
         
             &amp;gt;&amp;gt;&amp;gt;list = [40, 50, 60, 70]
         &lt;/pre&gt;
            &lt;p&gt;To loop through the 3&lt;sup&gt;rd&lt;/sup&gt; (index 2) to last element on the list, and append them to a new list
                called new_list: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             new_list = []	
             for elem in list[2:]:
                 new_list.append(elem)
                 print(“New List: {}”.format(new_list))
             
            Output:
             New List: [30, 40, 50, 60, 70]
         &lt;/pre&gt;
            &lt;p&gt;In this way, any or method or function can be applied to the members of a list to perform a particular
                operation. You can either loop through all the members of the list, or loop through a subset of the list
                by using list slicing. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;10&quot;&gt;&lt;/a&gt;List Comprehensions&lt;/h2&gt;
            &lt;p&gt;List comprehensions are Python functions that are used for creating new sequences (such as lists,
                dictionaries, etc.) using sequences that have already been created. They help to reduce longer loops and
                make your code easier to read and maintain. &lt;/p&gt;
            &lt;p&gt;For example; let's say you wanted to create a list which contains the squares of all the numbers from 1
                to 9: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             list_of squares = []
             for int in range(1, 10):
                 square = int ** 2
                 list_of_squares.append(square)
         
             print(list_of_squares)
         
         List_of_squares using for loop:
         
             [1, 4, 9, 16, 25, 36, 49, 64, 81]
         &lt;/pre&gt;
            &lt;p&gt;To do the same thing with list comprehensions: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             list_of_squares_2 = [int**2 for int in range(1, 10)]
         
             print('List of squares using list comprehension: {}'.format(list_of_squares_2))
         
         Output using list comprehension:
         
             [1, 4, 9, 16, 25, 36, 49, 64, 81]
         &lt;/pre&gt;
            &lt;p&gt;As seen above, writing the code using list comprehensions is much shorter than using traditional for
                loops, and is also faster. This is just one example of using list comprehensions in place of for loops,
                but this can be replicated and used in a lot of places where for loops can also be used. Sometimes,
                going with a for loop is the better option, especially if the code is complex, but in many cases, list
                comprehensions will make your coding easier and faster. &lt;/p&gt;
            &lt;p&gt;Below is a table containing some list functions and methods, and their descriptions. &lt;/p&gt;
            &lt;h3&gt;Built-in Functions&lt;/h3&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td width=&quot;50%&quot;&gt;FUNCTION &lt;/td&gt;
                        &lt;td&gt;DESCRIPTION &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Round() &lt;/td&gt;
                        &lt;td&gt;Rounds off the number passed as an argument to a specified number of digits and returns the
                            floating point value &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Min() &lt;/td&gt;
                        &lt;td&gt;return minimum element of a given list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Max() &lt;/td&gt;
                        &lt;td&gt;return maximum element of a given list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;len() &lt;/td&gt;
                        &lt;td&gt;Returns the length of the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Enumerate() &lt;/td&gt;
                        &lt;td&gt;This built-in function generates both the values and indexes of items in an iterable, so we
                            don't need to count manually &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Filter() &lt;/td&gt;
                        &lt;td&gt;tests if each element of a list true or not &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Lambda &lt;/td&gt;
                        &lt;td&gt;An expression that can appear in places where a def (for creating functions) is not
                            syntactic, inside a list literal or a function's call arguments &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Map() &lt;/td&gt;
                        &lt;td&gt;returns a list of the results after applying the given function to each item of a given
                            iterable &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Accumulate() &lt;/td&gt;
                        &lt;td&gt;apply a particular function passed in its argument to all of the list elements returns a
                            list containing the intermediate results &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Sum() &lt;/td&gt;
                        &lt;td&gt;Returns the sum of all the numbers in the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Cmp() &lt;/td&gt;
                        &lt;td&gt;This is used for comparing two lists and returns 1 if the first list is greater than the
                            second list. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Insert &lt;/td&gt;
                        &lt;td&gt;Insert element to list at particular position &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h3&gt;List Methods&lt;/h3&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td width=&quot;50%&quot;&gt;FUNCTION &lt;/td&gt;
                        &lt;td&gt;DESCRIPTION &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Append() &lt;/td&gt;
                        &lt;td&gt;Adds a new item to the end of the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Clear() &lt;/td&gt;
                        &lt;td&gt;Removes all items from the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Copy() &lt;/td&gt;
                        &lt;td&gt;Returns a copy of the original list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Extend() &lt;/td&gt;
                        &lt;td&gt;Add many items to the end of the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Count() &lt;/td&gt;
                        &lt;td&gt;Returns the number of occurrences of a particular item in a list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Index() &lt;/td&gt;
                        &lt;td&gt;Returns the index of a specific element of a list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Pop() &lt;/td&gt;
                        &lt;td&gt;Deletes item from the list at particular index (delete by position) &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Remove() &lt;/td&gt;
                        &lt;td&gt;Deletes specified item from the list (delete by value) &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Reverse() &lt;/td&gt;
                        &lt;td&gt;In-place reversal method which reverses the order of the elements of the list &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h2&gt;Summary&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;A list is exactly what it sounds like, a container that contains different Python objects, which
                    could be integers, words, values, etc.&lt;/li&gt;
                &lt;li&gt;Python lists can be homogeneous, means they can contain the same type of objects; or heterogeneous,
                    containing different types of objects.&lt;/li&gt;
                &lt;li&gt;To access values within lists, the index of the objects inside the lists can be used.&lt;/li&gt;
                &lt;li&gt;List slicing is the method of splitting a subset of a list, and the indices of the list objects are
                    also used for this.&lt;/li&gt;
                &lt;li&gt;Three methods for deleting list elements are : 1)list.remove(), 2)list.pop(), and 3)del operator
                &lt;/li&gt;
                &lt;li&gt;Append method is used to append elements. This adds the element to the end of the list. &lt;/li&gt;
                &lt;li&gt;Looping method of Python program can be performed on multiple elements of a data list at the same
                    time. &lt;/li&gt;
                &lt;li&gt;List comprehensions are Python functions that are used for creating new sequences (such as lists,
                    dictionaries, etc.) using sequences that have already been created. &lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonCalendar&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonReadNWriteFile&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python List: Comprehension, Apend, Sort, Length, Reverse EXAMPLES</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">11. Operatos in Python</title><link href="http://localhost:4000/blog/PyhtonOperators" rel="alternate" type="text/html" title="11. Operatos in Python" /><published>2019-09-28T05:30:00+05:30</published><updated>2019-09-28T05:30:00+05:30</updated><id>http://localhost:4000/blog/PyhtonOperators</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonOperators">&lt;section class=&quot;Ptutorial11&quot;&gt;
   &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
      &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
      &lt;div class=&quot;page-header&quot;&gt;
         &lt;h1 itemprop=&quot;headline&quot;&gt; Python Operators: Arithmetic, Logical, Comparison, Assignment, Bitwise &amp;amp;
            Precedence &lt;/h1&gt;
      &lt;/div&gt;

      &lt;div itemprop=&quot;articleBody&quot;&gt;

         &lt;p&gt;Operators are used to perform operations on values and variables. Operators can manipulate individual items
            and returns a result. The data items are referred as operands or arguments. Operators are either represented
            by keywords or special characters. For example, for identity operators we use keyword &quot;is&quot; and &quot;is not&quot;.
         &lt;/p&gt;
         &lt;p&gt;In this tutorial, we going to learn various operators &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Arithmetic Operators &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Comparison Operators &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Python Assignment Operators &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Logical Operators or Bitwise Operators &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Membership Operators &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Identity Operators &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Operator precedence &lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;Arithmetic Operators&lt;/h2&gt;
         &lt;p&gt;Arithmetic Operators perform various arithmetic calculations like addition, subtraction, multiplication,
            division, %modulus, exponent, etc. There are various methods for arithmetic calculation in Python like you
            can use the eval function, declare variable &amp;amp; calculate, or call functions. &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: For arithmetic operators we will take simple example of addition where we will add
            two-digit 4+5=9 &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;x= 4	
         y= 5
         print(x + y)&lt;/pre&gt;
         &lt;p&gt;Similarly, you can use other arithmetic operators like for multiplication(*), division (/), substraction
            (-), etc. &lt;/p&gt;
         &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Comparison Operators&lt;/h2&gt;
         &lt;p&gt;These operators compare the values on either side of the operand and determine the relation between them. It
            is also referred as relational operators. Various comparison operators are ( ==, != , &amp;lt;&amp;gt;, &amp;gt;,&amp;lt;=,
            etc) &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: For comparison operators we will compare the value of x to the value of y and
            print the result in true or false. Here in example, our value of x = 4 which is smaller than y = 5, so when
            we print the value as x&amp;gt;y, it actually compares the value of x to y and since it is not correct, it
            returns false. &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;x = 4
         y = 5
         print(('x &amp;gt; y  is',x&amp;gt;y))&lt;/pre&gt;
         &lt;p&gt;Likewise, you can try other comparison operators (x &amp;lt; y, x==y, x!=y, etc.) &lt;/p&gt;
         &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Python Assignment Operators&lt;/h2&gt;
         &lt;p&gt;Python assignment operators are used for assigning the value of the right operand to the left operand.
            Various assignment operators used in Python are (+=, - = , *=, /= , etc.) &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Python assignment operators is simply to assign the value, for example &lt;/p&gt;

         &lt;pre class=&quot;code-toolbar&quot;&gt;num1 = 4
         num2 = 5
         print((&quot;Line 1 - Value of num1 : &quot;, num1))
         print((&quot;Line 2 - Value of num2 : &quot;, num2))&lt;/pre&gt;
         &lt;p&gt;&lt;strong&gt;Example of compound assignment operator&lt;/strong&gt; &lt;/p&gt;
         &lt;p&gt;We can also use a compound assignment operator, where you can add, subtract, multiply right operand to left
            and assign addition (or any other arithmetic function) to the left operand. &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;Step 1: Assign value to num1 and num2 &lt;/li&gt;
            &lt;li&gt;Step 2: Add value of num1 and num2 (4+5=9)&lt;/li&gt;
            &lt;li&gt;Step 3: To this result add num1 to the output of Step 2 ( 9+4)&lt;/li&gt;
            &lt;li&gt;Step 4: It will print the final result as 13 &lt;/li&gt;
         &lt;/ul&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;num1 = 4
         num2 = 5
         res = num1 + num2
         res += num1
         print((&quot;Line 1 - Result of + is &quot;, res))&lt;/pre&gt;
         &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Logical Operators&lt;/h2&gt;
         &lt;p&gt;Logical operators in Python are used for conditional statements are true or false. Logical operators in
            Python are AND, OR and NOT. For logical operators following condition are applied. &lt;/p&gt;
         &lt;ul style=&quot;margin-left: 40pt&quot;&gt;
            &lt;li&gt;For AND operator – It returns TRUE if both the operands (right side and left side) are true&lt;/li&gt;
            &lt;li&gt;For OR operator- It returns TRUE if either of the operand (right side or left side) is true&lt;/li&gt;
            &lt;li&gt;For NOT operator- returns TRUE if operand is false&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: Here in example we get true or false based on the value of a and b &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;a = True
         b = False
         print(('a and b is',a and b))
         print(('a or b is',a or b))
         print(('not a is',not a))&lt;/pre&gt;
         &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Membership Operators&lt;/h2&gt;
         &lt;p&gt;These operators test for membership in a sequence such as lists, strings or tuples. There are two membership
            operators that are used in Python. (in, not in). It gives the result based on the variable present in
            specified sequence or string &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: For example here we check whether the value of x=4 and value of y=8 is available
            in list or not, by using &lt;strong&gt;in&lt;/strong&gt; and &lt;strong&gt;not in &lt;/strong&gt;operators. &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;x = 4
         y = 8
         list = [1, 2, 3, 4, 5 ];
         if ( x in list ):
            print(&quot;Line 1 - x is available in the given list&quot;)
         else:
            print(&quot;Line 1 - x is not available in the given list&quot;)
         if ( y not in list ):
            print(&quot;Line 2 - y is not available in the given list&quot;)
         else:
            print(&quot;Line 2 - y is available in the given list&quot;)&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Declare the value for x and y &lt;/li&gt;
            &lt;li&gt;Declare the value of list&lt;/li&gt;
            &lt;li&gt;Use the &quot;in&quot; operator in code with if statement to check the value of x existing in the list and print
               the result accordingly&lt;/li&gt;
            &lt;li&gt;Use the &quot;not in&quot; operator in code with if statement to check the value of y exist in the list and print
               the result accordingly&lt;/li&gt;
            &lt;li&gt;Run the code- When the code run it gives the desired output&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Identity Operators&lt;/h2&gt;
         &lt;p&gt;To compare the memory location of two objects, Identity Operators are used. The two identify operators used
            in Python are (is, is not). &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;Operator is: It returns true if two variables point the same object and false otherwise&lt;/li&gt;
            &lt;li&gt;Operator is not: It returns false if two variables point the same object and true otherwise&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;Following operands are in decreasing order of precedence.&lt;/p&gt;

         &lt;p&gt;Operators in the same box evaluate left to right &lt;/p&gt;
         &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
            &lt;tbody&gt;
               &lt;tr&gt;
                  &lt;th&gt;Operators (Decreasing order of precedence) &lt;/th&gt;
                  &lt;th&gt;Meaning&lt;/th&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;**&lt;/td&gt;
                  &lt;td&gt;Exponent&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;*, /, //, %&lt;/td&gt;
                  &lt;td&gt;Multiplication, Division, Floor division, Modulus&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;+, -&lt;/td&gt;
                  &lt;td&gt;Addition, Subtraction&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;&amp;lt;= &amp;lt; &amp;gt; &amp;gt;=&lt;/td&gt;
                  &lt;td&gt;Comparison operators&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;= %= /= //= -= += *= **=&lt;/td&gt;
                  &lt;td&gt;Assignment Operators&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;is is not&lt;/td&gt;
                  &lt;td&gt;Identity operators&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;in not in&lt;/td&gt;
                  &lt;td&gt;Membership operators&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;not or and&lt;/td&gt;
                  &lt;td&gt;Logical operators&lt;/td&gt;
               &lt;/tr&gt;
            &lt;/tbody&gt;
         &lt;/table&gt;
         &lt;p&gt;&lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;x = 20
         y = 20
         if ( x is y ): 
             print(&quot;x &amp;amp; y  SAME identity&quot;)
         y=30
         if ( x is not y ):
             print(&quot;x &amp;amp; y have DIFFERENT identity&quot;)&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Declare the value for variable x and y&lt;/li&gt;
            &lt;li&gt;Use the operator &quot;is&quot; in code to check if value of x is same as y&lt;/li&gt;
            &lt;li&gt;Next we use the operator &quot;is not&quot; in code if value of x is not same as y&lt;/li&gt;
            &lt;li&gt;Run the code- The output of the result is as expected&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Operator precedence&lt;/h2&gt;
         &lt;p&gt;The operator precedence determines which operators need to be evaluated first. To avoid ambiguity in values,
            precedence operators are necessary. Just like in normal multiplication method, multiplication has a higher
            precedence than addition. For example in 3+ 4*5, the answer is 23, to change the order of precedence we use
            a parentheses (3+4)*5, now the answer is 35. Precedence operator used in Python are (unary + - ~, **, * / %,
            + - , &amp;amp;) etc. &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;v = 4
         w = 5
         x = 8
         y = 2
         z = 0
         z = (v+w) * x / y;   
         print(&quot;Value of (v+w) * x/ y is &quot;,  z)&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Declare the value of variable v,w…z&lt;/li&gt;
            &lt;li&gt;Now apply the formula and run the code&lt;/li&gt;
            &lt;li&gt;The code will execute and calculate the variable with higher precedence and will give the output&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;Python 2 Example&lt;/h3&gt;
         &lt;p&gt;Above examples are Python 3 codes, if you want to use Python 2, please consider following codes &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;#Arithmetic Operators
         x= 4	
         y= 5
         print x + y
         
         #Comparison Operators
         x = 4
         y = 5
         print('x &amp;gt; y  is',x&amp;gt;y)
         
         #Assignment Operators
         num1 = 4
         num2 = 5
         print (&quot;Line 1 - Value of num1 : &quot;, num1)
         print (&quot;Line 2 - Value of num2 : &quot;, num2)
         
         #compound assignment operator
         num1 = 4
         num2 = 5
         res = num1 + num2
         res += num1
         print (&quot;Line 1 - Result of + is &quot;, res)
         
         #Logical Operators
         a = True
         b = False
         print('a and b is',a and b)
         print('a or b is',a or b)
         print('not a is',not a)
         
         #Membership Operators
         x = 4
         y = 8
         list = [1, 2, 3, 4, 5 ];
         if ( x in list ):
            print &quot;Line 1 - x is available in the given list&quot;
         else:
            print &quot;Line 1 - x is not available in the given list&quot;
         if ( y not in list ):
            print &quot;Line 2 - y is not available in the given list&quot;
         else:
            print &quot;Line 2 - y is available in the given list&quot;
         
         #Identity Operators
         x = 20
         y = 20
         if ( x is y ):
             print &quot;x &amp;amp; y  SAME identity&quot;
         y=30
         if ( x is not y ):
             print &quot;x &amp;amp; y have DIFFERENT identity&quot;
         
         #Operator precedence
         v = 4
         w = 5
         x = 8
         y = 2
         z = 0
         z = (v+w) * x / y;   
         print &quot;Value of (v+w) * x/ y is &quot;,  z
         &lt;/pre&gt;
         &lt;h3&gt;Summary:&lt;/h3&gt;
         &lt;p&gt;Operators in a programming language are used to perform various operations on values and variables. In
            Python, you can use operators like &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;There are various methods for arithmetic calculation in Python as you can use the eval function, declare
               variable &amp;amp; calculate, or call functions&lt;/li&gt;
            &lt;li&gt;Comparison operators often referred as relational operators are used to compare the values on either
               side of them and determine the relation between them&lt;/li&gt;
            &lt;li&gt;Python assignment operators are simply to assign the value to variable&lt;/li&gt;
            &lt;li&gt;Python also allows you to use a compound assignment operator, in a complicated arithmetic calculation,
               where you can assign the result of one operand to the other&lt;/li&gt;
            &lt;li&gt;For AND operator – It returns TRUE if both the operands (right side and left side) are true&lt;/li&gt;
            &lt;li&gt;For OR operator- It returns TRUE if either of the operand (right side or left side) is true&lt;/li&gt;
            &lt;li&gt;For NOT operator- returns TRUE if operand is false&lt;/li&gt;
            &lt;li&gt;There are two membership operators that are used in Python. (in, not in). &lt;/li&gt;
            &lt;li&gt;It gives the result based on the variable present in specified sequence or string &lt;/li&gt;
            &lt;li&gt;The two identify operators used in Python are (is, is not)&lt;/li&gt;
            &lt;li&gt;It returns true if two variables point the same object and false otherwise&lt;/li&gt;
            &lt;li&gt;
               &lt;div&gt;Precedence operator can be useful when you have to set priority for which calculation need to be
                  done first in a complex calculation. &lt;/div&gt;
            &lt;/li&gt;
         &lt;/ul&gt;

      &lt;/div&gt;

   &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonDictionary&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFunctions&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Operators: Arithmetic, Logical, Comparison, Assignment, Bitwise &amp;amp; Precedence</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">12. Function in Python</title><link href="http://localhost:4000/blog/PyhtonFunctions" rel="alternate" type="text/html" title="12. Function in Python" /><published>2019-09-28T05:30:00+05:30</published><updated>2019-09-28T05:30:00+05:30</updated><id>http://localhost:4000/blog/PyhtonFunctions</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonFunctions">&lt;section class=&quot;Ptutorial12&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Functions Examples: Call, Indentation, Arguments &amp;amp; Return Values &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;h3&gt;What is a Function in Python?&lt;/h3&gt;
            &lt;p&gt;A Functions in Python are used to utilize the code in more than one place in a program, sometimes also
                called method or procedures. Python provides you many inbuilt functions like print(), but it also gives
                freedom to create your own functions. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to define and call a function in Python &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Significance of Indentation (Space) in Python &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;How Function Return Value? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Arguments in Functions &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to define and call a function in Python&lt;/h2&gt;
            &lt;p&gt;Function in Python is defined by the&lt;strong&gt; &quot;def &quot; &lt;/strong&gt;statement followed by the function name and
                parentheses ( () ) &lt;/p&gt;
            &lt;p&gt;Example: &lt;/p&gt;
            &lt;p&gt;Let us define a function by using the command &quot; def func1():&quot; and call the function. The output of the
                function will be &lt;strong&gt;&quot;I am learning Python function&quot;.&lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;The function &lt;strong&gt;print func1()&lt;/strong&gt; calls our def func1(): and print the command &quot; &lt;strong&gt;I am
                    learning Python function None.&lt;/strong&gt;&quot; &lt;/p&gt;
            &lt;p&gt;There are set of rules in Python to define a function. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Any args or input parameters should be placed within these parentheses&lt;/li&gt;
                &lt;li&gt;The function first statement can be an optional statement- docstring or the documentation string of
                    the function&lt;/li&gt;
                &lt;li&gt;The code within every function starts with a colon (:) and should be indented (space)&lt;/li&gt;
                &lt;li&gt;The statement return (expression) exits a function, optionally passing back a value to the caller. A
                    return statement with no args is the same as return None.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Significance of Indentation (Space) in Python&lt;/h2&gt;
            &lt;p&gt;Before we get familiarize with Python functions, it is important that we understand the indentation rule
                to declare Python functions and these rules are applicable to other elements of Python as well like
                declaring conditions, loops or variable. &lt;/p&gt;
            &lt;p&gt;Python follows a particular style of indentation to define the code, since &lt;strong&gt;Python functions don't
                    have any explicit begin or end like curly braces to indicate the start and stop for the function,
                    they have to rely on this indentation&lt;/strong&gt;. Here we take a simple example with &quot;print&quot; command.
                When we write &quot;print&quot; function right below the def func 1 (): It will show an &quot;&lt;strong&gt;indentation
                    error: expected an indented block&lt;/strong&gt;&quot;. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.2.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Now, when you add the indent (space) in front of &quot;print&quot; function, it should print as expected. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.3.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;At least, one indent is enough to make your code work successfully. But as a best practice it is
                    advisable to leave about 3-4 indent to call your function&lt;/strong&gt;.&lt;/p&gt;
            &lt;p&gt;It is also necessary that while declaring indentation, you have to &lt;strong&gt;maintain the same indent for
                    the rest of your code&lt;/strong&gt;. For example, in below screen shot when we call another statement
                &quot;still in func1&quot; and when it is not declared right below the first print statement it will show an
                indentation error &lt;strong&gt;&quot;unindent does not match any other indentation level.&quot;&lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.4.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Now, when we apply same indentation for both the statements and align them in the same line, it gives the
                expected output. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;How Function Return Value?&lt;/h2&gt;
            &lt;p&gt;Return command in Python specifies what value to give back to the caller of the function. &lt;/p&gt;
            &lt;p&gt;Let's understand this with the following example&lt;/p&gt;

            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Here - we see when function is not &quot;return&quot;. For example, we want the square of
                4, and it should give answer &quot;16&quot; when the code is executed. Which it gives when we simply use &quot;print
                x*x&quot; code, but when you call function &quot;print square&quot; it gives &quot;None&quot; as an output. This is because when
                you call the function, recursion does not happen and fall off the end of the function. Python returns
                &quot;None&quot; for failing off the end of the function. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; To make this clearer we replace the print command with assignment command. Let's
                check the output. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.7.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.7.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;When you run the command &quot;print square (4)&quot; it actually returns the value of the object since we don't
                have any specific function to run over here it returns &quot;None&quot;. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3) &lt;/strong&gt;Now, here we will see how to retrieve the output using &quot;return&quot; command. When
                you use the &quot;return&quot; function and execute the code, it will give the output &quot;16.&quot; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.8.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.8.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; Functions in Python are themselves an object, and an object has some value. We
                will here see how Python treats an object. When you run the command &quot;print square&quot; it returns the value
                of the object. Since we have not passed any argument, we don't have any specific function to run over
                here it returns a default value (0x021B2D30) which is the location of the object. &lt;strong&gt;In practical
                    Python program, you probably won't ever need to do this.&lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.9.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.9.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Arguments in Functions&lt;/h2&gt;
            &lt;p&gt;The argument is a value that is passed to the function when it's called. &lt;/p&gt;
            &lt;p&gt;In other words on the calling side, it is an argument and on the function side it is a parameter. &lt;/p&gt;
            &lt;p&gt;Let see how Python Args works - &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Arguments are declared in the function definition. While calling the function,
                you can pass the values for that args as shown below &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.10.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.10.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; To declare a default value of an argument, assign it a value at function
                definition. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.11.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.11.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Example: x has no default values. Default values of y=0. When we supply only one argument while calling
                multiply function, Python assigns the supplied value to x while keeping the value of y=0. Hence the
                multiply of x*y=0 &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.12.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.12.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 3) &lt;/strong&gt;This time we will change the value to y=2 instead of the default value y=0, and
                it will return the output as (4x2)=8. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.13.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.13.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 4) &lt;/strong&gt;You can also change the order in which the arguments can be passed in Python.
                Here we have reversed the order of the value x and y to x=4 and y=2. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.14.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.14.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 5)&lt;/strong&gt; Multiple Arguments can also be passed as an array. Here in the example we call
                the multiple args (1,2,3,4,5) by calling the (*args) function. &lt;/p&gt;
            &lt;p&gt;Example: We declared multiple args as number (1,2,3,4,5) when we call the (*args) function; it prints out
                the output as (1,2,3,4,5) &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/tutorial/12/Python10.15.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Functions in Python&quot;
                        alt=&quot;Python Functions Tutorial - Define, Call, Indentation &amp;amp; Arguments&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/12/Python10.15.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;In Python 2.7. &lt;strong&gt;function overloading&lt;/strong&gt; is not supported in Python. Function
                    Overloading is the ability to create multiple methods of the same name with a different
                    implementation. Function Overloading is fully supported in Python 3 &lt;/li&gt;
                &lt;li&gt;There is quite a confusion between methods and functions. Methods in Python are associated with
                    object instances while function are not. When Python calls a method, it binds the first parameter of
                    that call to the appropriate object reference. In simple words, a standalone function in Python is a
                    &quot;function&quot;, whereas a function that is an attribute of a class or an instance is a &quot;method&quot;.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h3&gt;Here is the complete Python 3 code&lt;/h3&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;#define a function
         def func1():
            print (&quot;I am learning Python function&quot;)
            print (&quot;still in func1&quot;)
            
         func1()
         
         def square(x):
               return x*x
         print(square(4))
         
         def multiply(x,y=0):
             print(&quot;value of x=&quot;,x)
             print(&quot;value of y=&quot;,y)
             
             return x*y
           
         print(multiply(y=2,x=4))
         &lt;/pre&gt;
            &lt;h3&gt;Here is the complete Python 2 code&lt;/h3&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;#define a function
         def func1():
            print &quot; I am learning Python function&quot;
            print &quot; still in func1&quot;
            
         func1()
         
         def square(x):
               return x*x
         print square(4)
         
         def multiply(x,y=0):
             print&quot;value of x=&quot;,x
             print&quot;value of y=&quot;,y
             
             return x*y
           
         print multiply(y=2,x=4)
         &lt;/pre&gt;
            &lt;h3&gt;Summary:&lt;/h3&gt;
            &lt;p&gt;Function in Python is a piece of reusable code that is used to perform single, related action. In this
                article, we will see &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Function defined by the &lt;strong&gt;def&lt;/strong&gt; statement&lt;/li&gt;
                &lt;li&gt;The code block within every function starts with a colon (:) and should be indented (space)&lt;/li&gt;
                &lt;li&gt;Any arguments or input parameters should be placed within these parentheses, etc.&lt;/li&gt;
                &lt;li&gt;At least one indent should be left before the code after declaring function&lt;/li&gt;
                &lt;li&gt;Same indent style should be maintained throughout the code within def function&lt;/li&gt;
                &lt;li&gt;For best practices three or four indents are considered best before the statement&lt;/li&gt;
                &lt;li&gt;You can use the &quot;return&quot; command to return values to the function call. &lt;/li&gt;
                &lt;li&gt;Python will print a random value like (0x021B2D30) when the argument is not supplied to the calling
                    function. Example &quot;print function.&quot; &lt;/li&gt;
                &lt;li&gt;On the calling side, it is an argument and on the function side it is a parameter&lt;/li&gt;
                &lt;li&gt;Default value in argument - When we supply only one argument while calling multiply function or any
                    other function, Python assigns the other argument by default&lt;/li&gt;
                &lt;li&gt;Python enables you to reverse the order of the argument as well &lt;/li&gt;
            &lt;/ul&gt;


        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonDictionary&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonIf&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Functions Examples: Call, Indentation, Arguments &amp;amp; Return Values What is a Function in Python? A Functions in Python are used to utilize the code in more than one place in a program, sometimes also called method or procedures. Python provides you many inbuilt functions like print(), but it also gives freedom to create your own functions. In this tutorial, we will learn How to define and call a function in Python Significance of Indentation (Space) in Python How Function Return Value? Arguments in Functions How to define and call a function in Python Function in Python is defined by the &quot;def &quot; statement followed by the function name and parentheses ( () ) Example: Let us define a function by using the command &quot; def func1():&quot; and call the function. The output of the function will be &quot;I am learning Python function&quot;. The function print func1() calls our def func1(): and print the command &quot; I am learning Python function None.&quot; There are set of rules in Python to define a function. Any args or input parameters should be placed within these parentheses The function first statement can be an optional statement- docstring or the documentation string of the function The code within every function starts with a colon (:) and should be indented (space) The statement return (expression) exits a function, optionally passing back a value to the caller. A return statement with no args is the same as return None. Significance of Indentation (Space) in Python Before we get familiarize with Python functions, it is important that we understand the indentation rule to declare Python functions and these rules are applicable to other elements of Python as well like declaring conditions, loops or variable. Python follows a particular style of indentation to define the code, since Python functions don't have any explicit begin or end like curly braces to indicate the start and stop for the function, they have to rely on this indentation. Here we take a simple example with &quot;print&quot; command. When we write &quot;print&quot; function right below the def func 1 (): It will show an &quot;indentation error: expected an indented block&quot;. Now, when you add the indent (space) in front of &quot;print&quot; function, it should print as expected. At least, one indent is enough to make your code work successfully. But as a best practice it is advisable to leave about 3-4 indent to call your function. It is also necessary that while declaring indentation, you have to maintain the same indent for the rest of your code. For example, in below screen shot when we call another statement &quot;still in func1&quot; and when it is not declared right below the first print statement it will show an indentation error &quot;unindent does not match any other indentation level.&quot; Now, when we apply same indentation for both the statements and align them in the same line, it gives the expected output. How Function Return Value? Return command in Python specifies what value to give back to the caller of the function. Let's understand this with the following example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">10. Dictionary in Python</title><link href="http://localhost:4000/blog/PyhtonDictionary" rel="alternate" type="text/html" title="10. Dictionary in Python" /><published>2019-09-28T05:30:00+05:30</published><updated>2019-09-28T05:30:00+05:30</updated><id>http://localhost:4000/blog/PyhtonDictionary</id><content type="html" xml:base="http://localhost:4000/blog/PyhtonDictionary">&lt;section class=&quot;Ptutorial10&quot;&gt;
   &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
      &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
      &lt;div class=&quot;page-header&quot;&gt;
         &lt;h2 itemprop=&quot;headline&quot;&gt; Python Dictionary(Dict): Update, Cmp, Len, Sort, Copy, Items, str Example &lt;/h2&gt;
      &lt;/div&gt;

      &lt;div itemprop=&quot;articleBody&quot;&gt;

         &lt;p&gt;Dictionaries are another example of a data structure. A dictionary is used to map or associate things you
            want to store the keys you need to get them. A dictionary in Python is just like a dictionary in the real
            world. Python Dictionary are defined into two elements Keys and Values. &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;Keys will be a single element&lt;/li&gt;
            &lt;li&gt;Values can be a list or list within a list, numbers, etc.&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;In this tutorial, we are going to learn, &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;Python Dictionary Methods &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Copying dictionary &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Updating Dictionary &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Delete Keys from the dictionary &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Dictionary items() Method &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Sorting the Dictionary &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Python Dictionary in-built Functions &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Dictionary len() Method &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Variable Types &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;Python List cmp() Method &lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#11&quot;&gt;Dictionary Str(dict) &lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;strong&gt;Syntax for Python Dictionary&lt;/strong&gt;: &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = { ' Tim': 18,  xyz,.. }&lt;/pre&gt;
         &lt;p&gt;Dictionary is listed in curly brackets, inside these curly brackets, keys and values are declared. Each key
            is separated from its value by a colon (:) while each element is separated by commas. &lt;/p&gt;
         &lt;p&gt;&lt;strong&gt;Properties of Dictionary Keys&lt;/strong&gt; &lt;/p&gt;
         &lt;p&gt;There are two important points while using dictionary keys &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;More than one entry per key is not allowed ( no duplicate key is allowed)&lt;/li&gt;
            &lt;li&gt;The values in the dictionary can be of any type while the keys must be immutable like numbers, tuples or
               strings.&lt;/li&gt;
            &lt;li&gt;Dictionary keys are case sensitive- Same key name but with the different case are treated as different
               keys in Python dictionaries.&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print (Dict['Tiffany'])&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print((Dict['Tiffany']))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;In code, we have dictionary name &quot;Dict&quot;&lt;/li&gt;
            &lt;li&gt;We declared the name and age of the person in the dictionary, where name is &quot;Keys&quot; and age is the&quot;value&quot;
            &lt;/li&gt;
            &lt;li&gt;Now run the code&lt;/li&gt;
            &lt;li&gt;It retrieves the age of tiffany from the dictionary.&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;Python Dictionary Methods &lt;/h2&gt;
         &lt;h3&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Copying dictionary &lt;/h3&gt;
         &lt;p&gt;You can also copy the entire dictionary to new dictionary. For example, here we have copied our original
            dictionary to new dictionary name &quot;Boys&quot; and &quot;Girls&quot;. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}	
         studentX=Boys.copy()
         studentY=Girls.copy()
         print studentX
         print studentY&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}	
         studentX=Boys.copy()
         studentY=Girls.copy()
         print(studentX)
         print(studentY)&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;We have the original dictionary (Dict) with the name and age of the boys and girls together&lt;/li&gt;
            &lt;li&gt;But we want boys list separate from girls list, so we defined the element of boys and girls in a
               separate dictionary name &quot;Boys&quot; and &quot;Girls.&quot;&lt;/li&gt;
            &lt;li&gt;Now again we have created new dictionary name &quot;studentX&quot; and &quot;studentY&quot;, where all the keys and values
               of boy dictionary are copied into studentX, and the girls will be copied in studentY&lt;/li&gt;
            &lt;li&gt;So now you don't have to look into the whole list in main dictionary( Dict) to check who is boy and who
               is girl, you just have to print studentX if you want boys list and StudentY if you want girls list&lt;/li&gt;
            &lt;li&gt;So, when you run the studentX and studentY dictionary, it will give all the element present in the
               dictionary of &quot;boys&quot; and &quot;girls&quot; separately&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Updating Dictionary&lt;/h3&gt;
         &lt;p&gt;You can also update a dictionary by adding a new entry or a key-value pair to an existing entry or by
            deleting an existing entry. Here in the example we will add another name &quot;Sarah&quot; to our existing dictionary.
         &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         Dict.update({&quot;Sarah&quot;:9})
         print Dict&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         Dict.update({&quot;Sarah&quot;:9})
         print(Dict)&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Our existing dictionary &quot;Dict&quot; does not have the name &quot;Sarah.&quot;&lt;/li&gt;
            &lt;li&gt;We use the method Dict.update to add Sarah to our existing dictionary&lt;/li&gt;
            &lt;li&gt;Now run the code, it adds Sarah to our existing dictionary&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Delete Keys from the dictionary&lt;/h3&gt;
         &lt;p&gt;Python dictionary gives you the liberty to delete any element from the dictionary list. Suppose you don't
            want the name Charlie in the list, so you can delete the key element by following code. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         del Dict ['Charlie']
         print Dict&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         del Dict ['Charlie']
         print(Dict)&lt;/pre&gt;
         &lt;p&gt;When you run this code, it should print the dictionary list without Charlie. &lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;We used the code del Dict&lt;/li&gt;
            &lt;li&gt;When code executed, it has deleted the Charlie from the main dictionary&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Dictionary items() Method&lt;/h3&gt;
         &lt;p&gt;The items() method returns a list of tuple pairs (Keys, Value) in the dictionary. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print &quot;Students Name: %s&quot; % Dict.items()&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt;&lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print(&quot;Students Name: %s&quot; % list(Dict.items()))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;We use the code items() method for our Dict.&lt;/li&gt;
            &lt;li&gt;When code was executed, it returns a list of items ( keys and values) from the dictionary&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;strong&gt;Check if a given key already exists in a dictionary&lt;/strong&gt; &lt;/p&gt;
         &lt;p&gt;For a given list, you can also check whether our child dictionary exists in a main dictionary or not. Here
            we have two sub-dictionaries &quot;Boys&quot; and &quot;Girls&quot;, now we want to check whether our dictionary Boys exist in
            our main &quot;Dict&quot; or not. For that, we use the forloop method with else if method. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}
         for key in Dict.keys():
             if key in Boys.keys():
                 print True
             else:       
                 print False&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}
         for key in list(Dict.keys()):
             if key in list(Boys.keys()):
                 print(True)
             else:       
                 print(False)&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;The forloop in code checks each key in the main dictionary for Boys keys&lt;/li&gt;
            &lt;li&gt;If it exists in the main dictionary, it should print true or else it should print false&lt;/li&gt;
            &lt;li&gt;When you execute the code, it will print &quot;True&quot; for three times, as we got three elements in our &quot;Boys&quot;
               dictionary &lt;/li&gt;
            &lt;li&gt;So it indicates that the &quot;Boys&quot; exist in our main dictionary (Dict)&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Sorting the Dictionary &lt;/h3&gt;
         &lt;p&gt;In the dictionary, you can also sort the elements. For example, if we want to print the name of the elements
            of our dictionary alphabetically we have to use the forloop. It will sort each element of dictionary
            accordingly. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}
         Students = Dict.keys()
         Students.sort()
         for S in Students:
               print&quot;:&quot;.join((S,str(Dict[S])))&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}
         Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}
         Students = list(Dict.keys())
         Students.sort()
         for S in Students:
               print(&quot;:&quot;.join((S,str(Dict[S]))))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;We declared the variable students for our dictionary &quot;Dict.&quot; &lt;/li&gt;
            &lt;li&gt;Then we use the code Students.sort, which will sort the element inside our dictionary &lt;/li&gt;
            &lt;li&gt;But to sort each element in dictionary, we run the forloop by declaring variable S &lt;/li&gt;
            &lt;li&gt;Now, when we execute the code the forloop will call each element from the dictionary, and it will print
               the string and value in an order &lt;/li&gt;
         &lt;/ul&gt;
         &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Python Dictionary in-built Functions&lt;/h2&gt;
         &lt;h3&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Dictionary len() Method &lt;/h3&gt;
         &lt;p&gt;The len() function gives the number of pairs in the dictionary. &lt;/p&gt;
         &lt;p&gt;For example, &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print &quot;Length : %d&quot; % len (Dict)&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print(&quot;Length : %d&quot; % len (Dict))&lt;/pre&gt;
         &lt;p&gt;When len (Dict) function is executed it gives the output at &quot;4&quot; as there are four elements in our dictionary
         &lt;/p&gt;
         &lt;h3&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Variable Types&lt;/h3&gt;
         &lt;p&gt;Python does not require to explicitly declare the reserve memory space; it happens automatically. The assign
            values to variable &quot;=&quot; equal sign are used. The code to determine the variable type is &quot; %type (Dict).&quot; &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print &quot;variable Type: %s&quot; %type (Dict)&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print(&quot;variable Type: %s&quot; %type (Dict))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Use the code %type to know the variable type&lt;/li&gt;
            &lt;li&gt;When code was executed, it tells a variable type is a dictionary&lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;10&quot;&gt;&lt;/a&gt;Python List cmp() Method&lt;/h3&gt;
         &lt;p&gt;The compare method cmp() is used in Python to compare values and keys of two dictionaries. If method returns
            0 if both dictionaries are equal, 1 if dic1 &amp;gt; dict2 and -1 if dict1 &amp;lt; dict2. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Boys = {'Tim': 18,'Charlie':12,'Robert':25}
         Girls = {'Tiffany':22}	
         print cmp(Girls, Boys)&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;cmp is not supported in Python 3&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;We have two dictionary name &quot;Boys&quot; and &quot;Girls.&quot;&lt;/li&gt;
            &lt;li&gt;Which ever you declare first in code &quot;cmp(Girls, Boys)&quot; will be considered as dictionary 1. In our case,
               we declared &quot;Girls&quot; first, so it will be considered as dictionary 1 and boys as dictionary 2&lt;/li&gt;
            &lt;li&gt;When code is executed it prints out -1, It indicates that our dictionary 1 is less than dictionary 2.
            &lt;/li&gt;
         &lt;/ul&gt;
         &lt;h3&gt;&lt;a id=&quot;11&quot;&gt;&lt;/a&gt;Dictionary Str(dict)&lt;/h3&gt;
         &lt;p&gt;With Str() method, you can make a dictionary into a printable string format. &lt;/p&gt;
         &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print &quot;printable string:%s&quot; % str (Dict)&lt;/pre&gt;
         &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
         &lt;pre class=&quot;code-toolbar&quot;&gt;Dict = {'Tim': 18,'Charlie':12,'Tiffany':22,'Robert':25}	
         print(&quot;printable string:%s&quot; % str (Dict))&lt;/pre&gt;
         &lt;ul&gt;
            &lt;li&gt;Use the code % str (Dict)&lt;/li&gt;
            &lt;li&gt;It will return the dictionary elements into a printable string format&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;&lt;b&gt; Here is the list of all Dictionary Methods&lt;/b&gt; &lt;/p&gt;
         &lt;table class=&quot;table1 table-striped table-bordered&quot;&gt;
            &lt;tbody&gt;
               &lt;tr&gt;
                  &lt;th&gt;Method&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;th&gt;Syntax&lt;/th&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;copy()&lt;/td&gt;
                  &lt;td&gt;Copy the entire dictionary to new dictionary&lt;/td&gt;
                  &lt;td&gt;dict.copy()&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;update()&lt;/td&gt;
                  &lt;td&gt;Update a dictionary by adding a new entry or a key-value pair to an&lt;br&gt; existing entry or by
                     deleting an existing entry.&lt;/td&gt;
                  &lt;td&gt;Dict.update([other])&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;items()&lt;/td&gt;
                  &lt;td&gt;Returns a list of tuple pairs (Keys, Value) in the dictionary.&lt;/td&gt;
                  &lt;td&gt;dictionary.items()&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;sort()&lt;/td&gt;
                  &lt;td&gt;You can sort the elements&lt;/td&gt;
                  &lt;td&gt;dictionary.sort()&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;len()&lt;/td&gt;
                  &lt;td&gt;Gives the number of pairs in the dictionary.&lt;/td&gt;
                  &lt;td&gt;len(dict)&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;cmp()&lt;/td&gt;
                  &lt;td&gt;Compare values and keys of two dictionaries&lt;/td&gt;
                  &lt;td&gt;cmp(dict1, dict2)&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;Str()&lt;/td&gt;
                  &lt;td&gt;Make a dictionary into a printable string format&lt;/td&gt;
                  &lt;td&gt;Str(dict)&lt;/td&gt;
               &lt;/tr&gt;
            &lt;/tbody&gt;
         &lt;/table&gt;
         &lt;h3&gt;Summary:&lt;/h3&gt;
         &lt;p&gt;Dictionaries in a programming language is a type of data-structure used to store information connected in
            someway. Python Dictionary are defined into two elements Keys and Values. Dictionaries do not store their
            information in any particular order, so you may not get your information back in the same order you entered
            it.&lt;/p&gt;
         &lt;ul&gt;
            &lt;li&gt;Keys will be a single element&lt;/li&gt;
            &lt;li&gt;Values can be a list or list within a list, numbers, etc.&lt;/li&gt;
            &lt;li&gt;More than one entry per key is not allowed ( no duplicate key is allowed)&lt;/li&gt;
            &lt;li&gt;The values in the dictionary can be of any type while the keys must be immutable like numbers, tuples or
               strings.&lt;/li&gt;
            &lt;li&gt;Dictionary keys are case sensitive- Same key name but with the different case are treated as different
               keys in Python dictionaries.&lt;/li&gt;
         &lt;/ul&gt;


      &lt;/div&gt;

   &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonTuple&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonOperators&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Dictionary(Dict): Update, Cmp, Len, Sort, Copy, Items, str Example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry></feed>