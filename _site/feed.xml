<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-16T08:41:28+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">Angular 10 Material Datatable Inline HttpClient CRUD Operations using RestFull APIs</title><link href="http://localhost:4000/blog/angular-httpclient-crud-operations-using-restfull-api" rel="alternate" type="text/html" title="Angular 10 Material Datatable Inline HttpClient CRUD Operations using RestFull APIs" /><published>2020-10-27T02:24:00+00:00</published><updated>2020-10-27T02:24:00+00:00</updated><id>http://localhost:4000/blog/Ang10MatDatatableCRUD</id><content type="html" xml:base="http://localhost:4000/blog/angular-httpclient-crud-operations-using-restfull-api">&lt;h2 id=&quot;angular-10-material-datatable-inline-httpclient-crud-operations-using-restfull-apis&quot;&gt;Angular 10 Material Datatable Inline HttpClient CRUD Operations using RestFull APIs&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;In this Angular tutorial, we’ll learn how to use HttpClient module in Angular application to make RESTFull API Ajax calls.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ll set up a &lt;strong&gt;new Angular 10 project&lt;/strong&gt; and &lt;strong&gt;create API endpoints&lt;/strong&gt; to perform &lt;strong&gt;Create, Read, Update and Delete operations using HTTP&lt;/strong&gt; methods using a mock server using the &lt;code&gt;**json-server**&lt;/code&gt; package. Using &lt;code&gt;**json-server**&lt;/code&gt; we can create a local JSON file which can act as a database for our application. There is no difference between a local mock server and a real database.&lt;/p&gt;

&lt;p&gt;We’ll perform &lt;strong&gt;HTTP operation using API endpoints&lt;/strong&gt; to &lt;strong&gt;add, edit, delete and get list of items listed in an Angular Material Datatable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This Material Datatable will have action column using which user an &lt;strong&gt;Edit or Delete a row&lt;/strong&gt;. There will be a form over the table to &lt;strong&gt;Add or Update existing rows&lt;/strong&gt; in&lt;/p&gt;

&lt;p&gt;After implementation, our application will look like this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/angular/12/1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, let’s have a look at Angular HttpClient and its features.&lt;/p&gt;

&lt;h2 id=&quot;what-is-angular-httpclient&quot;&gt;What is Angular HttpClient?&lt;/h2&gt;

&lt;p&gt;A reactive application like Angular, communicate with server databases to fetch data in form of JSON object using Ajax API calls.&lt;/p&gt;

&lt;p&gt;These API Ajex calls use XMLHttpRequest service for old browsers or fetch() methods under the hood.&lt;/p&gt;

&lt;p&gt;The HttpClient service provided by Angular’s &lt;code&gt;**@angular/common/http**&lt;/code&gt; package provides a simple interface to make HTTP calls with many optimized and efficient browser support features.&lt;/p&gt;

&lt;p&gt;Moreover, we can also use RxJS based Observables and operators to handle client-side or server-side errors.&lt;/p&gt;

&lt;p&gt;Using Interceptors service we can modify requests and responses of API calls and even cancels them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s get started!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup-angular-cli&quot;&gt;#Setup Angular CLI&lt;/h2&gt;

&lt;p&gt;Angular CLI is the most prefered and official way for creating a new Angular project.&lt;/p&gt;

&lt;p&gt;Make sure you have installed the latest version on Angular CLI tool on your system.&lt;/p&gt;

&lt;p&gt;Run following npm command to install&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$ npm install -g @angular/cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this tutorial, we have installed &lt;strong&gt;v10.1.6&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-angular-10-project&quot;&gt;#Create a new Angular 10 project&lt;/h2&gt;

&lt;p&gt;Next, create a new Angular project by running following ng command in the terminal&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ng new ang-datatable-app

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On hitting above command, ng CLI will ask few configurational questions&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
? Would you like to add Angular routing? Yes
? Which stylesheet format would you like to use? CSS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now move to the project folder&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$ cd ang-datatable-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the project by executing below command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$ ng serve --open
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As we have created the Angular project successfully, lets mover further to create a dummy mock JSON server.&lt;/p&gt;

&lt;h2 id=&quot;setup-a-mock-json-server&quot;&gt;#Setup a Mock JSON Server&lt;/h2&gt;

&lt;p&gt;For testing and learning HttpClient module, we need to test Http methods, which will communicate to the server by calling Rest APIs.&lt;/p&gt;

&lt;p&gt;These RESTFull APIs return JSON data which is then consumed by Angular application. This API JSON data may come from any third-party API, Server Database or any local server database.&lt;/p&gt;

&lt;p&gt;Here we will create a dummy mock JSON API server using the &lt;code&gt;**json-server**&lt;/code&gt; package. using this package we can create a mock server using which we can perform all HTTP methods like &lt;code&gt;**GET**&lt;/code&gt;, &lt;code&gt;**POST**&lt;/code&gt;, &lt;code&gt;**PUT**&lt;/code&gt;, &lt;code&gt;**PATCH**&lt;/code&gt; and &lt;code&gt;**DELETE**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, install the&lt;code&gt; **json-server**&lt;/code&gt; package by running bellow npm command in the terminal window:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g json-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that create a new folder API in the project root and place JSON file data.json at 
&lt;strong&gt;~ang-datatable-app/API/data.json&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;data.json&lt;/strong&gt; file will work as RESTfull server. We will add some dummy employeess data. So that will act like a database on which we will perform CRUD operations.&lt;/p&gt;

&lt;h2 id=&quot;start-json-server&quot;&gt;#Start JSON Server&lt;/h2&gt;

&lt;p&gt;To start the JSON server using json-server, run following command in a new terminal:&amp;lt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$ json-server --watch ./API/data.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can access our mock server at &lt;strong&gt;http://localhost:3000/employees&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following are the API URLs available on our server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GET /employees - fetch all employees&lt;/li&gt;
  &lt;li&gt;GET /employees/: id - fetch a single employee detail by id&lt;/li&gt;
  &lt;li&gt;POST /employees - create a new employee&lt;/li&gt;
  &lt;li&gt;PUT /employees/: id - update a employee by id&lt;/li&gt;
  &lt;li&gt;PATCH /employees/: id - partially update a employee by  id&lt;/li&gt;
  &lt;li&gt;DELETE /employees/:id - delete a employee by id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we are ready with our server, next we will import HttpClientModule in Angular project to use HTTP services.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h1 id=&quot;configure-httpclient-in-angular-10-project&quot;&gt;Configure HttpClient in Angular 10 project&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before using HTTP services, we need to import &lt;code&gt;**HttpClientModule**&lt;/code&gt; from &lt;code&gt;**@angular/common/http**&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Now open the app.module.ts file, then make the following changes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// app.module.ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will add &lt;strong&gt;Angular Material Datatable&lt;/strong&gt; to perform CRUD operations on Employees data. So let us install and configure Material UI library in our project.&lt;/p&gt;

&lt;h2 id=&quot;install-and-setup-angular-material&quot;&gt;#Install and Setup Angular Material&lt;/h2&gt;

&lt;p&gt;Angular Material is a UI library which provides several easy to use feature components. In this tutorial, we will use Material Datatables to show employees records and perform the various inline operation on employees records.&lt;/p&gt;

&lt;p&gt;Run following npm command in terminal to install Material library and answer some configuration answers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ng add @angular/material


? Choose a prebuilt theme name, or &quot;custom&quot; for a custom theme: Indigo/Pink        [ Preview: https://material.angular.io?theme=indigo-pink ]
? Set up global Angular Material typography styles? Yes 
? Set up browser animations for Angular Material? Yes

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To use Material UI components, we need to import modules of components which we are going to use in the application’s module so that these will be available in our class components to use.&lt;/p&gt;

&lt;p&gt;As we will be using Material Datatables with pagination, so we need to import &lt;code&gt;**MatTableModule**&lt;/code&gt; and &lt;code&gt;**MatPaginatorModule**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To update and add employees rows we will add Material Form as well, for that we will also import &lt;code&gt;**FormsModule**&lt;/code&gt;,&lt;code&gt;**ReactiveFormsModule**&lt;/code&gt;, &lt;code&gt;**MatInputModule**&lt;/code&gt;, and &lt;code&gt;**MatButtonModule**&lt;/code&gt; as well
in the &lt;strong&gt;app.module.ts&lt;/strong&gt; file as shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// app.module.ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

import { HttpClientModule } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

import { FormsModule, ReactiveFormsModule } from '@angular/forms';

import { MatTableModule } from '@angular/material/table';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';


@NgModule({
  declarations: [
    AppComponent    
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    BrowserAnimationsModule,
    FormsModule,
    ReactiveFormsModule,

    // Material Modules 
    MatTableModule,
    MatPaginatorModule,
    MatInputModule,
    MatButtonModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-a-service-to-communicate-server-through-http-methods&quot;&gt;#Creating a Service to Communicate Server through HTTP methods&lt;/h2&gt;

&lt;p&gt;Now we’ll create a new service to separate all HTTP methods which will communicate to server and do CRUD operations.&lt;/p&gt;

&lt;p&gt;Let’s create a new serve HttpDataService under services folder by running following ng command in the terminal window:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ng generate service services/http-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above &lt;code&gt;**generate**&lt;/code&gt; command will create the &lt;code&gt;**HttpDataService**&lt;/code&gt; for us at this location &lt;strong&gt;~src/app/services/http-data.service.ts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, create an &lt;strong&gt;Interface class&lt;/strong&gt; for &lt;em&gt;Employees&lt;/em&gt; data by running following command defining the type of values for employee item.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ng generate class models/Employee

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then replace the following content in the newly created file “~/models/&lt;strong&gt;employee.ts&lt;/strong&gt;”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export class Employee {
    id: number;
    userId: string;
    jobTitleName: string;
    firstName: string;
    lastName: string;
    preferredFullName: string;
    employeeCode: string;
    region: string
    phoneNumber: string;
    emailAddress: string;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our service will be going to play an important role in maintaining a connection with the server. Let us dive deep into this file and check what it will have?&lt;/p&gt;

&lt;p&gt;Add the server API URL for end-points and define in the &lt;code&gt;**base_path**&lt;/code&gt; variable. This is the path which opens up on running our &lt;code&gt;**json-server**&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  // API path
  base_path = 'http://localhost:3000/employees';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Make sure your server is still running.&lt;/p&gt;

&lt;p&gt;We’ll import these three classes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**HttpClient**&lt;/code&gt; : This class provides HTTP methods like &lt;code&gt;**get()**&lt;/code&gt;, &lt;code&gt;**post()**&lt;/code&gt;, &lt;code&gt;**put()**&lt;/code&gt; and &lt;code&gt;**delete()**&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**HttpHeaders**&lt;/code&gt;: For setting request headers in HTTP calls we use this class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  // Http Options
  httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json'
    })
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;**HttpErrorResponse**&lt;/code&gt;: Used to efficiently handle errors from client-side or server-side.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // Handle API errors
  handleError(error: HttpErrorResponse) {
    if (error.error instanceof ErrorEvent) {
      // A client-side or network error occurred. Handle it accordingly.
      console.error('An error occurred:', error.error.message);
    } else {
      // The backend returned an unsuccessful response code.
      // The response body may contain clues as to what went wrong,
      console.error(
        `Backend returned code ${error.status}, ` +
        `body was: ${error.error}`);
    }
    // return an observable with a user-facing error message
    return throwError(
      'Something bad happened; please try again later.');
  };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rxjs-functions-and-operators-to-the-rescuespan&quot;&gt;#RxJs functions and operators to the rescue&amp;lt;/span&amp;gt;&lt;/h2&gt;
&lt;p&gt;&amp;lt;/h4&amp;gt;&lt;/p&gt;

&lt;p&gt;The RxJs library provides many useful function and operator which we will use in our service:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**Observables**&lt;/code&gt;: Observables are used to perform asynchronous tasks like HTTP calls. We can subscribe them to get success or error response. They provide several other features file cancellations and continuous event retrieval, unlike promises.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**throwError**&lt;/code&gt;: This method is used to intentionally throw an error with a message when an HTTP request fails.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**retry()**&lt;/code&gt;: The retry operator is used to make HTTP call again for the number of times specified when a call fails due to network server issues.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;**catchError()**&lt;/code&gt;: This method catches the error and throws to errorHandler&lt;/p&gt;

&lt;h2 id=&quot;defining-crud-methods&quot;&gt;#Defining CRUD Methods&lt;/h2&gt;

&lt;p&gt;Now we will add the methods to do CRUD operation on emloyees data in our mock server which we created using &lt;code&gt;**json-server**&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-an-employee&quot;&gt;Create an Employee&lt;/h3&gt;

&lt;p&gt;The new employee will be created using the &lt;code&gt;**post()**&lt;/code&gt; method&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // Create a new item
  createItem(item): Observable&amp;lt;Employee&amp;gt; {
    return this.http
      .post&amp;lt;Employee&amp;gt;(this.base_path, JSON.stringify(item), this.httpOptions)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;**createItem()**&lt;/code&gt; method is accepting &lt;code&gt;**item**&lt;/code&gt; attribute with employee details to add.&lt;/p&gt;

&lt;h3 id=&quot;retrieve-employee-details&quot;&gt;Retrieve Employee Details&lt;/h3&gt;

&lt;p&gt;To fetch single employee details we use &lt;code&gt;**get()**&lt;/code&gt; method with employee &lt;code&gt;**id**&lt;/code&gt; whose detail needs to be checked.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; // Get single employee data by ID
  getItem(id): Observable&amp;lt;Employee&amp;gt; {
    return this.http
      .get&amp;lt;Employee&amp;gt;(this.base_path + '/' + id)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;retrieve-all-employees&quot;&gt;Retrieve All Employees&lt;/h3&gt;

&lt;p&gt;Similarly, we will make &lt;code&gt;**get**&lt;/code&gt; call to fetch all employees list&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // Get employees data
  getList(): Observable&amp;lt;Employee&amp;gt; {
    return this.http
      .get&amp;lt;Employee&amp;gt;(this.base_path)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;update-single-employee&quot;&gt;Update single employee&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;**put()**&lt;/code&gt; method will update single employee with id passed&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // Update item by id
  updateItem(id, item): Observable&amp;lt;Employee&amp;gt; {
    return this.http
      .put&amp;lt;Employee&amp;gt;(this.base_path + '/' + id, JSON.stringify(item), this.httpOptions)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;delete-a-single-employee&quot;&gt;Delete a single employee&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;**delete()**&lt;/code&gt; HTTP method will delete a single record whose id is passed&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  // Delete item by id
  deleteItem(id) {
    return this.http
      .delete&amp;lt;Employee&amp;gt;(this.base_path + '/' + id, this.httpOptions)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After combining all explained code the final &lt;strong&gt;http-data.service.ts&lt;/strong&gt; file will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// http-data.servie.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Employee } from '../models/employee';
import { Observable, throwError } from 'rxjs';
import { retry, catchError } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class HttpDataService {


  // API path
  base_path = 'http://localhost:3000/employees';

  constructor(private http: HttpClient) { }

  // Http Options
  httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json'
    })
  }

  // Handle API errors
  handleError(error: HttpErrorResponse) {
    if (error.error instanceof ErrorEvent) {
      // A client-side or network error occurred. Handle it accordingly.
      console.error('An error occurred:', error.error.message);
    } else {
      // The backend returned an unsuccessful response code.
      // The response body may contain clues as to what went wrong,
      console.error(
        `Backend returned code ${error.status}, ` +
        `body was: ${error.error}`);
    }
    // return an observable with a user-facing error message
    return throwError(
      'Something bad happened; please try again later.');
  };


  // Create a new item
  createItem(item): Observable&amp;lt;Employee&amp;gt; {
    return this.http
      .post&amp;lt;Employee&amp;gt;(this.base_path, JSON.stringify(item), this.httpOptions)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }

  // Get single employee data by ID
  getItem(id): Observable&amp;lt;Employee&amp;gt; {
    return this.http
      .get&amp;lt;Employee&amp;gt;(this.base_path + '/' + id)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }

  // Get employees data
  getList(): Observable&amp;lt;Employee&amp;gt; {
    return this.http
      .get&amp;lt;Employee&amp;gt;(this.base_path)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }

  // Update item by id
  updateItem(id, item): Observable&amp;lt;Employee&amp;gt; {
    return this.http
      .put&amp;lt;Employee&amp;gt;(this.base_path + '/' + id, JSON.stringify(item), this.httpOptions)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }

  // Delete item by id
  deleteItem(id) {
    return this.http
      .delete&amp;lt;Employee&amp;gt;(this.base_path + '/' + id, this.httpOptions)
      .pipe(
        retry(2),
        catchError(this.handleError)
      )
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;create-new-pages&quot;&gt;#Create new pages&lt;/h2&gt;

&lt;p&gt;To show employees data in a table,  we will create a new employees component and update the&lt;strong&gt; app-routing.module.ts&lt;/strong&gt; file to open &lt;code&gt;/employees&lt;/code&gt; page on application load.&lt;/p&gt;

&lt;p&gt;Create the &lt;code&gt;**EmployeesComponent**&lt;/code&gt;
by running below generate command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
$ ng generate component pages/employees
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Setup the App Routing Module
Now update the &lt;strong&gt;app-routing.module.ts&lt;/strong&gt;file with below code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// app-routing.module.ts
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { EmployeesComponent } from './pages/employees/employees.component';


const routes: Routes = [
  {
    path: '',
    redirectTo: '/employees',
    pathMatch: 'full'
  },
  {
    path: 'employees',
    component: EmployeesComponent
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-httpdataservice-in-employees-page&quot;&gt;#Using HttpDataService in Employees Page&lt;/h2&gt;

&lt;p&gt;As we defined our HttpDataService as &lt;code&gt;**providedIn: 'root'**&lt;/code&gt;so we can directly use it in our Angular application. This will share a single instance across the application.&lt;/p&gt;

&lt;p&gt;To use service methods in our employee’s page at &lt;strong&gt;~src/app/pages/employees/employees.component.ts&lt;/strong&gt;, we need to &lt;code&gt;**impor**t&lt;/code&gt; it and then add in component the contractor() method as shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
import { HttpDataService } from 'src/app/services/http-data.service';

@Component({
  selector: 'app-employees',
  templateUrl: './employees.component.html',
  styleUrls: ['./employees.component.css']
})
export class EmployeesComponent implements OnInit {

  constructor(private httpDataService: HttpDataService) { }

  ...
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;adding-angular-material-datatable&quot;&gt;#Adding Angular Material Datatable&lt;/h2&gt;

&lt;p&gt;Next, we will add a Datatable with Employees columns and an extra Actions column where we will do inline Edit, Delete and Update operations.&lt;/p&gt;

&lt;p&gt;For creating the Material datatable, the &lt;code&gt;**mat-table**&lt;/code&gt; directive is used. We are also adding pagination by appending the &lt;code&gt;**mat-paginator**&lt;/code&gt; directive just after ending &lt;code&gt;**&amp;lt;/table&amp;gt;**&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Update the &lt;strong&gt;employees.component.html&lt;/strong&gt; file with below code to build a Material datatable:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
        &amp;lt;!-- Form to edit/add row --&amp;gt;

        &amp;lt;table mat-table [dataSource]=&quot;dataSource&quot; class=&quot;mat-elevation-z8&quot;&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;id&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; #Id &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;userId&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; User Id &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;jobTitleName&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; jobTitle Name &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;firstName&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; First Name &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;lastName&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; Last Name &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;preferredFullName&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; Preferred FullName &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;employeeCode&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; Employee Code &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;region&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; Region &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;phoneNumber&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; Phone Number &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;emailAddress&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; Email Address &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;  &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;ng-container matColumnDef=&quot;actions&quot;&amp;gt;
        &amp;lt;th mat-header-cell *matHeaderCellDef&amp;gt; Actions &amp;lt;/th&amp;gt;
        &amp;lt;td mat-cell *matCellDef=&quot;let element&quot;&amp;gt;
            &amp;lt;a href=&quot;javascript:void(0)&quot; (click)=&quot;editItem(element)&quot;&amp;gt;Edit&amp;lt;/a&amp;gt; |
            &amp;lt;a href=&quot;javascript:void(0)&quot; (click)=&quot;deleteItem(element.id)&quot;&amp;gt;Delete&amp;lt;/a&amp;gt;
        &amp;lt;/td&amp;gt;
    &amp;lt;/ng-container&amp;gt;

    &amp;lt;tr mat-header-row *matHeaderRowDef=&quot;displayedColumns&quot;&amp;gt;&amp;lt;/tr&amp;gt;
    &amp;lt;tr mat-row *matRowDef=&quot;let row; columns: displayedColumns;&quot;
        [ngClass]=&quot;{'editable-row': employeeData.id === row.id}&quot;&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;mat-paginator [pageSize]=&quot;5&quot; [pageSizeOptions]=&quot;[5, 10, 15]&quot; showFirstLastButtons&amp;gt;&amp;lt;/mat-paginator&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the last &lt;code&gt;**actions**&lt;/code&gt; column there are two actions to &lt;strong&gt;Edit&lt;/strong&gt; with &lt;code&gt;**editEmployee()**&lt;/code&gt; method and &lt;strong&gt;Delete&lt;/strong&gt; with&lt;code&gt; **deleteEmployee()**&lt;/code&gt; method for the row.&lt;/p&gt;

&lt;p&gt;To add a new row or update the data in the existing row we will add a form above table.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;form (submit)=&quot;onSubmit()&quot; #employeeForm=&quot;ngForm&quot;&amp;gt;
        
        &amp;lt;mat-form-field&amp;gt;
            &amp;lt;input matInput placeholder=&quot;User Id&quot; name=&quot;userId&quot; required [(ngModel)]=&quot;employeeData.userId&quot;&amp;gt;
        &amp;lt;/mat-form-field&amp;gt;
        &amp;lt;mat-form-field&amp;gt;
            &amp;lt;input matInput placeholder=&quot;Job TitleName&quot; name=&quot;jobTitleName&quot; required [(ngModel)]=&quot;employeeData.jobTitleName&quot;&amp;gt;
        &amp;lt;/mat-form-field&amp;gt;
        &amp;lt;mat-form-field&amp;gt;
            &amp;lt;input matInput placeholder=&quot;first Name&quot; name=&quot;firstName&quot; required [(ngModel)]=&quot;employeeData.firstName&quot;&amp;gt;
        &amp;lt;/mat-form-field&amp;gt;
        &amp;lt;mat-form-field&amp;gt;
            &amp;lt;input matInput placeholder=&quot;Last Name&quot; name=&quot;lastName&quot; required [(ngModel)]=&quot;employeeData.lastName&quot;&amp;gt;
        &amp;lt;/mat-form-field&amp;gt;
        &amp;lt;mat-form-field&amp;gt;
            &amp;lt;input matInput placeholder=&quot;Preferred FullName&quot; name=&quot;preferredFullName&quot; required [(ngModel)]=&quot;employeeData.preferredFullName&quot;&amp;gt;
        &amp;lt;/mat-form-field&amp;gt;        
        &amp;lt;mat-form-field&amp;gt;
            &amp;lt;input matInput placeholder=&quot;Employee Code&quot; name=&quot;employeeCode&quot; required [(ngModel)]=&quot;employeeData.employeeCode&quot;&amp;gt;
        &amp;lt;/mat-form-field&amp;gt;
        &amp;lt;mat-form-field&amp;gt;
            &amp;lt;input matInput placeholder=&quot;Region&quot; name=&quot;region&quot; required [(ngModel)]=&quot;employeeData.region&quot;&amp;gt;
        &amp;lt;/mat-form-field&amp;gt;
        &amp;lt;mat-form-field&amp;gt;
            &amp;lt;input matInput placeholder=&quot;Phone Number&quot; name=&quot;phoneNumber&quot; required [(ngModel)]=&quot;employeeData.phoneNumber&quot;&amp;gt;
        &amp;lt;/mat-form-field&amp;gt;
        &amp;lt;mat-form-field&amp;gt;
            &amp;lt;input matInput placeholder=&quot;Email Address&quot; name=&quot;emailAddress&quot; required [(ngModel)]=&quot;employeeData.emailAddress&quot;&amp;gt;
        &amp;lt;/mat-form-field&amp;gt;

        &amp;lt;ng-container *ngIf=&quot;isEditMode; else elseTemplate&quot;&amp;gt;
            &amp;lt;button mat-button color=&quot;primary&quot;&amp;gt;Update&amp;lt;/button&amp;gt;
            &amp;lt;a mat-button color=&quot;warn&quot; (click)=&quot;cancelEdit()&quot;&amp;gt;Cancel&amp;lt;/a&amp;gt;
        &amp;lt;/ng-container&amp;gt;
        &amp;lt;ng-template #elseTemplate&amp;gt;
            &amp;lt;button mat-button color=&quot;primary&quot;&amp;gt;Add&amp;lt;/button&amp;gt;
        &amp;lt;/ng-template&amp;gt;

    &amp;lt;/form&amp;gt;
    

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The text in form submit button will change based on the boolean value in the &lt;code&gt;**isEditMode**&lt;/code&gt; variable.&lt;/p&gt;

&lt;h2 id=&quot;update-component-class&quot;&gt;#Update Component Class&lt;/h2&gt;

&lt;p&gt;After adding Material datatable and Form, let us update &lt;strong&gt;employees.component.ts&lt;/strong&gt; file with required methods.&lt;/p&gt;

&lt;p&gt;First, initialize the Template driven form with the &lt;code&gt;**NgForm**&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @ViewChild('employeeForm', { static: false })
  employeeForm: NgForm;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Import the &lt;code&gt;Employee&lt;/code&gt; class which we created and define a new variable &lt;code&gt;employeeData&lt;/code&gt; of type &lt;code&gt;Employee&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
employeeData: Employee;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then define the &lt;code&gt;**dataSource**&lt;/code&gt; and &lt;code&gt;**displayedColumns**&lt;/code&gt; with &lt;code&gt;**MatPaginator**&lt;/code&gt; class to build our Datatable&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  dataSource = new MatTableDataSource();
  displayedColumns: string[] = ['id', 'userId', 'jobTitleName', 'firstName','lastName','preferredFullName','employeeCode','region', 'phoneNumber','emailAddress','actions'];
  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then we will add methods to Add, Delete, Edit, Update and Get Employees list in the class file as shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
  getAllEmployees() {
    this.httpDataService.getList().subscribe((response: any) =&amp;gt; {
      this.dataSource.data = response;
    });
  }

  editItem(element) {
    this.employeeData = _.cloneDeep(element);
    this.isEditMode = true;
  }

  cancelEdit() {
    this.isEditMode = false;
    this.employeeForm.resetForm();
  }

  deleteItem(id) {
    this.httpDataService.deleteItem(id).subscribe((response: any) =&amp;gt; {

      // Approach #1 to update datatable data on local itself without fetching new data from server
      this.dataSource.data = this.dataSource.data.filter((o: Employee) =&amp;gt; {
        return o.id !== id ? o : false;
      })

      console.log(this.dataSource.data);

      // Approach #2 to re-call getAllEmployees() to fetch updated data
      // this.getAllEmployees()
    });
  }

  addEmployee() {
    this.httpDataService.createItem(this.employeeData).subscribe((response: any) =&amp;gt; {
      this.dataSource.data.push({ ...response })
      this.dataSource.data = this.dataSource.data.map(o =&amp;gt; {
        return o;
      })
    });
  }

  updateEmployee() {
    this.httpDataService.updateItem(this.employeeData.id, this.employeeData).subscribe((response: any) =&amp;gt; {

      // Approach #1 to update datatable data on local itself without fetching new data from server
      this.dataSource.data = this.dataSource.data.map((o: Employee) =&amp;gt; {
        if (o.id === response.id) {
          o = response;
        }
        return o;
      })

      // Approach #2 to re-call getAllEmployees() to fetch updated data
      // this.getAllEmployees()

      this.cancelEdit()

    });
  }
...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are calling &lt;code&gt;HttpDataService&lt;/code&gt; methods to communicate with our &lt;code&gt;json-server&lt;/code&gt;
After adding the above method the final &lt;strong&gt;employees.component.ts&lt;/strong&gt; file will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// employees.component.ts
import { Component, OnInit, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { HttpDataService } from 'src/app/services/http-data.service';
import * as _ from 'lodash';
import { Employee } from 'src/app/models/employee';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';

@Component({
  selector: 'app-employees',
  templateUrl: './employees.component.html',
  styleUrls: ['./employees.component.css']
})
export class EmployeesComponent implements OnInit {

  @ViewChild('employeeForm', { static: false })
  employeeForm: NgForm;

  employeeData: Employee;

  dataSource = new MatTableDataSource();
  displayedColumns: string[] = ['id', 'userId', 'jobTitleName', 'firstName','lastName','preferredFullName','employeeCode','region', 'phoneNumber','emailAddress','actions'];
  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;

  isEditMode = false;

  constructor(private httpDataService: HttpDataService) {
    this.employeeData = {} as Employee;
   }

  ngOnInit(): void {
    // Initializing Datatable pagination
    this.dataSource.paginator = this.paginator;

    // Fetch All Employees on Page load
    this.getAllEmployees();
  }

  getAllEmployees(){
    this.httpDataService.getList().subscribe((response: any) =&amp;gt; {
      this.dataSource.data = response;
    });
  }

  editItem(element) {
    this.employeeData = _.cloneDeep(element);
    this.isEditMode = true;
  }

  cancelEdit() {
    this.isEditMode = false;
    this.employeeForm.resetForm();
  }

  deleteItem(id) {
    this.httpDataService.deleteItem(id).subscribe((response: any) =&amp;gt; {

      // Approach #1 to update datatable data on local itself without fetching new data from server
      this.dataSource.data = this.dataSource.data.filter((o: Employee) =&amp;gt; {
        return o.id !== id ? o : false;
      })

      console.log(this.dataSource.data);

      // Approach #2 to re-call getAllEmployees() to fetch updated data
      // this.getAllEmployees()
    });
  }

  addEmployee() {
    this.httpDataService.createItem(this.employeeData).subscribe((response: any) =&amp;gt; {
      this.dataSource.data.push({ ...response })
      this.dataSource.data = this.dataSource.data.map(o =&amp;gt; {
        return o;
      })
    });
  }

  updateEmployee() {
    this.httpDataService.updateItem(this.employeeData.id, this.employeeData).subscribe((response: any) =&amp;gt; {

      // Approach #1 to update datatable data on local itself without fetching new data from server
      this.dataSource.data = this.dataSource.data.map((o: Employee) =&amp;gt; {
        if (o.id === response.id) {
          o = response;
        }
        return o;
      })

      // Approach #2 to re-call getAllEmployees() to fetch updated data
      // this.getAllEmployees()

      this.cancelEdit()

    });
  }

  onSubmit() {
    if (this.employeeForm.form.valid) {
      if (this.isEditMode)
        this.updateEmployee()
      else
        this.addEmployee();
    } else {
      console.log('Enter valid data!');
    }
  }

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it now run you server by executing &lt;code&gt;**$ json-server --watch ./API/data.json**&lt;/code&gt; then run Angular application in another terminal by executing &lt;code&gt;**$ ng serve --open**&lt;/code&gt;
You can get source code of this tutorial in my GitHub repo &lt;a href=&quot;https://github.com/girishgodage/ang10MatDatatabeCrud&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;: In this tutorial, we get to know how to use Http services to make server communication, use get, post, put and delete methods on data server. We use RxJs methods and operators to handle errors and network issues using &lt;code&gt;retry()&lt;/code&gt; . Added Angular Material UI library to show data rows in a Datatable. In the Material Datatable, we performed CRUD operation using Inline approach&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="programming" /><summary type="html">Angular 10 Material Datatable Inline HttpClient CRUD Operations using RestFull APIs</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/angular_logo.png" /></entry><entry><title type="html">Azure Static Web Apps</title><link href="http://localhost:4000/blog/azure-static-web-apps" rel="alternate" type="text/html" title="Azure Static Web Apps" /><published>2020-10-19T14:44:00+00:00</published><updated>2020-10-19T14:44:00+00:00</updated><id>http://localhost:4000/blog/azure-static-web-apps</id><content type="html" xml:base="http://localhost:4000/blog/azure-static-web-apps">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Azure Static Web Apps is a service that automatically builds and deploys full stack web apps to Azure from a GitHub repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/static-apps-overview.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The workflow of &lt;strong&gt;Azure Static Web Apps&lt;/strong&gt; is tailored to a developer’s daily workflow. Apps are built and deployed based off GitHub interactions.&lt;/p&gt;

&lt;p&gt;When you create an Azure Static Web Apps resource, Azure sets up a &lt;strong&gt;GitHub Actions workflow&lt;/strong&gt; in the app’s source code repository that monitors a branch of your choice. Every time you &lt;strong&gt;push commits&lt;/strong&gt; or &lt;strong&gt;accept pull requests&lt;/strong&gt; into the watched branch, the &lt;em&gt;GitHub Action automatically builds and deploys your app and its API to Azure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static web apps&lt;/strong&gt; are commonly built using libraries and frameworks like &lt;strong&gt;Angular, React, Svelte, Vue, or Blazor&lt;/strong&gt;. These apps include &lt;strong&gt;HTML, CSS, JavaScript, and image assets&lt;/strong&gt; that make up the application. &lt;em&gt;With a traditional web server, these assets are served from a single server alongside any required API endpoints&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;Static Web Apps&lt;/strong&gt;, s&lt;em&gt;tatic assets are separated from a traditional web server and are instead served from points geographically distributed around the world&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This distribution makes serving files much faster as files are physically closer to end users. In addition, &lt;em&gt;API endpoints are hosted using a serverless architecture&lt;/em&gt;, which avoids the need for a full back-end server all together.&lt;/p&gt;

&lt;h2 id=&quot;key-features&quot;&gt;Key features&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Web hosting&lt;/strong&gt; for static content like HTML, CSS, JavaScript, and images.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Integrated API&lt;/strong&gt; support provided by Azure Functions.
First-class GitHub integration where repository changes trigger builds and deployments.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Globally distributed&lt;/strong&gt; static content, putting content closer to your users.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Free SSL certificates&lt;/strong&gt;, which are automatically renewed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Custom domains&lt;/strong&gt; to provide branded customizations to your app.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Seamless security&lt;/strong&gt; model with a reverse-proxy when calling APIs, which requires no CORS configuration.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authentication provider integrations&lt;/strong&gt; with Azure Active Directory, Facebook, Google, GitHub, and Twitter.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Customizable authorization&lt;/strong&gt; role definition and assignments.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Back-end routing rules&lt;/strong&gt; enabling full control over the content and routes you serve.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Generated staging versions&lt;/strong&gt; powered by pull requests enabling preview versions of your site before publishing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-you-can-do-with-static-web-apps&quot;&gt;What you can do with Static Web Apps&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Build modern web applications&lt;/strong&gt; with &lt;em&gt;JavaScript frameworks and libraries like Angular, React, Svelte, Vue, or using Blazor to create WebAssembly applications, with an Azure Functions back-end&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Publish static sites&lt;/strong&gt; with frameworks like Gatsby, Hugo, VuePress.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deploy web applications&lt;/strong&gt; with frameworks like Next.js and Nuxt.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-your-first-static-web-app&quot;&gt;Building your first static web app&lt;/h2&gt;

&lt;p&gt;Azure Static Web Apps publishes a website to a production environment by building apps from a GitHub repository. In this quickstart, you deploy a web application to Azure Static Web apps using the Visual Studio Code extension.&lt;/p&gt;

&lt;p&gt;If you don’t have an Azure subscription, &lt;a href=&quot;https://azure.microsoft.com/free&quot;&gt;create a free trial account&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; account&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure&lt;/a&gt; account&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps&quot;&gt;Azure Static Web Apps extension for Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-a-repository&quot;&gt;Create a repository&lt;/h2&gt;

&lt;p&gt;This article uses a GitHub template repository to make it easy for you to get started. The template features a starter app used to deploy using Azure Static Web Apps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure you’re signed in to GitHub and navigate to the following location to create a new repository:
    &lt;ul&gt;
      &lt;li&gt;a. https://github.com/staticwebdev/vanilla-basic/generate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Name your repository my-first-static-web-app&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note:Azure Static Web Apps requires at least one HTML file to create a web app. The repository you create in this step includes a single index.html file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Select &lt;strong&gt;Create repository from template&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/create-template.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;clone-the-repository&quot;&gt;Clone the repository&lt;/h2&gt;

&lt;p&gt;With the repository created in your GitHub account, clone the project to your local machine using the following command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git clone https://github.com/&amp;lt;YOUR_GITHUB_ACCOUNT_NAME&amp;gt;/my-first-static-web-app.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Make sure to replace &lt;YOUR_GITHUB_ACCOUNT_NAME&gt; with your GitHub username.&lt;/YOUR_GITHUB_ACCOUNT_NAME&gt;&lt;/p&gt;

&lt;p&gt;Next, open Visual Studio Code and go to &lt;strong&gt;File &amp;gt; Open Folder&lt;/strong&gt; to open the repository you just cloned to your machine in the editor.&lt;/p&gt;

&lt;h2 id=&quot;create-a-static-web-app&quot;&gt;Create a static web app&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Inside Visual Studio Code, select the Azure logo in the Activity Bar to open the Azure extensions window.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-azure-logo.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note:
&lt;strong&gt;Azure and GitHub sign in are required&lt;/strong&gt;. If you are not already signed in to Azure and GitHub from Visual Studio Code, the extension will prompt you to sign in to both during the creation process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Place your mouse over the Static Web Apps label and select the plus sign.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-create-button.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The command palate opens at the top of the editor and prompts you to name your application.
 Type &lt;strong&gt;my-first-static-web-app&lt;/strong&gt; and press &lt;strong&gt;Enter&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-create-app.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select the master branch and press Enter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-branch.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select / as the location for the application code and press Enter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-app-location.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The extension is looking for the location of the API in your application. This article doesn’t implement an API. Select &lt;strong&gt;Skip for now&lt;/strong&gt; and press &lt;strong&gt;Enter&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-api-location.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Select the location where files are built for production in your app&lt;/p&gt;

    &lt;p&gt;Clear the box and press Enter.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-artifact-no-framework.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select a location nearest you and press Enter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-location.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;9.Once the app is created, a confirmation notification is shown in Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-confirmation.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the Visual Studio Code Explorer window, return to the Static Web Apps section and right-click on Production and select Open in Portal to view app in the Azure portal.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-open-in-portal.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;view-the-website&quot;&gt;View the website&lt;/h2&gt;

&lt;p&gt;There are two aspects to deploying a static app. The first provisions the underlying Azure resources that make up your app. The second is a GitHub Actions workflow that builds and publishes your application.&lt;/p&gt;

&lt;p&gt;Before you can navigate to your new static site, the deployment build must first finish running.&lt;/p&gt;

&lt;p&gt;The Static Web Apps overview window displays a series of links that help you interact with your web app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/overview-window.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Clicking on the banner that says, Click here to check the status of your GitHub Actions runs&lt;/em&gt; takes you to the GitHub Actions running against your repository. Once you verify the deployment job is complete, then you can navigate to your website via the generated URL.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once GitHub Actions workflow is complete, you can click on the URL link to open the website in new tab.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;clean-up-resources&quot;&gt;Clean up resources&lt;/h2&gt;
&lt;p&gt;If you’re not going to continue to use this application, you can delete the Azure Static Web Apps instance through the extension.&lt;/p&gt;

&lt;p&gt;In the Visual Studio Code Explorer window, return to the Static Web Apps section and right-click on &lt;strong&gt;my-first-static-web-app&lt;/strong&gt; and select &lt;strong&gt;Delete&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/extension-delete.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-an-api-to-azure-static-web-apps-preview-with-azure-functions&quot;&gt;Add an API to Azure Static Web Apps Preview with Azure Functions&lt;/h2&gt;

&lt;p&gt;You can add &lt;strong&gt;serverless APIs&lt;/strong&gt; to Azure Static Web Apps via integration with Azure Functions. This article demonstrates how to add and deploy an API to an Azure Static Web Apps site.&lt;/p&gt;

&lt;p&gt;Prerequisites&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Azure account with an active subscription.
If you don’t have an account, &lt;a href=&quot;https://azure.microsoft.com/free&quot;&gt;you can create one for free&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions&quot;&gt;Azure Functions extension&lt;/a&gt; for Visual Studio Code&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Live Server Visual Studio Code extension&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/download/&quot;&gt;Node.js&lt;/a&gt; to run the API app locally&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-a-git-repository&quot;&gt;Create a Git repository&lt;/h2&gt;

&lt;p&gt;The following steps demonstrate how to create a new repository and clone the files to your computer.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you are logged in to GitHub and, navigate to https://github.com/staticwebdev/vanilla-basic/generate to create a new repository.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Repository name box, enter my-vanilla-api.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click Create repository from template.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/create-repository.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once your project is created, copy the URL in your browser for the new repository. You use this URL in Visual Studio Code to clone the Git repository.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Press &lt;strong&gt;F1&lt;/strong&gt; to open command in the Command Palette.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Paste the URL into the &lt;em&gt;Git: Clone&lt;/em&gt; prompt, and press &lt;strong&gt;Enter&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/vscode-git-0.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Follow the prompts to select a repository location to clone the project.&lt;/p&gt;

&lt;h2 id=&quot;create-the-api&quot;&gt;Create the API&lt;/h2&gt;

&lt;p&gt;Next, you create an Azure Functions project as the application’s API.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Inside the &lt;strong&gt;my-vanilla-api&lt;/strong&gt; project, create a sub-folder named &lt;strong&gt;api&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Press &lt;strong&gt;F1&lt;/strong&gt; to open the Command Palette&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Type &lt;strong&gt;Azure Functions: Create New Project&lt;/strong&gt;…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Press &lt;strong&gt;Enter&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose &lt;strong&gt;Browse&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the &lt;strong&gt;api&lt;/strong&gt; folder as the directory for your  project workspace&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose &lt;strong&gt;Select&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/create-azure-functions-vscode-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Provide the following information at the prompts:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Select a language: Choose JavaScript&lt;/li&gt;
  &lt;li&gt;Select a template for your project’s first function: Choose HTTP trigger&lt;/li&gt;
  &lt;li&gt;Provide a function name: Enter GetMessage&lt;/li&gt;
  &lt;li&gt;Authorization level: Choose Anonymous, which enables anyone to call your function endpoint.
    &lt;ul&gt;
      &lt;li&gt;To learn about authorization levels, see Authorization keys.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visual Studio Code generates an Azure Functions project with an HTTP triggered function.&lt;/p&gt;

&lt;p&gt;Your app now has a project structure similar to the following example.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
├── api
│   ├── GetMessage
│   │   ├── function.json
│   │   ├── index.js
│   │   └── sample.dat
│   ├── host.json
│   ├── local.settings.json
│   ├── package.json
│   └── proxies.json
├── index.html
├── readme.md
└── styles.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, you’ll change the &lt;strong&gt;GetMessage&lt;/strong&gt; function to return a message to the front-end.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Update the GetMessage function under api/GetMessage/index.js with the following code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;``` java script&lt;/p&gt;

&lt;p&gt;module.exports = async function (context, req) {
  context.res = {
    body: {
      text: “Hello from the API”
    }
  };
};&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
2. Update the GetMessage configuration under api/GetMessage/function.json with the following settings.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;{
  “bindings”: [
    {
      “authLevel”: “anonymous”,
      “type”: “httpTrigger”,
      “direction”: “in”,
      “name”: “req”,
      “methods”: [
        “get”
      ],
      “route”: “message”
    },
    {
      “type”: “http”,
      “direction”: “out”,
      “name”: “res”
    }
  ]
}&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
With the above settings, the API endpoint is:

* Triggered when an HTTP request is made to the function
* Available to all requests regardless of authentication status
* Exposed via the /api/message route

## Run the API locally
Visual Studio Code integrates with Azure Functions Core Tools to let you run this project on your local development computer before you publish to Azure.

&amp;gt;Tip:
Make sure you have all the resources listed in the prerequisites section installed before proceeding.

1. Run the function by pressing F5 to start the Functions app.

2. If Azure Functions Core Tools isn't already *installed*, select **Install** at the prompt.  The Core Tools shows output from the running application in the Terminal panel. As a part of the output, you can see the URL endpoint of your HTTP-triggered function running locally.

![image info](/img/azure/8/create-azure-functions-vscode-2.png)

3. With Core Tools running, navigate to the following URL to verify the API is running correctly: http://localhost:7071/api/message.

The response in the browser should look similar to the following example:

![image info](/img/azure/8/create-azure-functions-vscode-3.png)

4. Press Shift + F5 to stop the debugging session.

## Call the API from the application

When deployed to Azure, requests to the API are automatically routed to the Functions app for requests sent to the api route. Working locally, you have to configure the application settings to proxy requests to the local API.

## Local proxy
You can configure a proxy for the Live Server Visual Studio Code extension that routes all requests to /api to the running API endpoint at http://127.0.0.1:7071/api.

1. Open the .vscode/settings.json file.

2. Add the following settings to specify a proxy for Live Server.
   
```json

&quot;liveServer.settings.proxy&quot;: {
   &quot;enable&quot;: true,
   &quot;baseUri&quot;: &quot;/api&quot;,
   &quot;proxyUri&quot;: &quot;http://127.0.0.1:7071/api&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This configuration is best saved in project settings file, as opposed to in the user settings file.&lt;/p&gt;

&lt;p&gt;Using project settings assures the proxy isn’t applied to all other projects opened in Visual Studio Code.&lt;/p&gt;

&lt;h2 id=&quot;update-html-files-to-access-the-api&quot;&gt;Update HTML files to access the API&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Next, update the content of the index.html file with the following code to fetch the text from the API function and display it on the screen:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;styles.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vanilla JavaScript App&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Vanilla JavaScript App&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Loading content from the API: &lt;span class=&quot;nt&quot;&gt;&amp;lt;b&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`/api/message`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}())&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Press &lt;strong&gt;F5&lt;/strong&gt; to start the API project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Press &lt;strong&gt;F1&lt;/strong&gt; and choose &lt;em&gt;Live Server: Open with Live Server&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should now see the API message in the web page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/create-azure-functions-vscode-4.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note:You can use other HTTP servers or proxies to serve the index.html file. Accessing the index.html from file:/// will not work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Press Shift + F5 to stop the API project.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;commit-and-push-your-changes-to-github&quot;&gt;Commit and push your changes to GitHub&lt;/h2&gt;
&lt;p&gt;Using Visual Studio Code, commit and push your changes to the remote git repository.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Press &lt;strong&gt;F1&lt;/strong&gt; to open the Command Palette&lt;/li&gt;
  &lt;li&gt;Type &lt;strong&gt;Git: Commit All&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Add a commit message and press &lt;strong&gt;Enter&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Press &lt;strong&gt;F1&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Type in &lt;strong&gt;Git: push&lt;/strong&gt; and press &lt;strong&gt;Enter&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-static-web-app-1&quot;&gt;Create a static web app&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Navigate to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Create a Resource&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Search for &lt;strong&gt;Static Web App&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Static Web App (Preview)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Create&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next, add the app-specific settings.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select your &lt;em&gt;Azure subscription&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select or &lt;em&gt;create a new Resource Group&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Name the app &lt;strong&gt;my-vanilla-api&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Select &lt;em&gt;Region&lt;/em&gt; closest to you&lt;/li&gt;
  &lt;li&gt;Select the &lt;strong&gt;Free&lt;/strong&gt; SKU&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;Sign-in with GitHub&lt;/strong&gt; button and authenticate with GitHub&lt;/li&gt;
  &lt;li&gt;Select your preferred &lt;em&gt;Organization&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;my-vanilla-api&lt;/strong&gt; from the Repository drop-down&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;master&lt;/strong&gt; from the Branch drop-down&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;Next: Build &amp;gt;&lt;/strong&gt; button to edit the build configuration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next, add the following the build details.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enter &lt;strong&gt;/&lt;/strong&gt; for the App location.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter &lt;strong&gt;api&lt;/strong&gt; in the Api location box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clear the default value out of the &lt;em&gt;App artifact location&lt;/em&gt;, leaving the box empty.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Review + create&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click the &lt;strong&gt;Create&lt;/strong&gt; button&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you click the &lt;em&gt;Create&lt;/em&gt; button, Azure does two things. First, the underlying cloud services are created to support the app. Next, a background process begins to build and deploy the application.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;strong&gt;Go to Resource&lt;/strong&gt; button to take you to the web app’s &lt;em&gt;Overview&lt;/em&gt; page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As the app is being built in the background, you can click on the banner which contains a link to view the build status.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/8/static-app-url-from-portal.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;clean-up-resources-1&quot;&gt;Clean up resources&lt;/h2&gt;

&lt;p&gt;If you don’t want to keep this application for further use, you can use the following steps to delete the Azure Static Web App and its related resources.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In the top search bar, type &lt;strong&gt;Resource groups&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Resource groups&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;myResourceGroup&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;On the &lt;em&gt;myResourceGroup&lt;/em&gt; page, make sure that the listed resources are the ones you want to delete.&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Delete&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Type &lt;strong&gt;myResourceGroup&lt;/strong&gt; in the text box&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Delete&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/AzureAppSerive.png" /></entry><entry><title type="html">How to build your own AI personal assistant using Python</title><link href="http://localhost:4000/blog/pythonPA" rel="alternate" type="text/html" title="How to build your own AI personal assistant using Python" /><published>2020-10-10T10:10:10+00:00</published><updated>2020-10-10T10:10:10+00:00</updated><id>http://localhost:4000/blog/PythonPersonalAssistant</id><content type="html" xml:base="http://localhost:4000/blog/pythonPA">&lt;h2 id=&quot;how-to-build-your-own-ai-personal-assistant-using-python&quot;&gt;How to build your own AI personal assistant using Python&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;An AI personal assistant is a piece of software that understands verbal or written commands and completes task assigned by the client. It is an example of weak AI that is it can only execute and perform quest designed by the user.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/G1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Want to build your own personal AI assistant like Apple Siri, Microsoft Cortana and Google assistant?&lt;/p&gt;

&lt;p&gt;You can check out this Article to build one in a few simple steps!&lt;/p&gt;

&lt;p&gt;With the python programming language, a script most commonly used by the developers can be used to build your personal AI assistant to perform task designed by the users.&lt;/p&gt;

&lt;p&gt;Now, let’s write a script for our personal voice assistant using python.&lt;/p&gt;

&lt;h2 id=&quot;skills&quot;&gt;Skills:&lt;/h2&gt;

&lt;p&gt;The implemented voice assistant can perform the following task it can &lt;strong&gt;open YouTube, Gmail, Google chrome and stack overflow. Predict current time, take a photo, search Wikipedia to abstract required data, predict weather in different cities, get top headline news from Times of India and can answer computational and geographical questions too&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The following queries of the voice assistant can be manipulated as per the users need.&lt;/p&gt;

&lt;h2 id=&quot;packages-required&quot;&gt;Packages required:&lt;/h2&gt;

&lt;p&gt;To build a personal voice assistant it’s necessary to install the following packages in your system using the pip command.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Speech recognition&lt;/strong&gt; — Speech recognition is an important feature used in house automation and in artificial intelligence devices. The main function of this library is it tries to understand whatever the humans speak and converts the speech to text.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;pyttsx3&lt;/strong&gt; — pyttxs3 is a text to speech conversion library in python. This package supports text to speech engines on Mac os x, Windows and on Linux.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;wikipedia&lt;/strong&gt; — Wikipedia is a multilingual online encyclopedia used by many people from academic community ranging from freshmen to students to professors who wants to gain information over a particular topic. This package in python extracts data’s required from Wikipedia.&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;ecapture&lt;/strong&gt; — This module is used to capture images from your camera&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;datetime&lt;/strong&gt; — This is an inbuilt module in python and it works on date and time&lt;/p&gt;

&lt;p&gt;6) &lt;strong&gt;os&lt;/strong&gt; — This module is a standard library in python and it provides the function to interact with operating system&lt;/p&gt;

&lt;p&gt;7) &lt;strong&gt;time&lt;/strong&gt; — The time module helps us to display time&lt;/p&gt;

&lt;p&gt;8) &lt;strong&gt;Web browser&lt;/strong&gt; — This is an in-built package in python. It extracts data from the web&lt;/p&gt;

&lt;p&gt;9)  &lt;strong&gt;Subprocess&lt;/strong&gt; — This is a standard library use to process various system commands like to log off or to restart your PC.&lt;/p&gt;

&lt;p&gt;10) &lt;strong&gt;Json&lt;/strong&gt;- The json module is used for storing and exchanging data.&lt;/p&gt;

&lt;p&gt;11) &lt;strong&gt;requests&lt;/strong&gt;- The request module is used to send all types of HTTP request. Its accepts URL as parameters and gives access to the given URL’S.&lt;/p&gt;

&lt;p&gt;12) &lt;strong&gt;wolfram alpha&lt;/strong&gt; — Wolfram Alpha is an API which can compute expert-level answers using Wolfram’s algorithms, knowledge base and AI technology. It is made possible by the Wolfram Language&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation:&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Import the following libraries&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;
import speech_recognition as sr
import pyttsx3
import datetime
import wikipedia
import webbrowser
import os
import time
import subprocess
from ecapture import ecapture as ec
import wolframalpha
import json
import requests
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;setting-up-the-speech-engine&quot;&gt;Setting up the speech engine:&lt;/h2&gt;

&lt;p&gt;The pyttsx3 module is stored in a variable name engine.
&lt;strong&gt;Sapi5&lt;/strong&gt; is a &lt;strong&gt;Microsoft Text to speech engine used for voice recognition&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The voice Id can be set as either 0 or 1,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0 indicates Male voice&lt;/li&gt;
  &lt;li&gt;1 indicates Female voice&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;engine=pyttsx3.init('sapi5')
voices=engine.getProperty('voices')
engine.setProperty('voice','voices[0].id')

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now define a function &lt;strong&gt;speak&lt;/strong&gt; which converts text to speech. The speak function takes the text as its argument,further initialize the engine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;runAndWait&lt;/strong&gt;: This function Blocks while processing all currently queued commands. It Invokes callbacks for engine notifications appropriately and returns back when all commands queued before this call are emptied from the queue.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def speak(text):
    engine.say(text)
    engine.runAndWait()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;initiate-a-function-to-greet-the-user&quot;&gt;Initiate a function to greet the user:&lt;/h2&gt;

&lt;p&gt;Define a function wishMe for the AI assistant to greet the user.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;now().hour&lt;/strong&gt; function abstract’s the hour from the current time.&lt;/p&gt;

&lt;p&gt;If the hour is greater than zero and less than 12, the voice assistant wishes you with the message “Good Morning”.&lt;/p&gt;

&lt;p&gt;If the hour is greater than 12 and less than 18, the voice assistant wishes you with the following message “Good Afternoon”.&lt;/p&gt;

&lt;p&gt;Else it voices out the message “Good evening”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def wishMe():
    hour=datetime.datetime.now().hour
    if hour&amp;gt;=0 and hour&amp;lt;12:
        speak(&quot;Hello,Good Morning&quot;)
        print(&quot;Hello,Good Morning&quot;)
    elif hour&amp;gt;=12 and hour&amp;lt;18:
        speak(&quot;Hello,Good Afternoon&quot;)
        print(&quot;Hello,Good Afternoon&quot;)
    else:
        speak(&quot;Hello,Good Evening&quot;)
        print(&quot;Hello,Good Evening&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setting-up-the-command-function-for-your-ai-assistant-&quot;&gt;Setting up the command function for your AI assistant :&lt;/h2&gt;

&lt;p&gt;Define a function takecommand for the AI assistant to understand and to accept human language. The microphone captures the human speech and the recognizer recognizes the speech to give a response.&lt;/p&gt;

&lt;p&gt;The exception handling is used to handle the exception during the run time error and,the recognize_google function uses google audio to recognize speech.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def takeCommand():
    r=sr.Recognizer()
    with sr.Microphone() as source:
        print(&quot;Listening...&quot;)
        audio=r.listen(source)

        try:
            statement=r.recognize_google(audio,language='en-in')
            print(f&quot;user said:{statement}\n&quot;)

        except Exception as e:
            speak(&quot;Pardon me, please say that again&quot;)
            return &quot;None&quot;
        return statement

print(&quot;Loading your AI personal assistant G-One&quot;)
speak(&quot;Loading your AI personal assistant G-One&quot;)
wishMe()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-main-function&quot;&gt;The Main function:&lt;/h2&gt;
&lt;p&gt;The main function starts from here,the commands given by the humans is stored in the variable &lt;strong&gt;statement&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if __name__=='__main__':


    while True:
        speak(&quot;Tell me how can I help you now?&quot;)
        statement = takeCommand().lower()
        if statement==0:
            continue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the following trigger words are there in the statement given by the users it invokes the virtual assistant to speak the below following commands.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if &quot;good bye&quot; in statement or &quot;ok bye&quot; in statement or &quot;stop&quot; in statement:
            speak('your personal assistant G-one is shutting down,Good bye')
            print('your personal assistant G-one is shutting down,Good bye')
            break
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;skill-1--fetching-data-from-wikipedia&quot;&gt;Skill 1 -Fetching data from Wikipedia:&lt;/h2&gt;

&lt;p&gt;The following commands helps to extract information from wikipedia. The &lt;strong&gt;wikipedia.summary()&lt;/strong&gt; function takes two arguments, the statement given by the user and how many sentences from wikipedia is needed to be extracted is stored in a variable &lt;strong&gt;result&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if 'wikipedia' in statement:
            speak('Searching Wikipedia...')
            statement =statement.replace(&quot;wikipedia&quot;, &quot;&quot;)
            results = wikipedia.summary(statement, sentences=3)
            speak(&quot;According to Wikipedia&quot;)
            print(results)
            speak(results)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;skill-2--accessing-the-web-browsers--google-chrome--g-mail-and-youtube&quot;&gt;Skill 2 -Accessing the Web Browsers — Google chrome , G-Mail and YouTube:&lt;/h2&gt;

&lt;p&gt;The web browser extracts data from web. The &lt;strong&gt;open_new_tab&lt;/strong&gt; function accepts &lt;strong&gt;URL&lt;/strong&gt; as a parameter that needs to be accessed.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Python time sleep function&lt;/strong&gt; is used to add delay in the execution of a program. We can use this function to halt the execution of the program for given &lt;strong&gt;time&lt;/strong&gt; in seconds.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elif 'open youtube' in statement:
            webbrowser.open_new_tab(&quot;https://www.youtube.com&quot;)
            speak(&quot;youtube is open now&quot;)
            time.sleep(5)

        elif 'open google' in statement:
            webbrowser.open_new_tab(&quot;https://www.google.com&quot;)
            speak(&quot;Google chrome is open now&quot;)
            time.sleep(5)

        elif 'open gmail' in statement:
            webbrowser.open_new_tab(&quot;gmail.com&quot;)
            speak(&quot;Google Mail open now&quot;)
            time.sleep(5)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;skill-3--predicting-time&quot;&gt;Skill 3 -Predicting time:&lt;/h2&gt;

&lt;p&gt;The current time is abstracted from &lt;strong&gt;datetime.now()&lt;/strong&gt; function which displays the hour, minute and second and is stored in a variable name &lt;strong&gt;strTime&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elif 'time' in statement:
            strTime=datetime.datetime.now().strftime(&quot;%H:%M:%S&quot;)
            speak(f&quot;the time is {strTime}&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;skill-4--to-fetch-latest-news&quot;&gt;Skill 4 -To fetch latest news:&lt;/h2&gt;
&lt;p&gt;If the user wants to know the latest news , The voice assistant is programmed to fetch top headline news from Time of India by using the web browser function.&lt;/p&gt;

&lt;h2 id=&quot;skill-5--capturing-photo&quot;&gt;Skill 5 -Capturing photo:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The ec.capture()&lt;/strong&gt; function is used to capture images from your camera. It accepts 3 parameter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Camera index&lt;/strong&gt; — The first connected webcam will be indicated as index 0 and the next webcam will be indicated as index 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Window name&lt;/strong&gt; — It can be a variable or a string. If you don’t wish to see the window, type as False.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save name&lt;/strong&gt; — A name can be given to the image and if you don’t want to save the image, type as false.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elif 'news' in statement:
            news = webbrowser.open_new_tab(&quot;https://timesofindia.indiatimes.com/home/headlines”)
            speak('Here are some headlines from the Times of India,Happy reading')
            time.sleep(6)

        elif &quot;camera&quot; in statement or &quot;take a photo&quot; in statement:
            ec.capture(0,&quot;robo camera&quot;,&quot;img.jpg&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;skill-6-searching-data-from-web&quot;&gt;Skill 6-Searching data from web:&lt;/h2&gt;

&lt;p&gt;From the &lt;strong&gt;web browser&lt;/strong&gt; you can search required data by passing the user statement (command) to the &lt;strong&gt;open_new_tab()&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User&lt;/strong&gt;: Hey G-One, please search images of butterfly&lt;/p&gt;

&lt;p&gt;The Voice assistant opens the google window &amp;amp; fetches butterfly images from web.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elif 'search'  in statement:
            statement = statement.replace(&quot;search&quot;, &quot;&quot;)
            webbrowser.open_new_tab(statement)
            time.sleep(5)	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;skill-7--setting-your-ai-assistant-to-answer-geographical-and-computational-questions&quot;&gt;Skill 7- Setting your AI assistant to answer geographical and computational questions:&lt;/h2&gt;

&lt;p&gt;Here we can use a third party API called &lt;strong&gt;Wolfram alpha API&lt;/strong&gt; to answer computational and geographical questions.It is made possible by the Wolfram Language. The &lt;strong&gt;client&lt;/strong&gt; is an instance (class) created for wolfram alpha. The &lt;strong&gt;res&lt;/strong&gt; variable stores the response given by the wolfram alpha.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elif 'ask' in statement:
            speak('I can answer to computational and geographical questions  and what question do you want to ask now')
            question=takeCommand()
            app_id=&quot;Paste your unique ID here &quot;
            client = wolframalpha.Client('R2K75H-7ELALHR35X')
            res = client.query(question)
            answer = next(res.results).text
            speak(answer)
            print(answer)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To access the wolfram alpha API an unique App ID is required which can be generated by the following ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the official page of wolfram alpha and create an account if you do not possess one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/python/datascience/img/6/1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sign in using your wolfram ID&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/python/datascience/img/6/2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Now you will view the homepage of the website. Head to the account section in the top right corner where you see your email. In the drop down menu, select the My Apps (API) option.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/python/datascience/img/6/3.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You will see this following window, now click Get APP_ID button&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/python/datascience/img/6/4.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Now you will get the following dialog box, give a suitable name and description and click the App ID button, an App ID will be generated and this is an unique ID. Using the App Id use can access the Wolfram alpha API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/python/datascience/img/6/5.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human:&lt;/strong&gt; Hey G-One ,what is the capital of California?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G-One Voice assistant:&lt;/strong&gt; Sacramento, United States of America&lt;/p&gt;

&lt;h2 id=&quot;skill-8--extra-features&quot;&gt;Skill 8- Extra features:&lt;/h2&gt;

&lt;p&gt;It would be interesting to program your AI assistant to answer the following questions like what it can and who created it,isn’t it?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elif 'who are you' in statement or 'what can you do' in statement:
            speak('I am G-one version 1 point O your personal assistant. I am programmed to minor tasks like'
                  'opening youtube,google chrome, gmail and stackoverflow ,predict time,take a photo,search wikipedia,predict weather' 
                  'In different cities, get top headline news from times of india and you can ask me computational or geographical questions too!')


        elif &quot;who made you&quot; in statement or &quot;who created you&quot; in statement or &quot;who discovered you&quot; in statement:
            speak(&quot;I was built by Girish&quot;)
            print(&quot;I was built by Girish&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;skill-9--to-forecast-weather&quot;&gt;Skill 9- To forecast weather:&lt;/h2&gt;

&lt;p&gt;Now to program your AI assistant to detect weather we need to generate an API key from Open Weather map.&lt;/p&gt;

&lt;p&gt;Open weather map is an online service which provides weather data. By generating an API ID in the official website you can use the APP_ID to make your voice assistant detect weather of all places whenever required. The necessary modules needed to be imported for this weather detection is json and request module.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;city_name variabl&lt;/strong&gt;e takes the command given by the human using the &lt;strong&gt;takeCommand()&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;get&lt;/strong&gt; method of &lt;strong&gt;request&lt;/strong&gt; module returns a &lt;strong&gt;response&lt;/strong&gt; object. And the &lt;strong&gt;json&lt;/strong&gt; methods of response object converts json format data into python format.&lt;/p&gt;

&lt;p&gt;The variable &lt;strong&gt;X&lt;/strong&gt; contains list of nested dictionaries which checks whether the value of ‘COD’ is 404 or not that is if the city is found or not.&lt;/p&gt;

&lt;p&gt;The values such as temperature and humidity is stored in the main key of variable &lt;strong&gt;Y&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elif &quot;weather&quot; in statement:
            api_key=&quot;Apply your unique ID&quot;
            base_url=&quot;https://api.openweathermap.org/data/2.5/weather?&quot;
            speak(&quot;what is the city name&quot;)
            city_name=takeCommand()
            complete_url=base_url+&quot;appid=&quot;+api_key+&quot;&amp;amp;q=&quot;+city_name
            response = requests.get(complete_url)
            x=response.json()
            if x[&quot;cod&quot;]!=&quot;404&quot;:
                y=x[&quot;main&quot;]
                current_temperature = y[&quot;temp&quot;]
                current_humidiy = y[&quot;humidity&quot;]
                z = x[&quot;weather&quot;]
                weather_description = z[0][&quot;description&quot;]
                speak(&quot; Temperature in kelvin unit is &quot; +
                      str(current_temperature) +
                      &quot;\n humidity in percentage is &quot; +
                      str(current_humidiy) +
                      &quot;\n description  &quot; +
                      str(weather_description))
                print(&quot; Temperature in kelvin unit = &quot; +
                      str(current_temperature) +
                      &quot;\n humidity (in percentage) = &quot; +
                      str(current_humidiy) +
                      &quot;\n description = &quot; +
                      str(weather_description))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Human:&lt;/strong&gt; Hey G-One ,I want to get the weather data&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G-One:&lt;/strong&gt; What is the city name?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human:&lt;/strong&gt; Himachal Pradesh&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G-One:&lt;/strong&gt; Temperature in kelvin unit is 301.09 , Humidity in percentage is 52 and Description is light rain.&lt;/p&gt;

&lt;h2 id=&quot;skill-10--to-log-off-your-pc&quot;&gt;Skill 10- To log off your PC:&lt;/h2&gt;

&lt;p&gt;The subprocess.call() function here is used to process the system function to log off or to turn off your PC. This invokes your AI assistant to automatically turn off your PC.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    elif &quot;log off&quot; in statement or &quot;sign out&quot; in statement:
            speak(&quot;Ok , your pc will log off in 10 sec make sure you exit from all applications&quot;)
            subprocess.call([&quot;shutdown&quot;, &quot;/l&quot;])
			
    time.sleep(3)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hurray , We have finally built our own AI voice assistant . Further you can still add more functionalities to your AI voice assistant to perform more task.&lt;/p&gt;

&lt;p&gt;Check out my GitHub profile for code:&lt;/p&gt;

&lt;p&gt;https://github.com/girishgodage/ai-personal-assistant&lt;/p&gt;

&lt;p&gt;Happy Coding !!&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">How to build your own AI personal assistant using Python</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/G1.png" /></entry><entry><title type="html">How To Easily Create Azure Functions Using Azure Portal</title><link href="http://localhost:4000/blog/how-to-easily-create-azure-functions-using-azure-portal" rel="alternate" type="text/html" title="How To Easily Create Azure Functions Using Azure Portal" /><published>2020-10-07T11:41:00+00:00</published><updated>2020-10-07T11:41:00+00:00</updated><id>http://localhost:4000/blog/azure-Function_using_AzurePortal</id><content type="html" xml:base="http://localhost:4000/blog/how-to-easily-create-azure-functions-using-azure-portal">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this article, we are going to discuss Azure Functions and how you can easily create your first Azure function app using Azure Portal. This is the first article of my new series called Azure functions for beginners. So let’s grab a cup of coffee and start learning.&lt;/p&gt;

&lt;h2 id=&quot;what-are-azure-functions&quot;&gt;What are Azure Functions?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Function As A Service (FaaS)&lt;/strong&gt; is a category of &lt;em&gt;cloud computing services&lt;/em&gt; that provides a platform in which you just need to think about writing business logic without thinking about the infrastructure required for its execution.&lt;/p&gt;

&lt;p&gt;Microsoft Azure provides two types of FaaS i.e &lt;strong&gt;Azure Logic Apps&lt;/strong&gt; and &lt;strong&gt;Azure Functions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So in this article, we are going to discuss &lt;strong&gt;Azure functions only.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;according-to-microsoft-docs&quot;&gt;According to &lt;strong&gt;Microsoft docs&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Azure Functions allows you to run small pieces of code (called “functions”) without worrying about application infrastructure. With Azure Functions, the cloud infrastructure provides all the up-to-date servers you need to keep your application running at scale.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Azure functions are &lt;strong&gt;event-driven&lt;/strong&gt; which means that you can run your function code when some event is triggered from either existing on-premise service or any other Azure service or third party service. The azure function can be scaled and you need to pay only for the resources as you consume. &lt;em&gt;Azure functions support lots of trigger points such as Http trigger, queue trigger, etc.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;some-of-the-features-of-azure-functions-are&quot;&gt;Some of the features of Azure functions are:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Azure Functions has great language support such as C#, Java, JavaScript, Python, and PowerShell.&lt;/li&gt;
  &lt;li&gt;Supports lots of triggers such as Service bus trigger, Http triggers, Queue trigger, etc.&lt;/li&gt;
  &lt;li&gt;We need to pay only for the resources as you consume i.e. Pay-per-use pricing model&lt;/li&gt;
  &lt;li&gt;We can install any of the libraries of your choice using NuGet or NPM&lt;/li&gt;
  &lt;li&gt;We can easily implement CI/CD using Github, Azure DevOps Service&lt;/li&gt;
  &lt;li&gt;We can also add integrated security on Http triggered based Azure functions using OAuth providers such as Azure Active Directory, Facebook, Google, Twitter, and Microsoft Account.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;below-are-several-templates-available-for-creating-azure-function-for-performing-different-operations&quot;&gt;Below are several templates available for creating Azure function for performing different operations:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP trigger&lt;/li&gt;
  &lt;li&gt;Blob storage trigger&lt;/li&gt;
  &lt;li&gt;Queue storage trigger&lt;/li&gt;
  &lt;li&gt;Service Bus Queue trigger&lt;/li&gt;
  &lt;li&gt;Service Bus Topic trigger&lt;/li&gt;
  &lt;li&gt;Timer trigger&lt;/li&gt;
  &lt;li&gt;Event Grid trigger&lt;/li&gt;
  &lt;li&gt;Event Hub trigger&lt;/li&gt;
  &lt;li&gt;Azure Cosmos DB trigger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can get more information about Azure Functions &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/&quot;&gt;here&lt;/a&gt;. So in this article, we are going to create an HTTP trigger-based Azure function using C# from Azure Portal. I will cover all other types of templates in my next article.&lt;/p&gt;

&lt;h2 id=&quot;create-azure-function-using-azure-portal&quot;&gt;Create Azure Function using Azure Portal&lt;/h2&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure&lt;/a&gt; account (If you don’t have an Azure subscription, &lt;a href=&quot;https://azure.microsoft.com/free&quot;&gt;create a free trial account&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-1---creating-a-function-app&quot;&gt;Step 1 - Creating a Function App&lt;/h3&gt;

&lt;p&gt;While creating a function you must have a function app to host the execution of your functions. You can group multiple functions into one function app which helps for deployment, scaling, easy for development &amp;amp; sharing of resources One function app can have multiple functions.&lt;/p&gt;

&lt;p&gt;Log in to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the Search bar, search as “function app” and then select the Function app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that click on the &lt;strong&gt;“Add”&lt;/strong&gt; button to add a new function app. Fill out the basic details:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/3.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Azure has Resource Groups(RG) which acts as a container for your resources. So now we are going to create a function app resource then first we need to create a Resource Group. If you have already created RG then you can use the same here. Under the Resource group click on the Create New button and give a unique RG name. I have Created a new resource group.&lt;/li&gt;
  &lt;li&gt;You need to provide a unique name for your function app.&lt;/li&gt;
  &lt;li&gt;Select an appropriate run time for your app. Since we are going to create a function using C# so I have used .net core as runtime.&lt;/li&gt;
  &lt;li&gt;Select a version and region.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we filled out basic details, then click on the &lt;strong&gt;Next: Hosting button&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/4.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need to provide a storage account while creating a function app. If you have already created a Storage account then you can use the same here. Or you can create new as well.&lt;/li&gt;
  &lt;li&gt;You have to select an operating system on which your app needs to be run.&lt;/li&gt;
  &lt;li&gt;Finally, you have to select a pricing plan for your app. You can see more details about Pricing &lt;a href=&quot;https://azure.microsoft.com/pricing/details/functions/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we filled out hosting details then click on the &lt;strong&gt;Next: Monitoring button&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/5.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application Insights&lt;/strong&gt;, a feature of Azure Monitor, which is an extensible &lt;em&gt;Application Performance Management (APM) service&lt;/em&gt; for developers and DevOps professionals. It is used to monitor your live applications. So if you want to integrate it in your function app the select Enable Application Insights flag to Yes.&lt;/p&gt;

&lt;p&gt;Now click on &lt;strong&gt;Review:Create button&lt;/strong&gt; and review all the details and click on the &lt;strong&gt;Create button&lt;/strong&gt;. Wait for a few minutes to create the resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/6.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once deployment complete click on &lt;strong&gt;Go to resource button&lt;/strong&gt; to see out new function app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/7.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/8.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2---creating-an-http-triggered-based-azure-function&quot;&gt;Step 2 - Creating an HTTP triggered based Azure Function&lt;/h2&gt;

&lt;p&gt;Once you navigate to the Function app then click on Functions in the left panel and then click on the Add button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/9.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now select the &lt;strong&gt;HTTP trigger&lt;/strong&gt; from the right panel. Now set &lt;strong&gt;Name and Authorization&lt;/strong&gt; level for your new function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/10.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Provide a name for your new function.&lt;/li&gt;
  &lt;li&gt;To restrict the use of your function we can set the Authorization level. There are three types of levels available:
    &lt;ul&gt;
      &lt;li&gt;1] When we set levels as Function, then we have to provide a function key to call our function.&lt;/li&gt;
      &lt;li&gt;2] When we set as &lt;strong&gt;Admin&lt;/strong&gt;, then you need to provide the master key. Both the function key and admin keys are found in the ‘keys’ management panel on the portal when your function is selected.&lt;/li&gt;
      &lt;li&gt;3] When we don’t want any authorization then we can simply set level as &lt;strong&gt;Anonymous&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now click on the Create Function button. You then automatically redirect to function once the function is successfully created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/11.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;“Code + Test” button&lt;/strong&gt; under the Developer section from the left sidebar panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/12.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you can see the basic function code written which accepts name from the query string or from the request body and append to name to the Hello string and return the output.&lt;/p&gt;

&lt;h2 id=&quot;step-3---testing-of-http-triggered-based-azure-function&quot;&gt;Step 3 - Testing of Http triggered based Azure Function&lt;/h2&gt;

&lt;p&gt;Now click on the “Test/Run” button. For this default function, you can provide the input property name from either body or either from the query string.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/13.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Run button&lt;/strong&gt; from the right panel. So you can see the output in the &lt;strong&gt;“Output”&lt;/strong&gt; tab in the right panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/14.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is all about running it from Portal. You can run this function from the browser or from the postman as well. To get the function URL click on the &lt;strong&gt;“Get Function URL”&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/15.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the URL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/16.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since our function accepts input property name from the query string then paste the URL into the browser and append &lt;code class=&quot;highlighter-rouge&quot;&gt;?name=AzFunction&lt;/code&gt; and hit the URL. You will see the output in the browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/17.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since this is the HTTP Trigger function we can run it from postman as well. So paste the URL in postman and pass input and see the output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/7/18.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it. You have created your Azure function using Azure Portal.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, I have explained Azure Functions and how to create a function using the Azure Portal. Also, I demonstrated how to test function from portal, browser, and postman. I really hope that you enjoyed this article, share it with friends, and please do not hesitate to send me your thoughts or comments. Stay tuned for more Azure Functions articles.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/azureFunctionApp.png" /></entry><entry><title type="html">Serverless With Blazor</title><link href="http://localhost:4000/blog/serverless-with-blazor" rel="alternate" type="text/html" title="Serverless With Blazor" /><published>2020-06-12T09:46:00+00:00</published><updated>2020-06-12T09:46:00+00:00</updated><id>http://localhost:4000/blog/serverless-with-blazor</id><content type="html" xml:base="http://localhost:4000/blog/serverless-with-blazor">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this article, we will learn how to implement Azure serverless with Blazor web assembly. We will create an app that lists out some Frequently Asked Questions (FAQ) on Covid-19. We will create an Azure Cosmos DB which will act as our primary database to store questions and answers. An Azure function app will be used to fetch data from cosmos DB. We will deploy the function app to Azure to expose it globally via an API endpoint. We will consume the API in a Blazor web assembly app. The FAQs will be displayed in a card layout with the help of Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-serverless-architecture&quot;&gt;What is a serverless architecture?&lt;/h2&gt;

&lt;p&gt;In the traditional application such as a 3-tier app, a client will request the server for the resources, and the server will process the request and respond with the appropriate data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/ServerArchi.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there are some issues with this architecture. We need a server running continuously. Even if there is no request, the server is present 24X7, ready to process the request. &lt;strong&gt;Maintaining server availability is cost-intensive&lt;/strong&gt;.
Another problem is &lt;strong&gt;scaling&lt;/strong&gt;. If the traffic is huge, we need to scale out all the servers and it can be a cumbersome process.&lt;/p&gt;

&lt;p&gt;An effective solution to this problem is serverless web architecture. The client will make a request to a file storage account instead of a server. The storage account will return the &lt;strong&gt;index.html&lt;/strong&gt; page along with some code that needs to be rendered on the browser. Since there is no server to render the page, we are relying on the browser to render the page. All the logic to draw the element or update the element will run in the browser. We do not have any server on backend, we just have a storage account with a static asset.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/ServerLessArchi.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-azure-function&quot;&gt;What is an Azure function?&lt;/h2&gt;

&lt;p&gt;Making the browser run all the logic to render the page seems exciting but it has some limitations. We do not want the browser to make database calls. We need some part of our code to run on the server-side such as connecting to a database. This is the place when Azure functions come in use. In a serverless architecture, if we want some code to run the server-side, then we use an Azure function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/ServerLessArchiAZFunc.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Azure functions are event-driven serverless compute platform. You need to pay only when execution happens. They are also easy to scale. Hence, &lt;strong&gt;we get both the scaling and the cost benefits&lt;/strong&gt; with Azure functions. To learn more refer to the &lt;a href=&quot;https://azure.microsoft.com/en-in/services/functions/&quot;&gt;Azure function official docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-should-you-use-azure-serverless&quot;&gt;Why should you use Azure serverless?&lt;/h2&gt;

&lt;p&gt;Azure serverless solution can add value to your product by minimizing the time and resources you spend on infrastructure-related requirements. You can increase the &lt;strong&gt;developer productivity&lt;/strong&gt;, &lt;strong&gt;optimize resources&lt;/strong&gt; and &lt;strong&gt;accelerate the time to market&lt;/strong&gt; with the help of a fully managed, end-to-end Azure serverless solution.&lt;/p&gt;

&lt;h2 id=&quot;what-is-blazor&quot;&gt;What is Blazor?&lt;/h2&gt;

&lt;p&gt;Blazor is a .NET web framework for creating &lt;strong&gt;client-side applications&lt;/strong&gt; using C#/Razor and HTML. Blazor runs in the browser with the help of WebAssembly. It can simplify the process of creating a single page application (SPA). It also provides a full-stack web development experience using .NET.&lt;/p&gt;

&lt;p&gt;Using .NET for developing Client-side application has multiple advantages as mentioned below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.NET offers a range of API and tools across all platforms that are stable and easy to use.&lt;/li&gt;
  &lt;li&gt;The modern languages such as C# and F# offer a lot of features that make programming easier and interesting for developers.&lt;/li&gt;
  &lt;li&gt;The availability of one of the best IDE in the form of Visual Studio provides a great .NET development experience across multiple platforms such as Windows, Linux, and macOS.&lt;/li&gt;
  &lt;li&gt;.NET provides features such as speed, performance, security, scalability, and reliability in web development that makes full-stack development easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-should-you-use-blazor&quot;&gt;Why should you use Blazor?&lt;/h2&gt;
&lt;p&gt;Blazor supports a wide array of features to make web development easier for us. Some of the prominent features of Blazor are mentioned below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Component-based architecture: Blazor provides us with a component-based architecture to create rich and composable UI.&lt;/li&gt;
  &lt;li&gt;Dependency injection: This allows us to use services by injecting them into components.&lt;/li&gt;
  &lt;li&gt;Layouts: We can share common UI elements (for example, menus) across pages using the layouts feature.&lt;/li&gt;
  &lt;li&gt;Routing: We can redirect the client request from one component to another with the help of routing.&lt;/li&gt;
  &lt;li&gt;JavaScript interop: This allows us to invoke a C# method from JavaScript, and we can call a JavaScript function or API from C# code.&lt;/li&gt;
  &lt;li&gt;Globalization and localization: The application can be made accessible to users in multiple cultures and languages&lt;/li&gt;
  &lt;li&gt;Live reloading: Live reloading of the app in the browser during development.&lt;/li&gt;
  &lt;li&gt;Deployment: We can deploy the Blazor application on IIS and Azure Cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more about Blazor, please refer to the &lt;a href=&quot;http://blazor.net/&quot;&gt;official Blazor docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;To get started with the application, we need to fulfill the prerequisites as mentioned below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;An Azure subscription account. You can create a free Azure account at https://azure.microsoft.com/en-in/free/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install the latest version of Visual Studio 2019 from https://visualstudio.microsoft.com/downloads/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While installing the VS 2019, please make sure you select the Azure development and ASP.NET and web development workload.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/VSInstall.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-azure-cosmos-db-account&quot;&gt;Create Azure Cosmos DB account&lt;/h2&gt;

&lt;p&gt;Log in to the Azure portal and search for the &lt;strong&gt;“Azure Cosmos DB”&lt;/strong&gt; in the search bar and click on the result. On the next screen, click on the Add button. It will open a “Create Azure Cosmos DB Account” page. You need to fill in the required information to create your database. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CreateCosmosDBAccount.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can fill in the details as indicated below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Subscription&lt;/strong&gt;: Select your Azure subscription name from the drop-down.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resource Group&lt;/strong&gt;: Select an existing Resource Group or create a new one.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Account Name&lt;/strong&gt;: Enter a unique name for your Azure Cosmos DB account. The name can contain only lowercase letters, numbers, and the ‘-‘ character, and must be between 3 and 44 characters.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;API&lt;/strong&gt;: Select Core (SQL)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt;: Select a location to host your Azure Cosmos DB account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep the other fields to its default value and click on the “Review+ Create” button. In the next screen, review all your configurations and click on the “Create” button. After a few minutes, the Azure Cosmos DB account will be created. Click on “Go to resource” to navigate to the Azure Cosmos DB account page.&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-database&quot;&gt;Set up the Database&lt;/h2&gt;

&lt;p&gt;On the Azure Cosmos DB account page, click on “Data Explorer” on the left navigation, and then select “New Container”. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CreateContainer.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An “Add Container” pane will open. You need to fill in the details to create a new container for your Azure Cosmos DB. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/ConfigureContainer.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can fill in the details as indicated below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Database ID&lt;/strong&gt;: You can give any name to your database. Here I am using FAQDB.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Throughput&lt;/strong&gt;: Keep it at the default value of 400&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Container ID&lt;/strong&gt;: Enter the name for your container. Here I am using  FAQContainer.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Partition key&lt;/strong&gt;: The Partition key is used to automatically partition data among multiple servers for scalability. Put the value as “/id”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click on the “OK” button to create the database.&lt;/p&gt;

&lt;h2 id=&quot;add-sample-data-to-the-cosmos-db&quot;&gt;Add Sample data to the Cosmos DB&lt;/h2&gt;

&lt;p&gt;In the Data Explorer, expand the FAQDB database then expand the FAQContainer. Select Items, and then click on New Item on the top. An editor will open on the right side of the page. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/AddItem.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Put the following JSON data in the editor and click on the Save button at the top.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;
    {
    &quot;id&quot;: &quot;1&quot;,
    &quot;question&quot;: &quot;What is corona virus?&quot;,
    &quot;answer&quot;: &quot;Corona viruses are a large family of viruses which may cause illness in animals or humans. The most recently discovered coronavirus causes coronavirus disease COVID-19.&quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have added a set of questions and answer along with a unique id.&lt;/p&gt;

&lt;p&gt;Follow the process described above to insert five more sets of data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;
    {
    &quot;id&quot;: &quot;2&quot;,
    &quot;question&quot;: &quot;What is COVID-19?&quot;,
    &quot;answer&quot;: &quot;COVID-19 is the infectious disease caused by the most recently discovered corona virus. This new virus and disease were unknown before the outbreak began in Wuhan, China, in December 2019.&quot;
    }
    {
        &quot;id&quot;: &quot;3&quot;,
        &quot;question&quot;: &quot;What are the symptoms of COVID-19?&quot;,
        &quot;answer&quot;: &quot;The most common symptoms of COVID-19 are fever, tiredness, and dry cough. Some patients may have aches and pains, nasal congestion, runny nose, sore throat or diarrhea. These symptoms are usually mild and begin gradually. Some people become infected but don’t develop any symptoms and don't feel unwell.&quot;
    }
    {
        &quot;id&quot;: &quot;4&quot;,
        &quot;question&quot;: &quot;How does COVID-19 spread?&quot;,
        &quot;answer&quot;: &quot;People can catch COVID-19 from others who have the virus. The disease can spread from person to person through small droplets from the nose or mouth which are spread when a person with COVID-19 coughs or exhales. These droplets land on objects and surfaces around the person. Other people then catch COVID-19 by touching these objects or surfaces, then touching their eyes, nose or mouth.&quot;
    }
    {
        &quot;id&quot;: &quot;5&quot;,
        &quot;question&quot;: &quot;What can I do to protect myself and prevent the spread of disease?&quot;,
        &quot;answer&quot;: &quot;You can reduce your chances of being infected or spreading COVID-19 by taking some simple precaution. Regularly and thoroughly clean your hands with an alcoholbased hand rub or wash them with soap and water. Maintain at least 1 metre (3 feet) distance between yourself and anyone who is coughing or sneezing. Make sure you, and the people around you, follow good respiratory hygiene. This means covering your mouth and nose with your bent elbow or tissue when you cough or sneeze. Stay home if you feel unwell. If you have a fever, cough and difficulty breathing, seek medical attention and call in advance.&quot;
    }
    {
        &quot;id&quot;: &quot;6&quot;,
        &quot;question&quot;: &quot;Are antibiotics effective in preventing or treating the COVID-19?&quot;,
        &quot;answer&quot;: &quot;No. Antibiotics do not work against viruses, they only work on bacterial infections. COVID-19 is caused by a virus, so antibiotics do not work.&quot;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;get-the-connection-string&quot;&gt;Get the connection string&lt;/h2&gt;

&lt;p&gt;Click on “keys” on the left navigation, navigate to the “Read-write Keys” tab. The value under PRIMARY CONNECTION STRING is our required connection string. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CosmosDBContString.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make a note of the  &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; PRIMARY CONNECTION STRING &lt;/span&gt;  value. We will use it in the latter part of this article, when we will access the Azure Cosmos DB from an Azure function.&lt;/p&gt;

&lt;h2 id=&quot;create-an-azure-function-app&quot;&gt;Create an Azure function app&lt;/h2&gt;

&lt;p&gt;Open Visual Studio 2019, click on “Create a new project”. Search “Functions” in the search box. Select the Azure Functions template and click on Next. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CreateAzFunction.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In “Configure your new project” window, enter a Project name as FAQFunctionApp. Click on the Create button. Refer to the image below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CreateAzFunction_1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new “Create a new Azure Function Application settings” window will open. Select “Azure Functions v3 (.NET Core)” from the dropdown at the top. Select the function template as “HTTP trigger”. Set the authorization level to “Anonymous” from the drop-down on the right. Click on the Create button to create the function project and HTTP trigger function. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CreateAzFunction_2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-package-for-azure-cosmos-db&quot;&gt;Install package for Azure Cosmos DB&lt;/h2&gt;

&lt;p&gt;To enable the Azure function App to bind to the Azure Cosmos DB, we need to install the &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; Microsoft.Azure.WebJobs.Extensions.CosmosDB package &lt;/span&gt;. Navigate to Tools » NuGet Package Manager » Package Manager Console and run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;
    Install-Package Microsoft.Azure.WebJobs.Extensions.CosmosDB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer to the image shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/InstallNuget.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can learn more about this package at the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.CosmosDB&quot;&gt;NuGet gallery&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configure-the-azure-function-app&quot;&gt;Configure the Azure Function App&lt;/h2&gt;

&lt;p&gt;The Azure function project contains a default file called &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; Function1.cs &lt;/span&gt;. You can safely delete this file as we won’t be using this for our project.&lt;/p&gt;

&lt;p&gt;Right-click on the &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; FAQFunctionApp &lt;/span&gt; project and select Add » New Folder. Name the folder as Models. Again, right-click on the Models folder and select Add » Class to add a new class file. Put the name of your class as &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; FAQ.cs &lt;/span&gt; and click Add.&lt;/p&gt;

&lt;p&gt;Open &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; FAQ.cs &lt;/span&gt; and put the following code inside it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;
    namespace FAQFunctionApp.Models
    {
        class FAQ
        {
            public string Id { get; set; }
            public string Question { get; set; }
            public string Answer { get; set; }
        }
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The class has the same structure as the JSON data we have inserted in the cosmos DB.&lt;/p&gt;

&lt;p&gt;Right-click on the &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; FAQFunctionApp project &lt;/span&gt; and select Add » Class. Name your class as &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; CovidFAQ.cs &lt;/span&gt;. Put the following code inside it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;    using Microsoft.AspNetCore.Mvc;
    using System.Collections.Generic;
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.Logging;
    using Microsoft.Azure.WebJobs;
    using FAQFunctionApp.Models;
    using Microsoft.Azure.WebJobs.Extensions.Http;
    using System.Threading.Tasks;
    namespace FAQFunctionApp
    {
        class CovidFAQ
        {
            [FunctionName(&quot;covidFAQ&quot;)]
            public static async Task&amp;lt;IActionResult&amp;gt; Run(
            [HttpTrigger(AuthorizationLevel.Anonymous, &quot;get&quot;, Route = null)] HttpRequest req,
            [CosmosDB(
                databaseName:&quot;FAQDB&quot;,
                collectionName:&quot;FAQContainer&quot;,
                ConnectionStringSetting = &quot;DBConnectionString&quot;
                )] IEnumerable&amp;lt;FAQ&amp;gt; questionSet, 
            ILogger log)
            {
                log.LogInformation(&quot;Data fetched from FAQContainer&quot;);
                return new OkObjectResult(questionSet);
            }
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have created a class &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt;CovidFAQ &lt;/span&gt; and added an Azure function to it. The attribute &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; FunctionName &lt;/span&gt; is used to specify the name of the function. We have used the &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; HttpTrigger &lt;/span&gt; attribute which allows the function to be triggered via an HTTP call. The attribute &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; CosmosDB &lt;/span&gt; is used to connect to the Azure Cosmos DB. We have defined three parameters for this attribute as described below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;databaseName&lt;/strong&gt;: the name for the cosmos DB&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;collectionName&lt;/strong&gt;: the collecting inside the cosmos DB we want to access&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ConnectionStringSetting&lt;/strong&gt;: the connection string to connect to Cosmos DB. We will configure it in the next section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have decorated the parameter &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt;questionSet&lt;/span&gt;, which is of type &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt;IEnumerable FAQ &lt;/span&gt; with the &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt;CosmosDB&lt;/span&gt; attribute. When the app is executed, the parameter &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt;questionSet &lt;/span&gt; will be populated with the data from Cosmos DB. The function will return the data using a new instance of &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt;OkObjectResult&lt;/span&gt;.&lt;/p&gt;

&lt;h2 id=&quot;add-the-connection-string-to-the-azure-function&quot;&gt;Add the connection string to the Azure Function&lt;/h2&gt;

&lt;p&gt;Remember the Azure cosmos DB connection string you noted earlier? Now we will configure it for our app. Open the local.settings.json file and add your connection string as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;
    {
        &quot;IsEncrypted&quot;: false,
        &quot;Values&quot;: {
            &quot;AzureWebJobsStorage&quot;: &quot;UseDevelopmentStorage=true&quot;,
            &quot;FUNCTIONS_WORKER_RUNTIME&quot;: &quot;dotnet&quot;,
            &quot;DBConnectionString&quot;: &quot;your connectionn string&quot;
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The local.settings.json will not be published to Azure when we publish the Azure Function app. Therefore, we need to configure the connections string separately while publishing the app to Azure. We will see this in action in the latter part of this article.&lt;/p&gt;

&lt;h2 id=&quot;test-the-azure-function-locally&quot;&gt;Test the Azure Function locally&lt;/h2&gt;

&lt;p&gt;Press F5 to execute the function. Copy the URL of your function from the Azure Functions runtime output.Open the browser and paste the URL in the browser’s address bar. You can see the output as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/ExecuteLocal-2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you can see the data we have inserted into our Azure Cosmos DB.&lt;/p&gt;

&lt;h2 id=&quot;publish-the-function-app-to-azure&quot;&gt;Publish the Function app to Azure&lt;/h2&gt;

&lt;p&gt;We have successfully created the Function app, but it is still running in the localhost. Let’s publish the app to make it available globally.&lt;/p&gt;

&lt;p&gt;Right-click on the &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt; FAQFunctionApp &lt;/span&gt; project and select Publish. Select the Publish target as Azure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/DeploytoAZ_1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the specific target as “Azure Function App (windows)”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/DeploytoAZ_2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next window, click on the “Create a new Azure Function…” button. A new Function App window will open. Refer to the image as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/DeploytoAZ_3.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can fill in the details as indicated below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: A globally unique name for your function app.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subscription&lt;/strong&gt;: Select your Azure subscription name from the drop-down.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resource Group&lt;/strong&gt;: Select an existing Resource Group or create a new one.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Plan Type&lt;/strong&gt;: Select Consumption. It will make sure that you pay only for  executions of your functions app.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt;: Select a location for your function.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Azure Storage&lt;/strong&gt;: Keep the default value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click on the “Create” button to create the Function App and return to the previous window. Make sure the option “Run from package file” is checked. Click on the Finish button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/DeploytoAZ_4.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are at the Publish page. Click on the “Manage Azure App Service Settings” button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/ManageAZappSetting.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will see a “Application Settings” window as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/SetConnString.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, we will configure the Remote value for the “DBConnectionString” key. This value is used when the app is deployed on Azure. Since the key for Local and Remote environment is the same in our case, click on the “Insert value from Local” button to copy the value from the Local field to the Remote field. Click on the OK button.&lt;/p&gt;

&lt;p&gt;You are navigated back to the Publish page. We are done with all the configurations. Click on the Publish button to publish your Azure function app. After the app is published, get the site URL value, append &lt;span style=&quot;color: yellow;background-color: black;&quot;&gt;/api/covidFAQ &lt;/span&gt; to it and open it in the browser. You can see the output as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/ExecuteGlobally.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the same dataset that we got while running the app locally. This proves that our serverless Azure function is deployed and able to access the Azure Cosmos DB successfully.&lt;/p&gt;

&lt;h2 id=&quot;enable-cors-for-the-azure-app-service&quot;&gt;Enable CORS for the Azure app service&lt;/h2&gt;

&lt;p&gt;We will use the Function app in a Blazor UI project. To allow the Blazor app to access the Azure Function, we need to enable CORS for the Azure app service.&lt;/p&gt;

&lt;p&gt;Open the Azure portal. Navigate to “All resources”. Here, you can see the App service which we have created while Publishing the app the in previous section. Click on the resource to navigate to the resource page. Click on CORS on the left navigation. A CORS details pane will open.&lt;/p&gt;

&lt;p&gt;Now we have two options here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter the specific origin URL to allow them to make cross-origin calls.
Remove all origin URL from the list, and use “*” wildcard to allow all the URL to make cross-origin calls.
    &lt;ul&gt;
      &lt;li&gt;We will use the second option for our app. Remove all the previously listed  URL and enter a single entry as “*” wildcard. Click on the Save button at the top. Refer to the image shown below:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/AZFuncCors.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-the-blazor-web-assembly-project&quot;&gt;Create the Blazor Web assembly project&lt;/h2&gt;

&lt;p&gt;Open Visual Studio 2019, click on “Create a new project”. Select “Blazor App” and click on the “Next” button. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CreateBlazorProj_1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the “Configure your new project” window, put the project name as FAQUIApp and click on the “Create” button as shown in the image below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CreateBlazorProj_2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the “Create a new Blazor app” window, select the “Blazor WebAssmebly App” template. Click on the Create button to create the project. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CreateBlazorProj_3.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To create a new razor component, right-click on the Pages folder, select Add »Razor Component. An “Add New Item” dialog box will open, put the name of your component as CovidFAQ.razor and click on the Add button. Refer to the image shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/CreateRazorComp.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open CovidFAQ.razor and put the following code into it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;    @page &quot;/covidfaq&quot;
    @inject HttpClient Http
    &amp;lt;div class=&quot;d-flex justify-content-center&quot;&amp;gt;
        &amp;lt;img src=&quot;../Images/COVID_banner.jpg&quot; alt=&quot;Image&quot; style=&quot;width:80%; height:300px&quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div class=&quot;d-flex justify-content-center&quot;&amp;gt;
        &amp;lt;h1&amp;gt;Frequently asked Questions on Covid-19&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;hr /&amp;gt;
    @if (questionList == null)
    {
        &amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Loading...&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
    }
    else
    {
        @foreach (var question in questionList)
        {
            &amp;lt;div class=&quot;card&quot;&amp;gt;
                &amp;lt;h3 class=&quot;card-header&quot;&amp;gt;
                    @question.Question
                &amp;lt;/h3&amp;gt;
                &amp;lt;div class=&quot;card-body&quot;&amp;gt;
                    &amp;lt;p class=&quot;card-text&quot;&amp;gt;@question.Answer&amp;lt;/p&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;br /&amp;gt;
        }
    }
    @code {
        private FAQ[] questionList;
        protected override async Task OnInitializedAsync()
        {
            questionList = await Http.GetFromJsonAsync&amp;lt;FAQ[]&amp;gt;(&quot;https://faqfunctionapp20200611160123.azurewebsites.net/api/covidFAQ&quot;);
        }
        public class FAQ
        {
            public string Id { get; set; }
            public string Question { get; set; }
            public string Answer { get; set; }
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the @code section, we have created a class called FAQ. The structure of this class is the same as that of the FAQ class we created earlier in the Azure function app. Inside the OnInitializedAsync method, we are hitting the API endpoint of our function app. The data returned from the API will be stored in a variable called questionList which is an array of type FAQ.&lt;/p&gt;

&lt;p&gt;In the HTML section of the page, we have set a banner image at the top of the page. The image is available in the /wwwroot/Images folder. We will use a foreach loop to iterate over the questionList array and create a bootstrap card to display the question and answer.&lt;/p&gt;

&lt;h2 id=&quot;adding-link-to-navigation-menu&quot;&gt;Adding Link to Navigation menu&lt;/h2&gt;

&lt;p&gt;The last step is to add the link of our CovidFAQ component in the navigation menu. Open /Shared/NavMenu.razor file and add the following code into it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-code&quot;&gt;
    &amp;lt;li class=&quot;nav-item px-3&quot;&amp;gt;
        &amp;lt;NavLink class=&quot;nav-link&quot; href=&quot;covidfaq&quot;&amp;gt;
            &amp;lt;span class=&quot;oi oi-plus&quot; aria-hidden=&quot;true&quot;&amp;gt;&amp;lt;/span&amp;gt; Covid FAQ
        &amp;lt;/NavLink&amp;gt;
    &amp;lt;/li&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove the navigation links for Counter and Fetch-data components as they are not required for this application.&lt;/p&gt;

&lt;h2 id=&quot;execution-demo&quot;&gt;Execution Demo&lt;/h2&gt;

&lt;p&gt;Press F5 to launch the app. Click on the Covid FAQ button on the nav menu on the left. You can see all the questions and answers in a beautiful card layout as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/4/BlazorExecution.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;You can get the &lt;a href=&quot;https://github.com/girishgodage/azure-serverless-with-blazor&quot;&gt;source code from GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;We learned about the serverless and its advantage over the traditional 3-tier web architecture. We also learned how the Azure function fits in serverless web architecture. To demonstrate the practical implementation of these concepts, we have created a Covid-19 FAQ app using the Blazor web assembly and Azure serverless. The questions and answers are displayed in the card layout using Bootstrap. We have used the Azure cosmos DB as the primary database to store the questions and answers for our FAQ app. An Azure function is used to fetch data from the cosmos DB. We deployed the function app on Azure to make it available globally via an API endpoint.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/blazor.png" /></entry><entry><title type="html">Create user flows in Azure Active Directory B2C</title><link href="http://localhost:4000/blog/azure-acticedirectoryB2C_CreateUserFlow" rel="alternate" type="text/html" title="Create user flows in Azure Active Directory B2C" /><published>2020-03-12T12:41:00+00:00</published><updated>2020-03-12T12:41:00+00:00</updated><id>http://localhost:4000/blog/azure-activedirectoryB2C_CreateUserFlow</id><content type="html" xml:base="http://localhost:4000/blog/azure-acticedirectoryB2C_CreateUserFlow">&lt;blockquote&gt;
  &lt;h2 id=&quot;create-user-flows-in-azure-active-directory-b2c&quot;&gt;Create user flows in Azure Active Directory B2C&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;In your applications you may have user flows that enable users to sign up, sign in, or manage their profile. You can create multiple user flows of different types in your Azure Active Directory B2C (Azure AD B2C) tenant and use them in your applications as needed. User flows can be reused across applications.&lt;/p&gt;

&lt;p&gt;In this article, you learn how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a sign-up and sign-in user flow&lt;/li&gt;
  &lt;li&gt;Create a profile editing user flow&lt;/li&gt;
  &lt;li&gt;Create a password reset user flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial shows you how to create some recommended user flows by using the Azure portal.&lt;/p&gt;

&lt;p&gt;If you don’t have an Azure subscription, create a &lt;a href=&quot;https://azure.microsoft.com/free/?WT.mc_id=A261C142F&quot;&gt;free account&lt;/a&gt; before you begin.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;If you haven’t already created your own &lt;a href=&quot;azure-activedirectoryB2C_CreateTenant&quot;&gt;Azure AD B2C Tenant&lt;/a&gt;, create one now. You can use an existing Azure AD B2C tenant.&lt;/p&gt;

&lt;h2 id=&quot;create-a-sign-up-and-sign-in-user-flow&quot;&gt;Create a sign-up and sign-in user flow&lt;/h2&gt;

&lt;p&gt;The sign-up and sign-in user flow handles both sign-up and sign-in experiences with a single configuration. Users of your application are led down the right path depending on the context.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign in to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the &lt;strong&gt;Directory + Subscription&lt;/strong&gt; icon in the portal toolbar, and then select the directory that contains your Azure AD B2C tenant.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/directory-subscription-pane.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the Azure portal, search for and select &lt;strong&gt;Azure AD B2C&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Policies&lt;/strong&gt;, select &lt;strong&gt;User flows&lt;/strong&gt;, and then select &lt;strong&gt;New user flow&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/signup-signin-user-flow.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the Create a user flow page, select the Sign up and sign in user flow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/select-user-flow-type.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.Under Select a version, select Recommended, and then select Create.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/select-version.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for the user flow. For example, signupsignin1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For &lt;strong&gt;Identity providers&lt;/strong&gt;, select &lt;strong&gt;Email signup&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For User &lt;strong&gt;attributes and claims&lt;/strong&gt;, choose the claims and attributes that you want to collect and send from the user during sign-up. For example, select &lt;strong&gt;Show more&lt;/strong&gt;, and then choose attributes and claims for &lt;strong&gt;Country/Region, Display Name, and Postal Code&lt;/strong&gt;. Click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/signup-signin-attributes.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click &lt;strong&gt;Create&lt;/strong&gt; to add the user flow. A prefix of B2C_1 is automatically prepended to the name.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;test-the-user-flow&quot;&gt;Test the user flow&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Select the user flow you created to open its overview page, then select &lt;strong&gt;Run user flow&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For &lt;strong&gt;Application&lt;/strong&gt;, select the web application named webapp1 that you previously registered. The &lt;strong&gt;Reply URL&lt;/strong&gt; should show https://jwt.ms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Run user flow&lt;/strong&gt;, and then &lt;strong&gt;select Sign up now&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/signup-signin-run-now.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enter a valid email address, click Send &lt;strong&gt;verification code&lt;/strong&gt;, enter the verification code that you receive, then select &lt;strong&gt;Verify code&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter a new password and confirm the password.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select your country and region, enter the name that you want displayed, enter a postal code, and then click &lt;strong&gt;Create&lt;/strong&gt;. The token is returned to https://jwt.ms and should be displayed to you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can now run the user flow again and you should be able to sign in with the account that you created. The returned token includes the claims that you selected of country/region, name, and postal code&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-profile-editing-user-flow&quot;&gt;Create a profile editing user flow&lt;/h2&gt;

&lt;p&gt;If you want to enable users to edit their profile in your application, you use a profile editing user flow.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the menu of the Azure AD B2C tenant overview page, select &lt;strong&gt;User flows&lt;/strong&gt;, and then select &lt;strong&gt;New user flow&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;On the &lt;strong&gt;Create a user flow&lt;/strong&gt; page, select the &lt;strong&gt;Profile editing&lt;/strong&gt; user flow.&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Select a version&lt;/strong&gt;, select &lt;strong&gt;Recommended&lt;/strong&gt;, and then select &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for the user flow. For example, profileediting1.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Identity providers&lt;/strong&gt;, select &lt;strong&gt;Local Account SignIn&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;User attributes&lt;/strong&gt;, choose the attributes that you want the customer to be able to edit in their profile. For example, select &lt;strong&gt;Show more&lt;/strong&gt;, and then choose both &lt;strong&gt;attributes and claims for Display name and Job title&lt;/strong&gt;. Click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Create&lt;/strong&gt; to add the user flow. A prefix of B2C_1 is automatically appended to the name.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;test-the-user-flow-1&quot;&gt;Test the user flow&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Select the user flow you created to open its overview page, then select &lt;strong&gt;Run user flow&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Application&lt;/strong&gt;, select the web application named webapp1 that you previously registered. The &lt;strong&gt;Reply URL&lt;/strong&gt; should show https://jwt.ms.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Run user flow&lt;/strong&gt;, and then sign in with the account that you previously created.&lt;/li&gt;
  &lt;li&gt;You now have the opportunity to change the display name and job title for the user. Click &lt;strong&gt;Continue&lt;/strong&gt;. The token is returned to https://jwt.ms and should be displayed to you.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-password-reset-user-flow&quot;&gt;Create a password reset user flow&lt;/h2&gt;

&lt;p&gt;To enable users of your application to reset their password, you use a password reset user flow.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the Azure AD B2C tenant overview menu, select &lt;strong&gt;User flows&lt;/strong&gt;, and then select &lt;strong&gt;New user flow&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;On the &lt;strong&gt;Create a user flow&lt;/strong&gt; page, select the &lt;strong&gt;Password reset&lt;/strong&gt; user flow.&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Select&lt;/strong&gt; a version, select &lt;strong&gt;Recommended&lt;/strong&gt;, and then select &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for the user flow. For example, passwordreset1.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Identity providers&lt;/strong&gt;, enable &lt;strong&gt;Reset password using email address&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Application claims&lt;/strong&gt;, click &lt;strong&gt;Show more&lt;/strong&gt; and choose the claims that you want returned in the authorization tokens sent back to your application. For example, select User’s Object ID.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Create&lt;/strong&gt; to add the user flow. A prefix of B2C_1 is automatically appended to the name.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;test-the-user-flow-2&quot;&gt;Test the user flow&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Select the user flow you created to open its overview page, then select &lt;strong&gt;Run user flow&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Application&lt;/strong&gt;, select the web application named webapp1 that you previously registered. The &lt;strong&gt;Reply URL&lt;/strong&gt; should show https://jwt.ms.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Run user flow&lt;/strong&gt;, verify the email address of the account that you previously created, and select &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;You now have the opportunity to change the password for the user. Change the password and select &lt;strong&gt;Continue&lt;/strong&gt;. The token is returned to https://jwt.ms and should be displayed to you.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;In this article, you learned how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a sign-up and sign-in user flow&lt;/li&gt;
  &lt;li&gt;Create a profile editing user flow&lt;/li&gt;
  &lt;li&gt;Create a password reset user flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, learn about adding identity providers to your applications to enable user sign-in with providers like Azure AD, Amazon, Facebook, GitHub, LinkedIn, Microsoft, or Twitter.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Create user flows in Azure Active Directory B2C</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/azureAD.png" /></entry><entry><title type="html">Register a web application in Azure Active Directory B2C</title><link href="http://localhost:4000/blog/azure-acticedirectoryB2C_RegisterApp" rel="alternate" type="text/html" title="Register a web application in Azure Active Directory B2C" /><published>2020-03-12T12:41:00+00:00</published><updated>2020-03-12T12:41:00+00:00</updated><id>http://localhost:4000/blog/azure-activedirectoryB2C_RegisterApp</id><content type="html" xml:base="http://localhost:4000/blog/azure-acticedirectoryB2C_RegisterApp">&lt;blockquote&gt;
  &lt;h2 id=&quot;register-a-web-application-in-azure-active-directory-b2c&quot;&gt;Register a web application in Azure Active Directory B2C&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before your applications can interact with Azure Active Directory B2C (Azure AD B2C), they must be registered in a tenant that you manage. This tutorial shows you how to register a web application using the Azure portal.&lt;/p&gt;

&lt;p&gt;In this article, you learn how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Register a web application&lt;/li&gt;
  &lt;li&gt;Create a client secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re using a native app instead (e.g. iOS, Android, mobile &amp;amp; desktop), learn how to register a native client application.&lt;/p&gt;

&lt;p&gt;If you don’t have an Azure subscription, create a &lt;a href=&quot;https://azure.microsoft.com/free/?WT.mc_id=A261C142F&quot;&gt;free account&lt;/a&gt; before you begin.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;If you haven’t already created your own &lt;a href=&quot;azure-activedirectoryB2C_CreateTenant&quot;&gt;Azure AD B2C Tenant&lt;/a&gt;, create one now. You can use an existing Azure AD B2C tenant.&lt;/p&gt;

&lt;h2 id=&quot;register-a-web-application&quot;&gt;Register a web application&lt;/h2&gt;

&lt;p&gt;To register an application in your Azure AD B2C tenant, you can use new unified App registrations experience&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign in to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the &lt;strong&gt;Directory + Subscription&lt;/strong&gt; icon in the portal toolbar, and then select the directory that contains your Azure AD B2C tenant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Azure portal, search for and select &lt;strong&gt;Azure AD B2C&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;App registrations&lt;/strong&gt;, and then select &lt;strong&gt;New registration&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for the application. For example, webapp1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Supported account types&lt;/strong&gt;, select &lt;strong&gt;Accounts in any organizational directory or any identity provider. For authenticating users with Azure AD B2C.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Redirect URI&lt;/strong&gt;, select &lt;strong&gt;Web&lt;/strong&gt;, and then enter https://jwt.ms in the URL text box.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The redirect URI is the endpoint to which the user is sent by the authorization server (Azure AD B2C, in this case) after completing its interaction with the user, and to which an access token or authorization code is sent upon successful authorization. In a production application, it’s typically a publicly accessible endpoint where your app is running, like https://contoso.com/auth-response. For testing purposes like this tutorial, you can set it to https://jwt.ms, a Microsoft-owned web application that displays the decoded contents of a token (the contents of the token never leave your browser). During app development, &lt;strong&gt;you might add the endpoint where your application listens locally, like https://localhost:5000&lt;/strong&gt;. You can add and modify redirect URIs in your registered applications at any time.&lt;/p&gt;

&lt;p&gt;The following restrictions apply to redirect URIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The reply URL must begin with the scheme https.&lt;/li&gt;
  &lt;li&gt;The reply URL is case-sensitive. Its case must match the case of the URL path of your running application. For example, if your application includes as part of its path …/abc/response-oidc, do not specify …/ABC/response-oidc in the reply URL. Because the web browser treats paths as case-sensitive, cookies associated with …/abc/response-oidc may be excluded if redirected to the case-mismatched …/ABC/response-oidc URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Under Permissions, select the Grant admin consent to openid and offline_access permissions check box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select Register.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the application registration is complete, enable the implicit grant flow:&lt;/p&gt;

&lt;h2 id=&quot;create-a-client-secret&quot;&gt;Create a client secret&lt;/h2&gt;

&lt;p&gt;If your application exchanges an authorization code for an access token, you need to create an application secret.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the &lt;strong&gt;Azure AD B2C - App registrations&lt;/strong&gt; page, select the application you created, for example webapp1.&lt;/li&gt;
  &lt;li&gt;In the left menu, under &lt;strong&gt;Manage&lt;/strong&gt;, select &lt;strong&gt;Certificates &amp;amp; secrets&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;New client secret&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Enter a description for the client secret in the &lt;strong&gt;Description&lt;/strong&gt; box. For example, clientsecret1.&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Expires&lt;/strong&gt;, select a duration for which the secret is valid, and then select &lt;strong&gt;Add&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Record the secret’s &lt;strong&gt;Value&lt;/strong&gt;. You use this value as the application secret in your application’s code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;In this article, you learned how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Register a web application&lt;/li&gt;
  &lt;li&gt;Create a client secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, learn how to &lt;a href=&quot;azure-acticedirectoryB2C_CreateUserFlow&quot;&gt;create user flows&lt;/a&gt; to enable your users to sign up, sign in, and manage their profiles.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Register a web application in Azure Active Directory B2C</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/azureAD.png" /></entry><entry><title type="html">Create an Azure AD B2C tenant</title><link href="http://localhost:4000/blog/azure-acticedirectoryB2C_CreateTenant" rel="alternate" type="text/html" title="Create an Azure AD B2C tenant" /><published>2020-03-12T10:41:00+00:00</published><updated>2020-03-12T10:41:00+00:00</updated><id>http://localhost:4000/blog/azure-activedirectoryB2C_CreateTenant</id><content type="html" xml:base="http://localhost:4000/blog/azure-acticedirectoryB2C_CreateTenant">&lt;blockquote&gt;
  &lt;h2 id=&quot;create-an-azure-ad-b2c-tenant&quot;&gt;Create an Azure AD B2C tenant&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before your applications can interact with Azure Active Directory B2C (Azure AD B2C), &lt;strong&gt;they must be registered in a tenant that you manage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this article, you learn how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create an Azure AD B2C tenant&lt;/li&gt;
  &lt;li&gt;Link your tenant to your subscription&lt;/li&gt;
  &lt;li&gt;Switch to the directory containing your Azure AD B2C tenant&lt;/li&gt;
  &lt;li&gt;Add the Azure AD B2C resource as a Favorite in the Azure portal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;If you don’t have an Azure subscription, create a &lt;a href=&quot;https://azure.microsoft.com/free/?WT.mc_id=A261C142F&quot;&gt;free account&lt;/a&gt; before you begin.&lt;/p&gt;

&lt;h2 id=&quot;create-an-azure-ad-b2c-tenant-1&quot;&gt;Create an Azure AD B2C tenant&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign in to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;. Sign in with an Azure account that’s been assigned at least the &lt;a href=&quot;https://docs.microsoft.com/en-in/azure/role-based-access-control/built-in-roles&quot;&gt;Contributor&lt;/a&gt; role within the subscription or a resource group within the subscription.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the directory that contains your subscription.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the Azure portal toolbar, select the Directory + Subscription icon, and then select the directory that contains your subscription. This directory is different from the one that will contain your Azure AD B2C tenant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/portal-01-pick-directory.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;On the Azure portal menu or from the &lt;strong&gt;Home&lt;/strong&gt; page, select &lt;strong&gt;Create a resource&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search for &lt;strong&gt;Azure Active Directory B2C&lt;/strong&gt;, and then select &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Create a new Azure AD B2C Tenant&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/portal-02-create-tenant.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the &lt;strong&gt;Create a directory&lt;/strong&gt; page, enter the following:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Organization name&lt;/strong&gt; - Enter a name for your Azure AD B2C tenant.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Initial domain name&lt;/strong&gt; - Enter a domain name for your Azure AD B2C tenant.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Country or region&lt;/strong&gt; - Select your country or region from the list. This selection can’t be changed later.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subscription&lt;/strong&gt; - Select your subscription from the list.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Resource group&lt;/strong&gt; - Select a resource group that will contain the tenant. Or select &lt;strong&gt;Create new&lt;/strong&gt;, enter a &lt;strong&gt;Name&lt;/strong&gt; for the resource group, select the &lt;strong&gt;Resource group location&lt;/strong&gt;, and then select &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/review-and-create-tenant.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Review + create&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Review your directory settings. Then select &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can link multiple Azure AD B2C tenants to a single Azure subscription for billing purposes. To link a tenant, you must be an admin in the Azure AD B2C tenant and be assigned at least a Contributor role within the Azure subscription.&lt;/p&gt;

&lt;h2 id=&quot;select-your-b2c-tenant-directory&quot;&gt;Select your B2C tenant directory&lt;/h2&gt;

&lt;p&gt;To start using your new Azure AD B2C tenant, you need to switch to the directory that contains the tenant.&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;Directory + subscription&lt;/strong&gt; filter in the top menu of the Azure portal, then select the directory that contains your Azure AD B2C tenant.&lt;/p&gt;

&lt;p&gt;If at first you don’t see your new Azure B2C tenant in the list, refresh your browser window, then select the &lt;strong&gt;Directory + subscription&lt;/strong&gt; filter again in the top menu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/portal-07-select-tenant-directory.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-azure-ad-b2c-as-a-favorite-optional&quot;&gt;Add Azure AD B2C as a favorite (optional)&lt;/h2&gt;

&lt;p&gt;This optional step makes it easier to select your Azure AD B2C tenant in the following and all subsequent tutorials.&lt;/p&gt;

&lt;p&gt;Instead of searching for Azure AD B2C in &lt;strong&gt;All services&lt;/strong&gt; every time you want to work with your tenant, you can instead favorite the resource. Then, you can select it from the portal menu’s &lt;strong&gt;Favorites&lt;/strong&gt; section to quickly browse to your Azure AD B2C tenant.&lt;/p&gt;

&lt;p&gt;You only need to perform this operation once. Before performing these steps, make sure you’ve switched to the directory containing your Azure AD B2C tenant as described in the previous section, &lt;a href=&quot;azure-acticedirectoryB2C_CreateTenant#select-your-b2c-tenant-directory&quot;&gt;Select your B2C tenant directory&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign in to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Azure portal menu, select &lt;strong&gt;All services&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;strong&gt;All services&lt;/strong&gt; search box, search for Azure AD B2C, hover over the search result, and then select the star icon in the tooltip. Azure AD B2C now appears in the Azure portal under Favorites.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to change the position of your new favorite, go to the Azure portal menu, select Azure AD B2C, and then drag it up or down to the desired position.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/portal-08-b2c-favorite.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;In this article, you learned how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create an Azure AD B2C tenant&lt;/li&gt;
  &lt;li&gt;Link your tenant to your subscription&lt;/li&gt;
  &lt;li&gt;Switch to the directory containing your Azure AD B2C tenant&lt;/li&gt;
  &lt;li&gt;Add the Azure AD B2C resource as a Favorite in the Azure portal&lt;/li&gt;
  &lt;li&gt;Next, learn &lt;a href=&quot;azure-acticedirectoryB2C_RegisterApp&quot;&gt;how to register a web application&lt;/a&gt; in your new tenant.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Create an Azure AD B2C tenant</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/azureAD.png" /></entry><entry><title type="html">Azure Active Directory B2C</title><link href="http://localhost:4000/blog/azure-acticedirectoryB2C" rel="alternate" type="text/html" title="Azure Active Directory B2C" /><published>2020-03-10T10:41:00+00:00</published><updated>2020-03-10T10:41:00+00:00</updated><id>http://localhost:4000/blog/azure-activedirectoryB2C</id><content type="html" xml:base="http://localhost:4000/blog/azure-acticedirectoryB2C">&lt;blockquote&gt;
  &lt;h2 id=&quot;what-is-azure-active-directory-b2c&quot;&gt;What is Azure Active Directory B2C?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Azure Active Directory B2C&lt;/strong&gt; provides business-to-customer &lt;strong&gt;identity as a service&lt;/strong&gt;. Your customers use their preferred social, enterprise, or local account identities to get single sign-on access to your applications and APIs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/azureadb2c-overview.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Azure Active Directory B2C (Azure AD B2C)&lt;/strong&gt; is a customer identity access management (CIAM) solution capable of &lt;strong&gt;supporting millions of users and billions of authentications per day&lt;/strong&gt;. 
It takes care of the &lt;strong&gt;scaling&lt;/strong&gt; and &lt;strong&gt;safety&lt;/strong&gt; of the &lt;em&gt;authentication platform&lt;/em&gt;, monitoring and automatically handling threats like &lt;strong&gt;denial-of-service, password spray, or brute force attacks&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;custom-branded-identity-solution&quot;&gt;Custom-branded identity solution&lt;/h2&gt;

&lt;p&gt;Azure AD B2C is a &lt;strong&gt;white-label authentication solution&lt;/strong&gt;. You can customize the entire user experience with your brand so that it blends seamlessly with your web and mobile applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customize every page displayed by Azure AD B2C when your users sign up, sign in, and modify their profile information&lt;/strong&gt;. Customize the &lt;strong&gt;HTML, CSS, and JavaScript&lt;/strong&gt; in your user journeys so that the Azure AD B2C experience &lt;strong&gt;looks and feels like it’s a native part of your application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/sign-in-small.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;single-sign-on-access-with-a-user-provided-identity&quot;&gt;Single sign-on access with a user-provided identity&lt;/h2&gt;

&lt;p&gt;Azure AD B2C uses standards-based authentication protocols including &lt;strong&gt;OpenID Connect, OAuth 2.0, and SAML&lt;/strong&gt;. It integrates with most modern applications and commercial off-the-shelf software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/scenario-singlesignon.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By serving as the &lt;strong&gt;central authentication authority&lt;/strong&gt; for your &lt;strong&gt;&lt;em&gt;web applications, mobile apps, and API&lt;/em&gt;&lt;/strong&gt;s, Azure AD B2C enables you to build a single &lt;strong&gt;sign-on (SSO) solution&lt;/strong&gt; for them all. Centralize the collection of &lt;strong&gt;user profile and preference information&lt;/strong&gt;, and &lt;em&gt;capture detailed analytics&lt;/em&gt; about &lt;strong&gt;sign-in behavior&lt;/strong&gt; and &lt;strong&gt;sign-up conversion&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;integrate-with-external-user-stores&quot;&gt;Integrate with external user stores&lt;/h2&gt;

&lt;p&gt;Azure AD B2C provides a directory that &lt;strong&gt;can hold 100 custom attributes per user&lt;/strong&gt;. However, you can also &lt;strong&gt;integrate with external systems&lt;/strong&gt;. For example, use Azure AD B2C for &lt;strong&gt;authentication&lt;/strong&gt;, but delegate to an external &lt;strong&gt;customer relationship management (CRM) ** or **customer loyalty database&lt;/strong&gt; as the source of truth for customer data.&lt;/p&gt;

&lt;p&gt;Another external user store scenario is to have Azure AD B2C handle the authentication for your application, but &lt;strong&gt;integrate with an external system that stores user profile or personal data&lt;/strong&gt;. For example, to satisfy data residency requirements like &lt;strong&gt;regional or on-premises data&lt;/strong&gt; storage policies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/scenario-remoteprofile.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Azure AD B2C can facilitate &lt;strong&gt;collecting the information from the user during registration or profile editing&lt;/strong&gt;, then &lt;em&gt;hand that data off to the external system&lt;/em&gt;. Then, during future &lt;strong&gt;authentications&lt;/strong&gt;, Azure AD B2C can retrieve the data from the external system and, if needed, include it as a part of the authentication token response it sends to your application.&lt;/p&gt;

&lt;h2 id=&quot;progressive-profiling&quot;&gt;Progressive profiling&lt;/h2&gt;

&lt;p&gt;Another user journey option includes &lt;strong&gt;progressive profiling&lt;/strong&gt;. Progressive profiling allows your &lt;strong&gt;customers to quickly complete their first transaction by collecting a minimal amount of information&lt;/strong&gt;. Then, gradually collect more profile data from the customer on future sign-ins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/scenario-progressive.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;third-party-identity-verification-and-proofing&quot;&gt;Third-party identity verification and proofing&lt;/h2&gt;

&lt;p&gt;Use Azure AD B2C to facilitate &lt;em&gt;identity verification and proofing by collecting user data, then passing it to a third party system to perform validation, trust scoring, and approval for user account creation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/scenario-idproofing.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are just some of the things you can do with Azure AD B2C as your business-to-customer identity platform.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;technical-and-feature-overview-of-azure-active-directory-b2c&quot;&gt;Technical and feature overview of Azure Active Directory B2C&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are the &lt;strong&gt;primary resources&lt;/strong&gt; you work with in the service, its features, and how these enable you to provide a fully custom identity experience for your customers in your applications.&lt;/p&gt;

&lt;h2 id=&quot;azure-ad-b2c-tenant&quot;&gt;Azure AD B2C tenant&lt;/h2&gt;

&lt;p&gt;In Azure Active Directory B2C (Azure AD B2C), &lt;strong&gt;a tenant&lt;/strong&gt; represents &lt;strong&gt;your organization&lt;/strong&gt; and is a &lt;strong&gt;directory of users&lt;/strong&gt;. &lt;em&gt;Each Azure AD B2C tenant is distinct and separate from other Azure AD B2C tenants&lt;/em&gt;. An Azure AD B2C tenant is different than an Azure Active Directory tenant, which you may already have.&lt;/p&gt;

&lt;p&gt;The primary resources you work with in an Azure AD B2C tenant are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Directory&lt;/strong&gt; - The directory is where Azure AD B2C &lt;strong&gt;stores&lt;/strong&gt; your &lt;strong&gt;users’ credentials&lt;/strong&gt; and &lt;strong&gt;profile data&lt;/strong&gt;, as well as your &lt;strong&gt;application registrations&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Application registrations&lt;/strong&gt; - You &lt;strong&gt;register your web, mobile, and native applications&lt;/strong&gt; with Azure AD B2C to &lt;strong&gt;enable identity management&lt;/strong&gt;. Also, &lt;strong&gt;any APIs&lt;/strong&gt; you want to protect with Azure AD B2C.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User flows and custom policies&lt;/strong&gt; - The built-in &lt;strong&gt;(user flows)&lt;/strong&gt; and fully customizable &lt;strong&gt;(custom policies)&lt;/strong&gt; identity experiences for your applications.
    &lt;ul&gt;
      &lt;li&gt;Use user flows for &lt;strong&gt;quick configuration and enablement of common identity tasks like sign up, sign in, and profile editing&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Use &lt;strong&gt;custom policies&lt;/strong&gt; to enable user experiences not only for the &lt;strong&gt;common identity tasks&lt;/strong&gt;, but also for crafting support for &lt;strong&gt;complex identity workflows&lt;/strong&gt; unique to your organization, customers, employees, partners, and citizens.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Identity providers&lt;/strong&gt; - Federation settings for:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Social identity&lt;/strong&gt; providers like Facebook, LinkedIn, or Twitter that you want to support in your applications.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;External identity&lt;/strong&gt; providers that support standard identity protocols like OAuth 2.0, OpenID Connect, and more.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Local accounts&lt;/strong&gt; that enable users to sign up and sign in with a username (or email address or other ID) and password.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keys&lt;/strong&gt; - Add and manage encryption keys for signing and validating tokens, client secrets, certificates, and passwords.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An &lt;strong&gt;Azure AD B2C tenant&lt;/strong&gt; is the &lt;strong&gt;first resource&lt;/strong&gt; you need to create to get started with Azure AD B2C. Learn how in Tutorial: &lt;a href=&quot;azure-acticedirectoryB2C_CreateTenant&quot;&gt;&lt;strong&gt;Create an Azure Active Directory B2C tenant&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;accounts-in-azure-ad-b2c&quot;&gt;Accounts in Azure AD B2C&lt;/h2&gt;
&lt;p&gt;Azure AD B2C defines &lt;strong&gt;several types of user accounts&lt;/strong&gt;. Azure Active Directory, Azure Active Directory &lt;strong&gt;B2B&lt;/strong&gt;, and Azure Active Directory &lt;strong&gt;B2C&lt;/strong&gt; share these account types.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Work account&lt;/strong&gt; - Users with work accounts can manage resources in a tenant, and with an &lt;strong&gt;administrator role&lt;/strong&gt;, can also manage tenants. Users with work accounts can &lt;em&gt;create new consumer accounts, reset passwords, block/unblock accounts, and set permissions or assign an account to a security group.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Guest account&lt;/strong&gt; - External users you invite to your tenant as guests. A typical scenario for inviting a guest user to your Azure AD B2C tenant &lt;strong&gt;is to share administration responsibilities&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consumer account&lt;/strong&gt; - Consumer accounts are the accounts created in your Azure AD B2C directory when &lt;strong&gt;users complete the sign-up user journey&lt;/strong&gt; in an application you’ve registered in your tenant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/portal-01-users.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;consumer-accounts&quot;&gt;Consumer accounts&lt;/h2&gt;
&lt;p&gt;With a consumer account, users can sign in to the applications that you’ve secured with Azure AD B2C. Users with consumer accounts can’t, however, access Azure resources, for example the Azure portal.&lt;/p&gt;

&lt;p&gt;A consumer account can be associated with these identity types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Local identity&lt;/strong&gt;, with the username and password stored locally in the Azure AD B2C directory. We often refer to these identities as &lt;strong&gt;“local accounts.”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Social or enterprise identities&lt;/strong&gt;, where the identity of the user is managed by a federated identity provider like Facebook, Microsoft, ADFS, or Salesforce.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A user with a consumer account can sign in with multiple identities, for example username, email, employee ID, government ID, and others. A single account can have multiple identities, both local and social.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/identities.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Azure AD B2C lets you manage common attributes of consumer account profiles like &lt;strong&gt;display name, surname, given name, city, and others&lt;/strong&gt;. You can also &lt;strong&gt;extend the Azure AD schema&lt;/strong&gt; to store additional information about your users. For example, their &lt;strong&gt;country/region&lt;/strong&gt; or &lt;strong&gt;residency&lt;/strong&gt;, &lt;strong&gt;preferred language&lt;/strong&gt;, and &lt;strong&gt;preferences&lt;/strong&gt; like whether they want to &lt;strong&gt;subscribe to a newsletter&lt;/strong&gt; or &lt;strong&gt;enable multi-factor authentication&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;external-identity-providers&quot;&gt;External identity providers&lt;/h2&gt;

&lt;p&gt;You can configure Azure AD B2C to allow users to sign in to your application with credentials from &lt;strong&gt;external social or enterprise identity providers (IdP)&lt;/strong&gt;. Azure AD B2C supports external identity providers like &lt;strong&gt;Facebook, Microsoft account, Google, Twitter, and any identity provider&lt;/strong&gt; that supports &lt;em&gt;OAuth 1.0, OAuth 2.0, OpenID Connect, and SAML&lt;/em&gt; protocols.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/external-idps.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With external identity provider federation, you can offer your consumers the ability to &lt;strong&gt;sign in with their existing social or enterprise accounts&lt;/strong&gt;, &lt;em&gt;without having to create a new account just for your application.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the sign-up or sign-in page, Azure AD B2C presents a list of external identity providers the user can choose for &lt;strong&gt;sign-in&lt;/strong&gt;. Once they select one of the external identity providers, they’re taken (redirected) to the selected provider’s website to complete the sign in process. After the user successfully signs in, they’re returned to Azure AD B2C for authentication of the account in your application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/external-idp.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;identity-experiences-user-flows-or-custom-policies&quot;&gt;Identity experiences: user flows or custom policies&lt;/h2&gt;

&lt;p&gt;The extensible policy framework of Azure AD B2C is its core strength. Policies describe your users’ identity experiences such as sign up, sign in, and profile editing.&lt;/p&gt;

&lt;p&gt;In Azure AD B2C, there are &lt;strong&gt;two primary paths&lt;/strong&gt; you can take to provide these identity experiences: &lt;strong&gt;user flows&lt;/strong&gt; and &lt;strong&gt;custom policies&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;User flows&lt;/strong&gt; are predefined, built-in, configurable policies that we provide so you can create &lt;strong&gt;sign-up, sign-in, and policy editing&lt;/strong&gt; experiences in minutes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Custom policies&lt;/strong&gt; enable you to create your own user journeys for complex identity experience scenarios.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both user flows and custom policies are powered by the &lt;strong&gt;Identity Experience Framework, Azure AD B2C’s policy orchestration engine.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;user-flow&quot;&gt;User flow&lt;/h2&gt;
&lt;p&gt;To help you quickly set up the most common identity tasks, the Azure portal includes several predefined and configurable policies called user flows.&lt;/p&gt;

&lt;p&gt;You can configure user flow settings like these to control identity experience behaviors in your applications:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Account types used for sign-in, such as social accounts like a Facebook, or local accounts that use an email address and password for sign-in&lt;/li&gt;
  &lt;li&gt;Attributes to be collected from the consumer, such as first name, postal code, or country/region of residency&lt;/li&gt;
  &lt;li&gt;Azure Multi-Factor Authentication (MFA)&lt;/li&gt;
  &lt;li&gt;Customization of the user interface&lt;/li&gt;
  &lt;li&gt;Set of claims in a token that your application receives after the user completes the user flow&lt;/li&gt;
  &lt;li&gt;Session management&lt;/li&gt;
  &lt;li&gt;…and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most common identity scenarios for the majority of mobile, web, and single-page applications can be defined and implemented effectively with user flows. We recommend that you use the built-in user flows unless you have complex user journey scenarios that require the full flexibility of custom policies.&lt;/p&gt;

&lt;h2 id=&quot;custom-policy&quot;&gt;Custom policy&lt;/h2&gt;
&lt;p&gt;Custom policies unlock access to the full power of the &lt;strong&gt;Identity Experience Framework (IEF) orchestration engine&lt;/strong&gt;. With custom policies, you can leverage IEF to build almost any authentication, user registration, or profile editing experience that you can imagine.&lt;/p&gt;

&lt;p&gt;The Identity Experience Framework gives you the ability to construct user journeys with any combination of steps. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Federate with other identity providers&lt;/li&gt;
  &lt;li&gt;First- and third-party multi-factor authentication (MFA) challenges&lt;/li&gt;
  &lt;li&gt;Collect any user input&lt;/li&gt;
  &lt;li&gt;Integrate with external systems using REST API communication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each such user journey is defined by a policy, and you can build as many or as few policies as you need to enable the best user experience for your organization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/custom-policy.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A custom policy is defined by several XML files that refer to each other in a hierarchical chain. The XML elements define the claims schema, claims transformations, content definitions, claims providers, technical profiles, user journey orchestration steps, and other aspects of the identity experience.&lt;/p&gt;

&lt;p&gt;The powerful flexibility of custom policies is most appropriate for when you need to build complex identity scenarios. Developers configuring custom policies must define the trusted relationships in careful detail to include metadata endpoints, exact claims exchange definitions, and configure secrets, keys, and certificates as needed by each identity provider.&lt;/p&gt;

&lt;h2 id=&quot;protocols-and-tokens&quot;&gt;Protocols and tokens&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For applications, Azure AD B2C supports the &lt;strong&gt;OAuth 2.0, OpenID Connect, and SAML protocols&lt;/strong&gt; for user journeys. Your application starts the user journey by issuing authentication requests to Azure AD B2C. The result of a request to Azure AD B2C is a &lt;strong&gt;security token&lt;/strong&gt;, such as an &lt;strong&gt;ID token, access token, or SAML token&lt;/strong&gt;. This security token defines the user’s identity within the application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For external identities, Azure AD B2C supports &lt;strong&gt;federation with any OAuth 1.0, OAuth 2.0, OpenID Connect, and SAML identity providers.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following diagram shows how Azure AD B2C can communicate using a variety of protocols within the same authentication flow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/protocols.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The relying party application initiates an authorization request to Azure AD B2C using OpenID Connect.&lt;/li&gt;
  &lt;li&gt;When a user of the application chooses to sign in using an external identity provider that uses the SAML protocol, Azure AD B2C invokes the SAML protocol to communicate with that identity provider.&lt;/li&gt;
  &lt;li&gt;After the user completes the sign-in operation with the external identity provider, Azure AD B2C then returns the token to the relying party application using OpenID Connect.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;application-integration&quot;&gt;Application integration&lt;/h2&gt;
&lt;p&gt;When a user wants to sign in to your application, whether it’s a web, mobile, desktop, or single-page application (SPA), the application initiates an authorization request to a user flow- or custom policy-provided endpoint. The user flow or custom policy defines and controls the user’s experience. When they complete a user flow, for example the sign-up or sign-in flow, Azure AD B2C generates a token, then redirects the user back to your application&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/app-integration.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Multiple applications can use the same user flow or custom policy. A single application can use multiple user flows or custom policies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example&lt;/strong&gt;, to sign in to an application, the application uses the sign up or sign in user flow. After the user has signed in, they may want to edit their profile, so the application initiates another authorization request, this time using the profile edit user flow.&lt;/p&gt;

&lt;h2 id=&quot;seamless-user-experiences&quot;&gt;Seamless user experiences&lt;/h2&gt;
&lt;p&gt;In Azure AD B2C, you can craft your users’ identity experiences so that the pages they’re shown blend seamlessly with the look and feel of your brand. You get nearly full control of the HTML and CSS content presented to your users when they proceed through your application’s identity journeys. With this flexibility, you can maintain brand and visual consistency between your application and Azure AD B2C.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/seamless-ux.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;localization&quot;&gt;Localization&lt;/h2&gt;
&lt;p&gt;Language customization in Azure AD B2C allows you to accommodate different languages to suit your customer needs. &lt;strong&gt;Microsoft provides the translations for 36 languages&lt;/strong&gt;, but you can also provide your own translations for any language. Even if your experience is provided for only a single language, you can customize any text on the pages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/localization.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-your-own-business-logic&quot;&gt;Add your own business logic&lt;/h2&gt;

&lt;p&gt;If you choose to use custom policies, you can integrate with a RESTful API in a user journey to add your own business logic to the journey. For example, Azure AD B2C can exchange data with a RESTful service to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Display custom user-friendly error messages.&lt;/li&gt;
  &lt;li&gt;Validate user input to prevent malformed data from persisting in your user directory. For example, you can modify the data entered by the user, such as capitalizing their first name if they entered it in all lowercase.&lt;/li&gt;
  &lt;li&gt;Enrich user data by further integrating with your corporate line-of-business application.&lt;/li&gt;
  &lt;li&gt;Using RESTful calls, you can send push notifications, update corporate databases, run a user migration process, manage permissions, audit databases, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Loyalty programs are another scenario enabled by Azure AD B2C’s support for calling REST APIs. For example, your RESTful service can receive a user’s email address, query your customer database, then return the user’s loyalty number to Azure AD B2C. The return data can be stored in the user’s directory account in Azure AD B2C, then be further evaluated in subsequent steps in the policy, or be included in the access token.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/lob-integration.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can add a REST API call at any step in the user journey defined by a custom policy. For example, you can call a REST API:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;During sign-in, just before Azure AD B2C validates the credentials&lt;/li&gt;
  &lt;li&gt;Immediately after sign-in&lt;/li&gt;
  &lt;li&gt;Before Azure AD B2C creates a new account in the directory&lt;/li&gt;
  &lt;li&gt;After Azure AD B2C creates a new account in the directory&lt;/li&gt;
  &lt;li&gt;Before Azure AD B2C issues an access token&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;protect-customer-identities&quot;&gt;Protect customer identities&lt;/h2&gt;
&lt;p&gt;Azure AD B2C complies with the security, privacy, and other commitments described in the Microsoft Azure Trust Center.&lt;/p&gt;

&lt;p&gt;Sessions are modeled as encrypted data, with the decryption key known only to the Azure AD B2C Security Token Service. A strong encryption algorithm, AES-192, is used. All communication paths are protected with TLS for confidentiality and integrity. Our Security Token Service uses an Extended Validation (EV) certificate for TLS. In general, the Security Token Service mitigates cross-site scripting (XSS) attacks by not rendering untrusted input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/user-data.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;access-to-user-data&quot;&gt;Access to user data&lt;/h2&gt;

&lt;p&gt;Azure AD B2C tenants share many characteristics with enterprise Azure Active Directory tenants used for employees and partners. Shared aspects include mechanisms for viewing administrative roles, assigning roles, and auditing activities.&lt;/p&gt;

&lt;p&gt;You can assign roles to control who can perform certain administrative actions in Azure AD B2C, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create and manage all aspects of user flows&lt;/li&gt;
  &lt;li&gt;Create and manage the attribute schema available to all user flows&lt;/li&gt;
  &lt;li&gt;Configure identity providers for use in direct federation&lt;/li&gt;
  &lt;li&gt;Create and manage trust framework policies in the Identity Experience Framework (custom policies)&lt;/li&gt;
  &lt;li&gt;Manage secrets for federation and encryption in the Identity Experience Framework (custom policies)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multi-factor-authentication-mfa&quot;&gt;Multi-factor authentication (MFA)&lt;/h2&gt;

&lt;p&gt;Azure AD B2C multi-factor authentication (MFA) helps safeguard access to data and applications while maintaining simplicity for your users. It provides additional security by requiring a second form of authentication, and delivers strong authentication by offering a range of easy-to-use authentication methods. Your users may or may not be challenged for MFA based on configuration decisions that you can make as an administrator.&lt;/p&gt;

&lt;h2 id=&quot;smart-account-lockout&quot;&gt;Smart account lockout&lt;/h2&gt;

&lt;p&gt;To prevent brute-force password guessing attempts, Azure AD B2C uses a sophisticated strategy to lock accounts based on the IP of the request, the passwords entered, and several other factors. The duration of the lockout is automatically increased based on risk and the number of attempts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/smart-lockout1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;password-complexity&quot;&gt;Password complexity&lt;/h2&gt;

&lt;p&gt;During sign up or password reset, your users must supply a password that meets complexity rules. By default, Azure AD B2C enforces a strong password policy. Azure AD B2C also provides configuration options for specifying the complexity requirements of the passwords your customers use.&lt;/p&gt;

&lt;p&gt;You can configure password complexity requirements in both &lt;strong&gt;user flows&lt;/strong&gt; and &lt;strong&gt;custom policies&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;auditing-and-logs&quot;&gt;Auditing and logs&lt;/h2&gt;

&lt;p&gt;Azure AD B2C emits audit logs containing activity information about its resources, issued tokens, and administrator access. You can use these audit logs to understand platform activity and diagnose issues. Audit log entries are available soon after the activity that generated the event occurs.&lt;/p&gt;

&lt;p&gt;In an audit log, which is available for your Azure AD B2C tenant or for a particular user, you can find information including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Activities concerning the authorization of a user to access B2C resources (for example, an administrator accessing a list of B2C policies)&lt;/li&gt;
  &lt;li&gt;Activities related to directory attributes retrieved when an administrator signs in using the Azure portal&lt;/li&gt;
  &lt;li&gt;Create, read, update, and delete (CRUD) operations on B2C applications&lt;/li&gt;
  &lt;li&gt;CRUD operations on keys stored in a B2C key container&lt;/li&gt;
  &lt;li&gt;CRUD operations on B2C resources (for example, policies and identity providers)&lt;/li&gt;
  &lt;li&gt;Validation of user credentials and token issuance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/audit-log.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage-insights&quot;&gt;Usage insights&lt;/h2&gt;

&lt;p&gt;Azure AD B2C allows you to discover when people sign up or sign in to your web app, where your users are located, and what browsers and operating systems they use. By integrating Azure Application Insights into Azure AD B2C by using custom policies, you can gain insight into how people sign up, sign in, reset their password or edit their profile. With such knowledge, you can make data-driven decisions for your upcoming development cycles.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">What is Azure Active Directory B2C?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/azureAD.png" /></entry><entry><title type="html">Creating A Step-By-Step End-To-End Database Server-Side Blazor Application</title><link href="http://localhost:4000/blog/creating-step-by-step-ServerSideBlazorApp" rel="alternate" type="text/html" title="Creating A Step-By-Step End-To-End Database Server-Side Blazor Application" /><published>2020-03-10T10:26:00+00:00</published><updated>2020-03-10T10:26:00+00:00</updated><id>http://localhost:4000/blog/creating-Step-by-Step-ServerSideBlazorApp</id><content type="html" xml:base="http://localhost:4000/blog/creating-step-by-step-ServerSideBlazorApp">&lt;h2 id=&quot;creating-a-step-by-step-end-to-end-database-server-side-blazor-application&quot;&gt;Creating A Step-By-Step End-To-End Database Server-Side Blazor Application&lt;/h2&gt;

&lt;p&gt;The primary benefit we have when using &lt;strong&gt;server-side Blazor&lt;/strong&gt; is that we do not have to make web http calls from the client code to the server code. This reduces the code we need to write and eliminates many security concerns.&lt;/p&gt;

&lt;p&gt;In this article, we will demonstrate how a list of &lt;strong&gt;Weather forecasts&lt;/strong&gt; can be added to the database by each user. A user will only have the ability to see their own forecasts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-sql-server&quot;&gt;Use SQL Server&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new project template in &lt;strong&gt;Visual Studio&lt;/strong&gt; will allow you to create a database using &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/working-with-sql?view=aspnetcore-2.2&amp;amp;tabs=visual-studio#sql-server-express-localdb&quot;&gt;SQL Server Express LocalDB&lt;/a&gt;. However, it can be problematic to install and configure. Using the free &lt;strong&gt;SQL Server 2019 Developer server&lt;/strong&gt; (or the full &lt;strong&gt;SQL Server&lt;/strong&gt;) is recommended.&lt;/p&gt;

&lt;p&gt;Download and install &lt;strong&gt;SQL Server 2019 Developer Edition&lt;/strong&gt; from the following link:&lt;/p&gt;

&lt;p&gt;https://www.microsoft.com/en-us/sql-server/sql-server-downloads&lt;/p&gt;

&lt;h2 id=&quot;create-the-blazor-application&quot;&gt;Create The Blazor Application&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/3.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;a href=&quot;https://visualstudio.microsoft.com/&quot;&gt;Visual Studio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/4.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Create a new Project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/5.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Blazor App&lt;/strong&gt; and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/6.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Name it &lt;strong&gt;EndToEnd&lt;/strong&gt; and click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/7.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Blazor Server App&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/8.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the Change link under Authentication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/9.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Individual User Accounts&lt;/strong&gt; and &lt;strong&gt;Store user accounts in-app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/10.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/11.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;project&lt;/strong&gt; will be created.&lt;/p&gt;

&lt;h2 id=&quot;create-the-database&quot;&gt;Create The Database&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/12.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;SQL Server Object Explorer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/13.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a connection to your local database server if you don’t already have it in the SQL Server list.&lt;/p&gt;

&lt;p&gt;For this tutorial, we do not want to use the SQL Express server on (localdb) that you may already see in the list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/14.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will specify just the server and &lt;strong&gt;Connect&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/15.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Expand the tree under the local &lt;strong&gt;SQL server&lt;/strong&gt;, right-click on the &lt;strong&gt;Databases&lt;/strong&gt; folder and select &lt;strong&gt;Add New Database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/16.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give the &lt;strong&gt;database&lt;/strong&gt; a name and press &lt;strong&gt;Enter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;database&lt;/strong&gt; will be created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/17.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Right-Click&lt;/strong&gt; on the &lt;strong&gt;Database&lt;/strong&gt; node and select &lt;strong&gt;Properties&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/18.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;Properties&lt;/strong&gt; window if it is not already opened.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Properties&lt;/strong&gt; window for the &lt;strong&gt;database&lt;/strong&gt; will display.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copy&lt;/strong&gt; the &lt;strong&gt;Connection string&lt;/strong&gt; for the &lt;strong&gt;database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/19.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;appsettings.json&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/20.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Paste&lt;/strong&gt; in the &lt;strong&gt;connection string&lt;/strong&gt; for the &lt;strong&gt;DefaultConnection&lt;/strong&gt; and &lt;strong&gt;save&lt;/strong&gt; the file.&lt;/p&gt;

&lt;h2 id=&quot;run-the-application&quot;&gt;Run the Application&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/21.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;F5&lt;/strong&gt; to run the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/22.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The application will open in your &lt;strong&gt;web browser&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click&lt;/strong&gt; the &lt;strong&gt;Register&lt;/strong&gt; link.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/23.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the information to create a &lt;strong&gt;new account&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Register&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/24.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because this is the first time the database is being used, you will see a message asking you to run the &lt;strong&gt;migration scripts&lt;/strong&gt; that will create the database objects needed to support the user membership code.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Apply Migrations&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/25.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the message changes to Migrations Applied, refresh the page in the web browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/26.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking refresh in your web browser, a popup will require you to click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/27.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Click here to confirm your account link&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/28.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;Confirm email&lt;/strong&gt; page, click the name of the application to navigate to the home page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/29.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can click the &lt;strong&gt;Log in&lt;/strong&gt; link to log in using the account you just created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/30.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will now be &lt;strong&gt;logged into the application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can click around the application and see that it works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/31.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Fetch data&lt;/strong&gt; page currently shows random data. We will alter the application to allow us to &lt;strong&gt;add, update, and delete&lt;/strong&gt; this data in the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Close&lt;/strong&gt; the &lt;strong&gt;&lt;em&gt;web browser&lt;/em&gt;&lt;/strong&gt; to &lt;strong&gt;stop&lt;/strong&gt; the application.&lt;/p&gt;

&lt;h2 id=&quot;do-not-require-account-confirmation&quot;&gt;Do Not Require Account Confirmation&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/32.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we do not intend to configure &lt;strong&gt;email account verification&lt;/strong&gt; (using the directions at this link: https://bit.ly/2tf2ym4), we can open the &lt;strong&gt;Startup.cs&lt;/strong&gt; file and change the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;services.AddDefaultIdentity&amp;lt;IdentityUser&amp;gt;(
                options =&amp;gt; options.SignIn.RequireConfirmedAccount = true)
                .AddEntityFrameworkStores&amp;lt;ApplicationDbContext&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
services.AddDefaultIdentity&amp;lt;IdentityUser&amp;gt;(
                options =&amp;gt; options.SignIn.RequireConfirmedAccount = false)
                .AddEntityFrameworkStores&amp;lt;ApplicationDbContext&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;create-the-database-1&quot;&gt;Create The Database&lt;/h2&gt;

&lt;p&gt;Create a new &lt;strong&gt;Server Side Blazor&lt;/strong&gt; project and &lt;em&gt;right-click&lt;/em&gt; on the &lt;strong&gt;wwwroot&lt;/strong&gt; folder and select &lt;strong&gt;Add&lt;/strong&gt; then &lt;strong&gt;New Item…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/33.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;SQL Server Object Explorer window&lt;/strong&gt;, in &lt;strong&gt;Visual Studio&lt;/strong&gt;, we see the &lt;strong&gt;tables&lt;/strong&gt; that the &lt;strong&gt;&lt;em&gt;migration scripts added&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/34.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right-click&lt;/em&gt; on the &lt;strong&gt;Tables&lt;/strong&gt; node and select &lt;strong&gt;Add New Table&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/35.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Paste the following script in the &lt;strong&gt;T-SQL&lt;/strong&gt; window and then click the &lt;strong&gt;Update&lt;/strong&gt; button:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE [dbo].[WeatherForecast] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [Date]         DATETIME      NULL,
    [TemperatureC] INT           NULL,
    [TemperatureF] INT           NULL,
    [Summary]      NVARCHAR (50) NULL,
    [UserName]     NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/blazor/3/36.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The script will prepare.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Update Database&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/37.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Back in the &lt;strong&gt;Server Explorer&lt;/strong&gt; window, &lt;em&gt;right-click&lt;/em&gt; on Tables and select &lt;strong&gt;Refresh&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/38.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;WeatherForecast&lt;/strong&gt; table will display.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right-click&lt;/em&gt; on the table and select &lt;strong&gt;Show Table Data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/39.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will enter some &lt;strong&gt;sample data&lt;/strong&gt; so that we will be able to &lt;strong&gt;test&lt;/strong&gt; the data connection in the next steps.&lt;/p&gt;

&lt;p&gt;Set the &lt;strong&gt;UserName&lt;/strong&gt; field to the &lt;strong&gt;username&lt;/strong&gt; of the &lt;strong&gt;user&lt;/strong&gt; that we &lt;strong&gt;registered&lt;/strong&gt; an account for earlier.&lt;/p&gt;

&lt;h2 id=&quot;create-the-data-context&quot;&gt;Create The Data Context&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/40.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you do not already have it installed, install EF Core Power Tools from:&lt;/p&gt;

&lt;p&gt;https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/41.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Note: Before installing, close &lt;strong&gt;Visual Studio&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;(Note: Please give this project a &lt;strong&gt;5&lt;/strong&gt; star review on &lt;strong&gt;marketplace.visualstudio.com&lt;/strong&gt;!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/42.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right-click&lt;/em&gt; on the &lt;strong&gt;project&lt;/strong&gt; node in the &lt;strong&gt;Solution Explorer&lt;/strong&gt; and select &lt;strong&gt;EF Core Power&lt;/strong&gt; Tools then &lt;strong&gt;Reverse Engineer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/43.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Add&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/44.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Connect&lt;/em&gt; to the &lt;strong&gt;database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;database connection&lt;/strong&gt; in the dropdown and click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/45.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;WeatherForecast&lt;/strong&gt; table and click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/46.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the values and click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/47.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Solution Explorer&lt;/strong&gt;, you will see the &lt;strong&gt;Data Context&lt;/strong&gt; has been created.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;OK&lt;/strong&gt; button to close the popup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/48.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;Startup.cs&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;Add the following code to the &lt;strong&gt;ConfigureServices&lt;/strong&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
// Read the connection string from the appsettings.json file
    // Set the database connection for the EndtoEndContext
    services.AddDbContext&amp;lt;EndToEndDB.Data.EndToEnd.EndtoEndContext&amp;gt;(options =&amp;gt;
    options.UseSqlServer(
        Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, change this line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    
    services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    
    // Scoped creates an instance for each user
    services.AddScoped&amp;lt;WeatherForecastService&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/49.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save&lt;/strong&gt; the file.&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Build&lt;/strong&gt;, then &lt;strong&gt;Rebuild Solution&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;read-from-the-database&quot;&gt;Read From The Database&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/50.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete&lt;/strong&gt; the &lt;strong&gt;Data/WeatherForecast.cs&lt;/strong&gt; file in the project.&lt;/p&gt;

&lt;p&gt;We will use the &lt;strong&gt;Data/EndToEnd/WeatherForcast.cs&lt;/strong&gt; class file created by the &lt;strong&gt;EF Core Tools instead&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/51.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;WeatherForecastService.cs&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Replace all the code&lt;/strong&gt; with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
using EndToEndDB.Data.EndToEnd;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
namespace EndToEnd.Data
{
    public class WeatherForecastService
    {
        private readonly EndtoEndContext _context;
        public WeatherForecastService(EndtoEndContext context)
        {
            _context = context;
        }
        public async Task&amp;lt;List&amp;lt;WeatherForecast&amp;gt;&amp;gt;
            GetForecastAsync(string strCurrentUser)
        {
            // Get Weather Forecasts  
            return await _context.WeatherForecast
                 // Only get entries for the current logged in user
                 .Where(x =&amp;gt; x.UserName == strCurrentUser)
                 // Use AsNoTracking to disable EF change tracking
                 // Use ToListAsync to avoid blocking a thread
                 .AsNoTracking().ToListAsync();
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    private readonly EndtoEndContext _context;
    
    public WeatherForecastService(EndtoEndContext context)
        {
            _context = context;
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connects to the &lt;strong&gt;database&lt;/strong&gt; using the &lt;em&gt;datacontext&lt;/em&gt; we created with the &lt;strong&gt;EF Core tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/52.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, open the &lt;strong&gt;FetchData.razor&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Replace all the code&lt;/em&gt; with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
@page &quot;/fetchdata&quot;
@using EndToEnd.Data
@using EndToEndDB.Data.EndToEnd
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase&amp;lt;WeatherForecastService&amp;gt;
&amp;lt;h1&amp;gt;Weather forecast&amp;lt;/h1&amp;gt;
&amp;lt;!-- AuthorizeView allows us to only show sections of the page --&amp;gt;
&amp;lt;!-- based on the security on the current user --&amp;gt;
&amp;lt;AuthorizeView&amp;gt;
    &amp;lt;!-- Show this section if the user is logged in --&amp;gt;
    &amp;lt;Authorized&amp;gt;
        &amp;lt;h4&amp;gt;Hello, @context.User.Identity.Name!&amp;lt;/h4&amp;gt;
        @if (forecasts == null)
        {
            &amp;lt;!-- Show this if the current user has no data... yet... --&amp;gt;
            &amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Loading...&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
        }
        else
        {
            &amp;lt;!-- Show the forecasts for the current user --&amp;gt;
            &amp;lt;table class=&quot;table&quot;&amp;gt;
                &amp;lt;thead&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;th&amp;gt;Date&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Temp. (C)&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Temp. (F)&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Summary&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/thead&amp;gt;
                &amp;lt;tbody&amp;gt;
                    @foreach (var forecast in forecasts)
                    {
                        &amp;lt;tr&amp;gt;
                            &amp;lt;td&amp;gt;@forecast.Date.Value.ToShortDateString()&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;@forecast.TemperatureC&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;@forecast.TemperatureF&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;@forecast.Summary&amp;lt;/td&amp;gt;
                        &amp;lt;/tr&amp;gt;
                    }
                &amp;lt;/tbody&amp;gt;
            &amp;lt;/table&amp;gt;
        }
    &amp;lt;/Authorized&amp;gt;
    &amp;lt;!-- Show this section if the user is not logged in --&amp;gt;
    &amp;lt;NotAuthorized&amp;gt;
        &amp;lt;p&amp;gt;You're not signed in.&amp;lt;/p&amp;gt;
    &amp;lt;/NotAuthorized&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;

@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task&amp;lt;AuthenticationState&amp;gt; authenticationStateTask { get; set; }
    List&amp;lt;WeatherForecast&amp;gt; forecasts;
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var user = (await authenticationStateTask).User;
        // Get the forecasts for the current user
        // We access WeatherForecastService using @Service
        forecasts = await @Service.GetForecastAsync(user.Identity.Name);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code simply calls the &lt;strong&gt;GetForecastAsync&lt;/strong&gt; method we created in the previous step, passing the &lt;strong&gt;username&lt;/strong&gt; of the currently logged in user.&lt;/p&gt;

&lt;p&gt;In a normal web application we would have to make a &lt;em&gt;http web call from this client code to the code that connects to the database&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With server-side &lt;strong&gt;Blazor&lt;/strong&gt; we don’t have to do that, yet the call is still secure because the pages are rendered on the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/53.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt; and run the project.&lt;/p&gt;

&lt;p&gt;If we are not logged in, and we go to the &lt;strong&gt;Fetch data&lt;/strong&gt; page, we will see a message indicating we are not signed in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/54.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Login&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/55.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Log in as the user we created data&lt;/em&gt; for earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/56.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you are logged in, switch to the &lt;strong&gt;Fetch data&lt;/strong&gt; page and you will see the data for the user we entered earlier.&lt;/p&gt;

&lt;h2 id=&quot;inserting-data-into-the-database&quot;&gt;Inserting Data Into The Database&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/57.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;WeatherForecastService.cs&lt;/strong&gt; file and add the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;public Task&amp;lt;WeatherForecast&amp;gt;
            CreateForecastAsync(WeatherForecast objWeatherForecast)
        {
            _context.WeatherForecast.Add(objWeatherForecast);
            _context.SaveChanges();
            return Task.FromResult(objWeatherForecast);
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/58.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;FetchData.razor&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;Add the following HTML markup directly under the existing table element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    &amp;lt;p&amp;gt;
        &amp;lt;!-- Add a new forecast --&amp;gt;
        &amp;lt;button class=&quot;btn btn-primary&quot;
                @onclick=&quot;AddNewForecast&quot;&amp;gt;
            Add New Forecast
        &amp;lt;/button&amp;gt;
    &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds a button to allow a new forecast to be added.&lt;/p&gt;

&lt;p&gt;Add the following code below the previous code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    @if (ShowPopup)
        {
            &amp;lt;!-- This is the popup to create or edit a forecast --&amp;gt;
            &amp;lt;div class=&quot;modal&quot; tabindex=&quot;-1&quot; style=&quot;display:block&quot; role=&quot;dialog&quot;&amp;gt;
                &amp;lt;div class=&quot;modal-dialog&quot;&amp;gt;
                    &amp;lt;div class=&quot;modal-content&quot;&amp;gt;
                        &amp;lt;div class=&quot;modal-header&quot;&amp;gt;
                            &amp;lt;h3 class=&quot;modal-title&quot;&amp;gt;Edit Forecast&amp;lt;/h3&amp;gt;
                            &amp;lt;!-- Button to close the popup --&amp;gt;
                            &amp;lt;button type=&quot;button&quot; class=&quot;close&quot;
                                    @onclick=&quot;ClosePopup&quot;&amp;gt;
                                &amp;lt;span aria-hidden=&quot;true&quot;&amp;gt;X&amp;lt;/span&amp;gt;
                            &amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;!-- Edit form for the current forecast --&amp;gt;
                        &amp;lt;div class=&quot;modal-body&quot;&amp;gt;
                            &amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot;
                                    placeholder=&quot;Celsius forecast&quot;
                                    @bind=&quot;objWeatherForecast.TemperatureC&quot; /&amp;gt;
                            &amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot;
                                    placeholder=&quot;Fahrenheit forecast&quot;
                                    @bind=&quot;objWeatherForecast.TemperatureF&quot; /&amp;gt;
                            &amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot;
                                    placeholder=&quot;Summary&quot;
                                    @bind=&quot;objWeatherForecast.Summary&quot; /&amp;gt;
                            &amp;lt;br /&amp;gt;
                            &amp;lt;!-- Button to save the forecast --&amp;gt;
                            &amp;lt;button class=&quot;btn btn-primary&quot;
                                    @onclick=&quot;SaveForecast&quot;&amp;gt;
                                Save
                            &amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds a form (that will be displayed a popup because the class for the DIV is modal), that allows the user to enter (and later edit) data for a forecast.&lt;/p&gt;

&lt;p&gt;We do not need JavaScript to make this &lt;strong&gt;popup&lt;/strong&gt; show. We only need to wrap this code with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;     @if (ShowPopup)
        {
            ...
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the &lt;strong&gt;ShowPopup&lt;/strong&gt; value is true the &lt;strong&gt;popup&lt;/strong&gt; will show. When the value is false, the &lt;strong&gt;popup&lt;/strong&gt; will disappear.&lt;/p&gt;

&lt;p&gt;Add the following code to the &lt;em&gt;@code&lt;/em&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;

    WeatherForecast objWeatherForecast = new WeatherForecast();
    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewForecast()
    {
        // Make new forecast
        objWeatherForecast = new WeatherForecast();
        // Set Id to 0 so we know it is a new record
        objWeatherForecast.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // A new forecast will have the Id set to 0
        if (objWeatherForecast.Id == 0)
        {
            // Create new forecast
            WeatherForecast objNewWeatherForecast = new WeatherForecast();
            objNewWeatherForecast.Date = System.DateTime.Now;
            objNewWeatherForecast.Summary = objWeatherForecast.Summary;
            objNewWeatherForecast.TemperatureC =
            Convert.ToInt32(objWeatherForecast.TemperatureC);
            objNewWeatherForecast.TemperatureF =
            Convert.ToInt32(objWeatherForecast.TemperatureF);
            objNewWeatherForecast.UserName = user.Identity.Name;
            // Save the result
            var result =
            @Service.CreateForecastAsync(objNewWeatherForecast);
        }
        else
        {
            // This is an update
        }
        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(user.Identity.Name);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/59.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you run the project, you can click the &lt;strong&gt;Add New Forecast&lt;/strong&gt; button to add an entry.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/60.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The form only requires a &lt;strong&gt;Fahrenheit, Celsius, and a summary&lt;/strong&gt;, because the other values (&lt;em&gt;date and username&lt;/em&gt;), will be set by the code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/61.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking the &lt;strong&gt;Save&lt;/strong&gt; button, the entry is saved to the database and displayed.&lt;/p&gt;

&lt;h2 id=&quot;updating-the-data&quot;&gt;Updating The Data&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/62.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;WeatherForecastService.cs&lt;/strong&gt; file and &lt;strong&gt;add&lt;/strong&gt; the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;     public Task&amp;lt;bool&amp;gt;
            UpdateForecastAsync(WeatherForecast objWeatherForecast)
        {
            var ExistingWeatherForecast =
                _context.WeatherForecast
                .Where(x =&amp;gt; x.Id == objWeatherForecast.Id)
                .FirstOrDefault();
            if (ExistingWeatherForecast != null)
            {
                ExistingWeatherForecast.Date =
                    objWeatherForecast.Date;
                ExistingWeatherForecast.Summary =
                    objWeatherForecast.Summary;
                ExistingWeatherForecast.TemperatureC =
                    objWeatherForecast.TemperatureC;
                ExistingWeatherForecast.TemperatureF =
                    objWeatherForecast.TemperatureF;
                _context.SaveChanges();
            }
            else
            {
                return Task.FromResult(false);
            }
            return Task.FromResult(true);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/63.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;FetchData.razor&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Replace&lt;/strong&gt; the existing &lt;strong&gt;table&lt;/strong&gt; element with the following markup that adds an edit button in the last column (that calls the &lt;strong&gt;EditForecast&lt;/strong&gt; method we will add in the next step):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    &amp;lt;table class=&quot;table&quot;&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;Date&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Temp. (C)&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Temp. (F)&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Summary&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
            @foreach (var forecast in forecasts)
            {
                &amp;lt;tr&amp;gt;
                    &amp;lt;td&amp;gt;@forecast.Date.Value.ToShortDateString()&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@forecast.TemperatureC&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@forecast.TemperatureF&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@forecast.Summary&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;
                        &amp;lt;!-- Edit the current forecast --&amp;gt;
                        &amp;lt;button class=&quot;btn btn-primary&quot;
                                @onclick=&quot;(() =&amp;gt; EditForecast(forecast))&quot;&amp;gt;
                            Edit
                        &amp;lt;/button&amp;gt;
                    &amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;
            }
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following code to the &lt;em&gt;@code&lt;/em&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    void EditForecast(WeatherForecast weatherForecast)
    {
        // Set the selected forecast
        // as the current forecast
        objWeatherForecast = weatherForecast;
        // Open the Popup
        ShowPopup = true;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets the current record to the &lt;strong&gt;objWeatherForecast&lt;/strong&gt; object that the &lt;strong&gt;popup&lt;/strong&gt; is bound to, and opens the &lt;strong&gt;popup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, change the existing &lt;strong&gt;SaveForecast&lt;/strong&gt; method to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    
    async Task SaveForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // A new forecast will have the Id set to 0
        if (objWeatherForecast.Id == 0)
        {
            // Create new forecast
            WeatherForecast objNewWeatherForecast = new WeatherForecast();
            objNewWeatherForecast.Date = System.DateTime.Now;
            objNewWeatherForecast.Summary = objWeatherForecast.Summary;
            objNewWeatherForecast.TemperatureC =
            Convert.ToInt32(objWeatherForecast.TemperatureC);
            objNewWeatherForecast.TemperatureF =
            Convert.ToInt32(objWeatherForecast.TemperatureF);
            objNewWeatherForecast.UserName = user.Identity.Name;
            // Save the result
            var result =
            @Service.CreateForecastAsync(objNewWeatherForecast);
        }
        else
        {
            // This is an update
            var result =
            @Service.UpdateForecastAsync(objWeatherForecast);
        }
        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(user.Identity.Name);
    }



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simply adds one line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    // This is an update
    var result =  @Service.UpdateForecastAsync(objWeatherForecast);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To the existing method to handle an update rather than an insert.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/64.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we run the application, we now have an &lt;strong&gt;Edit button&lt;/strong&gt; to edit the existing record.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/65.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The existing record will display in the &lt;strong&gt;popup&lt;/strong&gt;, allowing us to &lt;em&gt;edit the data and save it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/66.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The updated record is then displayed in the table.&lt;/p&gt;

&lt;h2 id=&quot;deleting-the-data&quot;&gt;Deleting The Data&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/67c.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;WeatherForecastService.cs&lt;/strong&gt; file and &lt;strong&gt;add&lt;/strong&gt; the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    public Task&amp;lt;bool&amp;gt;
            DeleteForecastAsync(WeatherForecast objWeatherForecast)
    {
        var ExistingWeatherForecast =
            _context.WeatherForecast
            .Where(x =&amp;gt; x.Id == objWeatherForecast.Id)
            .FirstOrDefault();
        if (ExistingWeatherForecast != null)
        {
            _context.WeatherForecast.Remove(ExistingWeatherForecast);
            _context.SaveChanges();
        }
        else
        {
            return Task.FromResult(false);
        }
        return Task.FromResult(true);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/68.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;FetchData.razor&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;Add code markup for a &lt;strong&gt;Delete&lt;/strong&gt; button under the code markup for the current &lt;strong&gt;Save&lt;/strong&gt; button in the &lt;strong&gt;popup&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    &amp;lt;!-- Only show delete button if not a new record --&amp;gt;
        @if (objWeatherForecast.Id &amp;gt; 0)
        {
            &amp;lt;!-- Button to delete the forecast --&amp;gt;
            &amp;lt;button class=&quot;btn btn-primary&quot;
                    @onclick=&quot;DeleteForecast&quot;&amp;gt;
                Delete
            &amp;lt;/button&amp;gt;
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following code to the &lt;em&gt;@code&lt;/em&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    async Task DeleteForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // Delete the forecast
        var result = @Service.DeleteForecastAsync(objWeatherForecast);
        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(user.Identity.Name);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/69.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we run the code and click the &lt;strong&gt;Edit&lt;/strong&gt; button…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/70.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;… we now see a &lt;strong&gt;Delete&lt;/strong&gt; button that will &lt;em&gt;delete&lt;/em&gt; the record.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/71.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, when we click the &lt;strong&gt;Add New Forecast&lt;/strong&gt; button that opens the same &lt;strong&gt;popup&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/72.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The delete button does not display (because there is no record to delete at this point).&lt;/p&gt;

&lt;h2 id=&quot;use-code-behind-method-using-partial-class-support&quot;&gt;Use Code Behind Method Using Partial Class Support&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/73.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can code our &lt;strong&gt;.razor&lt;/strong&gt; pages using an &lt;em&gt;@code&lt;/em&gt; block with &lt;strong&gt;HTML markup&lt;/strong&gt; in a single file, or with the &lt;strong&gt;C#&lt;/strong&gt; code placed in a &lt;em&gt;code-behind&lt;/em&gt; file defined as a &lt;strong&gt;partial class&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Create a new class called &lt;strong&gt;FetchData.razor.cs&lt;/strong&gt; using the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
using EndToEndDB.Data.EndToEnd;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Authorization;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
namespace EndToEnd.Pages
{
    public partial class FetchData
    {
        // AuthenticationState is available as a CascadingParameter
        [CascadingParameter]
        private Task&amp;lt;AuthenticationState&amp;gt; authenticationStateTask { get; set; }
        List&amp;lt;WeatherForecast&amp;gt; forecasts;
        protected override async Task OnInitializedAsync()
        {
            // Get the current user
            var user = (await authenticationStateTask).User;
            // Get the forecasts for the current user
            // We access WeatherForecastService using @Service
            forecasts = await @Service.GetForecastAsync(user.Identity.Name);
        }
        WeatherForecast objWeatherForecast = new WeatherForecast();
        bool ShowPopup = false;
        void ClosePopup()
        {
            // Close the Popup
            ShowPopup = false;
        }
        void AddNewForecast()
        {
            // Make new forecast
            objWeatherForecast = new WeatherForecast();
            // Set Id to 0 so we know it is a new record
            objWeatherForecast.Id = 0;
            // Open the Popup
            ShowPopup = true;
        }
        async Task SaveForecast()
        {
            // Close the Popup
            ShowPopup = false;
            // Get the current user
            var user = (await authenticationStateTask).User;
            // A new forecast will have the Id set to 0
            if (objWeatherForecast.Id == 0)
            {
                // Create new forecast
                WeatherForecast objNewWeatherForecast = new WeatherForecast();
                objNewWeatherForecast.Date = System.DateTime.Now;
                objNewWeatherForecast.Summary = objWeatherForecast.Summary;
                objNewWeatherForecast.TemperatureC =
                Convert.ToInt32(objWeatherForecast.TemperatureC);
                objNewWeatherForecast.TemperatureF =
                Convert.ToInt32(objWeatherForecast.TemperatureF);
                objNewWeatherForecast.UserName = user.Identity.Name;
                // Save the result
                var result =
                @Service.CreateForecastAsync(objNewWeatherForecast);
            }
            else
            {
                // This is an update
                var result =
                @Service.UpdateForecastAsync(objWeatherForecast);
            }
            // Get the forecasts for the current user
            forecasts =
            await @Service.GetForecastAsync(user.Identity.Name);
        }
        void EditForecast(WeatherForecast weatherForecast)
        {
            // Set the selected forecast
            // as the current forecast
            objWeatherForecast = weatherForecast;
            // Open the Popup
            ShowPopup = true;
        }
        async Task DeleteForecast()
        {
            // Close the Popup
            ShowPopup = false;
            // Get the current user
            var user = (await authenticationStateTask).User;
            // Delete the forecast
            var result = @Service.DeleteForecastAsync(objWeatherForecast);
            // Get the forecasts for the current user
            forecasts =
            await @Service.GetForecastAsync(user.Identity.Name);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remove the entire &lt;em&gt;@code&lt;/em&gt; bock from the &lt;strong&gt;FetchData.razor&lt;/strong&gt; page.&lt;/p&gt;

&lt;p&gt;The application will still behave the same.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blazor.net/&quot;&gt;Blazor.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/blazor/?view=aspnetcore-3.0&amp;amp;tabs=visual-studio&quot;&gt;ASP.NET Core Blazor authentication and authorization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools&quot;&gt;EF Core Power Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/issues/5496&quot;&gt;OwningComponentBase (background)&lt;/a&gt;&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Creating A Step-By-Step End-To-End Database Server-Side Blazor Application</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/blazor.png" /></entry></feed>