<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-25T03:00:03+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">Spring Batch Tutorial for Beginners</title><link href="http://localhost:4000/blog/spring-basics-introduction-to-spring-batch" rel="alternate" type="text/html" title="Spring Batch Tutorial for Beginners" /><published>2019-10-23T06:40:00+00:00</published><updated>2019-10-23T06:40:00+00:00</updated><id>http://localhost:4000/blog/springframewok7</id><content type="html" xml:base="http://localhost:4000/blog/spring-basics-introduction-to-spring-batch">&lt;p&gt;Spring Batch is a lightweight, comprehensive batch framework that is designed for use in developing robust batch applications.&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is Spring Batch?&lt;/li&gt;
  &lt;li&gt;How does Spring Batch make building batch programs easier?&lt;/li&gt;
  &lt;li&gt;What are important features of Spring Batch?&lt;/li&gt;
  &lt;li&gt;What are important concepts to understand in Spring Batch?&lt;/li&gt;
  &lt;li&gt;What are the best practices in using Spring Batch?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-spring-batch&quot;&gt;What Is Spring Batch?&lt;/h3&gt;

&lt;p&gt;Spring Batch is a lightweight, comprehensive batch framework that is designed for use in developing robust batch applications.&lt;/p&gt;

&lt;h3 id=&quot;why-is-spring-batch-useful&quot;&gt;Why Is Spring Batch Useful?&lt;/h3&gt;

&lt;p&gt;The requirements of typical batch programs are very similar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Restartability&lt;/strong&gt;: It is normally required to restart a batch program from where it had failed&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Different readers and writers&lt;/strong&gt;: You need the ability to talk to different kinds of data sources and sinks. These include talking to a database, an external messaging service such as JMS, and many others.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Chunk Processing&lt;/strong&gt;:  If for instance there are a million records to be written to storage, it is a practical idea to split it into manageable chunks of 1000 records each, and write these chinks one at a time. Even if one such chink fails, the other operations are not affected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ease Of Transaction Management&lt;/strong&gt;: Transaction management should be simple to implement properly, even when using chunk processing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ease of parallel processing&lt;/strong&gt;: It should be possible to run the batch tasks using parallel processing. For this, it is important that the configuration be simple, so that overhead is minimized.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;understanding-spring-batch&quot;&gt;Understanding Spring Batch&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;Job&lt;/strong&gt; in Spring Batch is nothing but a sequence of &lt;strong&gt;Steps&lt;/strong&gt;. Each Step can be configured before execution, with the following attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;next&lt;/strong&gt;: The next Step to execute&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tasklet&lt;/strong&gt;: The task that needs to be done as part of this Step.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;decision&lt;/strong&gt;: This decides in which situations this Step needs to be run&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-job-instance&quot;&gt;The Job Instance&lt;/h4&gt;

&lt;p&gt;A Job Launcher is used in order to execute a Spring Batch Job. Note the following points about a Job thus created:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each execution of a Job is called a Job Instance. Each Job Instance is provided with a unique execution id, which is useful to restart the job if it fails.&lt;/li&gt;
  &lt;li&gt;A Job can be configured with parameters. These can be passed to it from the Job Launcher.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-spring-batch-works&quot;&gt;How Spring Batch Works&lt;/h4&gt;

&lt;p&gt;A typical Job would look like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-086-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each Job can have multiple Steps, and sometimes it is useful to organize the Steps into Flows. Different flows can usually be run in parallel, and the rest of the steps are run in strict sequential order.&lt;/p&gt;

&lt;p&gt;Spring Batch 3.0 supports JSR-352 - a Java specification for batch processing.&lt;/p&gt;

&lt;h3 id=&quot;best-practices-for-spring-batch&quot;&gt;Best Practices For Spring Batch&lt;/h3&gt;

&lt;p&gt;The following are the recommended practices when using Spring Batch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be careful about exception handling and transaction management. These become the most critical issues with managing batch programs.&lt;/li&gt;
  &lt;li&gt;Deploy your batch programs as near to the data as possible. This improves their performance greatly, and that of the entire enterprise.&lt;/li&gt;
  &lt;li&gt;Allocate enough memory.&lt;/li&gt;
  &lt;li&gt;Stress test the application from the start of the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we had a good look at Spring Batch, a framework for crating robust enterprise-level batch applications. The needs of most enterprise batch applications are fairly the same. Spring Batch implements several best practices in developing batch applications.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Spring Framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-the-spring-framework&quot; target=&quot;_blank&quot;&gt;1 - Introduction To Spring Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-what-is-a-dependency&quot; target=&quot;_blank&quot;&gt;2 - What Is A Dependency?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-dependency-injection-inversion-of-control&quot; target=&quot;_blank&quot;&gt;3 - What Is Dependency Injection?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-and-spring-boot-what-is-component-scan&quot; target=&quot;_blank&quot;&gt;4 - What Is Component Scan?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-architectures-and-modules&quot; target=&quot;_blank&quot;&gt;5 - Architecture of Spring Framework - Modularity and Spring Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-projects-with-examples&quot; target=&quot;_blank&quot;&gt;6 - What Are Spring Projects?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-basics-introduction-to-spring-batch&quot; target=&quot;_blank&quot;&gt;7 - Introduction To Spring Batch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-projects-with-examples&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-basics-introduction-to-spring-batch&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Spring Batch is a lightweight, comprehensive batch framework that is designed for use in developing robust batch applications. You will learn What is Spring Batch? How does Spring Batch make building batch programs easier? What are important features of Spring Batch? What are important concepts to understand in Spring Batch? What are the best practices in using Spring Batch?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry><entry><title type="html">What Are Spring Projects?</title><link href="http://localhost:4000/blog/spring-projects-with-examples" rel="alternate" type="text/html" title="What Are Spring Projects?" /><published>2019-10-23T06:34:00+00:00</published><updated>2019-10-23T06:34:00+00:00</updated><id>http://localhost:4000/blog/springframewok6</id><content type="html" xml:base="http://localhost:4000/blog/spring-projects-with-examples">&lt;p&gt;There are several important Spring Projects solving the needs of enterprises today. What are Spring Projects and how are they different from Spring Modules?&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What are Spring Projects?&lt;/li&gt;
  &lt;li&gt;What are examples of Spring Projects?&lt;/li&gt;
  &lt;li&gt;How are Spring Projects different from Spring Modules?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-are-spring-projects&quot;&gt;What Are Spring Projects?&lt;/h3&gt;

&lt;p&gt;Within the Spring framework, there are a variety of different Spring modules - JDBC, AOP, Beans, Context. All Spring Modules share the same release version as the Spring framework. They are part of the same project.&lt;/p&gt;

&lt;p&gt;Apart from the Spring framework and its various modules, there are other frameworks called Spring Projects. These projects provide solutions to other issues faced by enterprise applications.&lt;/p&gt;

&lt;p&gt;These projects are versioned differently from the Spring framework. For example, the current version of Spring Framework is 5.x.x and that of Spring Boot (one of the Spring Projects) is 2.x.x.&lt;/p&gt;

&lt;h4 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h4&gt;

&lt;p&gt;Spring Boot is one of the most popular framework to develop microservices today. Spring Boot makes it easy to develop applications quickly. It has important features such as starter projects, auto configuration and actuator, it is a cakewalk to develop microservices.&lt;/p&gt;

&lt;h3 id=&quot;spring-cloud&quot;&gt;Spring Cloud&lt;/h3&gt;

&lt;p&gt;World is moving towards the cloud. Everyone wants to deploy their application in the cloud. If you develop a microservice using Spring Boot, you could use Spring Cloud to make it cloud-enabled.&lt;/p&gt;

&lt;h3 id=&quot;spring-data&quot;&gt;Spring Data&lt;/h3&gt;

&lt;p&gt;Spring Data provides a provides mechanisms for consistent data access.&lt;/p&gt;

&lt;p&gt;A few years earlier, there were only one kind of database an application could connect to - the SQL based relational databases.  Today, we also have at our disposal a wide variety of databases including the NoSQL databases.&lt;/p&gt;

&lt;p&gt;Spring Data ensures that the way we access data from all these sources remains consistent.&lt;/p&gt;

&lt;h3 id=&quot;spring-integration&quot;&gt;Spring Integration&lt;/h3&gt;

&lt;p&gt;Spring Integration on the other hand, addresses the issues of application integration.&lt;/p&gt;

&lt;p&gt;Spring Integration provides implementations for recommended architecture patterns in Enterprise Application Integration.&lt;/p&gt;

&lt;h3 id=&quot;spring-batch&quot;&gt;Spring Batch&lt;/h3&gt;

&lt;p&gt;Not all processing is done online, and a lot is also accomplished through batch applications.&lt;/p&gt;

&lt;p&gt;Batch applications have their own unique set of requirements. For instance, it is important to be able to restart a batch job from the point where it had failed earlier. It may also be necessary to track down accurately what is happening in the back ground when a batch job executes.&lt;/p&gt;

&lt;p&gt;Spring Batch provides a great option to develop batch applications.&lt;/p&gt;

&lt;h3 id=&quot;spring-security&quot;&gt;Spring Security&lt;/h3&gt;

&lt;p&gt;Security is one of the most important non functional requirements of an application’s development. Any application that you develop, be it a web application, a REST service or any other, you want it to be secure.&lt;/p&gt;

&lt;p&gt;Spring Security provides features for securing the applications that you develop. It has support for basic authentication, OAuth1 and OAuth2 authentication.&lt;/p&gt;

&lt;h3 id=&quot;spring-hateoas&quot;&gt;Spring HATEOAS&lt;/h3&gt;

&lt;p&gt;With RESTful services, it is not sufficient if you simply return the data for a resource. It is also recommended to return related actions you can perform on the resource. This is called HATEOAS. Spring HATEOAS enables you to develop HATEOAS compatible REST API.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;We have looked at seven of the available Spring projects. This is an evolving space and there are new Spring projects every year to solve emerging enterprise problems.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Spring Framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-the-spring-framework&quot; target=&quot;_blank&quot;&gt;1 - Introduction To Spring Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-what-is-a-dependency&quot; target=&quot;_blank&quot;&gt;2 - What Is A Dependency?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-dependency-injection-inversion-of-control&quot; target=&quot;_blank&quot;&gt;3 - What Is Dependency Injection?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-and-spring-boot-what-is-component-scan&quot; target=&quot;_blank&quot;&gt;4 - What Is Component Scan?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-architectures-and-modules&quot; target=&quot;_blank&quot;&gt;5 - Architecture of Spring Framework - Modularity and Spring Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-projects-with-examples&quot; target=&quot;_blank&quot;&gt;6 - What Are Spring Projects?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-basics-introduction-to-spring-batch&quot; target=&quot;_blank&quot;&gt;7 - Introduction To Spring Batch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-framework-architectures-and-modules&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-basics-introduction-to-spring-batch&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">There are several important Spring Projects solving the needs of enterprises today. What are Spring Projects and how are they different from Spring Modules? You will learn What are Spring Projects? What are examples of Spring Projects? How are Spring Projects different from Spring Modules?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry><entry><title type="html">Spring Framework - What Is Component Scan?</title><link href="http://localhost:4000/blog/spring-and-spring-boot-what-is-component-scan" rel="alternate" type="text/html" title="Spring Framework - What Is Component Scan?" /><published>2019-10-23T06:18:00+00:00</published><updated>2019-10-23T06:18:00+00:00</updated><id>http://localhost:4000/blog/springframewok4</id><content type="html" xml:base="http://localhost:4000/blog/spring-and-spring-boot-what-is-component-scan">&lt;p&gt;Spring framework identifies the beans and their dependencies, creates the beans and injects the dependencies into beans. How does the Spring Framework know where to search for beans and dependencies? How does Spring Boot make component scan easier?&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Why do we need Component Scan in Spring?&lt;/li&gt;
  &lt;li&gt;How can you configure a Component Scan in Spring with XML and Java Annotation based configuration?&lt;/li&gt;
  &lt;li&gt;How does Spring Boot provide an automatic Component Scan?&lt;/li&gt;
  &lt;li&gt;How do you solve problems with Component Scan?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we understand a little bit about component scan in the context of the Spring framework. We also see how component scan works with the Spring Boot framework.&lt;/p&gt;

&lt;h3 id=&quot;functionality-of-the-spring-framework&quot;&gt;Functionality Of The Spring Framework?&lt;/h3&gt;

&lt;p&gt;What is the fundamental functionality of the Spring framework? It is dependency injection.&lt;/p&gt;

&lt;p&gt;Spring framework identifies the beans and their dependencies, finds them and injects the dependencies into beans.&lt;/p&gt;

&lt;p&gt;Have a look at the following example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;privare&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSortAlgorithm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s quickly look at what Spring Framework needs to do get the autowiring working.&lt;/p&gt;

&lt;p&gt;Spring framework needs to create instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;QuickSortAlgorithm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;QuickSortAlgorithm&lt;/code&gt; is the only implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; available, it needs to be auto-wired into the &lt;code class=&quot;highlighter-rouge&quot;&gt;sortAlgorithm&lt;/code&gt; field of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-does-spring-search-for-beans&quot;&gt;How Does Spring Search For Beans?&lt;/h3&gt;

&lt;p&gt;Let’s look at a few questions?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How does Spring know where to look for the beans?&lt;/li&gt;
  &lt;li&gt;How does it know where it needs to search for classes with annotations such as &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Service&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A typical application could have hundreds of JARS, and as a result, thousands of classes. Therefore, it is not practical for Spring to search in all the classes present in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CLASSPATH&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;enter-component-scan&quot;&gt;Enter Component Scan&lt;/h3&gt;

&lt;p&gt;Clearly, Spring needs to be given inputs to identify the packages of the beans and dependencies. This is where component scan comes into the picture.&lt;/p&gt;

&lt;p&gt;You declare a component scan by passing in a list of packages where the scan needs to take place:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basePackages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;com.girishgodage.spring.example1.businessservice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;com.girishgodage.spring.example1.dataservice.stub&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The packages mentioned above are the locations where the beans and their dependencies are defined. This &lt;code class=&quot;highlighter-rouge&quot;&gt;@ComponentScan&lt;/code&gt; gives a clue to the Spring framework on where to search.&lt;/p&gt;

&lt;h3 id=&quot;component-scan-with-xml-configuration&quot;&gt;Component Scan With XML Configuration&lt;/h3&gt;

&lt;p&gt;The thing is, component scan an also be done with XML configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-092-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;context:component-scan&amp;gt;&lt;/code&gt; tag, and specify the packages that are the locations.&lt;/p&gt;

&lt;h3 id=&quot;how-does-auto-configuration-work-with-spring-boot&quot;&gt;How does Auto Configuration work with Spring Boot?&lt;/h3&gt;

&lt;p&gt;Spring Boot tries to automate a lot of stuff. Consider the code example below:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;girishgodage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;basics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springin5steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringIn5StepsApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;girishgodage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;basics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springin5steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringIn5StepsApplicationTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As soon as Spring Boot sees the annotation &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootApplication&lt;/code&gt;, it does an automatic scan on the current package, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;com.girishgodage.spring.basics.springin5steps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You don’t need to explicitly define a component scan. If all the components that you need are present in the same package as &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringIn5StepsApplication&lt;/code&gt;, you don’t need to explicitly specify component scan.&lt;/p&gt;

&lt;h3 id=&quot;troubleshooting-component-scan-in-spring-boot&quot;&gt;Troubleshooting Component Scan In Spring Boot&lt;/h3&gt;

&lt;p&gt;Have a look at the following Spring Boot application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-092-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;SpringbootIn10StepsApplication&lt;/code&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootApplication&lt;/code&gt; annotation attached to it, an automatic component scan in the package &lt;code class=&quot;highlighter-rouge&quot;&gt;com.girishgodage.springboot.basics.springbootin10steps&lt;/code&gt;, and all its sub-packages.&lt;/p&gt;

&lt;p&gt;However, what would happen if you have one of the components defined in a different package, say &lt;code class=&quot;highlighter-rouge&quot;&gt;com.in28mnutes.springboot.somethingelse&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;In this case, you need to add that package to the component scan. There are a couple of options available for doing this.&lt;/p&gt;

&lt;h3 id=&quot;explicit-component-scan-in-spring-boot&quot;&gt;Explicit Component Scan In Spring Boot&lt;/h3&gt;

&lt;p&gt;There are two ways of doing an explicit component scan:&lt;/p&gt;

&lt;h4 id=&quot;scan-a-parent-package&quot;&gt;Scan a parent package&lt;/h4&gt;

&lt;p&gt;This would scan the entire parent package tree of &lt;code class=&quot;highlighter-rouge&quot;&gt;com.girishgodage.springboot&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.girishgodage.springboot&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringBootApllicationIn10Steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;define-explicit-scans&quot;&gt;Define explicit scans&lt;/h4&gt;

&lt;p&gt;In this case, we explicitly mention a list of specific packages within the tree. Therefore, only those two paths in the package tree will now get scanned.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;com.girishgodage.springboot.basics.springbootin10steps&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;com.girishgodage.springboot.somethingelse&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringBootApllicationIn10Steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As soon as you explicitly define a component scan, you are taking complete control. The default automatic scan that generally happens with Spring Boot will not longer take place. You need to specify the default package, as well as other packages.&lt;/p&gt;

&lt;h3 id=&quot;errors-related-to-component-scan&quot;&gt;Errors Related To Component Scan&lt;/h3&gt;

&lt;p&gt;Let’s look at some of the errors related to component scan and how you can solve them.&lt;/p&gt;

&lt;h4 id=&quot;typical-errors&quot;&gt;Typical Errors&lt;/h4&gt;

&lt;p&gt;When the controllers are not scanned, the URLs would not work. You would observe behaviors like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-092-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other kind of error is when Spring does not find the dependencies. A typical error looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-092-05.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means Spring expects at least one bean to auto-wire a dependency, but is not able to locate them.&lt;/p&gt;

&lt;h3 id=&quot;solving-errors-with-component-scan&quot;&gt;Solving Errors With Component Scan&lt;/h3&gt;

&lt;p&gt;Here are some of the things to look fo:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Make sure that you have the right annotation for the concerned bean - &lt;code class=&quot;highlighter-rouge&quot;&gt;@Controller&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Repository&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Make sure that the package that a component is present in, is part of the component scan.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we talked about component scan in the context of Spring and Spring Boot frameworks.The &lt;code class=&quot;highlighter-rouge&quot;&gt;@ComponentScan&lt;/code&gt; annotation is used to specify packages to locate components in Spring. This is automatically done in the default package, in the case of Spring Boot.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Spring Framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-the-spring-framework&quot; target=&quot;_blank&quot;&gt;1 - Introduction To Spring Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-what-is-a-dependency&quot; target=&quot;_blank&quot;&gt;2 - What Is A Dependency?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-dependency-injection-inversion-of-control&quot; target=&quot;_blank&quot;&gt;3 - What Is Dependency Injection?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-and-spring-boot-what-is-component-scan&quot; target=&quot;_blank&quot;&gt;4 - What Is Component Scan?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-architectures-and-modules&quot; target=&quot;_blank&quot;&gt;5 - Architecture of Spring Framework - Modularity and Spring Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-projects-with-examples&quot; target=&quot;_blank&quot;&gt;6 - What Are Spring Projects?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-basics-introduction-to-spring-batch&quot; target=&quot;_blank&quot;&gt;7 - Introduction To Spring Batch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-framework-dependency-injection-inversion-of-control&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-framework-architectures-and-modules&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Spring framework identifies the beans and their dependencies, creates the beans and injects the dependencies into beans. How does the Spring Framework know where to search for beans and dependencies? How does Spring Boot make component scan easier? You will learn Why do we need Component Scan in Spring? How can you configure a Component Scan in Spring with XML and Java Annotation based configuration? How does Spring Boot provide an automatic Component Scan? How do you solve problems with Component Scan?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry><entry><title type="html">Architecture of Spring Framework - Modularity and Spring Modules</title><link href="http://localhost:4000/blog/spring-framework-architectures-and-modules" rel="alternate" type="text/html" title="Architecture of Spring Framework - Modularity and Spring Modules" /><published>2019-10-23T06:18:00+00:00</published><updated>2019-10-23T06:18:00+00:00</updated><id>http://localhost:4000/blog/springframewok5</id><content type="html" xml:base="http://localhost:4000/blog/spring-framework-architectures-and-modules">&lt;p&gt;One of the most important features of the Spring framework is its modularity. It is not one big monolith framework. What is the architecture of Spring Framework? What are Spring Modules? How are they organized?&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is the architecture of Spring Framework?&lt;/li&gt;
  &lt;li&gt;How is Spring Framework Modularized?&lt;/li&gt;
  &lt;li&gt;What are different Spring Modules?&lt;/li&gt;
  &lt;li&gt;Which modules provide which Spring Features like Dependency Injection and Auto wiring?&lt;/li&gt;
  &lt;li&gt;How can you develop applications with multiple layers with Spring?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring-architecture-and-modules&quot;&gt;Spring Architecture and Modules&lt;/h3&gt;

&lt;p&gt;Let’s look at the modules that are present in a typical Spring Project.
&lt;img src=&quot;/images/Capture-095-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is not organized as one big JAR file. It is composed of a large number of smaller JAR files.&lt;/p&gt;

&lt;p&gt;Spring is organized into modules. Here is how Spring is organized conceptually:
&lt;img src=&quot;/images/Capture-095-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;container&quot;&gt;Container&lt;/h3&gt;

&lt;p&gt;This is the most heavily used part of the Spring framework. This includes modules such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Beans: To manage the application dependencies&lt;/li&gt;
  &lt;li&gt;Core&lt;/li&gt;
  &lt;li&gt;Context: To maintain the application context&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;database-access-and-integration&quot;&gt;Database Access And Integration&lt;/h3&gt;

&lt;p&gt;Spring provide excellent options for implementing data and integration layers.&lt;/p&gt;

&lt;p&gt;The important data access modules are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;JDBC&lt;/strong&gt; : To talk to relational database using JDBC&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ORM&lt;/strong&gt; : Provides good integration with all ORM (Object Relational Mapping) frameworks, such as Hibernate and MyBatis.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JMS&lt;/strong&gt; : If you want to talk to another application over a queue, JMS provides an excellent option. Spring has good integration with JMS.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OXM&lt;/strong&gt; : This module provides good integration in scenarios where object to XML mappings are required.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Transactions&lt;/strong&gt; : Transaction management is an important part of data access integration functionality. Ideally, you want the transaction to be fully successful, or completely rolled back. If a transaction has 4 steps and failed at the third step, the previous two successful steps must also be rolled back. Spring has great support for transaction management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;web&quot;&gt;Web&lt;/h3&gt;

&lt;p&gt;Spring has very good support to develop your web layer:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring MVC : It is Spring’s own web framework&lt;/li&gt;
  &lt;li&gt;Struts : Spring provides good integration with Struts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cross-cutting-features&quot;&gt;Cross Cutting Features&lt;/h3&gt;

&lt;p&gt;An application is typically developed in multiple layers. For example, a web application is often designed to have three layers: web, business and data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-095-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are many things that are applicable to more than one layer. Those are called &lt;strong&gt;cross cutting concerns&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h4&gt;

&lt;p&gt;One important cross cutting concern is unit testing. We want to be able to unit test code in all the three layers mentioned above. Spring Test framework provides good support for unit testing.&lt;/p&gt;

&lt;h4 id=&quot;aop&quot;&gt;AOP&lt;/h4&gt;

&lt;p&gt;AOP stands for Aspect oriented programming. This module is useful for implementing features such as security and logging. Spring AOP provides basic AOP features.&lt;/p&gt;

&lt;p&gt;Spring provides good integration with the AspectJ framework to do advanced AOP.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we had a brief look at the modular structure of the Spring framework. It is not a single monolith, but is organized as a set of small modules.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Spring Framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-the-spring-framework&quot; target=&quot;_blank&quot;&gt;1 - Introduction To Spring Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-what-is-a-dependency&quot; target=&quot;_blank&quot;&gt;2 - What Is A Dependency?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-dependency-injection-inversion-of-control&quot; target=&quot;_blank&quot;&gt;3 - What Is Dependency Injection?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-and-spring-boot-what-is-component-scan&quot; target=&quot;_blank&quot;&gt;4 - What Is Component Scan?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-architectures-and-modules&quot; target=&quot;_blank&quot;&gt;5 - Architecture of Spring Framework - Modularity and Spring Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-projects-with-examples&quot; target=&quot;_blank&quot;&gt;6 - What Are Spring Projects?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-basics-introduction-to-spring-batch&quot; target=&quot;_blank&quot;&gt;7 - Introduction To Spring Batch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-and-spring-boot-what-is-component-scan&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-projects-with-examples&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">One of the most important features of the Spring framework is its modularity. It is not one big monolith framework. What is the architecture of Spring Framework? What are Spring Modules? How are they organized? You will learn What is the architecture of Spring Framework? How is Spring Framework Modularized? What are different Spring Modules? Which modules provide which Spring Features like Dependency Injection and Auto wiring? How can you develop applications with multiple layers with Spring?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry><entry><title type="html">Spring Basics - Dependency Injection and Inversion of Control</title><link href="http://localhost:4000/blog/spring-framework-dependency-injection-inversion-of-control" rel="alternate" type="text/html" title="Spring Basics - Dependency Injection and Inversion of Control" /><published>2019-10-23T06:06:00+00:00</published><updated>2019-10-23T06:06:00+00:00</updated><id>http://localhost:4000/blog/springframewok3</id><content type="html" xml:base="http://localhost:4000/blog/spring-framework-dependency-injection-inversion-of-control">&lt;p&gt;Developers starting with the Spring framework often get confused with terminology - Dependency, Dependency Injection and Inversion Of Control. In this article, we introduce you to the concepts of Dependency Injection and Inversion Of Control.&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What Is Dependency Injection?&lt;/li&gt;
  &lt;li&gt;Why do you need Dependency Injection?&lt;/li&gt;
  &lt;li&gt;What Is tight coupling?&lt;/li&gt;
  &lt;li&gt;What Is de-coupling?&lt;/li&gt;
  &lt;li&gt;How does Spring Framework provide Dependency Injection?&lt;/li&gt;
  &lt;li&gt;What Is Inversion Of Control?&lt;/li&gt;
  &lt;li&gt;What are good examples of inversion of control?&lt;/li&gt;
  &lt;li&gt;How does Spring Framework implement Inversion of Control?&lt;/li&gt;
  &lt;li&gt;Why Is Inversion of Control Important and what are its advantages?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-dependency-injection&quot;&gt;What Is Dependency Injection?&lt;/h3&gt;

&lt;p&gt;Dependency injection is the core feature of the Spring Framework.  Dependency injection is a concept that is borrowed from the Dependency Inversion Principle (DIP).&lt;/p&gt;

&lt;h4 id=&quot;tight-coupling&quot;&gt;Tight Coupling&lt;/h4&gt;

&lt;p&gt;Have a look at the following examples of code:&lt;/p&gt;

&lt;h5 id=&quot;example-1&quot;&gt;Example-1&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TodoBusinessService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;TodoDataServiceImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TodoDataServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//... &lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TodoBusinessService&lt;/code&gt; is directly creating an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;TodoDataServiceImpl&lt;/code&gt; within itself.&lt;/p&gt;

&lt;h5 id=&quot;example-2&quot;&gt;Example-2&lt;/h5&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; is meant to perform a lot of complex logic, and one of the things it does is sorting. here, it is directly creating an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt; within itself.&lt;/p&gt;

&lt;p&gt;These two examples highlight code with tight coupling.&lt;/p&gt;

&lt;p&gt;Imagine what you need to do, if you want to change the sort algorithm to quicksort. You need to change the relevant code within &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hence, &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; is tightly coupled to &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt;, a specific sort algorithm.&lt;/p&gt;

&lt;h4 id=&quot;decoupling-complexalgorithmimpl&quot;&gt;Decoupling &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;How do we decouple &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; from the specific sort algorithm?&lt;/p&gt;

&lt;p&gt;We want it to be used with bubble sort, or quick sort, or radix sort, or any other sort. The solution is to make use of an interface.&lt;/p&gt;

&lt;p&gt;Have a look at the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlogrithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSortAlgorithm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlogrithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;decoupling-explained&quot;&gt;Decoupling Explained&lt;/h4&gt;

&lt;p&gt;We have created an interface named &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; that has &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt; method defined. Specific sort algorithms all implement &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; by overriding &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;. Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; makes use of &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; as a dependency by declaring it as a member. However, the actual implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; needs to be passed in as a parameter to its constructor, or a setter method. The user decides which specific sort algorithm &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; gets to use.&lt;/p&gt;

&lt;p&gt;Whichever class wants to make use of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; needs to write code such as this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nc&quot;&gt;CompexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binarySearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other classes may choose to pass in &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; implementations for bubble sort, heap sort or radix sort.&lt;/p&gt;

&lt;h4 id=&quot;inversion-of-control-with-complexalgorithmimpl&quot;&gt;Inversion of Control with &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Look at it from the perspective of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the first approach, it took up the responsibility of selecting the specific sort algorithm. As a result, the specific &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt; was hard-coded.&lt;/p&gt;

&lt;p&gt;In the second approach, the class which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; gets to decide which specific sort algorithm is to be used.&lt;/p&gt;

&lt;p&gt;There is a clear inversion of responsibility taking place. This is also called Inversion of Control or &lt;strong&gt;dependency inversion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Dependency inversion results in &lt;strong&gt;loose coupling&lt;/strong&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; is not tied to a specific sort algorithm.&lt;/p&gt;

&lt;h3 id=&quot;dependency-injection-in-spring&quot;&gt;Dependency Injection In Spring&lt;/h3&gt;

&lt;p&gt;Now where does Spring framework come into picture?&lt;/p&gt;

&lt;p&gt;Lets look at the code below:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nc&quot;&gt;CompexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binarySearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above piece of code, we are manually creating the objects and tying them up with dependencies. In a typical application, we might have thousands of objects. Do you want to write the code for all it manually. How about having a framework that does this for you?&lt;/p&gt;

&lt;p&gt;Let’s consider the following example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When this code is run - Spring creates an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;QuickSortAlgorithm&lt;/code&gt; which implements &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; interface, and wires it into an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This process, where the Spring framework identifies the beans, identifies the dependencies, and populates the dependencies inside the beans is called &lt;strong&gt;dependency injection&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;dependency-inversion-and-dependency-injection&quot;&gt;Dependency Inversion And Dependency Injection&lt;/h4&gt;

&lt;p&gt;So far in this article, we have discussed two important concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dependency Inversion : We create loosely couple code by explicitly declaring dependencies, and introducing interfaces for them.&lt;/li&gt;
  &lt;li&gt;Dependency Injection : The Spring framework identifies beans and dependencies, and wires dependencies inside beans.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we talked about dependency injection. Dependency injection has its roots in a core SOLID principle of object oriented programming, named the Dependency Inversion principle. We saw how dependency inversion transforms tightly couple code into a loosely coupled one. Dependencies are explicitly identified, and classes that use them become flexible.&lt;/p&gt;

&lt;p&gt;Dependency injection is a mechanism based on dependency inversion. The Spring framework identifies beans and dependencies, and autowires the dependencies into beans.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Spring Framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-the-spring-framework&quot; target=&quot;_blank&quot;&gt;1 - Introduction To Spring Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-what-is-a-dependency&quot; target=&quot;_blank&quot;&gt;2 - What Is A Dependency?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-dependency-injection-inversion-of-control&quot; target=&quot;_blank&quot;&gt;3 - What Is Dependency Injection?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-and-spring-boot-what-is-component-scan&quot; target=&quot;_blank&quot;&gt;4 - What Is Component Scan?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-architectures-and-modules&quot; target=&quot;_blank&quot;&gt;5 - Architecture of Spring Framework - Modularity and Spring Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-projects-with-examples&quot; target=&quot;_blank&quot;&gt;6 - What Are Spring Projects?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-basics-introduction-to-spring-batch&quot; target=&quot;_blank&quot;&gt;7 - Introduction To Spring Batch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-framework-what-is-a-dependency&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-and-spring-boot-what-is-component-scan&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Developers starting with the Spring framework often get confused with terminology - Dependency, Dependency Injection and Inversion Of Control. In this article, we introduce you to the concepts of Dependency Injection and Inversion Of Control.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry><entry><title type="html">Spring Basics - What Is A Dependency?</title><link href="http://localhost:4000/blog/spring-framework-what-is-a-dependency" rel="alternate" type="text/html" title="Spring Basics - What Is A Dependency?" /><published>2019-10-23T05:54:00+00:00</published><updated>2019-10-23T05:54:00+00:00</updated><id>http://localhost:4000/blog/springframewok2</id><content type="html" xml:base="http://localhost:4000/blog/spring-framework-what-is-a-dependency">&lt;p&gt;Most important feature of Spring Framework is Dependency Injection. To understand Dependency Injection, you need to understand the concept of a Dependency.&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is a Dependency?&lt;/li&gt;
  &lt;li&gt;How are applications built? How is one layer dependent on another?&lt;/li&gt;
  &lt;li&gt;How is a class dependent on another?&lt;/li&gt;
  &lt;li&gt;How does the Spring Framework do Dependency Injection?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we have a look at what a dependency is in general terms, and then in the context of the Spring framework.&lt;/p&gt;

&lt;h3 id=&quot;dependencies-at-a-high-level&quot;&gt;Dependencies At A High Level&lt;/h3&gt;

&lt;p&gt;We build enterprise applications in multiple layers:
&lt;img src=&quot;/images/Capture-093-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A typical Java application will have three layers in its architecture: web, business and data.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The web layer&lt;/li&gt;
  &lt;li&gt;The business layer&lt;/li&gt;
  &lt;li&gt;The data layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the above scenario:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Web Layer depends on Business Layer. The business layer is a dependency for the web layer.&lt;/li&gt;
  &lt;li&gt;Business layer depends on Data Layer. The data layer is a dependency for the business layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependencies-at-class-level&quot;&gt;Dependencies At Class Level&lt;/h3&gt;

&lt;p&gt;Let’s look at an example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientBOImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implemented&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientBO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;ProductDO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productDO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;ClientDO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientDo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClientProductsSum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cliendId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveChangedProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userEnteredProducts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClientBOImpl&lt;/code&gt; is the business class, and it makes use of two data layer classes - &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductDO&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientDO&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s now have a look at the business logic within ````ClientBOImpl```:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getClientProductsSum()&lt;/code&gt; : This returns the sum of all products for a given client.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;saveChangedProducts()&lt;/code&gt; : When products are modified on the application page, this method is called.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both methods in ClientBOImpl need either &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductDO&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientDO&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductDO&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientDO&lt;/code&gt; are dependencies of ClientBOImpl.&lt;/p&gt;

&lt;h3 id=&quot;inputsoutputs-are-not-dependencies&quot;&gt;Inputs/Outputs Are Not Dependencies&lt;/h3&gt;

&lt;p&gt;If you look at &lt;code class=&quot;highlighter-rouge&quot;&gt;public Amount getClientProductsSum(long clientId)&lt;/code&gt;, clientId is merely an input, not a dependency. Similarly, the total calculated amount returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;getClientProductsSum&lt;/code&gt; is an output, not a dependency.&lt;/p&gt;

&lt;h3 id=&quot;a-few-more-examples-of-dependencies&quot;&gt;A Few More Examples Of Dependencies&lt;/h3&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example-1&lt;/h4&gt;

&lt;p&gt;Have a look at the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;	
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSortAlgorithm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlogrithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; performs a lot of complex logic, and sorting is one of the steps.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; is a dependency of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; is an interface, you can easily change the actual sort algorithm used by &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;, without changing its code.&lt;/p&gt;

&lt;h4 id=&quot;example-2&quot;&gt;Example-2&lt;/h4&gt;

&lt;p&gt;Consider the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.sql.ResultSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonJdbcDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;JdbcTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonRowMapper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RowMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To execute a query on the database, &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonJdbcDao&lt;/code&gt; needs &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTemplate&lt;/code&gt;. Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTemplate&lt;/code&gt; is a dependency of &lt;code class=&quot;highlighter-rouge&quot;&gt;PersonJdbcDao&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at a simple method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//...);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; is the input for this method, and the output returned is of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the above method, we are making use of a dependeny &lt;code class=&quot;highlighter-rouge&quot;&gt;jdbcTemplate&lt;/code&gt; . The inputs and outputs are not dependencies.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we focused on the most important concept in Spring Framework - a dependency.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Spring Framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-the-spring-framework&quot; target=&quot;_blank&quot;&gt;1 - Introduction To Spring Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-what-is-a-dependency&quot; target=&quot;_blank&quot;&gt;2 - What Is A Dependency?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-dependency-injection-inversion-of-control&quot; target=&quot;_blank&quot;&gt;3 - What Is Dependency Injection?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-and-spring-boot-what-is-component-scan&quot; target=&quot;_blank&quot;&gt;4 - What Is Component Scan?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-architectures-and-modules&quot; target=&quot;_blank&quot;&gt;5 - Architecture of Spring Framework - Modularity and Spring Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-projects-with-examples&quot; target=&quot;_blank&quot;&gt;6 - What Are Spring Projects?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-basics-introduction-to-spring-batch&quot; target=&quot;_blank&quot;&gt;7 - Introduction To Spring Batch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/introduction-to-the-spring-framework&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-framework-dependency-injection-inversion-of-control&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Most important feature of Spring Framework is Dependency Injection. To understand Dependency Injection, you need to understand the concept of a Dependency. You will learn What is a Dependency? How are applications built? How is one layer dependent on another? How is a class dependent on another? How does the Spring Framework do Dependency Injection?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry><entry><title type="html">Introduction To Spring Framework - Quick Tutorial For Beginners</title><link href="http://localhost:4000/blog/introduction-to-the-spring-framework" rel="alternate" type="text/html" title="Introduction To Spring Framework - Quick Tutorial For Beginners" /><published>2019-10-23T05:41:00+00:00</published><updated>2019-10-23T05:41:00+00:00</updated><id>http://localhost:4000/blog/springframewok1</id><content type="html" xml:base="http://localhost:4000/blog/introduction-to-the-spring-framework">&lt;p&gt;In this article, we look to get an introduction to what the Spring framework is, and why it is so widely used.&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is Spring Framework?&lt;/li&gt;
  &lt;li&gt;What are the important problems that Spring Framework solves?&lt;/li&gt;
  &lt;li&gt;How does Spring Framework make building enterprise applications easier?&lt;/li&gt;
  &lt;li&gt;What are important features of Spring Framework?&lt;/li&gt;
  &lt;li&gt;What are important concepts to understand in Spring Framework?&lt;/li&gt;
  &lt;li&gt;Why Is The Spring Framework Important?&lt;/li&gt;
  &lt;li&gt;What are the best practices in using Spring Framework?&lt;/li&gt;
  &lt;li&gt;What are Spring Projects?&lt;/li&gt;
  &lt;li&gt;What are Spring Modules?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-spring&quot;&gt;What Is Spring?&lt;/h3&gt;

&lt;p&gt;Here’s the description from the Spring web site:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Spring framework provides comprehensive infrastructural support to develop Java applications.  Spring handles the infrastructure, so you can develop your application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean?&lt;/p&gt;

&lt;p&gt;Let’s look at some of the important features of Spring framework with examples.&lt;/p&gt;

&lt;h3 id=&quot;writing-loosely-coupled-code&quot;&gt;Writing Loosely Coupled Code&lt;/h3&gt;

&lt;p&gt;When we write application code, we don’t want it to be tightly coupled.&lt;/p&gt;

&lt;h4 id=&quot;what-is-tight-coupling&quot;&gt;What Is Tight Coupling?&lt;/h4&gt;

&lt;p&gt;Tightly coupled code could look like the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; is tightly coupled to the &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you need to change the sort algorithm from &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;QuickSortAlgorithm&lt;/code&gt;, then the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; needs to change as well.&lt;/p&gt;

&lt;h4 id=&quot;what-is-loose-coupling&quot;&gt;What Is Loose Coupling?&lt;/h4&gt;

&lt;p&gt;Is there a better way to manage change, than what we see over here?  turns out there is - use an interface named &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSortAlgorithm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; is no longer tightly coupled to any particular sort algorithm.&lt;/p&gt;

&lt;p&gt;Whenever you need to instantiate a &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;, this is how  you proceed:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binarySearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The exact sort algorithm to be used can be passed as an input parameter to the constructor.&lt;/p&gt;

&lt;h4 id=&quot;what-does-the-spring-framework-do&quot;&gt;What does the Spring Framework do?&lt;/h4&gt;

&lt;p&gt;Where does the Spring framework come into the picture?&lt;/p&gt;

&lt;p&gt;Look at the snippet below:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComplexAlgorithmImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;QuickSortAlgorithm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We defined the components and identified their dependencies by using Spring specific annotations.&lt;/p&gt;

&lt;p&gt;We are defining &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; as a spring bean, and &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; as a dependency. We are also providing an implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;QuickSortAlgorithm&lt;/code&gt; as a spring bean.&lt;/p&gt;

&lt;p&gt;When Spring Framework looks at this code, it create a QuickSortAlgorithm bean and injects it into ComplexAlgorithmImpl bean. This is called &lt;strong&gt;Dependency Injection&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;advantages-of-loose-coupling&quot;&gt;Advantages Of Loose Coupling&lt;/h3&gt;

&lt;p&gt;If you want to switch to a new &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt; implementation, then loose coupling makes it very easy to make the change. The code inside &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt; does not need to change at all.&lt;/p&gt;

&lt;p&gt;You need to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt; annotation from &lt;code class=&quot;highlighter-rouge&quot;&gt;QuickSortAlgorithm&lt;/code&gt; and place it at the definition of the new implementation.&lt;/p&gt;

&lt;p&gt;The other thing you are now able to do is write a unit test for &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;, without worrying about the sort logic.&lt;/p&gt;

&lt;p&gt;You can create a stub algorithm that implements &lt;code class=&quot;highlighter-rouge&quot;&gt;SortAlgorithm&lt;/code&gt;, and use that in tests for &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplexAlgorithmImpl&lt;/code&gt;. The test would now focus on the business logic of the component, not its dependencies.&lt;/p&gt;

&lt;h3 id=&quot;another-example-of-loose-coupling&quot;&gt;Another Example Of Loose Coupling&lt;/h3&gt;

&lt;p&gt;Have a look at the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		
		&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/welcome&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieveWelcomeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeController&lt;/code&gt; is directly creating an instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeService&lt;/code&gt;, and so it is tightly coupled to it.&lt;/p&gt;

&lt;p&gt;If you were to use the Spring framework to decouple the two, you do something like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Welcome&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;WelcomeService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/welcome&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieveWelcomeMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;		
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;	

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, Spring auto-wires in the &lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeService&lt;/code&gt; dependency to the &lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeController&lt;/code&gt; component. When writing a unit test for this component, we can use a &lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeService&lt;/code&gt; stub instead of an actual dependency.&lt;/p&gt;

&lt;h3 id=&quot;solving-other-problems-using-spring&quot;&gt;Solving Other Problems Using Spring&lt;/h3&gt;

&lt;p&gt;The Spring framework can be used to solve a host of other problems in Java applications.
Let’s look at a few of them.&lt;/p&gt;

&lt;h4 id=&quot;reducing-duplication-in-code&quot;&gt;Reducing Duplication In Code&lt;/h4&gt;

&lt;p&gt;Spring provides a whole range of modules such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SpringMVC&lt;/li&gt;
  &lt;li&gt;SpringJDBC&lt;/li&gt;
  &lt;li&gt;SpringORM&lt;/li&gt;
  &lt;li&gt;SpringAOP&lt;/li&gt;
  &lt;li&gt;SpringJMS&lt;/li&gt;
  &lt;li&gt;SpringTest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these frameworks make it easy to write your Java code. They bring in a set of abstractions, that reduce boilerplate code.&lt;/p&gt;

&lt;h4 id=&quot;improving-integration-with-other-frameworks&quot;&gt;Improving Integration With Other Frameworks&lt;/h4&gt;

&lt;p&gt;Spring does not try to provide solutions for problems that have already been solved. It provides excellent integration with frameworks such as&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Hibernate for ORM&lt;/li&gt;
  &lt;li&gt;iBatis for object mapping&lt;/li&gt;
  &lt;li&gt;JUnit and Mockito for unit testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-does-the-spring-framework-do-1&quot;&gt;What Does The Spring Framework Do?&lt;/h3&gt;

&lt;p&gt;The Spring framework facilitates the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allows the programmers to focus on the business logic. The key feature is dependency management, and it provides excellent interfacing with external frameworks, by adding layers on top of them.&lt;/li&gt;
  &lt;li&gt;Enables testability, as it enables us to write decoupled code.&lt;/li&gt;
  &lt;li&gt;Allows for inversion of control, through dependency injection. A component is no longer tied to specific dependencies. Instead, the dependency is injected in from outside, during instantiation of the component. The Spring framework takes care of the actual injection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;best-practices-with-spring&quot;&gt;Best Practices With Spring&lt;/h3&gt;

&lt;h4 id=&quot;use-spring-initializr&quot;&gt;Use Spring Initializr&lt;/h4&gt;

&lt;p&gt;Spring Initializr is a Spring project generation tool. Visit the following website - start.spring.io:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-081-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You only need to provide the Group Id, the Artifact Id, and the framework dependencies of the project. After that, you can generate the project and get started with Spring.&lt;/p&gt;

&lt;h4 id=&quot;consider-spring-boot&quot;&gt;Consider Spring Boot&lt;/h4&gt;

&lt;p&gt;Spring Boot makes it very easy to use the Spring framework.&lt;/p&gt;

&lt;h4 id=&quot;write-unit-tests&quot;&gt;Write Unit Tests&lt;/h4&gt;

&lt;p&gt;Always make sure you write great unit tests, because Spring makes it easy for you.&lt;/p&gt;

&lt;h3 id=&quot;challenges-with-spring-framework&quot;&gt;Challenges With Spring Framework&lt;/h3&gt;

&lt;p&gt;Spring is difficult for a starting programmer to understand. However, once you understand it, you cannot stop using it!&lt;/p&gt;

&lt;h3 id=&quot;understand-spring-modules&quot;&gt;Understand Spring Modules&lt;/h3&gt;

&lt;p&gt;Modules in Spring offer specialized functionality which can be used within a Spring application. Popular ones are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SpringMVC&lt;/li&gt;
  &lt;li&gt;SpringJDBC&lt;/li&gt;
  &lt;li&gt;SpringORM&lt;/li&gt;
  &lt;li&gt;SpringAOP&lt;/li&gt;
  &lt;li&gt;SpringJMS&lt;/li&gt;
  &lt;li&gt;SpringTest&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;explore-spring-projects&quot;&gt;Explore Spring Projects&lt;/h3&gt;

&lt;p&gt;There are a wide variety of projects that have been done, under the umbrella of the Spring Framework. Popular ones include Spring Cloud, and Spring Web Services.&lt;/p&gt;

&lt;p&gt;In this article, we had an introductory look at the Spring Framework. We saw that Spring is a Java framework that makes life easy for a programmer. Spring improves the testability of the application code, and also makes it easy to interface it with external frameworks. Spring comes with its own umbrella of projects, and a rich set of modules as well.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;spring-framework&quot;&gt;Spring Framework&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of articles on Spring Framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-the-spring-framework&quot; target=&quot;_blank&quot;&gt;1 - Introduction To Spring Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-what-is-a-dependency&quot; target=&quot;_blank&quot;&gt;2 - What Is A Dependency?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-dependency-injection-inversion-of-control&quot; target=&quot;_blank&quot;&gt;3 - What Is Dependency Injection?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-and-spring-boot-what-is-component-scan&quot; target=&quot;_blank&quot;&gt;4 - What Is Component Scan?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-framework-architectures-and-modules&quot; target=&quot;_blank&quot;&gt;5 - Architecture of Spring Framework - Modularity and Spring Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-projects-with-examples&quot; target=&quot;_blank&quot;&gt;6 - What Are Spring Projects?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/spring-basics-introduction-to-spring-batch&quot; target=&quot;_blank&quot;&gt;7 - Introduction To Spring Batch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/introduction-to-the-spring-framework&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/spring-framework-what-is-a-dependency&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we look to get an introduction to what the Spring framework is, and why it is so widely used. You will learn What is Spring Framework? What are the important problems that Spring Framework solves? How does Spring Framework make building enterprise applications easier? What are important features of Spring Framework? What are important concepts to understand in Spring Framework? Why Is The Spring Framework Important? What are the best practices in using Spring Framework? What are Spring Projects? What are Spring Modules?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry><entry><title type="html">Asynchronous communication with queues and microservices - A perfect combination?</title><link href="http://localhost:4000/blog/asynchronous-communication-with-queues-in-microservices" rel="alternate" type="text/html" title="Asynchronous communication with queues and microservices - A perfect combination?" /><published>2019-10-19T20:17:00+00:00</published><updated>2019-10-19T20:17:00+00:00</updated><id>http://localhost:4000/blog/Microservices23</id><content type="html" xml:base="http://localhost:4000/blog/asynchronous-communication-with-queues-in-microservices">&lt;p&gt;In this article, we throw some light on what asynchronous messaging is all about and discuss why you should consider it for your microservices architectures.&lt;/p&gt;

&lt;h3 id=&quot;what-you-will-learn&quot;&gt;What you will learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is Asynchronous Communication?&lt;/li&gt;
  &lt;li&gt;Why Do We Need Asynchronous Communication?&lt;/li&gt;
  &lt;li&gt;How is Asynchronous Communication implemented?&lt;/li&gt;
  &lt;li&gt;Why should you consider using Asynchronous Communication for your microservices?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-synchronous-communication&quot;&gt;What Is Synchronous Communication?&lt;/h3&gt;

&lt;p&gt;Consider the following example of a microservices architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-046-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have Microservice1 calling Microservice2, which in turn invokes Microservice3. Suppose that Microservice3 offers a simple web service functionality. So Microservice1 can send it a request for data over HTTP, and get back a response containing the requested data.&lt;/p&gt;

&lt;p&gt;The communication that exists between these two microservices is called &lt;strong&gt;synchronous communication&lt;/strong&gt;. Microservice1 sends the request, waits for the data to be returned, and then proceeds.&lt;/p&gt;

&lt;h4 id=&quot;drawbacks-of-synchronous-communication&quot;&gt;Drawbacks Of Synchronous Communication&lt;/h4&gt;

&lt;p&gt;This mode of communication works well when the response arrives almost immediately. However, it puts restrictions on the microservices that are involved. In order that Microservice1 be available, Microservice2 also needs to be available.&lt;/p&gt;

&lt;p&gt;In certain scenarios, synchronous communication might not even be user friendly.&lt;/p&gt;

&lt;p&gt;Let’s say Microservice2 is down. In that case, the user who submitted the request needs to be intimated about it. You don’t always want to do that. In such situations, &lt;strong&gt;asynchronous communication&lt;/strong&gt; provides a better alternative.&lt;/p&gt;

&lt;h3 id=&quot;asynchronous-communication&quot;&gt;Asynchronous Communication&lt;/h3&gt;

&lt;p&gt;Have a look at the following application architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-046-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the picture above, we make use of a ZipkinDistributedTracingServer. Different Microservices send logs that are finally consolidated in the Zipkin Tracing Service. Each microservice puts its tracing information into the RabbitMQ message queue. The server processes messages as and when they come into the queue.&lt;/p&gt;

&lt;p&gt;In this architecture, applications communicate through RabbitMQ. CurrencyCalculationService puts its own tracing information into RabbitMQ, and then forgets about it. It does not worry about the responses coming back to it.&lt;/p&gt;

&lt;p&gt;Now, what would happen if the ZipkinDistributedTracingServer were to go down?&lt;/p&gt;

&lt;p&gt;The services communicating with it would not worry one bit. They would continue sending messages to the queue. When the server comes back up, it resumes processing the messages present in the queue, and saves them to the database.&lt;/p&gt;

&lt;h4 id=&quot;advantages-of-asynchronous-communication&quot;&gt;Advantages Of Asynchronous Communication&lt;/h4&gt;

&lt;p&gt;Let’s look at a few advantages of asynchronous communication:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In a system that involves asynchronous messaging, the server does not need to be up and running, all the time. Messages that are put into the message queue can be processed in batches, at a later time.&lt;/li&gt;
  &lt;li&gt;Instead of a single instance of the tracing server processing the message queue, you could spawn multiple instances to lighten the load.&lt;/li&gt;
  &lt;li&gt;If you use a modern version of a messaging queue, there is a good chance you get to use a replay feature. This helps in re-processing a message that initially threw an error.&lt;/li&gt;
  &lt;li&gt;Asynchronous communication is great for systems that require &lt;strong&gt;eventual consistency&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Great thing is as long as we fix the errors and reprocess the message, the users of services that initiated the requests with errors do not even need to know about them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;limitations-of-asynchronous-communication&quot;&gt;Limitations Of Asynchronous Communication&lt;/h4&gt;

&lt;p&gt;Asynchronous communication cannot be used&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If the processing needs to be real-time - if there is a hard constraint on the response time of a certain request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we had a look at what asynchronous communication is all about, We started with a peek at synchronous communication, and saw that it puts constraints on applications and their availability. Asynchronous communication solves the problem by causing services to enqueue requests into a message queue. A server then processes them independently, often in batches.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;best-practices-with-cloud-and-microservices&quot;&gt;Best Practices with Cloud and Microservices&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of six articles on best practices with cloud and microservices:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/12-factor-app-cloud-native-microservices-best-practices&quot; target=&quot;_blank&quot;&gt;1 - The 12 Factor App - Best Practices In Cloud Native Applications and Microservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-event-driven-architectures-with-microservices&quot; target=&quot;_blank&quot;&gt;2 - Microservices Architectures - Event Driven Approach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/software-best-practices-building-a-vertical-slice&quot; target=&quot;_blank&quot;&gt;3 - Why do you build a Vertical Slice?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/messaging-queues-and-asynchronous-communication-in-microservices&quot; target=&quot;_blank&quot;&gt;4 - Microservice Architecture Best Practices - Messaging Queues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/creating-archetypes-in-microservices-architectures-best-practices&quot; target=&quot;_blank&quot;&gt;5 - Build an Archetype&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/asynchronous-communication-with-queues-in-microservices&quot; target=&quot;_blank&quot;&gt;6 - Asynchronous communication with queues and microservices - A perfect combination?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/creating-archetypes-in-microservices-architectures-best-practices&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/asynchronous-communication-with-queues-in-microservices&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we throw some light on what asynchronous messaging is all about and discuss why you should consider it for your microservices architectures.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry><entry><title type="html">Microservice Best Practice - Build an Archetype</title><link href="http://localhost:4000/blog/creating-archetypes-in-microservices-architectures-best-practices" rel="alternate" type="text/html" title="Microservice Best Practice - Build an Archetype" /><published>2019-10-19T20:17:00+00:00</published><updated>2019-10-19T20:17:00+00:00</updated><id>http://localhost:4000/blog/Microservices22</id><content type="html" xml:base="http://localhost:4000/blog/creating-archetypes-in-microservices-architectures-best-practices">&lt;p&gt;In this article, we focus on learning why creating proper archetypes is important for successful microservices architecture.&lt;/p&gt;

&lt;h1 id=&quot;what-you-will-learn&quot;&gt;What you will learn&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;What is an archetype?&lt;/li&gt;
  &lt;li&gt;Why do you want to build microservices quickly?&lt;/li&gt;
  &lt;li&gt;How does an archetype help?&lt;/li&gt;
  &lt;li&gt;How can you use an archetype?&lt;/li&gt;
  &lt;li&gt;How can you build an archetype of your own?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-do-we-need-archetypes&quot;&gt;Why Do We Need Archetypes?&lt;/h3&gt;

&lt;p&gt;In microservices architectures, we have a number of microservices interacting with each other. And, we keep adding microservices as we evolve.&lt;/p&gt;

&lt;p&gt;A few questions arise:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How do you ensure that the microservices are consistent i.e. similarly built and deployed? This will ensure that a developer moving from one microservice to another will not have a great deal of learning to do!&lt;/li&gt;
  &lt;li&gt;How do you ensure that you are able to setup a new microservice quickly?&lt;/li&gt;
  &lt;li&gt;How do you ensure that the new microservice is consistent with older microservices?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With microservices architectures, while the functionality of each microservice is different, you want a bit of consistency in how they are built and deployed&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Programming Language used&lt;/li&gt;
  &lt;li&gt;Frameworks used&lt;/li&gt;
  &lt;li&gt;The way unit tests are written&lt;/li&gt;
  &lt;li&gt;Deployment and Monitoring processes&lt;/li&gt;
  &lt;li&gt;QA &amp;amp; Automation Testing Approaches&lt;/li&gt;
  &lt;li&gt;Integration with Infrastructure components like Naming Server, API Gateways etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is where the reference architecture for your microservices comes into the picture. Having a good reference architecture ensures that your microservices are uniform.&lt;/p&gt;

&lt;p&gt;How do you ensure that the reference architecture is properly implemented?&lt;/p&gt;

&lt;h3 id=&quot;enter-archetypes&quot;&gt;Enter Archetypes&lt;/h3&gt;

&lt;p&gt;Creating an &lt;strong&gt;archetype&lt;/strong&gt; standardizes the reference architecture. An archetype is a piece of component code that can create the initial setup of microservice, adhering to the reference architecture.&lt;/p&gt;

&lt;p&gt;What would the output of an archetype look like?&lt;/p&gt;

&lt;p&gt;It would consist of an example microservice with&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Framework Integration&lt;/li&gt;
  &lt;li&gt;Configuration of common external components&lt;/li&gt;
  &lt;li&gt;Multiple layer Setup&lt;/li&gt;
  &lt;li&gt;Initial Security Configuration - For Authentication and Authorization&lt;/li&gt;
  &lt;li&gt;Sample Automation Tests for Unit Testing and Integration Testing&lt;/li&gt;
  &lt;li&gt;Infrastructure setup for communication with other microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you generate a component using the archetype, you can focus on adding business features to your microservice.&lt;/p&gt;

&lt;h3 id=&quot;reference-archetype-example&quot;&gt;Reference Archetype Example&lt;/h3&gt;

&lt;p&gt;We have created a reference archetype for a Spring Boot Microservice. Github repo for the project is https://github.com/girishgodage/microservice-reference-archetype.&lt;/p&gt;

&lt;h4 id=&quot;using-the-archetype-to-create-a-new-project&quot;&gt;Using the archetype to create a new project&lt;/h4&gt;

&lt;p&gt;Steps are detailed below:&lt;/p&gt;

&lt;h5 id=&quot;download-or-clone-the-github-repository&quot;&gt;Download or Clone the github repository&lt;/h5&gt;

&lt;p&gt;You can start with cloning the repository - https://github.com/girishgodage/microservice-reference-archetype. Other option is to download the repository as a zip file using this link - https://github.com/girishgodage/microservice-reference-archetype/archive/master.zip&lt;/p&gt;

&lt;h5 id=&quot;install-the-archetype&quot;&gt;Install the archetype&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;cd to the root of the project and run&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;This will install the archetype to your local repository&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[INFO] Installing /girishgodage/git/microservice-archetype/microservice-archetype/target/project-name-archetype-0.0.2-SNAPSHOT.jar to /Users/rangaraokaranam/.m2/repository/com/organization/project/project-name-archetype/0.0.2-SNAPSHOT/project-name-archetype-0.0.2-SNAPSHOT.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;create-a-new-project-using-the-archetype&quot;&gt;Create a new project using the archetype&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new folder on your hard drive. Let’s call it first-project&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Execute the following commands&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd first-project
mvn archetype:generate -DarchetypeCatalog=local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;archetype plugin asks for a groupId and artifactId as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): : 1
Define value for property 'groupId': com.first
Define value for property 'artifactId': first-project
Define value for property 'version' 1.0-SNAPSHOT: : 
Define value for property 'package' com.first: : 
Confirm properties configuration:
groupId: com.first
artifactId: first-project
version: 1.0-SNAPSHOT
package: com.first
 Y: : Y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;When the archetype plugin executes successfully, you should see the message shown below:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[INFO] Project created from Archetype in dir: /girishgodage/git/microservice-archetype/first-project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;verify-the-new-project&quot;&gt;Verify the new project&lt;/h5&gt;

&lt;p&gt;You can do a &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean install&lt;/code&gt; on the new project in first-project to check it everything is good.&lt;/p&gt;

&lt;p&gt;This is a Spring Boot Project with a couple of controllers and unit/integration tests.&lt;/p&gt;

&lt;h3 id=&quot;creating-your-own-reference-archetype&quot;&gt;Creating Your Own Reference Archetype&lt;/h3&gt;

&lt;p&gt;You can also create a reference archetype of your own. The first thing you need to do is to create a reference project - which would serve as the base for creating your archetype.&lt;/p&gt;

&lt;h4 id=&quot;setting-up-reference-project&quot;&gt;Setting up Reference Project&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;We have our reference microservice in the folder microservice-reference. This is a Spring Boot Project with a couple of controllers and unit/integration tests. We use this as the reference project to reverse engineer an archetype.&lt;/li&gt;
  &lt;li&gt;When we create a new project using a maven archetype, the two important inputs are groupId and artifactId. In the reference project we would need to make sure that everything that needs to customized based on these inputs should be using similar values. In the microservice-reference, we use the following as the standard:
    &lt;ul&gt;
      &lt;li&gt;groupId - com.organization.project&lt;/li&gt;
      &lt;li&gt;artifactId - project-name&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You would need to customize the reference-project to meet your needs or you can create a new reference-project.&lt;/li&gt;
  &lt;li&gt;Ensure that you configure the latest version of maven-archetype-plugin in your microservice-reference&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;pluginManagement&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-archetype-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.0.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pluginManagement&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;reverse-engineering-an-archetype-from-microservice-reference&quot;&gt;Reverse Engineering an Archetype from microservice-reference&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;In the command prompt cd to the folder containing this project&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd microservice-reference
mvn archetype:create-from-project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;You will see the following statements in the log&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[INFO] Setting default groupId: com.organization.project
[INFO] Setting default artifactId: project-name
[INFO] Setting default version: 0.0.2-SNAPSHOT
[INFO] Setting default package: com.organization.project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Archetype project is created in microservice-reference/target/generated-sources/archetype&lt;/p&gt;

&lt;h4 id=&quot;copy-the-created-archetype-to-the-microservice-archetype-project&quot;&gt;Copy the created archetype to the microservice-archetype project&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Copy the archetype project created in earlier step to the folder microservice-archetype&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we talked about the need for an archetype in microservices architecture. Archetype serves a starting point for creating new projects and ensure uniformity across microservices. We looked at an example archetype and got an overview of how to create an archetype.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;best-practices-with-cloud-and-microservices&quot;&gt;Best Practices with Cloud and Microservices&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of six articles on best practices with cloud and microservices:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/12-factor-app-cloud-native-microservices-best-practices&quot; target=&quot;_blank&quot;&gt;1 - The 12 Factor App - Best Practices In Cloud Native Applications and Microservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-event-driven-architectures-with-microservices&quot; target=&quot;_blank&quot;&gt;2 - Microservices Architectures - Event Driven Approach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/software-best-practices-building-a-vertical-slice&quot; target=&quot;_blank&quot;&gt;3 - Why do you build a Vertical Slice?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/messaging-queues-and-asynchronous-communication-in-microservices&quot; target=&quot;_blank&quot;&gt;4 - Microservice Architecture Best Practices - Messaging Queues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/creating-archetypes-in-microservices-architectures-best-practices&quot; target=&quot;_blank&quot;&gt;5 - Build an Archetype&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/asynchronous-communication-with-queues-in-microservices&quot; target=&quot;_blank&quot;&gt;6 - Asynchronous communication with queues and microservices - A perfect combination?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/messaging-queues-and-asynchronous-communication-in-microservices&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/asynchronous-communication-with-queues-in-microservices&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we focus on learning why creating proper archetypes is important for successful microservices architecture.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry><entry><title type="html">Microservice Architecture Best Practices - Messaging Queues</title><link href="http://localhost:4000/blog/messaging-queues-and-asynchronous-communication-in-microservices" rel="alternate" type="text/html" title="Microservice Architecture Best Practices - Messaging Queues" /><published>2019-10-19T20:17:00+00:00</published><updated>2019-10-19T20:17:00+00:00</updated><id>http://localhost:4000/blog/Microservices21</id><content type="html" xml:base="http://localhost:4000/blog/messaging-queues-and-asynchronous-communication-in-microservices">&lt;p&gt;In this article, we discuss why queues are needed, and how they form the cornerstone of asynchronous communication in microservices architectures.&lt;/p&gt;

&lt;h1 id=&quot;what-you-will-learn&quot;&gt;What you will learn&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;What is a Queue?&lt;/li&gt;
  &lt;li&gt;What is asynchronous communication or asynchronous messaging?&lt;/li&gt;
  &lt;li&gt;What are the advantages of using Queues in microservices architectures?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-asynchronous-messaging&quot;&gt;Why Asynchronous Messaging?&lt;/h3&gt;

&lt;p&gt;Why is asynchronous messaging important?&lt;/p&gt;

&lt;p&gt;Consider the simple example of an ordering service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-050-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A customer places an order through the OrderService. Let’s say following steps are involved:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It needs to send a request to the StockService&lt;/li&gt;
  &lt;li&gt;Send communication to the user through the EmailService and SMSService&lt;/li&gt;
  &lt;li&gt;Call the PackageService to start delivery&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;option-1--single-component-for-all-processing&quot;&gt;Option 1 : Single Component for all processing&lt;/h3&gt;

&lt;p&gt;One way to design this application would be to have a single component that accomplishes all this functionality. For example, write a Java class which accepts the order, and does the entire processing itself.&lt;/p&gt;

&lt;h3 id=&quot;option-2--introducing-asynchronous-messaging-using-queues&quot;&gt;Option 2 : Introducing Asynchronous Messaging using Queues&lt;/h3&gt;

&lt;p&gt;The other option is to have a queue in-between the receiving OrderService component, and the rest of the components. When the OrderService receives an order, it places the request on the Queue. The rest of the components are independent services, listening on the Queue.&lt;/p&gt;

&lt;p&gt;As soon as an order is placed on the queue:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The StockService processes the order and updates the database&lt;/li&gt;
  &lt;li&gt;The EmailService sends out an email to the customer&lt;/li&gt;
  &lt;li&gt;The SMSService sends out an SMS to the user&lt;/li&gt;
  &lt;li&gt;The PackageService does the required package processing on the item&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;single-component-v-queue&quot;&gt;Single Component v Queue&lt;/h3&gt;

&lt;p&gt;If your business goal is to support a few hundreds or thousands of users, then a simple architecture would be a good choice. The first architecture might be all you need.&lt;/p&gt;

&lt;p&gt;However, when we talk of a large scale e-commerce web application such as Amazon.com, that receives millions of orders in a short time, you need a lot of flexibility. That’s when you go for the second approach, of bringing a queue in.&lt;/p&gt;

&lt;h3 id=&quot;advantages-of-using-a-messaging-queue&quot;&gt;Advantages of Using A Messaging Queue&lt;/h3&gt;

&lt;p&gt;Let’s look at the advantages of using asynchronous communication based on a messaging queue.&lt;/p&gt;

&lt;h4 id=&quot;a-queue-improves-reliability&quot;&gt;A Queue Improves Reliability&lt;/h4&gt;

&lt;p&gt;Let’s say the SMSService is down for a short time.&lt;/p&gt;

&lt;p&gt;In Option 1, since the OrderService directly invokes the SMSService on receiving an order, an SMS cannot be sent out. That might mean canceling the order, as all steps are part of a single transaction. Failure of one of the components would lead to cancellation of the customer request, with a need for him to re-initiate the order - at a later point in time.&lt;/p&gt;

&lt;p&gt;However in the second approach, called &lt;strong&gt;asynchronous&lt;/strong&gt; communication, the order request is placed on the queue. When the SMSService comes back up, it will find the order event and process it. It can then send out the SMS messages for all its pending requests.&lt;/p&gt;

&lt;h4 id=&quot;a-queue-provides-scalability&quot;&gt;A Queue Provides Scalability&lt;/h4&gt;

&lt;p&gt;Suppose on a given day, there is a need to send out 100,000 SMS messages. An option with having asynchronous communication is that you can increase the number of instances of the SMSService. This flexibility in number of instances of the components, improves system scalability.&lt;/p&gt;

&lt;h4 id=&quot;a-queue-improves-testability&quot;&gt;A Queue Improves Testability&lt;/h4&gt;

&lt;p&gt;Each of the components/services are loosely tied, and have independent requirements. It is thus much easier to test each one of them, preferably in isolation.&lt;/p&gt;

&lt;h4 id=&quot;a-queue-improves-maintainability&quot;&gt;A Queue Improves Maintainability&lt;/h4&gt;

&lt;p&gt;A queue also improves system maintainability, as the application is divided into smaller services.&lt;/p&gt;

&lt;h4 id=&quot;a-queue-improves-flexibility&quot;&gt;A Queue Improves Flexibility&lt;/h4&gt;

&lt;p&gt;Not only increase instances of existing services, a queue makes the system flexible to add more services in future. All that you need to do is add a new service listen to events on the queue and consuming them. The new service could be plugged in, with a minimum of down time.&lt;/p&gt;

&lt;h4 id=&quot;popular-message-queues&quot;&gt;Popular Message Queues&lt;/h4&gt;

&lt;p&gt;An extremely popular message queue framework is RabbitMQ.&lt;/p&gt;

&lt;p&gt;Different frameworks use different communication protocols, but the concept underlying all of them is the same. At the core, a queue separates the component that generates the event, from the services that consume the event.&lt;/p&gt;

&lt;p&gt;In general, if you need a system that addresses a very large user base, whose users submit a large number of requests to be processed,  go for queue-based systems.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the fact that there are two types of architectures - synchronous and asynchronous. Synchronous systems have the disadvantage that one component being down, causes loss of service to the entire system. Asynchronous systems solve this problem by introducing an intermediary queue to hold events. An architecture based on asynchronous communication using a queue improves testability, scalability, maintainability and flexibility.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;best-practices-with-cloud-and-microservices&quot;&gt;Best Practices with Cloud and Microservices&lt;/h3&gt;

&lt;p&gt;This is the first article in a series of six articles on best practices with cloud and microservices:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/12-factor-app-cloud-native-microservices-best-practices&quot; target=&quot;_blank&quot;&gt;1 - The 12 Factor App - Best Practices In Cloud Native Applications and Microservices&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/introduction-to-event-driven-architectures-with-microservices&quot; target=&quot;_blank&quot;&gt;2 - Microservices Architectures - Event Driven Approach&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/software-best-practices-building-a-vertical-slice&quot; target=&quot;_blank&quot;&gt;3 - Why do you build a Vertical Slice?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/messaging-queues-and-asynchronous-communication-in-microservices&quot; target=&quot;_blank&quot;&gt;4 - Microservice Architecture Best Practices - Messaging Queues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/creating-archetypes-in-microservices-architectures-best-practices&quot; target=&quot;_blank&quot;&gt;5 - Build an Archetype&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/asynchronous-communication-with-queues-in-microservices&quot; target=&quot;_blank&quot;&gt;6 - Asynchronous communication with queues and microservices - A perfect combination?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/software-best-practices-building-a-vertical-slice&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/creating-archetypes-in-microservices-architectures-best-practices&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we discuss why queues are needed, and how they form the cornerstone of asynchronous communication in microservices architectures.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/microservices.png" /></entry></feed>