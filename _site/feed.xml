<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-10-07T08:59:49+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">Create user flows in Azure Active Directory B2C</title><link href="http://localhost:4000/blog/azure-acticedirectoryB2C_CreateUserFlow" rel="alternate" type="text/html" title="Create user flows in Azure Active Directory B2C" /><published>2020-03-12T12:41:00+00:00</published><updated>2020-03-12T12:41:00+00:00</updated><id>http://localhost:4000/blog/azure-activedirectoryB2C_CreateUserFlow</id><content type="html" xml:base="http://localhost:4000/blog/azure-acticedirectoryB2C_CreateUserFlow">&lt;blockquote&gt;
  &lt;h2 id=&quot;create-user-flows-in-azure-active-directory-b2c&quot;&gt;Create user flows in Azure Active Directory B2C&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;In your applications you may have user flows that enable users to sign up, sign in, or manage their profile. You can create multiple user flows of different types in your Azure Active Directory B2C (Azure AD B2C) tenant and use them in your applications as needed. User flows can be reused across applications.&lt;/p&gt;

&lt;p&gt;In this article, you learn how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a sign-up and sign-in user flow&lt;/li&gt;
  &lt;li&gt;Create a profile editing user flow&lt;/li&gt;
  &lt;li&gt;Create a password reset user flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial shows you how to create some recommended user flows by using the Azure portal.&lt;/p&gt;

&lt;p&gt;If you don’t have an Azure subscription, create a &lt;a href=&quot;https://azure.microsoft.com/free/?WT.mc_id=A261C142F&quot;&gt;free account&lt;/a&gt; before you begin.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;If you haven’t already created your own &lt;a href=&quot;azure-activedirectoryB2C_CreateTenant&quot;&gt;Azure AD B2C Tenant&lt;/a&gt;, create one now. You can use an existing Azure AD B2C tenant.&lt;/p&gt;

&lt;h2 id=&quot;create-a-sign-up-and-sign-in-user-flow&quot;&gt;Create a sign-up and sign-in user flow&lt;/h2&gt;

&lt;p&gt;The sign-up and sign-in user flow handles both sign-up and sign-in experiences with a single configuration. Users of your application are led down the right path depending on the context.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign in to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the &lt;strong&gt;Directory + Subscription&lt;/strong&gt; icon in the portal toolbar, and then select the directory that contains your Azure AD B2C tenant.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/directory-subscription-pane.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the Azure portal, search for and select &lt;strong&gt;Azure AD B2C&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Policies&lt;/strong&gt;, select &lt;strong&gt;User flows&lt;/strong&gt;, and then select &lt;strong&gt;New user flow&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/signup-signin-user-flow.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the Create a user flow page, select the Sign up and sign in user flow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/select-user-flow-type.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.Under Select a version, select Recommended, and then select Create.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/select-version.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for the user flow. For example, signupsignin1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For &lt;strong&gt;Identity providers&lt;/strong&gt;, select &lt;strong&gt;Email signup&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For User &lt;strong&gt;attributes and claims&lt;/strong&gt;, choose the claims and attributes that you want to collect and send from the user during sign-up. For example, select &lt;strong&gt;Show more&lt;/strong&gt;, and then choose attributes and claims for &lt;strong&gt;Country/Region, Display Name, and Postal Code&lt;/strong&gt;. Click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/signup-signin-attributes.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click &lt;strong&gt;Create&lt;/strong&gt; to add the user flow. A prefix of B2C_1 is automatically prepended to the name.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;test-the-user-flow&quot;&gt;Test the user flow&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Select the user flow you created to open its overview page, then select &lt;strong&gt;Run user flow&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For &lt;strong&gt;Application&lt;/strong&gt;, select the web application named webapp1 that you previously registered. The &lt;strong&gt;Reply URL&lt;/strong&gt; should show https://jwt.ms.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click &lt;strong&gt;Run user flow&lt;/strong&gt;, and then &lt;strong&gt;select Sign up now&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/6/signup-signin-run-now.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Enter a valid email address, click Send &lt;strong&gt;verification code&lt;/strong&gt;, enter the verification code that you receive, then select &lt;strong&gt;Verify code&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter a new password and confirm the password.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select your country and region, enter the name that you want displayed, enter a postal code, and then click &lt;strong&gt;Create&lt;/strong&gt;. The token is returned to https://jwt.ms and should be displayed to you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can now run the user flow again and you should be able to sign in with the account that you created. The returned token includes the claims that you selected of country/region, name, and postal code&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-profile-editing-user-flow&quot;&gt;Create a profile editing user flow&lt;/h2&gt;

&lt;p&gt;If you want to enable users to edit their profile in your application, you use a profile editing user flow.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the menu of the Azure AD B2C tenant overview page, select &lt;strong&gt;User flows&lt;/strong&gt;, and then select &lt;strong&gt;New user flow&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;On the &lt;strong&gt;Create a user flow&lt;/strong&gt; page, select the &lt;strong&gt;Profile editing&lt;/strong&gt; user flow.&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Select a version&lt;/strong&gt;, select &lt;strong&gt;Recommended&lt;/strong&gt;, and then select &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for the user flow. For example, profileediting1.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Identity providers&lt;/strong&gt;, select &lt;strong&gt;Local Account SignIn&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;User attributes&lt;/strong&gt;, choose the attributes that you want the customer to be able to edit in their profile. For example, select &lt;strong&gt;Show more&lt;/strong&gt;, and then choose both &lt;strong&gt;attributes and claims for Display name and Job title&lt;/strong&gt;. Click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Create&lt;/strong&gt; to add the user flow. A prefix of B2C_1 is automatically appended to the name.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;test-the-user-flow-1&quot;&gt;Test the user flow&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Select the user flow you created to open its overview page, then select &lt;strong&gt;Run user flow&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Application&lt;/strong&gt;, select the web application named webapp1 that you previously registered. The &lt;strong&gt;Reply URL&lt;/strong&gt; should show https://jwt.ms.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Run user flow&lt;/strong&gt;, and then sign in with the account that you previously created.&lt;/li&gt;
  &lt;li&gt;You now have the opportunity to change the display name and job title for the user. Click &lt;strong&gt;Continue&lt;/strong&gt;. The token is returned to https://jwt.ms and should be displayed to you.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-a-password-reset-user-flow&quot;&gt;Create a password reset user flow&lt;/h2&gt;

&lt;p&gt;To enable users of your application to reset their password, you use a password reset user flow.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the Azure AD B2C tenant overview menu, select &lt;strong&gt;User flows&lt;/strong&gt;, and then select &lt;strong&gt;New user flow&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;On the &lt;strong&gt;Create a user flow&lt;/strong&gt; page, select the &lt;strong&gt;Password reset&lt;/strong&gt; user flow.&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Select&lt;/strong&gt; a version, select &lt;strong&gt;Recommended&lt;/strong&gt;, and then select &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for the user flow. For example, passwordreset1.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Identity providers&lt;/strong&gt;, enable &lt;strong&gt;Reset password using email address&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Application claims&lt;/strong&gt;, click &lt;strong&gt;Show more&lt;/strong&gt; and choose the claims that you want returned in the authorization tokens sent back to your application. For example, select User’s Object ID.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Create&lt;/strong&gt; to add the user flow. A prefix of B2C_1 is automatically appended to the name.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;test-the-user-flow-2&quot;&gt;Test the user flow&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Select the user flow you created to open its overview page, then select &lt;strong&gt;Run user flow&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;For &lt;strong&gt;Application&lt;/strong&gt;, select the web application named webapp1 that you previously registered. The &lt;strong&gt;Reply URL&lt;/strong&gt; should show https://jwt.ms.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Run user flow&lt;/strong&gt;, verify the email address of the account that you previously created, and select &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;You now have the opportunity to change the password for the user. Change the password and select &lt;strong&gt;Continue&lt;/strong&gt;. The token is returned to https://jwt.ms and should be displayed to you.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;In this article, you learned how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a sign-up and sign-in user flow&lt;/li&gt;
  &lt;li&gt;Create a profile editing user flow&lt;/li&gt;
  &lt;li&gt;Create a password reset user flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, learn about adding identity providers to your applications to enable user sign-in with providers like Azure AD, Amazon, Facebook, GitHub, LinkedIn, Microsoft, or Twitter.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Create user flows in Azure Active Directory B2C</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/azureAD.png" /></entry><entry><title type="html">Register a web application in Azure Active Directory B2C</title><link href="http://localhost:4000/blog/azure-acticedirectoryB2C_RegisterApp" rel="alternate" type="text/html" title="Register a web application in Azure Active Directory B2C" /><published>2020-03-12T12:41:00+00:00</published><updated>2020-03-12T12:41:00+00:00</updated><id>http://localhost:4000/blog/azure-activedirectoryB2C_RegisterApp</id><content type="html" xml:base="http://localhost:4000/blog/azure-acticedirectoryB2C_RegisterApp">&lt;blockquote&gt;
  &lt;h2 id=&quot;register-a-web-application-in-azure-active-directory-b2c&quot;&gt;Register a web application in Azure Active Directory B2C&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before your applications can interact with Azure Active Directory B2C (Azure AD B2C), they must be registered in a tenant that you manage. This tutorial shows you how to register a web application using the Azure portal.&lt;/p&gt;

&lt;p&gt;In this article, you learn how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Register a web application&lt;/li&gt;
  &lt;li&gt;Create a client secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re using a native app instead (e.g. iOS, Android, mobile &amp;amp; desktop), learn how to register a native client application.&lt;/p&gt;

&lt;p&gt;If you don’t have an Azure subscription, create a &lt;a href=&quot;https://azure.microsoft.com/free/?WT.mc_id=A261C142F&quot;&gt;free account&lt;/a&gt; before you begin.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;If you haven’t already created your own &lt;a href=&quot;azure-activedirectoryB2C_CreateTenant&quot;&gt;Azure AD B2C Tenant&lt;/a&gt;, create one now. You can use an existing Azure AD B2C tenant.&lt;/p&gt;

&lt;h2 id=&quot;register-a-web-application&quot;&gt;Register a web application&lt;/h2&gt;

&lt;p&gt;To register an application in your Azure AD B2C tenant, you can use new unified App registrations experience&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign in to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the &lt;strong&gt;Directory + Subscription&lt;/strong&gt; icon in the portal toolbar, and then select the directory that contains your Azure AD B2C tenant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Azure portal, search for and select &lt;strong&gt;Azure AD B2C&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;App registrations&lt;/strong&gt;, and then select &lt;strong&gt;New registration&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for the application. For example, webapp1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Supported account types&lt;/strong&gt;, select &lt;strong&gt;Accounts in any organizational directory or any identity provider. For authenticating users with Azure AD B2C.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Redirect URI&lt;/strong&gt;, select &lt;strong&gt;Web&lt;/strong&gt;, and then enter https://jwt.ms in the URL text box.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The redirect URI is the endpoint to which the user is sent by the authorization server (Azure AD B2C, in this case) after completing its interaction with the user, and to which an access token or authorization code is sent upon successful authorization. In a production application, it’s typically a publicly accessible endpoint where your app is running, like https://contoso.com/auth-response. For testing purposes like this tutorial, you can set it to https://jwt.ms, a Microsoft-owned web application that displays the decoded contents of a token (the contents of the token never leave your browser). During app development, &lt;strong&gt;you might add the endpoint where your application listens locally, like https://localhost:5000&lt;/strong&gt;. You can add and modify redirect URIs in your registered applications at any time.&lt;/p&gt;

&lt;p&gt;The following restrictions apply to redirect URIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The reply URL must begin with the scheme https.&lt;/li&gt;
  &lt;li&gt;The reply URL is case-sensitive. Its case must match the case of the URL path of your running application. For example, if your application includes as part of its path …/abc/response-oidc, do not specify …/ABC/response-oidc in the reply URL. Because the web browser treats paths as case-sensitive, cookies associated with …/abc/response-oidc may be excluded if redirected to the case-mismatched …/ABC/response-oidc URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Under Permissions, select the Grant admin consent to openid and offline_access permissions check box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select Register.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the application registration is complete, enable the implicit grant flow:&lt;/p&gt;

&lt;h2 id=&quot;create-a-client-secret&quot;&gt;Create a client secret&lt;/h2&gt;

&lt;p&gt;If your application exchanges an authorization code for an access token, you need to create an application secret.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the &lt;strong&gt;Azure AD B2C - App registrations&lt;/strong&gt; page, select the application you created, for example webapp1.&lt;/li&gt;
  &lt;li&gt;In the left menu, under &lt;strong&gt;Manage&lt;/strong&gt;, select &lt;strong&gt;Certificates &amp;amp; secrets&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;New client secret&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Enter a description for the client secret in the &lt;strong&gt;Description&lt;/strong&gt; box. For example, clientsecret1.&lt;/li&gt;
  &lt;li&gt;Under &lt;strong&gt;Expires&lt;/strong&gt;, select a duration for which the secret is valid, and then select &lt;strong&gt;Add&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Record the secret’s &lt;strong&gt;Value&lt;/strong&gt;. You use this value as the application secret in your application’s code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;In this article, you learned how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Register a web application&lt;/li&gt;
  &lt;li&gt;Create a client secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, learn how to &lt;a href=&quot;azure-acticedirectoryB2C_CreateUserFlow&quot;&gt;create user flows&lt;/a&gt; to enable your users to sign up, sign in, and manage their profiles.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Register a web application in Azure Active Directory B2C</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/azureAD.png" /></entry><entry><title type="html">Create an Azure AD B2C tenant</title><link href="http://localhost:4000/blog/azure-acticedirectoryB2C_CreateTenant" rel="alternate" type="text/html" title="Create an Azure AD B2C tenant" /><published>2020-03-12T10:41:00+00:00</published><updated>2020-03-12T10:41:00+00:00</updated><id>http://localhost:4000/blog/azure-activedirectoryB2C_CreateTenant</id><content type="html" xml:base="http://localhost:4000/blog/azure-acticedirectoryB2C_CreateTenant">&lt;blockquote&gt;
  &lt;h2 id=&quot;create-an-azure-ad-b2c-tenant&quot;&gt;Create an Azure AD B2C tenant&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before your applications can interact with Azure Active Directory B2C (Azure AD B2C), &lt;strong&gt;they must be registered in a tenant that you manage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this article, you learn how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create an Azure AD B2C tenant&lt;/li&gt;
  &lt;li&gt;Link your tenant to your subscription&lt;/li&gt;
  &lt;li&gt;Switch to the directory containing your Azure AD B2C tenant&lt;/li&gt;
  &lt;li&gt;Add the Azure AD B2C resource as a Favorite in the Azure portal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;If you don’t have an Azure subscription, create a &lt;a href=&quot;https://azure.microsoft.com/free/?WT.mc_id=A261C142F&quot;&gt;free account&lt;/a&gt; before you begin.&lt;/p&gt;

&lt;h2 id=&quot;create-an-azure-ad-b2c-tenant-1&quot;&gt;Create an Azure AD B2C tenant&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign in to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;. Sign in with an Azure account that’s been assigned at least the &lt;a href=&quot;https://docs.microsoft.com/en-in/azure/role-based-access-control/built-in-roles&quot;&gt;Contributor&lt;/a&gt; role within the subscription or a resource group within the subscription.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the directory that contains your subscription.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the Azure portal toolbar, select the Directory + Subscription icon, and then select the directory that contains your subscription. This directory is different from the one that will contain your Azure AD B2C tenant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/portal-01-pick-directory.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;On the Azure portal menu or from the &lt;strong&gt;Home&lt;/strong&gt; page, select &lt;strong&gt;Create a resource&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search for &lt;strong&gt;Azure Active Directory B2C&lt;/strong&gt;, and then select &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Create a new Azure AD B2C Tenant&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/portal-02-create-tenant.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the &lt;strong&gt;Create a directory&lt;/strong&gt; page, enter the following:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Organization name&lt;/strong&gt; - Enter a name for your Azure AD B2C tenant.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Initial domain name&lt;/strong&gt; - Enter a domain name for your Azure AD B2C tenant.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Country or region&lt;/strong&gt; - Select your country or region from the list. This selection can’t be changed later.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subscription&lt;/strong&gt; - Select your subscription from the list.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Resource group&lt;/strong&gt; - Select a resource group that will contain the tenant. Or select &lt;strong&gt;Create new&lt;/strong&gt;, enter a &lt;strong&gt;Name&lt;/strong&gt; for the resource group, select the &lt;strong&gt;Resource group location&lt;/strong&gt;, and then select &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/review-and-create-tenant.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Review + create&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Review your directory settings. Then select &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can link multiple Azure AD B2C tenants to a single Azure subscription for billing purposes. To link a tenant, you must be an admin in the Azure AD B2C tenant and be assigned at least a Contributor role within the Azure subscription.&lt;/p&gt;

&lt;h2 id=&quot;select-your-b2c-tenant-directory&quot;&gt;Select your B2C tenant directory&lt;/h2&gt;

&lt;p&gt;To start using your new Azure AD B2C tenant, you need to switch to the directory that contains the tenant.&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;Directory + subscription&lt;/strong&gt; filter in the top menu of the Azure portal, then select the directory that contains your Azure AD B2C tenant.&lt;/p&gt;

&lt;p&gt;If at first you don’t see your new Azure B2C tenant in the list, refresh your browser window, then select the &lt;strong&gt;Directory + subscription&lt;/strong&gt; filter again in the top menu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/portal-07-select-tenant-directory.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-azure-ad-b2c-as-a-favorite-optional&quot;&gt;Add Azure AD B2C as a favorite (optional)&lt;/h2&gt;

&lt;p&gt;This optional step makes it easier to select your Azure AD B2C tenant in the following and all subsequent tutorials.&lt;/p&gt;

&lt;p&gt;Instead of searching for Azure AD B2C in &lt;strong&gt;All services&lt;/strong&gt; every time you want to work with your tenant, you can instead favorite the resource. Then, you can select it from the portal menu’s &lt;strong&gt;Favorites&lt;/strong&gt; section to quickly browse to your Azure AD B2C tenant.&lt;/p&gt;

&lt;p&gt;You only need to perform this operation once. Before performing these steps, make sure you’ve switched to the directory containing your Azure AD B2C tenant as described in the previous section, &lt;a href=&quot;azure-acticedirectoryB2C_CreateTenant#select-your-b2c-tenant-directory&quot;&gt;Select your B2C tenant directory&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sign in to the &lt;a href=&quot;https://portal.azure.com/&quot;&gt;Azure portal&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Azure portal menu, select &lt;strong&gt;All services&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;strong&gt;All services&lt;/strong&gt; search box, search for Azure AD B2C, hover over the search result, and then select the star icon in the tooltip. Azure AD B2C now appears in the Azure portal under Favorites.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to change the position of your new favorite, go to the Azure portal menu, select Azure AD B2C, and then drag it up or down to the desired position.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/4/portal-08-b2c-favorite.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;In this article, you learned how to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create an Azure AD B2C tenant&lt;/li&gt;
  &lt;li&gt;Link your tenant to your subscription&lt;/li&gt;
  &lt;li&gt;Switch to the directory containing your Azure AD B2C tenant&lt;/li&gt;
  &lt;li&gt;Add the Azure AD B2C resource as a Favorite in the Azure portal&lt;/li&gt;
  &lt;li&gt;Next, learn &lt;a href=&quot;azure-acticedirectoryB2C_RegisterApp&quot;&gt;how to register a web application&lt;/a&gt; in your new tenant.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Create an Azure AD B2C tenant</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/azureAD.png" /></entry><entry><title type="html">Azure Active Directory B2C</title><link href="http://localhost:4000/blog/azure-acticedirectoryB2C" rel="alternate" type="text/html" title="Azure Active Directory B2C" /><published>2020-03-10T10:41:00+00:00</published><updated>2020-03-10T10:41:00+00:00</updated><id>http://localhost:4000/blog/azure-activedirectoryB2C</id><content type="html" xml:base="http://localhost:4000/blog/azure-acticedirectoryB2C">&lt;blockquote&gt;
  &lt;h2 id=&quot;what-is-azure-active-directory-b2c&quot;&gt;What is Azure Active Directory B2C?&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Azure Active Directory B2C&lt;/strong&gt; provides business-to-customer &lt;strong&gt;identity as a service&lt;/strong&gt;. Your customers use their preferred social, enterprise, or local account identities to get single sign-on access to your applications and APIs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/azureadb2c-overview.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Azure Active Directory B2C (Azure AD B2C)&lt;/strong&gt; is a customer identity access management (CIAM) solution capable of &lt;strong&gt;supporting millions of users and billions of authentications per day&lt;/strong&gt;. 
It takes care of the &lt;strong&gt;scaling&lt;/strong&gt; and &lt;strong&gt;safety&lt;/strong&gt; of the &lt;em&gt;authentication platform&lt;/em&gt;, monitoring and automatically handling threats like &lt;strong&gt;denial-of-service, password spray, or brute force attacks&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;custom-branded-identity-solution&quot;&gt;Custom-branded identity solution&lt;/h2&gt;

&lt;p&gt;Azure AD B2C is a &lt;strong&gt;white-label authentication solution&lt;/strong&gt;. You can customize the entire user experience with your brand so that it blends seamlessly with your web and mobile applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customize every page displayed by Azure AD B2C when your users sign up, sign in, and modify their profile information&lt;/strong&gt;. Customize the &lt;strong&gt;HTML, CSS, and JavaScript&lt;/strong&gt; in your user journeys so that the Azure AD B2C experience &lt;strong&gt;looks and feels like it’s a native part of your application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/sign-in-small.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;single-sign-on-access-with-a-user-provided-identity&quot;&gt;Single sign-on access with a user-provided identity&lt;/h2&gt;

&lt;p&gt;Azure AD B2C uses standards-based authentication protocols including &lt;strong&gt;OpenID Connect, OAuth 2.0, and SAML&lt;/strong&gt;. It integrates with most modern applications and commercial off-the-shelf software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/scenario-singlesignon.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By serving as the &lt;strong&gt;central authentication authority&lt;/strong&gt; for your &lt;strong&gt;&lt;em&gt;web applications, mobile apps, and API&lt;/em&gt;&lt;/strong&gt;s, Azure AD B2C enables you to build a single &lt;strong&gt;sign-on (SSO) solution&lt;/strong&gt; for them all. Centralize the collection of &lt;strong&gt;user profile and preference information&lt;/strong&gt;, and &lt;em&gt;capture detailed analytics&lt;/em&gt; about &lt;strong&gt;sign-in behavior&lt;/strong&gt; and &lt;strong&gt;sign-up conversion&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;integrate-with-external-user-stores&quot;&gt;Integrate with external user stores&lt;/h2&gt;

&lt;p&gt;Azure AD B2C provides a directory that &lt;strong&gt;can hold 100 custom attributes per user&lt;/strong&gt;. However, you can also &lt;strong&gt;integrate with external systems&lt;/strong&gt;. For example, use Azure AD B2C for &lt;strong&gt;authentication&lt;/strong&gt;, but delegate to an external &lt;strong&gt;customer relationship management (CRM) ** or **customer loyalty database&lt;/strong&gt; as the source of truth for customer data.&lt;/p&gt;

&lt;p&gt;Another external user store scenario is to have Azure AD B2C handle the authentication for your application, but &lt;strong&gt;integrate with an external system that stores user profile or personal data&lt;/strong&gt;. For example, to satisfy data residency requirements like &lt;strong&gt;regional or on-premises data&lt;/strong&gt; storage policies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/scenario-remoteprofile.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Azure AD B2C can facilitate &lt;strong&gt;collecting the information from the user during registration or profile editing&lt;/strong&gt;, then &lt;em&gt;hand that data off to the external system&lt;/em&gt;. Then, during future &lt;strong&gt;authentications&lt;/strong&gt;, Azure AD B2C can retrieve the data from the external system and, if needed, include it as a part of the authentication token response it sends to your application.&lt;/p&gt;

&lt;h2 id=&quot;progressive-profiling&quot;&gt;Progressive profiling&lt;/h2&gt;

&lt;p&gt;Another user journey option includes &lt;strong&gt;progressive profiling&lt;/strong&gt;. Progressive profiling allows your &lt;strong&gt;customers to quickly complete their first transaction by collecting a minimal amount of information&lt;/strong&gt;. Then, gradually collect more profile data from the customer on future sign-ins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/scenario-progressive.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;third-party-identity-verification-and-proofing&quot;&gt;Third-party identity verification and proofing&lt;/h2&gt;

&lt;p&gt;Use Azure AD B2C to facilitate &lt;em&gt;identity verification and proofing by collecting user data, then passing it to a third party system to perform validation, trust scoring, and approval for user account creation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/scenario-idproofing.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are just some of the things you can do with Azure AD B2C as your business-to-customer identity platform.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;technical-and-feature-overview-of-azure-active-directory-b2c&quot;&gt;Technical and feature overview of Azure Active Directory B2C&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are the &lt;strong&gt;primary resources&lt;/strong&gt; you work with in the service, its features, and how these enable you to provide a fully custom identity experience for your customers in your applications.&lt;/p&gt;

&lt;h2 id=&quot;azure-ad-b2c-tenant&quot;&gt;Azure AD B2C tenant&lt;/h2&gt;

&lt;p&gt;In Azure Active Directory B2C (Azure AD B2C), &lt;strong&gt;a tenant&lt;/strong&gt; represents &lt;strong&gt;your organization&lt;/strong&gt; and is a &lt;strong&gt;directory of users&lt;/strong&gt;. &lt;em&gt;Each Azure AD B2C tenant is distinct and separate from other Azure AD B2C tenants&lt;/em&gt;. An Azure AD B2C tenant is different than an Azure Active Directory tenant, which you may already have.&lt;/p&gt;

&lt;p&gt;The primary resources you work with in an Azure AD B2C tenant are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Directory&lt;/strong&gt; - The directory is where Azure AD B2C &lt;strong&gt;stores&lt;/strong&gt; your &lt;strong&gt;users’ credentials&lt;/strong&gt; and &lt;strong&gt;profile data&lt;/strong&gt;, as well as your &lt;strong&gt;application registrations&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Application registrations&lt;/strong&gt; - You &lt;strong&gt;register your web, mobile, and native applications&lt;/strong&gt; with Azure AD B2C to &lt;strong&gt;enable identity management&lt;/strong&gt;. Also, &lt;strong&gt;any APIs&lt;/strong&gt; you want to protect with Azure AD B2C.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User flows and custom policies&lt;/strong&gt; - The built-in &lt;strong&gt;(user flows)&lt;/strong&gt; and fully customizable &lt;strong&gt;(custom policies)&lt;/strong&gt; identity experiences for your applications.
    &lt;ul&gt;
      &lt;li&gt;Use user flows for &lt;strong&gt;quick configuration and enablement of common identity tasks like sign up, sign in, and profile editing&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Use &lt;strong&gt;custom policies&lt;/strong&gt; to enable user experiences not only for the &lt;strong&gt;common identity tasks&lt;/strong&gt;, but also for crafting support for &lt;strong&gt;complex identity workflows&lt;/strong&gt; unique to your organization, customers, employees, partners, and citizens.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Identity providers&lt;/strong&gt; - Federation settings for:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Social identity&lt;/strong&gt; providers like Facebook, LinkedIn, or Twitter that you want to support in your applications.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;External identity&lt;/strong&gt; providers that support standard identity protocols like OAuth 2.0, OpenID Connect, and more.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Local accounts&lt;/strong&gt; that enable users to sign up and sign in with a username (or email address or other ID) and password.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keys&lt;/strong&gt; - Add and manage encryption keys for signing and validating tokens, client secrets, certificates, and passwords.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An &lt;strong&gt;Azure AD B2C tenant&lt;/strong&gt; is the &lt;strong&gt;first resource&lt;/strong&gt; you need to create to get started with Azure AD B2C. Learn how in Tutorial: &lt;a href=&quot;azure-acticedirectoryB2C_CreateTenant&quot;&gt;&lt;strong&gt;Create an Azure Active Directory B2C tenant&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;accounts-in-azure-ad-b2c&quot;&gt;Accounts in Azure AD B2C&lt;/h2&gt;
&lt;p&gt;Azure AD B2C defines &lt;strong&gt;several types of user accounts&lt;/strong&gt;. Azure Active Directory, Azure Active Directory &lt;strong&gt;B2B&lt;/strong&gt;, and Azure Active Directory &lt;strong&gt;B2C&lt;/strong&gt; share these account types.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Work account&lt;/strong&gt; - Users with work accounts can manage resources in a tenant, and with an &lt;strong&gt;administrator role&lt;/strong&gt;, can also manage tenants. Users with work accounts can &lt;em&gt;create new consumer accounts, reset passwords, block/unblock accounts, and set permissions or assign an account to a security group.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Guest account&lt;/strong&gt; - External users you invite to your tenant as guests. A typical scenario for inviting a guest user to your Azure AD B2C tenant &lt;strong&gt;is to share administration responsibilities&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consumer account&lt;/strong&gt; - Consumer accounts are the accounts created in your Azure AD B2C directory when &lt;strong&gt;users complete the sign-up user journey&lt;/strong&gt; in an application you’ve registered in your tenant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/portal-01-users.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;consumer-accounts&quot;&gt;Consumer accounts&lt;/h2&gt;
&lt;p&gt;With a consumer account, users can sign in to the applications that you’ve secured with Azure AD B2C. Users with consumer accounts can’t, however, access Azure resources, for example the Azure portal.&lt;/p&gt;

&lt;p&gt;A consumer account can be associated with these identity types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Local identity&lt;/strong&gt;, with the username and password stored locally in the Azure AD B2C directory. We often refer to these identities as &lt;strong&gt;“local accounts.”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Social or enterprise identities&lt;/strong&gt;, where the identity of the user is managed by a federated identity provider like Facebook, Microsoft, ADFS, or Salesforce.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A user with a consumer account can sign in with multiple identities, for example username, email, employee ID, government ID, and others. A single account can have multiple identities, both local and social.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/identities.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Azure AD B2C lets you manage common attributes of consumer account profiles like &lt;strong&gt;display name, surname, given name, city, and others&lt;/strong&gt;. You can also &lt;strong&gt;extend the Azure AD schema&lt;/strong&gt; to store additional information about your users. For example, their &lt;strong&gt;country/region&lt;/strong&gt; or &lt;strong&gt;residency&lt;/strong&gt;, &lt;strong&gt;preferred language&lt;/strong&gt;, and &lt;strong&gt;preferences&lt;/strong&gt; like whether they want to &lt;strong&gt;subscribe to a newsletter&lt;/strong&gt; or &lt;strong&gt;enable multi-factor authentication&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;external-identity-providers&quot;&gt;External identity providers&lt;/h2&gt;

&lt;p&gt;You can configure Azure AD B2C to allow users to sign in to your application with credentials from &lt;strong&gt;external social or enterprise identity providers (IdP)&lt;/strong&gt;. Azure AD B2C supports external identity providers like &lt;strong&gt;Facebook, Microsoft account, Google, Twitter, and any identity provider&lt;/strong&gt; that supports &lt;em&gt;OAuth 1.0, OAuth 2.0, OpenID Connect, and SAML&lt;/em&gt; protocols.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/external-idps.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With external identity provider federation, you can offer your consumers the ability to &lt;strong&gt;sign in with their existing social or enterprise accounts&lt;/strong&gt;, &lt;em&gt;without having to create a new account just for your application.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the sign-up or sign-in page, Azure AD B2C presents a list of external identity providers the user can choose for &lt;strong&gt;sign-in&lt;/strong&gt;. Once they select one of the external identity providers, they’re taken (redirected) to the selected provider’s website to complete the sign in process. After the user successfully signs in, they’re returned to Azure AD B2C for authentication of the account in your application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/external-idp.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;identity-experiences-user-flows-or-custom-policies&quot;&gt;Identity experiences: user flows or custom policies&lt;/h2&gt;

&lt;p&gt;The extensible policy framework of Azure AD B2C is its core strength. Policies describe your users’ identity experiences such as sign up, sign in, and profile editing.&lt;/p&gt;

&lt;p&gt;In Azure AD B2C, there are &lt;strong&gt;two primary paths&lt;/strong&gt; you can take to provide these identity experiences: &lt;strong&gt;user flows&lt;/strong&gt; and &lt;strong&gt;custom policies&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;User flows&lt;/strong&gt; are predefined, built-in, configurable policies that we provide so you can create &lt;strong&gt;sign-up, sign-in, and policy editing&lt;/strong&gt; experiences in minutes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Custom policies&lt;/strong&gt; enable you to create your own user journeys for complex identity experience scenarios.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both user flows and custom policies are powered by the &lt;strong&gt;Identity Experience Framework, Azure AD B2C’s policy orchestration engine.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;user-flow&quot;&gt;User flow&lt;/h2&gt;
&lt;p&gt;To help you quickly set up the most common identity tasks, the Azure portal includes several predefined and configurable policies called user flows.&lt;/p&gt;

&lt;p&gt;You can configure user flow settings like these to control identity experience behaviors in your applications:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Account types used for sign-in, such as social accounts like a Facebook, or local accounts that use an email address and password for sign-in&lt;/li&gt;
  &lt;li&gt;Attributes to be collected from the consumer, such as first name, postal code, or country/region of residency&lt;/li&gt;
  &lt;li&gt;Azure Multi-Factor Authentication (MFA)&lt;/li&gt;
  &lt;li&gt;Customization of the user interface&lt;/li&gt;
  &lt;li&gt;Set of claims in a token that your application receives after the user completes the user flow&lt;/li&gt;
  &lt;li&gt;Session management&lt;/li&gt;
  &lt;li&gt;…and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most common identity scenarios for the majority of mobile, web, and single-page applications can be defined and implemented effectively with user flows. We recommend that you use the built-in user flows unless you have complex user journey scenarios that require the full flexibility of custom policies.&lt;/p&gt;

&lt;h2 id=&quot;custom-policy&quot;&gt;Custom policy&lt;/h2&gt;
&lt;p&gt;Custom policies unlock access to the full power of the &lt;strong&gt;Identity Experience Framework (IEF) orchestration engine&lt;/strong&gt;. With custom policies, you can leverage IEF to build almost any authentication, user registration, or profile editing experience that you can imagine.&lt;/p&gt;

&lt;p&gt;The Identity Experience Framework gives you the ability to construct user journeys with any combination of steps. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Federate with other identity providers&lt;/li&gt;
  &lt;li&gt;First- and third-party multi-factor authentication (MFA) challenges&lt;/li&gt;
  &lt;li&gt;Collect any user input&lt;/li&gt;
  &lt;li&gt;Integrate with external systems using REST API communication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each such user journey is defined by a policy, and you can build as many or as few policies as you need to enable the best user experience for your organization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/custom-policy.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A custom policy is defined by several XML files that refer to each other in a hierarchical chain. The XML elements define the claims schema, claims transformations, content definitions, claims providers, technical profiles, user journey orchestration steps, and other aspects of the identity experience.&lt;/p&gt;

&lt;p&gt;The powerful flexibility of custom policies is most appropriate for when you need to build complex identity scenarios. Developers configuring custom policies must define the trusted relationships in careful detail to include metadata endpoints, exact claims exchange definitions, and configure secrets, keys, and certificates as needed by each identity provider.&lt;/p&gt;

&lt;h2 id=&quot;protocols-and-tokens&quot;&gt;Protocols and tokens&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For applications, Azure AD B2C supports the &lt;strong&gt;OAuth 2.0, OpenID Connect, and SAML protocols&lt;/strong&gt; for user journeys. Your application starts the user journey by issuing authentication requests to Azure AD B2C. The result of a request to Azure AD B2C is a &lt;strong&gt;security token&lt;/strong&gt;, such as an &lt;strong&gt;ID token, access token, or SAML token&lt;/strong&gt;. This security token defines the user’s identity within the application.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For external identities, Azure AD B2C supports &lt;strong&gt;federation with any OAuth 1.0, OAuth 2.0, OpenID Connect, and SAML identity providers.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following diagram shows how Azure AD B2C can communicate using a variety of protocols within the same authentication flow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/protocols.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The relying party application initiates an authorization request to Azure AD B2C using OpenID Connect.&lt;/li&gt;
  &lt;li&gt;When a user of the application chooses to sign in using an external identity provider that uses the SAML protocol, Azure AD B2C invokes the SAML protocol to communicate with that identity provider.&lt;/li&gt;
  &lt;li&gt;After the user completes the sign-in operation with the external identity provider, Azure AD B2C then returns the token to the relying party application using OpenID Connect.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;application-integration&quot;&gt;Application integration&lt;/h2&gt;
&lt;p&gt;When a user wants to sign in to your application, whether it’s a web, mobile, desktop, or single-page application (SPA), the application initiates an authorization request to a user flow- or custom policy-provided endpoint. The user flow or custom policy defines and controls the user’s experience. When they complete a user flow, for example the sign-up or sign-in flow, Azure AD B2C generates a token, then redirects the user back to your application&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/app-integration.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Multiple applications can use the same user flow or custom policy. A single application can use multiple user flows or custom policies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example&lt;/strong&gt;, to sign in to an application, the application uses the sign up or sign in user flow. After the user has signed in, they may want to edit their profile, so the application initiates another authorization request, this time using the profile edit user flow.&lt;/p&gt;

&lt;h2 id=&quot;seamless-user-experiences&quot;&gt;Seamless user experiences&lt;/h2&gt;
&lt;p&gt;In Azure AD B2C, you can craft your users’ identity experiences so that the pages they’re shown blend seamlessly with the look and feel of your brand. You get nearly full control of the HTML and CSS content presented to your users when they proceed through your application’s identity journeys. With this flexibility, you can maintain brand and visual consistency between your application and Azure AD B2C.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/seamless-ux.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;localization&quot;&gt;Localization&lt;/h2&gt;
&lt;p&gt;Language customization in Azure AD B2C allows you to accommodate different languages to suit your customer needs. &lt;strong&gt;Microsoft provides the translations for 36 languages&lt;/strong&gt;, but you can also provide your own translations for any language. Even if your experience is provided for only a single language, you can customize any text on the pages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/localization.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-your-own-business-logic&quot;&gt;Add your own business logic&lt;/h2&gt;

&lt;p&gt;If you choose to use custom policies, you can integrate with a RESTful API in a user journey to add your own business logic to the journey. For example, Azure AD B2C can exchange data with a RESTful service to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Display custom user-friendly error messages.&lt;/li&gt;
  &lt;li&gt;Validate user input to prevent malformed data from persisting in your user directory. For example, you can modify the data entered by the user, such as capitalizing their first name if they entered it in all lowercase.&lt;/li&gt;
  &lt;li&gt;Enrich user data by further integrating with your corporate line-of-business application.&lt;/li&gt;
  &lt;li&gt;Using RESTful calls, you can send push notifications, update corporate databases, run a user migration process, manage permissions, audit databases, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Loyalty programs are another scenario enabled by Azure AD B2C’s support for calling REST APIs. For example, your RESTful service can receive a user’s email address, query your customer database, then return the user’s loyalty number to Azure AD B2C. The return data can be stored in the user’s directory account in Azure AD B2C, then be further evaluated in subsequent steps in the policy, or be included in the access token.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/lob-integration.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can add a REST API call at any step in the user journey defined by a custom policy. For example, you can call a REST API:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;During sign-in, just before Azure AD B2C validates the credentials&lt;/li&gt;
  &lt;li&gt;Immediately after sign-in&lt;/li&gt;
  &lt;li&gt;Before Azure AD B2C creates a new account in the directory&lt;/li&gt;
  &lt;li&gt;After Azure AD B2C creates a new account in the directory&lt;/li&gt;
  &lt;li&gt;Before Azure AD B2C issues an access token&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;protect-customer-identities&quot;&gt;Protect customer identities&lt;/h2&gt;
&lt;p&gt;Azure AD B2C complies with the security, privacy, and other commitments described in the Microsoft Azure Trust Center.&lt;/p&gt;

&lt;p&gt;Sessions are modeled as encrypted data, with the decryption key known only to the Azure AD B2C Security Token Service. A strong encryption algorithm, AES-192, is used. All communication paths are protected with TLS for confidentiality and integrity. Our Security Token Service uses an Extended Validation (EV) certificate for TLS. In general, the Security Token Service mitigates cross-site scripting (XSS) attacks by not rendering untrusted input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/user-data.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;access-to-user-data&quot;&gt;Access to user data&lt;/h2&gt;

&lt;p&gt;Azure AD B2C tenants share many characteristics with enterprise Azure Active Directory tenants used for employees and partners. Shared aspects include mechanisms for viewing administrative roles, assigning roles, and auditing activities.&lt;/p&gt;

&lt;p&gt;You can assign roles to control who can perform certain administrative actions in Azure AD B2C, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create and manage all aspects of user flows&lt;/li&gt;
  &lt;li&gt;Create and manage the attribute schema available to all user flows&lt;/li&gt;
  &lt;li&gt;Configure identity providers for use in direct federation&lt;/li&gt;
  &lt;li&gt;Create and manage trust framework policies in the Identity Experience Framework (custom policies)&lt;/li&gt;
  &lt;li&gt;Manage secrets for federation and encryption in the Identity Experience Framework (custom policies)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multi-factor-authentication-mfa&quot;&gt;Multi-factor authentication (MFA)&lt;/h2&gt;

&lt;p&gt;Azure AD B2C multi-factor authentication (MFA) helps safeguard access to data and applications while maintaining simplicity for your users. It provides additional security by requiring a second form of authentication, and delivers strong authentication by offering a range of easy-to-use authentication methods. Your users may or may not be challenged for MFA based on configuration decisions that you can make as an administrator.&lt;/p&gt;

&lt;h2 id=&quot;smart-account-lockout&quot;&gt;Smart account lockout&lt;/h2&gt;

&lt;p&gt;To prevent brute-force password guessing attempts, Azure AD B2C uses a sophisticated strategy to lock accounts based on the IP of the request, the passwords entered, and several other factors. The duration of the lockout is automatically increased based on risk and the number of attempts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/smart-lockout1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;password-complexity&quot;&gt;Password complexity&lt;/h2&gt;

&lt;p&gt;During sign up or password reset, your users must supply a password that meets complexity rules. By default, Azure AD B2C enforces a strong password policy. Azure AD B2C also provides configuration options for specifying the complexity requirements of the passwords your customers use.&lt;/p&gt;

&lt;p&gt;You can configure password complexity requirements in both &lt;strong&gt;user flows&lt;/strong&gt; and &lt;strong&gt;custom policies&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;auditing-and-logs&quot;&gt;Auditing and logs&lt;/h2&gt;

&lt;p&gt;Azure AD B2C emits audit logs containing activity information about its resources, issued tokens, and administrator access. You can use these audit logs to understand platform activity and diagnose issues. Audit log entries are available soon after the activity that generated the event occurs.&lt;/p&gt;

&lt;p&gt;In an audit log, which is available for your Azure AD B2C tenant or for a particular user, you can find information including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Activities concerning the authorization of a user to access B2C resources (for example, an administrator accessing a list of B2C policies)&lt;/li&gt;
  &lt;li&gt;Activities related to directory attributes retrieved when an administrator signs in using the Azure portal&lt;/li&gt;
  &lt;li&gt;Create, read, update, and delete (CRUD) operations on B2C applications&lt;/li&gt;
  &lt;li&gt;CRUD operations on keys stored in a B2C key container&lt;/li&gt;
  &lt;li&gt;CRUD operations on B2C resources (for example, policies and identity providers)&lt;/li&gt;
  &lt;li&gt;Validation of user credentials and token issuance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/azure/3/audit-log.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage-insights&quot;&gt;Usage insights&lt;/h2&gt;

&lt;p&gt;Azure AD B2C allows you to discover when people sign up or sign in to your web app, where your users are located, and what browsers and operating systems they use. By integrating Azure Application Insights into Azure AD B2C by using custom policies, you can gain insight into how people sign up, sign in, reset their password or edit their profile. With such knowledge, you can make data-driven decisions for your upcoming development cycles.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">What is Azure Active Directory B2C?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/azureAD.png" /></entry><entry><title type="html">Creating A Step-By-Step End-To-End Database Server-Side Blazor Application</title><link href="http://localhost:4000/blog/creating-step-by-step-ServerSideBlazorApp" rel="alternate" type="text/html" title="Creating A Step-By-Step End-To-End Database Server-Side Blazor Application" /><published>2020-03-10T10:26:00+00:00</published><updated>2020-03-10T10:26:00+00:00</updated><id>http://localhost:4000/blog/creating-Step-by-Step-ServerSideBlazorApp</id><content type="html" xml:base="http://localhost:4000/blog/creating-step-by-step-ServerSideBlazorApp">&lt;h2 id=&quot;creating-a-step-by-step-end-to-end-database-server-side-blazor-application&quot;&gt;Creating A Step-By-Step End-To-End Database Server-Side Blazor Application&lt;/h2&gt;

&lt;p&gt;The primary benefit we have when using &lt;strong&gt;server-side Blazor&lt;/strong&gt; is that we do not have to make web http calls from the client code to the server code. This reduces the code we need to write and eliminates many security concerns.&lt;/p&gt;

&lt;p&gt;In this article, we will demonstrate how a list of &lt;strong&gt;Weather forecasts&lt;/strong&gt; can be added to the database by each user. A user will only have the ability to see their own forecasts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-sql-server&quot;&gt;Use SQL Server&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new project template in &lt;strong&gt;Visual Studio&lt;/strong&gt; will allow you to create a database using &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/working-with-sql?view=aspnetcore-2.2&amp;amp;tabs=visual-studio#sql-server-express-localdb&quot;&gt;SQL Server Express LocalDB&lt;/a&gt;. However, it can be problematic to install and configure. Using the free &lt;strong&gt;SQL Server 2019 Developer server&lt;/strong&gt; (or the full &lt;strong&gt;SQL Server&lt;/strong&gt;) is recommended.&lt;/p&gt;

&lt;p&gt;Download and install &lt;strong&gt;SQL Server 2019 Developer Edition&lt;/strong&gt; from the following link:&lt;/p&gt;

&lt;p&gt;https://www.microsoft.com/en-us/sql-server/sql-server-downloads&lt;/p&gt;

&lt;h2 id=&quot;create-the-blazor-application&quot;&gt;Create The Blazor Application&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/3.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;a href=&quot;https://visualstudio.microsoft.com/&quot;&gt;Visual Studio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/4.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Create a new Project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/5.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Blazor App&lt;/strong&gt; and click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/6.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Name it &lt;strong&gt;EndToEnd&lt;/strong&gt; and click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/7.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Blazor Server App&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/8.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the Change link under Authentication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/9.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Individual User Accounts&lt;/strong&gt; and &lt;strong&gt;Store user accounts in-app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/10.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/11.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;project&lt;/strong&gt; will be created.&lt;/p&gt;

&lt;h2 id=&quot;create-the-database&quot;&gt;Create The Database&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/12.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;SQL Server Object Explorer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/13.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add a connection to your local database server if you don’t already have it in the SQL Server list.&lt;/p&gt;

&lt;p&gt;For this tutorial, we do not want to use the SQL Express server on (localdb) that you may already see in the list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/14.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will specify just the server and &lt;strong&gt;Connect&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/15.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Expand the tree under the local &lt;strong&gt;SQL server&lt;/strong&gt;, right-click on the &lt;strong&gt;Databases&lt;/strong&gt; folder and select &lt;strong&gt;Add New Database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/16.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give the &lt;strong&gt;database&lt;/strong&gt; a name and press &lt;strong&gt;Enter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;database&lt;/strong&gt; will be created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/17.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Right-Click&lt;/strong&gt; on the &lt;strong&gt;Database&lt;/strong&gt; node and select &lt;strong&gt;Properties&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/18.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;Properties&lt;/strong&gt; window if it is not already opened.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Properties&lt;/strong&gt; window for the &lt;strong&gt;database&lt;/strong&gt; will display.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Copy&lt;/strong&gt; the &lt;strong&gt;Connection string&lt;/strong&gt; for the &lt;strong&gt;database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/19.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;appsettings.json&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/20.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Paste&lt;/strong&gt; in the &lt;strong&gt;connection string&lt;/strong&gt; for the &lt;strong&gt;DefaultConnection&lt;/strong&gt; and &lt;strong&gt;save&lt;/strong&gt; the file.&lt;/p&gt;

&lt;h2 id=&quot;run-the-application&quot;&gt;Run the Application&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/21.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;F5&lt;/strong&gt; to run the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/22.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The application will open in your &lt;strong&gt;web browser&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click&lt;/strong&gt; the &lt;strong&gt;Register&lt;/strong&gt; link.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/23.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the information to create a &lt;strong&gt;new account&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Register&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/24.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Because this is the first time the database is being used, you will see a message asking you to run the &lt;strong&gt;migration scripts&lt;/strong&gt; that will create the database objects needed to support the user membership code.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Apply Migrations&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/25.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the message changes to Migrations Applied, refresh the page in the web browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/26.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking refresh in your web browser, a popup will require you to click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/27.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Click here to confirm your account link&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/28.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;Confirm email&lt;/strong&gt; page, click the name of the application to navigate to the home page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/29.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can click the &lt;strong&gt;Log in&lt;/strong&gt; link to log in using the account you just created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/30.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will now be &lt;strong&gt;logged into the application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can click around the application and see that it works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/31.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Fetch data&lt;/strong&gt; page currently shows random data. We will alter the application to allow us to &lt;strong&gt;add, update, and delete&lt;/strong&gt; this data in the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Close&lt;/strong&gt; the &lt;strong&gt;&lt;em&gt;web browser&lt;/em&gt;&lt;/strong&gt; to &lt;strong&gt;stop&lt;/strong&gt; the application.&lt;/p&gt;

&lt;h2 id=&quot;do-not-require-account-confirmation&quot;&gt;Do Not Require Account Confirmation&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/32.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we do not intend to configure &lt;strong&gt;email account verification&lt;/strong&gt; (using the directions at this link: https://bit.ly/2tf2ym4), we can open the &lt;strong&gt;Startup.cs&lt;/strong&gt; file and change the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;services.AddDefaultIdentity&amp;lt;IdentityUser&amp;gt;(
                options =&amp;gt; options.SignIn.RequireConfirmedAccount = true)
                .AddEntityFrameworkStores&amp;lt;ApplicationDbContext&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
services.AddDefaultIdentity&amp;lt;IdentityUser&amp;gt;(
                options =&amp;gt; options.SignIn.RequireConfirmedAccount = false)
                .AddEntityFrameworkStores&amp;lt;ApplicationDbContext&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;create-the-database-1&quot;&gt;Create The Database&lt;/h2&gt;

&lt;p&gt;Create a new &lt;strong&gt;Server Side Blazor&lt;/strong&gt; project and &lt;em&gt;right-click&lt;/em&gt; on the &lt;strong&gt;wwwroot&lt;/strong&gt; folder and select &lt;strong&gt;Add&lt;/strong&gt; then &lt;strong&gt;New Item…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/33.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;SQL Server Object Explorer window&lt;/strong&gt;, in &lt;strong&gt;Visual Studio&lt;/strong&gt;, we see the &lt;strong&gt;tables&lt;/strong&gt; that the &lt;strong&gt;&lt;em&gt;migration scripts added&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/34.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right-click&lt;/em&gt; on the &lt;strong&gt;Tables&lt;/strong&gt; node and select &lt;strong&gt;Add New Table&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/35.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Paste the following script in the &lt;strong&gt;T-SQL&lt;/strong&gt; window and then click the &lt;strong&gt;Update&lt;/strong&gt; button:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE [dbo].[WeatherForecast] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [Date]         DATETIME      NULL,
    [TemperatureC] INT           NULL,
    [TemperatureF] INT           NULL,
    [Summary]      NVARCHAR (50) NULL,
    [UserName]     NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/blazor/3/36.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The script will prepare.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Update Database&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/37.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Back in the &lt;strong&gt;Server Explorer&lt;/strong&gt; window, &lt;em&gt;right-click&lt;/em&gt; on Tables and select &lt;strong&gt;Refresh&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/38.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;WeatherForecast&lt;/strong&gt; table will display.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right-click&lt;/em&gt; on the table and select &lt;strong&gt;Show Table Data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/39.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will enter some &lt;strong&gt;sample data&lt;/strong&gt; so that we will be able to &lt;strong&gt;test&lt;/strong&gt; the data connection in the next steps.&lt;/p&gt;

&lt;p&gt;Set the &lt;strong&gt;UserName&lt;/strong&gt; field to the &lt;strong&gt;username&lt;/strong&gt; of the &lt;strong&gt;user&lt;/strong&gt; that we &lt;strong&gt;registered&lt;/strong&gt; an account for earlier.&lt;/p&gt;

&lt;h2 id=&quot;create-the-data-context&quot;&gt;Create The Data Context&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/40.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you do not already have it installed, install EF Core Power Tools from:&lt;/p&gt;

&lt;p&gt;https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/41.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Note: Before installing, close &lt;strong&gt;Visual Studio&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;(Note: Please give this project a &lt;strong&gt;5&lt;/strong&gt; star review on &lt;strong&gt;marketplace.visualstudio.com&lt;/strong&gt;!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/42.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right-click&lt;/em&gt; on the &lt;strong&gt;project&lt;/strong&gt; node in the &lt;strong&gt;Solution Explorer&lt;/strong&gt; and select &lt;strong&gt;EF Core Power&lt;/strong&gt; Tools then &lt;strong&gt;Reverse Engineer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/43.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Add&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/44.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Connect&lt;/em&gt; to the &lt;strong&gt;database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;database connection&lt;/strong&gt; in the dropdown and click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/45.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;WeatherForecast&lt;/strong&gt; table and click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/46.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the values and click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/47.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Solution Explorer&lt;/strong&gt;, you will see the &lt;strong&gt;Data Context&lt;/strong&gt; has been created.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;OK&lt;/strong&gt; button to close the popup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/48.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;Startup.cs&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;Add the following code to the &lt;strong&gt;ConfigureServices&lt;/strong&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
// Read the connection string from the appsettings.json file
    // Set the database connection for the EndtoEndContext
    services.AddDbContext&amp;lt;EndToEndDB.Data.EndToEnd.EndtoEndContext&amp;gt;(options =&amp;gt;
    options.UseSqlServer(
        Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, change this line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    
    services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    
    // Scoped creates an instance for each user
    services.AddScoped&amp;lt;WeatherForecastService&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/49.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save&lt;/strong&gt; the file.&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Build&lt;/strong&gt;, then &lt;strong&gt;Rebuild Solution&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;read-from-the-database&quot;&gt;Read From The Database&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/50.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete&lt;/strong&gt; the &lt;strong&gt;Data/WeatherForecast.cs&lt;/strong&gt; file in the project.&lt;/p&gt;

&lt;p&gt;We will use the &lt;strong&gt;Data/EndToEnd/WeatherForcast.cs&lt;/strong&gt; class file created by the &lt;strong&gt;EF Core Tools instead&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/51.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;WeatherForecastService.cs&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Replace all the code&lt;/strong&gt; with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
using EndToEndDB.Data.EndToEnd;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
namespace EndToEnd.Data
{
    public class WeatherForecastService
    {
        private readonly EndtoEndContext _context;
        public WeatherForecastService(EndtoEndContext context)
        {
            _context = context;
        }
        public async Task&amp;lt;List&amp;lt;WeatherForecast&amp;gt;&amp;gt;
            GetForecastAsync(string strCurrentUser)
        {
            // Get Weather Forecasts  
            return await _context.WeatherForecast
                 // Only get entries for the current logged in user
                 .Where(x =&amp;gt; x.UserName == strCurrentUser)
                 // Use AsNoTracking to disable EF change tracking
                 // Use ToListAsync to avoid blocking a thread
                 .AsNoTracking().ToListAsync();
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    private readonly EndtoEndContext _context;
    
    public WeatherForecastService(EndtoEndContext context)
        {
            _context = context;
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connects to the &lt;strong&gt;database&lt;/strong&gt; using the &lt;em&gt;datacontext&lt;/em&gt; we created with the &lt;strong&gt;EF Core tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/52.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, open the &lt;strong&gt;FetchData.razor&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Replace all the code&lt;/em&gt; with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
@page &quot;/fetchdata&quot;
@using EndToEnd.Data
@using EndToEndDB.Data.EndToEnd
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase&amp;lt;WeatherForecastService&amp;gt;
&amp;lt;h1&amp;gt;Weather forecast&amp;lt;/h1&amp;gt;
&amp;lt;!-- AuthorizeView allows us to only show sections of the page --&amp;gt;
&amp;lt;!-- based on the security on the current user --&amp;gt;
&amp;lt;AuthorizeView&amp;gt;
    &amp;lt;!-- Show this section if the user is logged in --&amp;gt;
    &amp;lt;Authorized&amp;gt;
        &amp;lt;h4&amp;gt;Hello, @context.User.Identity.Name!&amp;lt;/h4&amp;gt;
        @if (forecasts == null)
        {
            &amp;lt;!-- Show this if the current user has no data... yet... --&amp;gt;
            &amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Loading...&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
        }
        else
        {
            &amp;lt;!-- Show the forecasts for the current user --&amp;gt;
            &amp;lt;table class=&quot;table&quot;&amp;gt;
                &amp;lt;thead&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;th&amp;gt;Date&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Temp. (C)&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Temp. (F)&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Summary&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/thead&amp;gt;
                &amp;lt;tbody&amp;gt;
                    @foreach (var forecast in forecasts)
                    {
                        &amp;lt;tr&amp;gt;
                            &amp;lt;td&amp;gt;@forecast.Date.Value.ToShortDateString()&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;@forecast.TemperatureC&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;@forecast.TemperatureF&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;@forecast.Summary&amp;lt;/td&amp;gt;
                        &amp;lt;/tr&amp;gt;
                    }
                &amp;lt;/tbody&amp;gt;
            &amp;lt;/table&amp;gt;
        }
    &amp;lt;/Authorized&amp;gt;
    &amp;lt;!-- Show this section if the user is not logged in --&amp;gt;
    &amp;lt;NotAuthorized&amp;gt;
        &amp;lt;p&amp;gt;You're not signed in.&amp;lt;/p&amp;gt;
    &amp;lt;/NotAuthorized&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;

@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task&amp;lt;AuthenticationState&amp;gt; authenticationStateTask { get; set; }
    List&amp;lt;WeatherForecast&amp;gt; forecasts;
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var user = (await authenticationStateTask).User;
        // Get the forecasts for the current user
        // We access WeatherForecastService using @Service
        forecasts = await @Service.GetForecastAsync(user.Identity.Name);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code simply calls the &lt;strong&gt;GetForecastAsync&lt;/strong&gt; method we created in the previous step, passing the &lt;strong&gt;username&lt;/strong&gt; of the currently logged in user.&lt;/p&gt;

&lt;p&gt;In a normal web application we would have to make a &lt;em&gt;http web call from this client code to the code that connects to the database&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With server-side &lt;strong&gt;Blazor&lt;/strong&gt; we don’t have to do that, yet the call is still secure because the pages are rendered on the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/53.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt; and run the project.&lt;/p&gt;

&lt;p&gt;If we are not logged in, and we go to the &lt;strong&gt;Fetch data&lt;/strong&gt; page, we will see a message indicating we are not signed in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/54.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Login&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/55.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Log in as the user we created data&lt;/em&gt; for earlier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/56.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you are logged in, switch to the &lt;strong&gt;Fetch data&lt;/strong&gt; page and you will see the data for the user we entered earlier.&lt;/p&gt;

&lt;h2 id=&quot;inserting-data-into-the-database&quot;&gt;Inserting Data Into The Database&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/57.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;WeatherForecastService.cs&lt;/strong&gt; file and add the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;public Task&amp;lt;WeatherForecast&amp;gt;
            CreateForecastAsync(WeatherForecast objWeatherForecast)
        {
            _context.WeatherForecast.Add(objWeatherForecast);
            _context.SaveChanges();
            return Task.FromResult(objWeatherForecast);
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/58.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;FetchData.razor&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;Add the following HTML markup directly under the existing table element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    &amp;lt;p&amp;gt;
        &amp;lt;!-- Add a new forecast --&amp;gt;
        &amp;lt;button class=&quot;btn btn-primary&quot;
                @onclick=&quot;AddNewForecast&quot;&amp;gt;
            Add New Forecast
        &amp;lt;/button&amp;gt;
    &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds a button to allow a new forecast to be added.&lt;/p&gt;

&lt;p&gt;Add the following code below the previous code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    @if (ShowPopup)
        {
            &amp;lt;!-- This is the popup to create or edit a forecast --&amp;gt;
            &amp;lt;div class=&quot;modal&quot; tabindex=&quot;-1&quot; style=&quot;display:block&quot; role=&quot;dialog&quot;&amp;gt;
                &amp;lt;div class=&quot;modal-dialog&quot;&amp;gt;
                    &amp;lt;div class=&quot;modal-content&quot;&amp;gt;
                        &amp;lt;div class=&quot;modal-header&quot;&amp;gt;
                            &amp;lt;h3 class=&quot;modal-title&quot;&amp;gt;Edit Forecast&amp;lt;/h3&amp;gt;
                            &amp;lt;!-- Button to close the popup --&amp;gt;
                            &amp;lt;button type=&quot;button&quot; class=&quot;close&quot;
                                    @onclick=&quot;ClosePopup&quot;&amp;gt;
                                &amp;lt;span aria-hidden=&quot;true&quot;&amp;gt;X&amp;lt;/span&amp;gt;
                            &amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;!-- Edit form for the current forecast --&amp;gt;
                        &amp;lt;div class=&quot;modal-body&quot;&amp;gt;
                            &amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot;
                                    placeholder=&quot;Celsius forecast&quot;
                                    @bind=&quot;objWeatherForecast.TemperatureC&quot; /&amp;gt;
                            &amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot;
                                    placeholder=&quot;Fahrenheit forecast&quot;
                                    @bind=&quot;objWeatherForecast.TemperatureF&quot; /&amp;gt;
                            &amp;lt;input class=&quot;form-control&quot; type=&quot;text&quot;
                                    placeholder=&quot;Summary&quot;
                                    @bind=&quot;objWeatherForecast.Summary&quot; /&amp;gt;
                            &amp;lt;br /&amp;gt;
                            &amp;lt;!-- Button to save the forecast --&amp;gt;
                            &amp;lt;button class=&quot;btn btn-primary&quot;
                                    @onclick=&quot;SaveForecast&quot;&amp;gt;
                                Save
                            &amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds a form (that will be displayed a popup because the class for the DIV is modal), that allows the user to enter (and later edit) data for a forecast.&lt;/p&gt;

&lt;p&gt;We do not need JavaScript to make this &lt;strong&gt;popup&lt;/strong&gt; show. We only need to wrap this code with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;     @if (ShowPopup)
        {
            ...
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the &lt;strong&gt;ShowPopup&lt;/strong&gt; value is true the &lt;strong&gt;popup&lt;/strong&gt; will show. When the value is false, the &lt;strong&gt;popup&lt;/strong&gt; will disappear.&lt;/p&gt;

&lt;p&gt;Add the following code to the &lt;em&gt;@code&lt;/em&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;

    WeatherForecast objWeatherForecast = new WeatherForecast();
    bool ShowPopup = false;
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void AddNewForecast()
    {
        // Make new forecast
        objWeatherForecast = new WeatherForecast();
        // Set Id to 0 so we know it is a new record
        objWeatherForecast.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // A new forecast will have the Id set to 0
        if (objWeatherForecast.Id == 0)
        {
            // Create new forecast
            WeatherForecast objNewWeatherForecast = new WeatherForecast();
            objNewWeatherForecast.Date = System.DateTime.Now;
            objNewWeatherForecast.Summary = objWeatherForecast.Summary;
            objNewWeatherForecast.TemperatureC =
            Convert.ToInt32(objWeatherForecast.TemperatureC);
            objNewWeatherForecast.TemperatureF =
            Convert.ToInt32(objWeatherForecast.TemperatureF);
            objNewWeatherForecast.UserName = user.Identity.Name;
            // Save the result
            var result =
            @Service.CreateForecastAsync(objNewWeatherForecast);
        }
        else
        {
            // This is an update
        }
        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(user.Identity.Name);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/59.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you run the project, you can click the &lt;strong&gt;Add New Forecast&lt;/strong&gt; button to add an entry.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/60.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The form only requires a &lt;strong&gt;Fahrenheit, Celsius, and a summary&lt;/strong&gt;, because the other values (&lt;em&gt;date and username&lt;/em&gt;), will be set by the code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/61.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking the &lt;strong&gt;Save&lt;/strong&gt; button, the entry is saved to the database and displayed.&lt;/p&gt;

&lt;h2 id=&quot;updating-the-data&quot;&gt;Updating The Data&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/62.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;WeatherForecastService.cs&lt;/strong&gt; file and &lt;strong&gt;add&lt;/strong&gt; the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;     public Task&amp;lt;bool&amp;gt;
            UpdateForecastAsync(WeatherForecast objWeatherForecast)
        {
            var ExistingWeatherForecast =
                _context.WeatherForecast
                .Where(x =&amp;gt; x.Id == objWeatherForecast.Id)
                .FirstOrDefault();
            if (ExistingWeatherForecast != null)
            {
                ExistingWeatherForecast.Date =
                    objWeatherForecast.Date;
                ExistingWeatherForecast.Summary =
                    objWeatherForecast.Summary;
                ExistingWeatherForecast.TemperatureC =
                    objWeatherForecast.TemperatureC;
                ExistingWeatherForecast.TemperatureF =
                    objWeatherForecast.TemperatureF;
                _context.SaveChanges();
            }
            else
            {
                return Task.FromResult(false);
            }
            return Task.FromResult(true);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/63.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;FetchData.razor&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Replace&lt;/strong&gt; the existing &lt;strong&gt;table&lt;/strong&gt; element with the following markup that adds an edit button in the last column (that calls the &lt;strong&gt;EditForecast&lt;/strong&gt; method we will add in the next step):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    &amp;lt;table class=&quot;table&quot;&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;Date&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Temp. (C)&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Temp. (F)&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Summary&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
            @foreach (var forecast in forecasts)
            {
                &amp;lt;tr&amp;gt;
                    &amp;lt;td&amp;gt;@forecast.Date.Value.ToShortDateString()&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@forecast.TemperatureC&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@forecast.TemperatureF&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;@forecast.Summary&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;
                        &amp;lt;!-- Edit the current forecast --&amp;gt;
                        &amp;lt;button class=&quot;btn btn-primary&quot;
                                @onclick=&quot;(() =&amp;gt; EditForecast(forecast))&quot;&amp;gt;
                            Edit
                        &amp;lt;/button&amp;gt;
                    &amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;
            }
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following code to the &lt;em&gt;@code&lt;/em&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    void EditForecast(WeatherForecast weatherForecast)
    {
        // Set the selected forecast
        // as the current forecast
        objWeatherForecast = weatherForecast;
        // Open the Popup
        ShowPopup = true;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets the current record to the &lt;strong&gt;objWeatherForecast&lt;/strong&gt; object that the &lt;strong&gt;popup&lt;/strong&gt; is bound to, and opens the &lt;strong&gt;popup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, change the existing &lt;strong&gt;SaveForecast&lt;/strong&gt; method to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    
    async Task SaveForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // A new forecast will have the Id set to 0
        if (objWeatherForecast.Id == 0)
        {
            // Create new forecast
            WeatherForecast objNewWeatherForecast = new WeatherForecast();
            objNewWeatherForecast.Date = System.DateTime.Now;
            objNewWeatherForecast.Summary = objWeatherForecast.Summary;
            objNewWeatherForecast.TemperatureC =
            Convert.ToInt32(objWeatherForecast.TemperatureC);
            objNewWeatherForecast.TemperatureF =
            Convert.ToInt32(objWeatherForecast.TemperatureF);
            objNewWeatherForecast.UserName = user.Identity.Name;
            // Save the result
            var result =
            @Service.CreateForecastAsync(objNewWeatherForecast);
        }
        else
        {
            // This is an update
            var result =
            @Service.UpdateForecastAsync(objWeatherForecast);
        }
        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(user.Identity.Name);
    }



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simply adds one line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;    // This is an update
    var result =  @Service.UpdateForecastAsync(objWeatherForecast);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To the existing method to handle an update rather than an insert.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/64.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we run the application, we now have an &lt;strong&gt;Edit button&lt;/strong&gt; to edit the existing record.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/65.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The existing record will display in the &lt;strong&gt;popup&lt;/strong&gt;, allowing us to &lt;em&gt;edit the data and save it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/66.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The updated record is then displayed in the table.&lt;/p&gt;

&lt;h2 id=&quot;deleting-the-data&quot;&gt;Deleting The Data&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/67c.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;WeatherForecastService.cs&lt;/strong&gt; file and &lt;strong&gt;add&lt;/strong&gt; the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    public Task&amp;lt;bool&amp;gt;
            DeleteForecastAsync(WeatherForecast objWeatherForecast)
    {
        var ExistingWeatherForecast =
            _context.WeatherForecast
            .Where(x =&amp;gt; x.Id == objWeatherForecast.Id)
            .FirstOrDefault();
        if (ExistingWeatherForecast != null)
        {
            _context.WeatherForecast.Remove(ExistingWeatherForecast);
            _context.SaveChanges();
        }
        else
        {
            return Task.FromResult(false);
        }
        return Task.FromResult(true);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/68.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;FetchData.razor&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;Add code markup for a &lt;strong&gt;Delete&lt;/strong&gt; button under the code markup for the current &lt;strong&gt;Save&lt;/strong&gt; button in the &lt;strong&gt;popup&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    &amp;lt;!-- Only show delete button if not a new record --&amp;gt;
        @if (objWeatherForecast.Id &amp;gt; 0)
        {
            &amp;lt;!-- Button to delete the forecast --&amp;gt;
            &amp;lt;button class=&quot;btn btn-primary&quot;
                    @onclick=&quot;DeleteForecast&quot;&amp;gt;
                Delete
            &amp;lt;/button&amp;gt;
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following code to the &lt;em&gt;@code&lt;/em&gt; section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
    async Task DeleteForecast()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // Delete the forecast
        var result = @Service.DeleteForecastAsync(objWeatherForecast);
        // Get the forecasts for the current user
        forecasts =
        await @Service.GetForecastAsync(user.Identity.Name);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/69.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we run the code and click the &lt;strong&gt;Edit&lt;/strong&gt; button…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/70.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;… we now see a &lt;strong&gt;Delete&lt;/strong&gt; button that will &lt;em&gt;delete&lt;/em&gt; the record.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/71.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, when we click the &lt;strong&gt;Add New Forecast&lt;/strong&gt; button that opens the same &lt;strong&gt;popup&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/72.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The delete button does not display (because there is no record to delete at this point).&lt;/p&gt;

&lt;h2 id=&quot;use-code-behind-method-using-partial-class-support&quot;&gt;Use Code Behind Method Using Partial Class Support&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/blazor/3/73.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can code our &lt;strong&gt;.razor&lt;/strong&gt; pages using an &lt;em&gt;@code&lt;/em&gt; block with &lt;strong&gt;HTML markup&lt;/strong&gt; in a single file, or with the &lt;strong&gt;C#&lt;/strong&gt; code placed in a &lt;em&gt;code-behind&lt;/em&gt; file defined as a &lt;strong&gt;partial class&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Create a new class called &lt;strong&gt;FetchData.razor.cs&lt;/strong&gt; using the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-dotnetcli&quot;&gt;
using EndToEndDB.Data.EndToEnd;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Authorization;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
namespace EndToEnd.Pages
{
    public partial class FetchData
    {
        // AuthenticationState is available as a CascadingParameter
        [CascadingParameter]
        private Task&amp;lt;AuthenticationState&amp;gt; authenticationStateTask { get; set; }
        List&amp;lt;WeatherForecast&amp;gt; forecasts;
        protected override async Task OnInitializedAsync()
        {
            // Get the current user
            var user = (await authenticationStateTask).User;
            // Get the forecasts for the current user
            // We access WeatherForecastService using @Service
            forecasts = await @Service.GetForecastAsync(user.Identity.Name);
        }
        WeatherForecast objWeatherForecast = new WeatherForecast();
        bool ShowPopup = false;
        void ClosePopup()
        {
            // Close the Popup
            ShowPopup = false;
        }
        void AddNewForecast()
        {
            // Make new forecast
            objWeatherForecast = new WeatherForecast();
            // Set Id to 0 so we know it is a new record
            objWeatherForecast.Id = 0;
            // Open the Popup
            ShowPopup = true;
        }
        async Task SaveForecast()
        {
            // Close the Popup
            ShowPopup = false;
            // Get the current user
            var user = (await authenticationStateTask).User;
            // A new forecast will have the Id set to 0
            if (objWeatherForecast.Id == 0)
            {
                // Create new forecast
                WeatherForecast objNewWeatherForecast = new WeatherForecast();
                objNewWeatherForecast.Date = System.DateTime.Now;
                objNewWeatherForecast.Summary = objWeatherForecast.Summary;
                objNewWeatherForecast.TemperatureC =
                Convert.ToInt32(objWeatherForecast.TemperatureC);
                objNewWeatherForecast.TemperatureF =
                Convert.ToInt32(objWeatherForecast.TemperatureF);
                objNewWeatherForecast.UserName = user.Identity.Name;
                // Save the result
                var result =
                @Service.CreateForecastAsync(objNewWeatherForecast);
            }
            else
            {
                // This is an update
                var result =
                @Service.UpdateForecastAsync(objWeatherForecast);
            }
            // Get the forecasts for the current user
            forecasts =
            await @Service.GetForecastAsync(user.Identity.Name);
        }
        void EditForecast(WeatherForecast weatherForecast)
        {
            // Set the selected forecast
            // as the current forecast
            objWeatherForecast = weatherForecast;
            // Open the Popup
            ShowPopup = true;
        }
        async Task DeleteForecast()
        {
            // Close the Popup
            ShowPopup = false;
            // Get the current user
            var user = (await authenticationStateTask).User;
            // Delete the forecast
            var result = @Service.DeleteForecastAsync(objWeatherForecast);
            // Get the forecasts for the current user
            forecasts =
            await @Service.GetForecastAsync(user.Identity.Name);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remove the entire &lt;em&gt;@code&lt;/em&gt; bock from the &lt;strong&gt;FetchData.razor&lt;/strong&gt; page.&lt;/p&gt;

&lt;p&gt;The application will still behave the same.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blazor.net/&quot;&gt;Blazor.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/blazor/?view=aspnetcore-3.0&amp;amp;tabs=visual-studio&quot;&gt;ASP.NET Core Blazor authentication and authorization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools&quot;&gt;EF Core Power Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/issues/5496&quot;&gt;OwningComponentBase (background)&lt;/a&gt;&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Creating A Step-By-Step End-To-End Database Server-Side Blazor Application</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/blazor.png" /></entry><entry><title type="html">AZURE DEVOPS – MANAGE YOUR APPLICATION LIFECYCLE IN CLOUD</title><link href="http://localhost:4000/blog/Azure-devops" rel="alternate" type="text/html" title="AZURE DEVOPS – MANAGE YOUR APPLICATION LIFECYCLE IN CLOUD" /><published>2020-03-10T09:21:00+00:00</published><updated>2020-03-10T09:21:00+00:00</updated><id>http://localhost:4000/blog/Azure-devops</id><content type="html" xml:base="http://localhost:4000/blog/Azure-devops">&lt;h2 id=&quot;azure-devops--manage-your-application-lifecycle-in-cloud&quot;&gt;AZURE DEVOPS – MANAGE YOUR APPLICATION LIFECYCLE IN CLOUD&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Application lifecycle management (ALM)&lt;/strong&gt; is the product lifecycle management of computer programs.&lt;/p&gt;

&lt;p&gt;It encompasses &lt;strong&gt;requirements management&lt;/strong&gt;, &lt;strong&gt;software architecture&lt;/strong&gt;, &lt;strong&gt;computer programming&lt;/strong&gt;, &lt;strong&gt;software testing&lt;/strong&gt;, &lt;strong&gt;software maintenance&lt;/strong&gt;, &lt;strong&gt;change management&lt;/strong&gt;, &lt;strong&gt;continuous integration&lt;/strong&gt;, &lt;strong&gt;project management&lt;/strong&gt;, and &lt;strong&gt;release management&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;ALM tool&lt;/strong&gt; should have the capability to maintain all the aspects of a software lifecycle, such as &lt;span style=&quot;background-color: #2197CB&quot;&gt;&lt;strong&gt;capturing the ideas, users requirement, planning of work, maintaining source code, deploying code using continuous integration and continuous delivery (CI/CD)&lt;/strong&gt;&lt;/span&gt;. It should also provide real time project insights to the key stake holders of a project. We can think of an ALM software as one stop shop for a software project/product management as a whole.&lt;/p&gt;

&lt;p&gt;In this post we will take a look at &lt;strong&gt;Microsoft’s Azure DevOps offering&lt;/strong&gt;, it’s capability as an ALM solution and will see how you can use it for your ALM journey.&lt;/p&gt;

&lt;h2 id=&quot;what-is-azure-devops&quot;&gt;What is Azure DevOps?&lt;/h2&gt;

&lt;p&gt;In a single sentence, Azure DevOps is a suite of offering in the cloud that you need to &lt;strong&gt;build your software product/project from beginning to end&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Azure DevOps&lt;/strong&gt;, formerly known as Visual Studio Team System (VSTS). It helps you to plan your project, manage source code in repositories like &lt;em&gt;Git, TFVC, Subversion, GitHub and deploys the code through the CI/CD pipeline system to cloud or in on-premise resources&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Additionally it gives a &lt;strong&gt;collaborative platform&lt;/strong&gt; for &lt;strong&gt;developers, business users and test engineers, project managers&lt;/strong&gt; under one umbrella to &lt;strong&gt;real time tracking of work&lt;/strong&gt; and &lt;strong&gt;quick shipment&lt;/strong&gt; of the product.&lt;/p&gt;

&lt;h2 id=&quot;six-pillars-of-azure-devops&quot;&gt;Six pillars of Azure DevOps&lt;/h2&gt;

&lt;p&gt;Azure DevOps has six major pillars which helped it to shape as complete ALM offering in the the cloud. Let’s briefly look into the the major pillars of Azure DevOps&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/devops/2/AzureBoard.png&quot; alt=&quot;Image&quot; title=&quot;Azure Boards&quot; /&gt;&lt;strong&gt;Azure Boards&lt;/strong&gt; is a place to &lt;strong&gt;manage and plan&lt;/strong&gt; all of your work.** All ideas** and &lt;strong&gt;business requirements&lt;/strong&gt; for your software can be &lt;strong&gt;captured here&lt;/strong&gt;. You can create &lt;strong&gt;epics&lt;/strong&gt;, &lt;strong&gt;features&lt;/strong&gt;, &lt;strong&gt;user stories&lt;/strong&gt; and then &lt;strong&gt;estimate them&lt;/strong&gt; and &lt;strong&gt;plan capacity&lt;/strong&gt; of your &lt;em&gt;team members&lt;/em&gt; and start the &lt;strong&gt;sprint&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Additionally you can have a real time view of the work item progression in &lt;strong&gt;Kanban boards&lt;/strong&gt;, &lt;strong&gt;sprint burn down charts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/devops/2/AzureRepos.png&quot; alt=&quot;Image&quot; title=&quot;Azure Repos&quot; /&gt;&lt;strong&gt;Azure Repos&lt;/strong&gt;  supports various source control system like &lt;em&gt;Azure Git, Public GitHub, GitHub Enterprise,  Microsoft’s own Team foundation version control (TFVC), External Git&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can choose any one of the repositories for your choice for software development and source code. Once development is done developers can create a pull request with their changes, send it for code review and take part of a collaborative development environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/devops/2/AzurePipeline.png&quot; alt=&quot;Image&quot; title=&quot;Azure Pipeline&quot; /&gt;&lt;strong&gt;Azure Pipelines&lt;/strong&gt;  are used for &lt;strong&gt;continuous integration&lt;/strong&gt; and &lt;strong&gt;continuous delivery  (CI/CD)&lt;/strong&gt; of your code. It allows you to &lt;strong&gt;ship your code faster&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once your code is &lt;strong&gt;developed and committed&lt;/strong&gt; to the repos, a &lt;strong&gt;build&lt;/strong&gt; gets triggered in the &lt;strong&gt;build pipeline&lt;/strong&gt;.&lt;span style=&quot;background-color: #2197CB&quot;&gt; This build pipeline gets the &lt;strong&gt;latest code from the repos&lt;/strong&gt;, builds them in the build agent. On a successful build, the &lt;em&gt;build artifacts gets published using Release pipeline in your targeted deployment environment&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/devops/2/AzureTestPlans.png&quot; alt=&quot;Image&quot; title=&quot;Azure Test Plans&quot; /&gt;&lt;strong&gt;Azure Test Plans&lt;/strong&gt;  is for &lt;strong&gt;planning&lt;/strong&gt; and &lt;strong&gt;executing&lt;/strong&gt; your &lt;strong&gt;manual&lt;/strong&gt;, &lt;strong&gt;automated&lt;/strong&gt;  and l&lt;strong&gt;oad test cases&lt;/strong&gt;. Once the &lt;em&gt;build is succeeded test engineers can run a set of tests on the build for verification and validation of the desired functionality&lt;/em&gt;. And they can raise and log any defects or observation on failure  of any of the planned test scenarios in the Azure Boards.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/devops/2/AzureArtifacts.png&quot; alt=&quot;Image&quot; title=&quot;Azure Artifacts&quot; /&gt;&lt;strong&gt;Azure Artifacts&lt;/strong&gt;  manages your private NuGet, npm, Maven packages in a private feed. You can integrate this feed in your favourite IDE such as Visual Studio or Visual Studio Code and restore the packages from this feed while development. Additionally you can integrate this feed in the build pipeline and restore packages from this private repository. &lt;strong&gt;Azure Artifacts&lt;/strong&gt; helps a lot where there are a lot of shared common packages in use in the application and you want to control standards, version of those cross cutting atrifacts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/devops/2/AzureOverview.png&quot; alt=&quot;Image&quot; title=&quot;Azure Overview&quot; /&gt;&lt;strong&gt;Azure Overview&lt;/strong&gt;  gives real time insights of the project  &lt;strong&gt;such as teams velocity&lt;/strong&gt;, &lt;strong&gt;CI/CD&lt;/strong&gt; results, &lt;strong&gt;number of defects raised vs solved&lt;/strong&gt; at any point of time to name a few. &lt;strong&gt;Executive dashboards&lt;/strong&gt; can be created with inbuilt capability of it. These dashboard helps greatly for &lt;strong&gt;executive status reporting with risk and quality matrices&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additionally&lt;/strong&gt; it supports creating &lt;strong&gt;Wiki pages for the project&lt;/strong&gt;. Wiki pages can be used to &lt;strong&gt;create&lt;/strong&gt; any &lt;strong&gt;documents/ manual&lt;/strong&gt; which are &lt;strong&gt;relevant&lt;/strong&gt; for the &lt;strong&gt;ongoing or a completed project&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;alm-with-azure-devops-in-action&quot;&gt;ALM with Azure DevOps in action&lt;/h2&gt;

&lt;p&gt;Now that we have fair &lt;strong&gt;understanding of six pillars&lt;/strong&gt; of Azure DevOps, now lets see how all of these helps in ALM with an example. refer to the Infographic of  this post. This describes ALM in action with Azure DevOps very briefly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/devops/2/Azure-DevOps-ALM.png&quot; alt=&quot;Image&quot; title=&quot;Azure DevOps ALM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the beginning of the project or product it starts with an idea or some business requirement and after going through  multiple steps it takes shape of a usable product. In this example infographic&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1.&lt;/strong&gt; Customer comes with requirement.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;2.&lt;/strong&gt; Business analysts/ Product owner analyses the requirement and starts documenting them in the Azure Boards. They starts &lt;strong&gt;creating Epic, Feature and user stories&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;3.&lt;/strong&gt; Engineering team then starts &lt;strong&gt;estimating&lt;/strong&gt; the work and &lt;strong&gt;plan&lt;/strong&gt; those user stories for sprint.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;3.1.&lt;/strong&gt; In &lt;strong&gt;parallel&lt;/strong&gt; test engineers starts for &lt;strong&gt;Test planning&lt;/strong&gt; in Test Plans based on the acceptance criteria of the &lt;strong&gt;user stories&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;4.&lt;/strong&gt; Once sprint kicked in – developers starts picking user stories from the &lt;strong&gt;backlogs&lt;/strong&gt; created at step 2 and &lt;strong&gt;starts implementing them&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;5.&lt;/strong&gt; Once developers are done with the development they creates a &lt;strong&gt;pull request&lt;/strong&gt; and sends for &lt;strong&gt;code review&lt;/strong&gt;. Upon satisfaction of the code reviewer, developer commits the code in the Azure Repos.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;6.&lt;/strong&gt; A build gets triggered in the &lt;strong&gt;Build Pipeline&lt;/strong&gt; as soon as the &lt;strong&gt;code gets committed&lt;/strong&gt; in the Azure Repos using continuous integration (CI).&lt;span style=&quot;background-color: #2197CB&quot;&gt; A CI build gets the latest code form the repos, builds them in the build agents, restores any private packages from the feed setup in the Azure Artifacts. It runs unit tests, generates code coverage result and finally generates the build output for deployment.&lt;/span&gt; If any one of the steps configured in the build pipeline fails then whole commit gets rejected and developers gets a build failure notification. Developer fixes the build and commits one more time and CI build triggers automatically.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;7.&lt;/strong&gt; Build output needs to be moved to the deployment environment. In a &lt;strong&gt;Release Pipeline&lt;/strong&gt; source of the build artifacts is the output of the CI build of previous step 6, destination will be the servers where these artifacts needs to be deployed. In this example it is deploying the artifacts to the Azure Cloud App Services and Azure SQL databases for a TESTING environment (step 7.1). A gate or approval mechanism can be set before the deployment happens, this gives control to the approvers to pick and choose which build to be deploy.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;8.&lt;/strong&gt; Now that build is deployed in TESTING environment, test engineers starts testing and verifying the build quality. They run a set of manual, automated and load tests as planned during the planning phase (step 3.1) in Azure Test Plans. If they observe any defects then they log then in Azure Boards backlog and creates a new bug/issue/observation. Developer picks these defects once these are planned and fed back to the sprint, fixes the defects and commits to the Azure Repos which eventually triggers CI/CD in Azure Pipelines.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;9.&lt;/strong&gt; If test engineers are satisfied with the build quality and functionality delivered, then this build gets promoted to the upper environment (step 9.1). In this example it is UAT environment for business users to test.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;10.&lt;/strong&gt; Business users now gets a new build in UAT environment with all the features planned for the current sprint. Business user starts verifying the build and functionality in UAT environment.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;11.&lt;/strong&gt; If business users finds any defects then they log them into the Azure Boards backlogs as &lt;strong&gt;bug/observation&lt;/strong&gt;. Development and build cycle continues once these defects are planned and fed back to the sprint.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;12.&lt;/strong&gt; If business users are satisfied with the functionality and the build quality then the build gets promoted to the &lt;strong&gt;PRODUCTION&lt;/strong&gt; environment (&lt;strong&gt;step 12.1&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once this is released to &lt;strong&gt;production&lt;/strong&gt;, end users starts using the system. If any issue occurs in the production then it again gets logged in the Azure Boards backlog as an &lt;strong&gt;Incident/ Bug/ Issue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Like this &lt;strong&gt;planning&lt;/strong&gt;, &lt;strong&gt;development&lt;/strong&gt; and &lt;strong&gt;build cycle&lt;/strong&gt; continues towards shipment of the product.  In the whole process key &lt;strong&gt;stakeholders&lt;/strong&gt; of the project keeps an eye on &lt;strong&gt;Azure Overview dashboards&lt;/strong&gt; to identify and mitigate any risks.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;Okay, so we are at the end of this post. In this post we have covered six pillars of the Azure Dev Ops and how this can be leveraged to manage your applications life cycle. Azure DevOps is a browser based application in public cloud with first class support and integration with numerous opensource languages and platforms. You can manage your ALM in peace of mind end to end in Azure DevOps.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you want to know more about the pricing check &lt;a href=&quot;https://azure.microsoft.com/en-gb/pricing/details/devops/azure-devops-services/&quot;&gt;this&lt;/a&gt; out.&lt;/li&gt;
  &lt;li&gt;To learn more about Azure DevOps check &lt;a href=&quot;https://www.youtube.com/watch?v=kn2f5a2Z_n4&quot;&gt;this&lt;/a&gt; video.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh.. wait, In the meanwhile, you can get started with your free account in Azure DevOps and start exploring. Just log in to https://dev.azure.com with your Microsoft account and start your ALM journey in cloud with Azure DevOps.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">AZURE DEVOPS – MANAGE YOUR APPLICATION LIFECYCLE IN CLOUD</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/dev-ops.png" /></entry><entry><title type="html">Amazon pinpoint - Customer Engagement</title><link href="http://localhost:4000/blog/customer-engagement-with-Amazon-pinpoint" rel="alternate" type="text/html" title="Amazon pinpoint - Customer Engagement" /><published>2020-02-02T11:41:00+00:00</published><updated>2020-02-02T11:41:00+00:00</updated><id>http://localhost:4000/blog/customer-engagement-with-Amazon-pinpoint</id><content type="html" xml:base="http://localhost:4000/blog/customer-engagement-with-Amazon-pinpoint">&lt;h2 id=&quot;what-is-customer-engagement&quot;&gt;What is Customer Engagement?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Customer engagement&lt;/em&gt; refers to the practices that organizations employ to keep users coming back to their applications. Maximizing customer engagement is vital in today’s digital marketplace, where an ever-increasing number of brands are competing for a finite amount of customer attention. In this article, we discuss the factors that impact customer engagement, and provide information about specific steps you can take to improve customer engagement.&lt;/p&gt;

&lt;h3 id=&quot;why-customer-engagement-matters&quot;&gt;Why customer engagement matters&lt;/h3&gt;

&lt;p&gt;In 2012, the average adult in the United States spent one hour per day using his or her mobile device; by 2017, that figure had increased to 5.6 hours per day. Over half of that time is spent using third-party apps, but the majority of app users access 20 or fewer apps each month. Of those 20 apps, most users spent the vast majority of their time in their top 10 applications.&lt;/p&gt;

&lt;p&gt;At the same time, first impressions are everything in today’s digital marketplace. Almost a quarter of users have downloaded an app, ran it once, and never opened it again. Additional research suggests that as many as 80% of all app users stop using a given app within 90 days.&lt;/p&gt;

&lt;p&gt;These statistics paint a very clear picture: in order to succeed in this highly competitive environment, organizations must deliver digital content that delights and engages their customers.&lt;/p&gt;

&lt;h3 id=&quot;customer-engagement-in-action&quot;&gt;Customer engagement in action&lt;/h3&gt;
&lt;p&gt;Let’s assume your organization produces a mobile app for sports fans called All Things Sports. In your app, users can get the latest sports news, purchase memorabilia and event tickets, and play exciting mini-games. Your organization has devoted a large amount of time, effort, and money into creating a best-in-class app and acquiring new users. For this reason, it’s essential that your users keep coming back to your application so that your business can grow.&lt;/p&gt;

&lt;p&gt;For all applications, user interactions fall into three categories: activation, retention, and conversion. All Things Sports requires users to confirm their email address and select their favorite sports teams; the percentage of users who complete this process is the activation rate. Next, you need to offer content that is compelling enough to keep your users coming back. All Things Sports offers fun mini-games and special offers that encourage users to return to the app often. The likelihood that your customers will return to your application repeatedly is referred to as your retention rate. Finally, your organization needs to make money in order to grow. The main revenue generating activity in All Things Sports is the sale of event tickets and merchandise. The percentage of users who purchase these products through your app is your conversion rate. As the application developer, you have to continuously improve all three of these metrics in order to grow your business.&lt;/p&gt;

&lt;p&gt;The first step toward improving these metrics is to gather customer analytics data. Customer analytics data is the data you collect and analyze to better understand the ways in which customers use your application. A thorough analysis of this data can help you better serve your users, thereby increasing their engagement with your application. Making optimizations to your application based on this data can lead to positive reviews, better app store rankings, and increased word of mouth. These factors can increase your activation rate, which can in turn increase your retention and conversion rates. You can start gathering this information by integrating the AWS Mobile SDK into your application. For more information about customer analytics, see our companion article, What are Customer Analytics?&lt;/p&gt;

&lt;p&gt;The next step toward improving customer engagement is to create targeted segments of customers based on their characteristics. By targeting specific customers based on their demographics, preferences, behaviors, and interests, you can ensure that you’re using the right channels to send the right messages to the right customers. &lt;strong&gt;Amazon Pinpoint&lt;/strong&gt; can import app usage data obtained from the AWS Mobile SDK and use it to create customer segments. To learn more about the ways in which you can create customer segments, see our companion article, What is Customer Segmentation?&lt;/p&gt;

&lt;p&gt;The final step toward improving customer engagement is to deploy personalized, multi-channel messaging to your customers. You can use these messages to proactively update engaged customers on exciting new features and improvements in your application, or to incentivize less-engaged customers to sign back in to your application. You can also use this messaging to convey vital transactional content—such as password reset emails or purchase confirmations—to all customers. You can also use &lt;strong&gt;Amazon Pinpoint&lt;/strong&gt; to meet this need. For more information about multi-channel messaging, see the companion article titled What is Multi-Channel Messaging?&lt;/p&gt;

&lt;h2 id=&quot;what-is-amazon-pinpoint&quot;&gt;What Is Amazon Pinpoint?&lt;/h2&gt;

&lt;p&gt;Amazon Pinpoint is an AWS service that you can use to engage with your customers across multiple messaging channels. You can use &lt;strong&gt;Amazon Pinpoint to send push notifications, emails, SMS text messages, and voice messages&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;amazon-pinpoint-features&quot;&gt;Amazon Pinpoint Features&lt;/h2&gt;
&lt;p&gt;This section describes the major features of Amazon Pinpoint and the tasks that you can perform by using them.&lt;/p&gt;

&lt;h3 id=&quot;define-audience-segments&quot;&gt;Define Audience Segments&lt;/h3&gt;
&lt;p&gt;Reach the right audience for your messages by defining audience segments. A segment designates which users receive the messages that are sent from a campaign or journey. You can define dynamic segments based on data that’s reported by your application, such as operating system or mobile device type. You can also import static segments that you define outside of Amazon Pinpoint.&lt;/p&gt;

&lt;h3 id=&quot;engage-your-audience-with-messaging-campaigns&quot;&gt;Engage Your Audience with Messaging Campaigns&lt;/h3&gt;
&lt;p&gt;Engage your audience by creating a messaging campaign. A campaign sends tailored messages on a schedule that you define. You can create campaigns that send push notifications, email, SMS text messages, and voice messages.&lt;/p&gt;

&lt;p&gt;To experiment with alternative campaign strategies, set up your campaign as an A/B test, and analyze the results with Amazon Pinpoint analytics.&lt;/p&gt;

&lt;h3 id=&quot;create-user-journeys&quot;&gt;Create User Journeys&lt;/h3&gt;
&lt;p&gt;Create custom, multi-step experiences for your customers by designing and building journeys. With journeys, you can send messages to your customers based on their attributes, behaviors, and activities. When you build a journey, you design an automated workflow of activities that perform a variety of different actions—for example, sending an email message to participants, waiting for a certain period of time, or splitting participants based on actions that they take, such as clicking a link in a message.&lt;/p&gt;

&lt;h3 id=&quot;provide-consistent-messaging-with-templates&quot;&gt;Provide Consistent Messaging with Templates&lt;/h3&gt;
&lt;p&gt;Design consistent messages and reuse content more effectively by creating and using message templates. A message template contains content and settings that you want to reuse in messages that you send for any of your Amazon Pinpoint projects. You can use message templates in email messages, push notifications, SMS messages, and voice messages.&lt;/p&gt;

&lt;h3 id=&quot;deliver-personalized-content&quot;&gt;Deliver Personalized Content&lt;/h3&gt;
&lt;p&gt;Send content that’s customized for each recipient of a message. Using message variables and attributes, you can deliver dynamic, personalized content in messages that you send from campaigns and journeys.&lt;/p&gt;

&lt;p&gt;To streamline development, you can also use message variables and attributes to add personalized content to message templates. With message templates, this content can come from attributes that you create directly in Amazon Pinpoint or a machine learning model that you create in Amazon Personalize. By connecting message templates to models in Amazon Personalize, you can use machine learning to send relevant promotions or recommendations to each recipient of a message.&lt;/p&gt;

&lt;h3 id=&quot;analyze-user-behavior&quot;&gt;Analyze User Behavior&lt;/h3&gt;
&lt;p&gt;Gain insight into your audience and the effectiveness of your campaigns and messaging activities by using the analytics that Amazon Pinpoint provides. You can view trends in your users’ level of engagement, purchase activity, demographics, and more. You can also monitor your message traffic by viewing metrics such as the total number of messages that you sent for a campaign or project. Through the Amazon Pinpoint API, your application can also report custom data, which Amazon Pinpoint makes available for analysis.&lt;/p&gt;

&lt;p&gt;To analyze or store analytics data outside Amazon Pinpoint, configure Amazon Pinpoint to stream the data to Amazon Kinesis.&lt;/p&gt;

&lt;h3 id=&quot;send-test-messages&quot;&gt;Send Test Messages&lt;/h3&gt;
&lt;p&gt;Test the design and deliverability of your messages by sending test messages before you send messages to your customers.&lt;/p&gt;

&lt;h2 id=&quot;get-started&quot;&gt;Get Started&lt;/h2&gt;
&lt;p&gt;Get started with Amazon Pinpoint by &lt;strong&gt;creating a new project&lt;/strong&gt; or &lt;strong&gt;completing a tutorial&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-amazon-pinpoint&quot;&gt;Getting Started with Amazon Pinpoint&lt;/h2&gt;

&lt;p&gt;To start sending targeted messages in Amazon Pinpoint, you have to complete a few steps. &lt;em&gt;For example, you have to add customer contact information into Amazon Pinpoint, and then create segments that target certain customers. Next, you have to create your messages and schedule your campaigns. Finally, after you send your campaigns, you can use the analytics dashboards that are built into Amazon Pinpoint to see how well the campaigns performed.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;intended-audience&quot;&gt;Intended Audience&lt;/h3&gt;

&lt;p&gt;This tutorial is designed for &lt;strong&gt;marketing and business users&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;features-used&quot;&gt;Features Used&lt;/h3&gt;

&lt;p&gt;This tutorial shows you how to complete all of the following steps by using the Amazon Pinpoint console:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Importing customer data from a file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creating a segment that targets specific users based on their attributes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Creating an email campaign and scheduling it to be sent at a specific time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Viewing email delivery and response data by using the analytics dashboards that are built into Amazon Pinpoint.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-1-create-and-configure-a-project&quot;&gt;Step 1: Create and Configure a Project&lt;/h3&gt;

&lt;p&gt;To create a project and verify an email address&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open the Amazon Pinpoint console at https://console.aws.amazon.com/pinpoint/.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;All projects page&lt;/strong&gt;, choose &lt;strong&gt;Create a project&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;Create a project&lt;/strong&gt; window, for &lt;strong&gt;Project name&lt;/strong&gt;, enter a name for your project, and then &lt;strong&gt;choose Create&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
&lt;em&gt;The project name can contain up to 64 characters.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;Configure features&lt;/strong&gt; page, next to &lt;strong&gt;Email&lt;/strong&gt;, choose &lt;strong&gt;Configure&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Email address, type an email address that you want to use to send email. For example, you can use your personal email address, or your work email address. Choose &lt;strong&gt;Verify&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wait for 1–2 minutes, and then check the inbox for the email address that you specified in step 4. You should see an email from Amazon Web Services (no-reply-aws@amazon.com) with the subject line “Amazon Web Services – Email Address Verification Request in region &lt;strong&gt;RegionName&lt;/strong&gt;”, where &lt;strong&gt;RegionName&lt;/strong&gt; is the name of the AWS Region that you’re configuring Amazon Pinpoint in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open the email, and then click the link in the body of the email.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Return to the Amazon Pinpoint console in your browser. On the Set up email page, choose Save.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your account is now ready to send email from the email address that you verified. You can add additional email addresses later.&lt;/p&gt;

&lt;p&gt;You can also verify entire domains. When you verify a domain, you can send email from any address on that domain. For more information, see Verifying a Domain.&lt;/p&gt;

&lt;h3 id=&quot;step-2-import-customer-data-and-create-a-segment&quot;&gt;Step 2: Import Customer Data and Create a Segment&lt;/h3&gt;

&lt;p&gt;A segment is a group of your customers that share certain attributes. &lt;em&gt;For example, a segment might contain all of your customers who use version 2.0 of your app on an Android device, or all customers who live in the city of Los Angeles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you create a campaign, you have to choose a segment to send the campaign to. You can send multiple campaigns to a single segment, and you can send a single campaign to multiple segments.&lt;/p&gt;

&lt;p&gt;There are two types of segments that you can create in Amazon Pinpoint:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dynamic segments&lt;/strong&gt; – Segments that are based on attributes that you define. Dynamic segments can change over time. For example, if you add new endpoints to Amazon Pinpoint, or if you modify or delete existing endpoints, the number of endpoints in that segment may increase or decrease.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Imported segments&lt;/strong&gt; – Segments that are created outside of Amazon Pinpoint and saved in CSV or JSON format. Imported segments are static—that is, they never change. When you create a new segment, you can use an imported segment as a base segment, and then refine it by adding filters.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial, you create an imported segment by uploading a file from your computer. Next, you create a dynamic segment that is based upon the imported segment.&lt;/p&gt;

&lt;h4 id=&quot;step-21-download-and-modify-the-sample-file&quot;&gt;Step 2.1: Download and Modify the Sample File&lt;/h4&gt;

&lt;p&gt;In this section, you download a file that contains fictitious customer data. You also modify the data to include your own contact information. Later in this tutorial, you use this data to create a segment.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In a web browser, download the sample file from https://raw.githubusercontent.com/awsdocs/amazon-pinpoint-user-guide/master/examples/Pinpoint_Sample_Import.csv. Save the file to your computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Tip&lt;/strong&gt;
    You can quickly save this file to your computer by right-clicking the link, and then choosing Save Link As.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open the file in a text editor or spreadsheet application. On the last row of the file, replace the items in angle brackets (&amp;lt;…&amp;gt;) with your own contact information.&lt;/p&gt;

    &lt;p&gt;In the Address column, provide the same email address that you verified in Step 1.&lt;/p&gt;

    &lt;p&gt;In the User.UserAttributes.Company column, specify a company name that’s different from the fictitious company names in the file. You’ll use this unique company name when you define the criteria for your targeted segment in the next section.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
 &lt;em&gt;You don’t have to provide your information for each column in the file. However, at a minimum, you have to provide information for the ChannelType, Address, and User.UserAttributes.Company columns.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;The email that you create later in this tutorial uses several of these fields to create a personalized message.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you finish, save the file.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
 &lt;em&gt;If you used a spreadsheet application to modify the file, make sure that you save the modified file in Comma-Separated Values (.csv) format. Amazon Pinpoint can only import .csv and .json files.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;step-22-import-a-file-that-contains-customer-data&quot;&gt;Step 2.2: Import a File that Contains Customer Data&lt;/h4&gt;

&lt;p&gt;Now that you have a file that contains customer data, you can import it into Amazon Pinpoint. To import customer data, you have to create a new segment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To create an imported segment&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the Amazon Pinpoint console, in the navigation pane, choose &lt;strong&gt;Segments&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose &lt;strong&gt;Create a segment&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;Create a segment&lt;/strong&gt; page, choose &lt;strong&gt;Import a segment&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;strong&gt;Specifications&lt;/strong&gt; section, under &lt;strong&gt;Import method&lt;/strong&gt;, choose &lt;strong&gt;Upload files from your computer&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Choose files&lt;/strong&gt;. Navigate to the Pinpoint_Sample_Import.csv file that you downloaded and modified in the previous section.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose &lt;strong&gt;Create segment&lt;/strong&gt;. Amazon Pinpoint copies the file from your computer and creates a segment. Wait for about 1 minute while the import completes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;step-23-create-a-targeted-segment&quot;&gt;Step 2.3: Create a Targeted Segment&lt;/h4&gt;
&lt;p&gt;Your Amazon Pinpoint project now contains some customer data, as well as a segment that contains your entire customer list. It also contains your contact information.&lt;/p&gt;

&lt;p&gt;In this section, you create a targeted segment. You add segment criteria that filter the segment so that you’re the only member of the segment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To create the segment&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;Segments&lt;/strong&gt; page, choose &lt;strong&gt;Create a segment&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;Create a segment&lt;/strong&gt; page, choose &lt;strong&gt;Build a segment&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For &lt;strong&gt;Name&lt;/strong&gt;, enter a name for the segment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;4.Under &lt;strong&gt;Segment group 1&lt;/strong&gt;, do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Next to &lt;strong&gt;Include endpoints&lt;/strong&gt; that are in any of the following segments, choose the &lt;strong&gt;Pinpoint_Sample_Import&lt;/strong&gt; segment that you created in the previous step.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Add filters to refine your segment&lt;/strong&gt;, from the menu, choose &lt;strong&gt;Filter by channel&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next to &lt;strong&gt;Endpoints that match&lt;/strong&gt;, choose &lt;strong&gt;all&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For &lt;strong&gt;Channel&lt;/strong&gt;, choose &lt;strong&gt;EMAIL&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Add filters to refine your segment&lt;/strong&gt;, from the menu, choose &lt;strong&gt;Filter by user&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;strong&gt;User&lt;/strong&gt; filter, use the menu to choose &lt;strong&gt;Company&lt;/strong&gt;. Next, use the &lt;strong&gt;Choose values&lt;/strong&gt; menu to choose the unique company name that you specified for your own contact record in step 2.1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose &lt;strong&gt;Add an attribute or metric&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the new filter, use the menu to choose &lt;strong&gt;First Name&lt;/strong&gt;. Next, use the &lt;strong&gt;Choose values&lt;/strong&gt; menu to choose your &lt;strong&gt;first name&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Choose &lt;strong&gt;Create segment&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;step-3-create-and-schedule-a-campaign&quot;&gt;Step 3: Create and Schedule a Campaign&lt;/h3&gt;

&lt;p&gt;A campaign is a messaging initiative that engages a specific audience segment. A campaign sends tailored messages on the days and times that you specify. You can use the console to create a campaign that sends messages through the email, push notification, or SMS channels.&lt;/p&gt;

&lt;p&gt;In this section, you create an email campaign. You create a new campaign, choose your target segment, and create a responsive email message for the campaign. When you finish setting up the message, you choose the day and time when you want the message to be sent.&lt;/p&gt;

&lt;h4 id=&quot;step-31-create-the-campaign-and-choose-a-segment&quot;&gt;Step 3.1: Create the Campaign and Choose a Segment&lt;/h4&gt;
&lt;p&gt;When you create a segment, you first give the segment a name. Next, you choose the segment that the campaign applies to. In this tutorial, you choose the segment that you created in Step 2.3.&lt;/p&gt;

&lt;p&gt;To create the campaign and choose segment&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In a web browser, &lt;strong&gt;download the sample file&lt;/strong&gt; from https://raw.githubusercontent.com/awsdocs/amazon-pinpoint-user-guide/master/examples/Pinpoint_Sample_Email.html. Save the file to your computer.&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;&lt;strong&gt;Tip&lt;/strong&gt;
 You can quickly save this file to your computer by right-clicking the link, and then choosing Save Link As.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Open the file&lt;/strong&gt; that you just downloaded in a text editor, such as Notepad (Windows) or TextEdit (macOS). Press Ctrl+A (Windows) or Cmd+A (macOS) to select all of the text. Then, press Ctrl+C (Windows) or Cmd+C (macOS) to copy it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;strong&gt;Amazon Pinpoint console&lt;/strong&gt;, in the navigation pane, choose &lt;strong&gt;Campaigns&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose &lt;strong&gt;Create a campaign&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Campaign details&lt;/strong&gt;, for Campaign name, enter a &lt;strong&gt;name&lt;/strong&gt; for the campaign.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For &lt;strong&gt;Campaign type&lt;/strong&gt;, choose &lt;strong&gt;Standard campaign&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Choose a &lt;strong&gt;channel for this campaign&lt;/strong&gt;, choose &lt;strong&gt;Email&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the Choose a &lt;strong&gt;segment page&lt;/strong&gt;, choose Use an existing segment. Then, for &lt;strong&gt;Segment&lt;/strong&gt;, choose the &lt;strong&gt;targeted segment that you created&lt;/strong&gt; in Step 2.3. Choose &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;step-32-create-the-campaign-message&quot;&gt;Step 3.2: Create the Campaign Message&lt;/h4&gt;
&lt;p&gt;After you specify a campaign name and choose a segment, you can create your message. This tutorial includes a link to an HTML file that you can use to create your message.&lt;/p&gt;

&lt;p&gt;This sample file uses responsive HTML to create a message that renders properly on both computers and mobile devices. It uses inline CSS to provide compatibility with a wide variety of email clients. It also includes tags that are used to personalize the message with the recipient’s name and other personal information.&lt;/p&gt;

&lt;p&gt;To create the message&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;On the Create your message page, under &lt;strong&gt;Message content&lt;/strong&gt;, choose &lt;strong&gt;Create a new message&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For &lt;strong&gt;Subject&lt;/strong&gt;, enter a &lt;strong&gt;subject line for the email&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Under &lt;strong&gt;Message&lt;/strong&gt;, erase the sample HTML code that’s shown in the editor. Paste the HTML code that you copied in the first step in this section.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional) Modify the content of the message to include a message that you want to send.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can personalize the message for each recipient by including the name of an attribute inside two sets of curly braces. For example, the sample message includes the following text: . This code represents the User.UserAttributes.FirstName attribute, which contains the recipient’s first name. When you send the campaign, Amazon Pinpoint removes this attribute name and replaces it with the appropriate value for each recipient.&lt;/p&gt;

&lt;p&gt;You can experiment with other attribute names. Refer to the column headers in the spreadsheet that you imported in Step 2.2 for complete list of attribute names that you can specify in your message.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Tip&lt;/strong&gt;
You can use Design view to edit the content of the message without having to edit the HTML code. To use this view, choose Design from the view selector above the message editor, as shown in the following image.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;5.Choose &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;h5 id=&quot;step-33-schedule-the-campaign&quot;&gt;Step 3.3: Schedule the Campaign&lt;/h5&gt;
&lt;p&gt;The last step in creating the campaign is to choose when to send it. In Amazon Pinpoint, you can set up your campaigns so that they’re sent immediately after you launch them. You can also schedule them to be sent in the future—anywhere from 15 minutes from the current time, to six months into the future. Finally, you can schedule your messages to be sent on a recurring basis (that is, hourly, daily, weekly, or monthly). Recurring campaigns are a great way to send account or status updates where the appearance of the campaign message stays the same over time, but is populated with information that changes dynamically.&lt;/p&gt;

&lt;p&gt;In this section, you schedule your campaign to be sent immediately after you launch it.&lt;/p&gt;

&lt;p&gt;To schedule the campaign&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;Choose when to send the campaign page&lt;/strong&gt;, choose At a &lt;strong&gt;specific time&lt;/strong&gt;. Then, under &lt;strong&gt;Choose&lt;/strong&gt; when the campaign should be sent, choose &lt;strong&gt;Immediately&lt;/strong&gt;. Finally, choose &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the &lt;strong&gt;Review and launch page&lt;/strong&gt;, review all of the details of the &lt;strong&gt;campaign&lt;/strong&gt;. When you’re ready to send it, choose &lt;strong&gt;Launch campaign&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt;—you’ve created your first campaign with Amazon Pinpoint! Because you’re the only member of the segment that you created in Step 2.3, you should receive the message in your inbox within a few seconds.&lt;/p&gt;

&lt;h3 id=&quot;step-4-view-campaign-analytics&quot;&gt;Step 4: View Campaign Analytics&lt;/h3&gt;

&lt;p&gt;At this point, you’ve created a segment that you’re a member of. You’ve also created an email campaign and sent it to yourself. In this section, you look at the delivery and response metrics for the campaign.&lt;/p&gt;

&lt;h4 id=&quot;step-41-interact-with-your-campaign&quot;&gt;Step 4.1: Interact with Your Campaign&lt;/h4&gt;
&lt;p&gt;Before you can view the delivery and response metrics for your campaign, you have to interact with the message that you sent yourself in Step 3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To interact with the email&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In your &lt;strong&gt;email client&lt;/strong&gt;, open the message that you sent yourself in Step 3.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your email client automatically hides images by default, choose the Download pictures (or equivalent) button to load the images in the message.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Choose one or more of the links that are contained in the message.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wait for a few minutes, and then proceed to the next section.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;step-42-view-metrics-for-the-campaign&quot;&gt;Step 4.2: View Metrics for the Campaign&lt;/h4&gt;
&lt;p&gt;After you interact with the email that you sent from the campaign, you can view the metrics for the campaign.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To view the campaign metrics&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open the Amazon Pinpoint console at https://console.aws.amazon.com/pinpoint/.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the All &lt;strong&gt;projects page&lt;/strong&gt;, choose the &lt;strong&gt;project that you used to send the campaign&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;strong&gt;navigation pane&lt;/strong&gt;, under Analytics, choose &lt;strong&gt;Campaigns&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the &lt;strong&gt;Campaigns section&lt;/strong&gt;, choose the campaign that you created in Step 3.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(Optional) Use the date control to choose a date range for the reports on this page.&lt;/p&gt;

    &lt;p&gt;On the metrics page for your campaign, you see the following information:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Delivery count metrics&lt;/strong&gt; – This section provides information about the delivery of the messages that were sent from your campaign. It includes the following information:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;Messages sent&lt;/strong&gt; – The number of messages that were sent.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;Messages delivered&lt;/strong&gt; – The number of messages that were delivered to their recipients.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;Links clicked&lt;/strong&gt; – The number of times that links in the messages were clicked by recipients. If a single recipient clicks a link more than once, each click is represented in this section.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;Endpoint deliveries&lt;/strong&gt; – The average number of endpoints that the campaign was sent to, for each day in the chosen date range. The chart shows the number of endpoints that the campaign was delivered to, for each day in the chosen date range.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Delivery rate metrics&lt;/strong&gt; – This section shows the overall delivery and response rates for the messages that were sent from your campaign. It includes the following information:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;Delivery rate&lt;/strong&gt; – The percentage of messages that were delivered to recipients, of the total number of endpoints that you targeted in the segment that you sent this campaign to.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;Email open rate&lt;/strong&gt; – The percentage of messages that were opened by recipients, of the total number of messages that were delivered.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;Bounce rate&lt;/strong&gt; – The percentage of messages that weren’t delivered to recipients because they bounced. This value includes only hard bounces—that is, messages that bounced because of a permanent issue. For example, hard bounces could occur when the recipient’s email address doesn’t exist, or when the recipient permanently rejects email from your domain.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Campaign runs&lt;/strong&gt; – This section shows information that’s specific to each time the campaign ran. Because you can use Amazon Pinpoint to create recurring campaigns, this section can show information for several campaign runs. However, if you completed the procedures in this tutorial, this section contains information for only one campaign run because you ran the campaign only once. This section contains the following metrics, in addition to the metrics that are defined in the preceding sections:&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;Endpoints targeted&lt;/strong&gt; – The number of endpoints that were targeted by the segment that was associated with the campaign run. This number includes endpoints that were part of the segment, but didn’t receive the message.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;Total email opened&lt;/strong&gt; – The total number of times that messages sent from the campaign run were opened. For example, if a message was opened two times by one recipient, both of those opens are counted.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;next-step&quot;&gt;Next Step&lt;/h2&gt;

&lt;p&gt;We hope that you use this tutorial as a starting point as you discover the additional capabilities of Amazon Pinpoint. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You can improve the delivery of your email campaigns by making sure that your campaigns align with industry best practices. For more information, see Tips and Best Practices.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can verify an entire domain, which allows you to send email from any address on that domain. For more information about verifying domains, see Verifying a Domain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can obtain dedicated IP addresses for sending your email. Dedicated IP addresses are a great option for sending email in certain use cases. For more information, see Using Dedicated IP Addresses with Amazon Pinpoint.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can enable the Amazon Pinpoint Deliverability dashboard. The Deliverability dashboard helps you identify issues that could impact the delivery of your emails. For more information, see The Amazon Pinpoint Deliverability Dashboard.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can send messages through other channels, such as SMS or push. Before you can use these channels, you have to enable and configure them on the Settings page. For more information about using the Settings page to enable and configure channels, see Amazon Pinpoint Settings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can send data about your campaigns outside of Amazon Pinpoint. For example, you can send delivery and response data for your campaigns to Amazon S3 for long-term storage. You can also send data to Amazon Redshift to perform custom analyses. For more information about sending your data outside of Amazon Pinpoint, see Event Stream Settings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can integrate Amazon Pinpoint with your apps, or interact with Amazon Pinpoint programmatically, by using an AWS SDK. For more information, see the Amazon Pinpoint Developer Guide.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">What is Customer Engagement?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/aws_cloud.png" /></entry><entry><title type="html">The service desk with bots using Amazon Lex and Amazon Connect (Part 2)</title><link href="http://localhost:4000/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-2" rel="alternate" type="text/html" title="The service desk with bots using Amazon Lex and Amazon Connect (Part 2)" /><published>2020-02-02T11:41:00+00:00</published><updated>2020-02-02T11:41:00+00:00</updated><id>http://localhost:4000/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-2</id><content type="html" xml:base="http://localhost:4000/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-2">&lt;h2 id=&quot;the-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-2&quot;&gt;The service desk with bots using Amazon Lex and Amazon Connect (Part 2)&lt;/h2&gt;

&lt;p&gt;Hopefully you’ve had the chance to follow along in parts 1  where we set up our Lex chatbot to take and validate input.&lt;/p&gt;

&lt;p&gt;In this blog, we’ll interface with our Active Directory environment to perform the password reset function. To do this, we need to create a Lambda function that will be used as the logic to fulfil the user’s intent. The Lambda function will be packaged with the python LDAP library to modify the AD password attribute for the user. Below are the components that need to be configured.&lt;/p&gt;

&lt;h2 id=&quot;active-directory-service-account&quot;&gt;Active Directory Service Account&lt;/h2&gt;

&lt;p&gt;To begin, we need to start by creating a service account in Active Directory that has permissions to modify the password attribute for all users. Our Lambda function will then use this service account to perform password resets. To do this, create a service account in your Active Directory domain and perform the following to delegate the required permissions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open Active Directory Users and Computers.&lt;/li&gt;
  &lt;li&gt;Right click the OU or container that contains organisational users and click &lt;strong&gt;Delegate Control&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Next&lt;/strong&gt; on the Welcome Wizard.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Add&lt;/strong&gt; and enter the service account that will be granted the reset password permission.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;OK&lt;/strong&gt; once you’ve made your selection, followed by &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Ensure that &lt;strong&gt;Delegate the following common tasks&lt;/strong&gt; is enabled, and select &lt;strong&gt;Reset user passwords and force password change at next logon&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Next&lt;/strong&gt;, and &lt;strong&gt;Finish&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/delegatecontrol.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kms-key-for-the-ad-service-account&quot;&gt;KMS Key for the AD Service Account&lt;/h2&gt;

&lt;p&gt;Our Lambda function will need to use the credentials for the service account to perform password resets. We want to avoid storing credentials within our Lambda function, so we’ll store the password as an encrypted Lambda variable and allow our Lambda function to decrypt it using Amazon’s Key Management Service (KMS). To create the KMS encryption key, perform the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the Amazon Console, navigate to &lt;strong&gt;IAM&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Encryption Keys&lt;/strong&gt;, then Create key&lt;/li&gt;
  &lt;li&gt;Provide an Alias (e.g. resetpw) then select &lt;strong&gt;Next&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Next Step&lt;/strong&gt; for all subsequent steps then &lt;strong&gt;Finish&lt;/strong&gt; on step 5 to create the key.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;iam-role-for-the-lambda-function&quot;&gt;IAM Role for the Lambda Function&lt;/h2&gt;

&lt;p&gt;Because our Lambda function will need access to several AWS services such as SNS to notify the user of their new password and KMS to decrypt the service account password, we need to provide our function with an IAM role that has the relevant permissions. To do this, perform the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the Amazon Console, navigate to &lt;strong&gt;IAM&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Policies&lt;/strong&gt; then &lt;strong&gt;Create policy&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Switch to the &lt;strong&gt;JSON&lt;/strong&gt; editor, then copy and paste the following policy, replacing the KMS resource with the KMS ARN created above
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; {
 &quot;Version&quot;: &quot;2012-10-17&quot;,
 &quot;Statement&quot;: [
     {
     &quot;Effect&quot;: &quot;Allow&quot;,
     &quot;Action&quot;: &quot;sns:Publish&quot;,
     &quot;Resource&quot;: &quot;*&quot;
     },
     {
     &quot;Effect&quot;: &quot;Allow&quot;,
     &quot;Action&quot;: &quot;kms:Decrypt&quot;,
     &quot;Resource&quot;: &quot;&amp;lt;KMS ARN&amp;gt;&quot;
     }
 ]
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Provide a name for the policy (e.g. resetpw), then select &lt;strong&gt;Create policy&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;After the policy has been created, select &lt;strong&gt;Roles&lt;/strong&gt;, then &lt;strong&gt;Create Role&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;For the AWS Service, select &lt;strong&gt;Lambda&lt;/strong&gt;, then click &lt;strong&gt;Next:Permissions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Search for and select the policy you created in step 5, as well as the &lt;strong&gt;AWSLambdaVPCAccessExecutionRole&lt;/strong&gt; and &lt;strong&gt;AWSLambdaBasicExecutionRole&lt;/strong&gt; policies then click &lt;strong&gt;Next: Review&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Provide a name for the role (e.g. resetpw) then click &lt;strong&gt;Create role&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;network-configuration-for-the-lambda-function&quot;&gt;Network Configuration for the Lambda Function&lt;/h2&gt;

&lt;p&gt;To access our Active Directory environment, the Lambda function will need to run within a VPC or a peered VPC that hosts an Active Directory domain controller. Additionally, we need the function to access the internet to be able to access the KMS and SNS services. Lambda functions provisioned in a VPC are assigned an Elastic network Interface with a private IP address from the subnet it’s deployed in. Because the ENI doesn’t have a public IP address, it cannot simply leverage an internet gateway attached to the VPC for internet connectivity and as a result, must have traffic routed through a NAT Gateway similar to the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/natgw.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;password-reset-lambda-function&quot;&gt;Password Reset Lambda Function&lt;/h2&gt;

&lt;p&gt;Now that we’ve performed all the preliminary steps, we can start building the Lambda function. Because the Lambda execution environment uses Amazon Linux, I prefer to build my Lambda deployment package on a local Amazon Linux docker container to ensure library compatibility. Alternatively, you could deploy a small Amazon Linux EC2 instance for this purpose, which can assist with troubleshooting if it’s deployed in the same VPC as your AD environment.
Okay, so let’s get started on building the lambda function. Log in to your Amazon Linux instance/container, and perform the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a project directory and install python-ldap dependencies, gcc, python-devel and openldap-devel&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Mkdir ~/resetpw&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;sudo yum install python-devel openldap-devel gcc&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, we’re going to download the python-ldap library to the directory we created&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;Pip install python-ldap -t ~/resetpw&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the resetpw directory, create a file called reset_function.py and copy and paste the following script&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
import ldap
import os
import boto3
import random
import string

from base64 import b64decode

#Variables
url=os.environ['url']
domain_base_dn=os.environ['domain_base_dn']
user=os.environ['user']
ENCRYPTED=os.environ['pw']
pw=boto3.client('kms').decrypt(CiphertextBlob=b64decode(ENCRYPTED))['Plaintext']

def lambda_handler(event, context):
    #Set up LDAP connection
    ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
    con = ldap.initialize(url)
    con.set_option(ldap.OPT_REFERRALS, 0)
    con.bind_s(user,pw)
    slotUserID = event[&quot;currentIntent&quot;][&quot;slots&quot;][&quot;UserID&quot;]
    results = con.search_ext_s(domain_base_dn,ldap.SCOPE_SUBTREE,&quot;sAMAccountName=&quot; + slotUserID,attrlist=['monthStarted', 'birthDate', 'distinguishedName','telephoneNumber'])
    birthdate = results[0][1][&quot;birthDate&quot;][0]
    monthStarted = results[0][1][&quot;monthStarted&quot;][0]
    phoneNumber = results[0][1][&quot;telephoneNumber&quot;][0]
    slotBirthDate = event[&quot;currentIntent&quot;][&quot;slots&quot;][&quot;DOB&quot;]
    slotMonth = event[&quot;currentIntent&quot;][&quot;slots&quot;][&quot;MonthStarted&quot;]

    # Reset Password
    if((birthdate == slotBirthDate) and (monthStarted == slotMonth)):
        new_password = ''.join(random.choice(string.letters + string.digits + string.punctuation) for _ in range(10))
        unicode_pass = unicode('\&quot;' + new_password + '\&quot;', 'iso-8859-1')
        password_value = unicode_pass.encode('utf-16-le')
        add_pass = [(ldap.MOD_REPLACE, 'unicodePwd', [password_value])]
        con.modify_s(results[0][1][&quot;distinguishedName&quot;][0],add_pass)        
        sns = boto3.client('sns')
        sns.publish(PhoneNumber=phoneNumber, Message='Your new password is ' + new_password )
        endData = {
            &quot;dialogAction&quot;: {
                &quot;type&quot;: &quot;Close&quot;,
                &quot;fulfillmentState&quot;: &quot;Fulfilled&quot;,
                &quot;message&quot;: {
                    &quot;contentType&quot;: &quot;PlainText&quot;,
                    &quot;content&quot;: &quot;Your password has been reset and sent to your mobile.&quot;
                }
            }
        }
    else:
        endData = {
            &quot;dialogAction&quot;: {
                &quot;type&quot;: &quot;Close&quot;,
                &quot;fulfillmentState&quot;: &quot;Failed&quot;,
                &quot;message&quot;: {
                    &quot;contentType&quot;: &quot;PlainText&quot;,
                    &quot;content&quot;: &quot;The details you provided are incorrect. Goodbye&quot;
                }
            }
        }
    con.unbind()
    return endData
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Now, we need to create the Lambda deployment package. As the package size is correlated with the speed of Lambda function cold starts, we need to filter out anything that’s not necessary to reduce the package size. The following zip’s the script and LDAP library:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
    Cd ~/resetpw
zip -r ~/resetpw.zip . -x &quot;setuptools*/*&quot; &quot;pkg_resources/*&quot; &quot;easy_install*&quot;*

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;We need to deploy this package as a Lambda function. I’ve got AWSCLI installed in my Amazon Linux container, so I’m using the following CLI to create the Lambda function. Alternatively, you can download the zip file and manually create the Lambda function in the AWS console using the same parameters specified in the CLI below.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

aws lambda create-function --function-name reset_function --region us-east-1 --zip-file fileb://root/resetpw.zip --role resetpw --handler reset_function.lambda_handler --runtime python2.7 --timeout 30 --vpc-config SubnetIds=subnet-a12b3cde,SecurityGroupIds=sg-0ab12c30 --memory-size 128*

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For the script to run in your environment, a number of Lambda variables need to be set which will be used at runtime. In the AWS Console, navigate to Lambda then click on your newly created Lambda function. In the environment variables section, create the following variables:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Url&lt;/strong&gt; – This is the LDAPS URL for your domain controller. Note that it must be LDAP over SSL.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Domain_base_dn&lt;/strong&gt; – The base distinguished name used to search for the user&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;User&lt;/strong&gt; – The service account that has permissions to change the user password&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Pw&lt;/strong&gt; – The password of the service account&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, we need to encrypt the Pw variable in the Lambda console. Navigate to the Encryption configuration and select Enable helpers for encryption in transit. Select your KMS key for both encryption in transit and at reset, then select the Encrypt button next to the pw variable. This will encrypt and mask the value.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/envvar.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hit Save in the top right-hand corner to save the environment variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it! The Lambda function is now configured. A summary of the Lambda function’s logic is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Collect the Lambda environment variables and decrypt the service account password&lt;/li&gt;
  &lt;li&gt;Perform a secure AD bind but don’t verify the certificate (I’m using a Self-Signed Cert in my lab)&lt;/li&gt;
  &lt;li&gt;Collect the user’s birthday, start month, telephone number, and DN from AD&lt;/li&gt;
  &lt;li&gt;Check the user’s verification input&lt;/li&gt;
  &lt;li&gt;If the input is correct, reset the password and send it to the user’s telephone number, otherwise exit the function.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;update-and-test-lex-bot-fulfillment&quot;&gt;Update and test Lex bot fulfillment&lt;/h2&gt;

&lt;p&gt;The final step is to add the newly created Lambda function to the Lex bot so it’s invoked after input is validated. To do this, perform the following&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the Amazon Console, navigate to Amazon Lex and select your bot&lt;/li&gt;
  &lt;li&gt;Select Fulfillment for your password reset intent, then select AWS Lambda function&lt;/li&gt;
  &lt;li&gt;Choose the recently created Lambda function from the drop down box, then select Save Intent&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That should be it! You’ll need to build your bot again before testing…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/fulfilled.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My phone buzzes with a new SMS…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/passmsg.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Success! A few final things worth noting:&lt;/p&gt;

&lt;p&gt;All Lambda execution logs will be written to CloudWatch logs, so this is the best place to begin troubleshooting if required
Modification to the AD password attribute is not possible without a secure bind and will result in an error.
The interrogated fields (month started and date of birth) are custom AD attributes in my lab.
Password complexity in my lab is relaxed. If you’re using the default password complexity in AD, the randomly generated password in the lambda function may not meet complexity requirements every time.&lt;/p&gt;

&lt;p&gt;While we’ve successfully tested this functionality in the AWS console, we want to provide our users with the ability to call and talk with the bot over the phone. Here, we’ll wire up Amazon Connect with our bot to provide this capability.&lt;/p&gt;

&lt;h2 id=&quot;what-is-amazon-connect&quot;&gt;What is Amazon Connect&lt;/h2&gt;
&lt;p&gt;Amazon Connect is a Cloud based contact service center that can be set up in minutes to take phone calls and route them to the correct service center agents. Additionally, Connect is able to integrate with Amazon Lex to create a self-service experience, providing a cost effective method for resolving customer queries without having to wait in queue for a human agent. In our case, Lex will be integrated with Amazon Connect to field password reset requests.&lt;/p&gt;

&lt;h3 id=&quot;provisioning-amazon-connect&quot;&gt;Provisioning Amazon Connect&lt;/h3&gt;

&lt;p&gt;The following steps provision the base Amazon Connect tenant:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Begin by heading to the AWS Console, then navigate to &lt;strong&gt;Amazon Connect&lt;/strong&gt; and select &lt;strong&gt;Add an instance&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Specify a sub-domain for the access URL which will be used to log into Amazon Connect. Select &lt;strong&gt;Next step&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;For now, skip creating an administrator by selecting &lt;strong&gt;Skip this&lt;/strong&gt;, then select Next step.&lt;/li&gt;
  &lt;li&gt;For Telephony Options ensure &lt;strong&gt;Incoming Calls&lt;/strong&gt; is selected and &lt;strong&gt;Outbound Calls&lt;/strong&gt; is unselected, then click &lt;strong&gt;Next step&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Accept the default data storage configuration and select &lt;strong&gt;Next step&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Finally, review the information provided and select &lt;strong&gt;Create instance.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s all that’s required to provision the Amazon Connect service. Pretty simple stuff. It takes a few minutes to provision, then you’ll be ready to begin configuring your Amazon Connect tenant.&lt;/p&gt;

&lt;h3 id=&quot;configuring-amazon-connect&quot;&gt;Configuring Amazon Connect&lt;/h3&gt;

&lt;p&gt;Next, we need to claim a phone number to be used with our service:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Once Amazon Connect has been provisioned, click &lt;strong&gt;Get started&lt;/strong&gt; to log into your Amazon Connect instance.&lt;/li&gt;
  &lt;li&gt;On the Welcome to Amazon Connect page, select &lt;strong&gt;Let’s Go.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To claim a phone number, select your preferred country code and type then select &lt;strong&gt;Next&lt;/strong&gt;. You may find that there are no available numbers for your country of choice (like the screenshot below). If that’s the case and it’s necessary that you have a local number, you can raise a support case with Amazon. For testing purposes, I’m happy to provision a US number and use Google Hangouts to dial the number for free.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/awscloud/19/claimphonenumber.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;When prompted to make a call, choose Skip for now.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should now be at the Amazon Connect dashboard where there are several options, but before we can continue, we first need to add the Lex bot to Amazon Connect to allow it to be used within a contact flow.&lt;/p&gt;

&lt;h3 id=&quot;adding-lex-to-amazon-connect&quot;&gt;Adding Lex to Amazon Connect&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Switch back to the AWS Console and navigate to &lt;strong&gt;Amazon Connect&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Select the Amazon Connect instance alias created in the previous step.&lt;/li&gt;
  &lt;li&gt;On the left-hand side, select &lt;strong&gt;Contact Flows&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Under the Amazon Lex section, click &lt;strong&gt;Add Lex Bot&lt;/strong&gt;, and select the user administration bot we created.&lt;/li&gt;
  &lt;li&gt;Select Save Lex Bots.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that our bot has been added to Amazon Connect, we should be able to create an appropriate Contact Flow that leverages our bot.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-contact-flow&quot;&gt;Creating the Contact Flow&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Switch back to the Amazon Connect dashboard then navigate to &lt;strong&gt;Contact Flows&lt;/strong&gt; under routing on the left sidebar.&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Create contact flow&lt;/strong&gt; and enter a name (e.g. User administration) for the contact flow.&lt;/li&gt;
  &lt;li&gt;Expand the &lt;strong&gt;Interact&lt;/strong&gt; menu item then click and drag &lt;strong&gt;Get customer input&lt;/strong&gt; to the grid.&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;Get customer input&lt;/strong&gt; item, and set the following properties:
    &lt;ul&gt;
      &lt;li&gt;Enable &lt;strong&gt;Text to speech&lt;/strong&gt; then add a greeting text (e.g. Welcome to the cloud call center. What would you like assistance with?).&lt;/li&gt;
      &lt;li&gt;Ensure that &lt;strong&gt;Interpret&lt;/strong&gt; as is set to &lt;strong&gt;Text&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Choose the &lt;strong&gt;Amazon Lex&lt;/strong&gt; option, then add the Lex Bot name (e.g. UserAdministration) and set the alias to &lt;strong&gt;$LATEST&lt;/strong&gt; to ensure it uses the latest build of the bot.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Under Intents, select &lt;strong&gt;Add a parameter&lt;/strong&gt; then enter the password reset intent for the Lex Bot (e.g. ResetPW)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select &lt;strong&gt;Save&lt;/strong&gt; to save the configuration.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/awscloud/19/customerinput.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;It’s worth noting that if you wanted to send the user’s mobile number through to your Lex bot for verification purposes, this can be done by sending a session attribute as shown below. The phone number will be passed to the Lambda function in the sessionAttributes object.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/awscloud/19/sessionattribute.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the left sidebar, expand Terminate/Transfer then drag and drop Disconnect/Hang up onto the grid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect the Start entry point to the Get Customer Input box and connect all the branches of the Get Customer Input Box to the Disconnect/Hang up box as shown below.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/awscloud/19/contactflow.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;We could have added more complex flows to deal with unrecognised intents or handle additional requests that our Lex bot isn’t configured for (both of which would be forwarded to a human agent), however this is outside the scope of this blog post.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In the top right-hand corner above the grid, select the down arrow, then &lt;strong&gt;Save &amp;amp; Publish&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;setting-the-contact-flow&quot;&gt;Setting the Contact Flow&lt;/h2&gt;
&lt;p&gt;Now that we have a contact flow created, we need to attach it to the phone number we provisioned earlier.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the left sidebar in the Amazon Connect console, select &lt;strong&gt;Phone Numbers&lt;/strong&gt; under the &lt;strong&gt;Routing&lt;/strong&gt; menu then select the phone number listed.&lt;/li&gt;
  &lt;li&gt;Under the &lt;strong&gt;Contact Flow/IVR&lt;/strong&gt; dropdown menu, select the Contact flow you created, then select &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;testing-the-contact-flow&quot;&gt;Testing the Contact Flow&lt;/h2&gt;

&lt;p&gt;Now that we’ve associated the contact flow with the phone number, you’re ready for testing! Remember, if you’ve provisioned a number in the US (and you’re overseas), you can dial for free using Google hangouts.&lt;/p&gt;

&lt;p&gt;That’s it! You now have a fully functioning chatbot that can be called and spoken to. From here, you can add more intents to build a bot that can handle several simple user administration tasks.&lt;/p&gt;

&lt;p&gt;A few things worth noting:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You may notice that Lex repeats the user ID as a number, rather than individual digits. Unfortunately, Amazon Connect doesn’t support SSML content from Lex at this time however it’s in the product roadmap.&lt;/li&gt;
  &lt;li&gt;You can view missed utterances on the &lt;strong&gt;Monitoring tab&lt;/strong&gt; on your Lex bot and potentially add them to existing intents. This is a great way to monitor and expand on the capability of your bot.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-2&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">The service desk with bots using Amazon Lex and Amazon Connect (Part 2)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/aws_cloud.png" /></entry><entry><title type="html">The service desk with bots using Amazon Lex and Amazon Connect (Part 1)</title><link href="http://localhost:4000/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-1" rel="alternate" type="text/html" title="The service desk with bots using Amazon Lex and Amazon Connect (Part 1)" /><published>2020-02-02T11:41:00+00:00</published><updated>2020-02-02T11:41:00+00:00</updated><id>http://localhost:4000/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-1</id><content type="html" xml:base="http://localhost:4000/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-1">&lt;h2 id=&quot;the-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-1&quot;&gt;The service desk with bots using Amazon Lex and Amazon Connect (Part 1)&lt;/h2&gt;

&lt;p&gt;What! Is this guy for real? Does he really think he can replace the front line of IT with pre-canned conversations?” I must admit, it’s a bold statement. The IT Service Desk has been around for years and has been the foot in the door for most of us in the IT industry. It’s the face of IT operations and plays an important role in ensuring an organisation’s staff can perform to the best of their abilities. But what if we could take some of the repetitive tasks the service desk performs and automate them? Not only would we be saving on head count costs, we would be able to ensure correct policies and procedures are followed to uphold security and compliance. The aim of this blog is to provide a working example of the automation of one service desk scenario to show how easy and accessible the technology is, and how it can be applied to various use cases.&lt;/p&gt;

&lt;p&gt;To make it easier to follow along, I’ve broken this blog up into a number of parts. Part 1 will focus on the high-level architecture for the scenario and begin creating the Lex chatbot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/selfservicedora.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;Arguably, the most common service desk request is the password reset. While this is a pretty simple issue for the service desk to resolve, many service desk staff seem to skip over, or not realise the importance of user verification. Both the simple resolution and the strict verification requirement make this a prime scenario to automate.&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;p&gt;So what does the architecture look like? The diagram below dictates the expected process flow. Let’s step through each item in the diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/amazon-connect-page-1-1.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;amazon-connect&quot;&gt;Amazon Connect&lt;/h3&gt;
&lt;p&gt;The process begins when the user calls the service desk and requests to have their password reset. In our architecture, the service desk uses Amazon Connect which is a cloud based customer contact centre service, allowing you to create contact flows, manage agents, and track performance metrics. We’re also able to plug in an Amazon Lex chatbot to handle user requests and offload the call to a human if the chatbot is unable to understand the user’s intent.&lt;/p&gt;

&lt;h3 id=&quot;amazon-lex&quot;&gt;Amazon Lex&lt;/h3&gt;
&lt;p&gt;After the user has stated their request to change their password, we need to begin the user verification process. Their intent is recognised by our Amazon Lex chatbot, which initiates the dialog for the user verification process to ensure they are who they really say they are.&lt;/p&gt;

&lt;h3 id=&quot;aws-lambda&quot;&gt;AWS Lambda&lt;/h3&gt;
&lt;p&gt;After the user has provided verification information, AWS Lambda, which is a compute on demand service, is used to validate the user’s input and verify it against internal records. To do this, Lambda interrogates Active Directory to validate the user.&lt;/p&gt;

&lt;h3 id=&quot;amazon-sns&quot;&gt;Amazon SNS&lt;/h3&gt;
&lt;p&gt;Once the user has been validated, their password is reset to a random string in Active Directory and the password is messaged to the user’s phone using Amazon’s Simple Notification Service. This completes the interaction.&lt;/p&gt;

&lt;h2 id=&quot;building-our-chatbot&quot;&gt;Building our Chatbot&lt;/h2&gt;
&lt;p&gt;Before we get into the details, it’s worth mentioning that the aim of this blog is to convey the technology capability. There’s many ways of enhancing the solution or improving validation of user input that I’ve skipped over, so while this isn’t a finished production ready product, it’s certainly a good foundation to begin building an automated call centre.&lt;/p&gt;

&lt;p&gt;To begin, let’s start with building our Chatbot in &lt;strong&gt;Amazon Lex&lt;/strong&gt;. In the Amazon Console, navigate to Amazon Lex. You’ll notice it’s only available in Ireland and US East. As Amazon Connect and my Active Directory environment is also in US East, that’s the region I’ve chosen.&lt;/p&gt;

&lt;p&gt;Go ahead and select &lt;strong&gt;Create Bot&lt;/strong&gt;, then choose to create your own &lt;strong&gt;Custom Bot&lt;/strong&gt;. I’ve named mine “&lt;strong&gt;UserAdministration&lt;/strong&gt;”. Choose an Output voice and set the session timeout to 5 minutes. An IAM Role will automatically be created on your behalf to allow your bot to use Amazon Polly for speech. For COPPA, select &lt;strong&gt;No&lt;/strong&gt;, then select &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/custombot.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the bot has been created, we need to identify the user action expected to be performed, which is known as an intent. A bot can have multiple intents, but for our scenario, we’re only creating one, which is the password reset intent. Go ahead and select &lt;strong&gt;Create Intent&lt;/strong&gt;, then in the Add Intent window, select &lt;strong&gt;Create new intent&lt;/strong&gt;. My intent name is &lt;strong&gt;“ResetPW”&lt;/strong&gt;. Select &lt;strong&gt;Add&lt;/strong&gt;, which should add the intent to your bot. We now need to specify some expected sample utterances, which are phrases the user can use to trigger the Reset Password intent. There’s quite a few that could be listed here, but I’m going to limit mine to the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;I forgot my password&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I need to reset my password&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Can you please reset my password&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/utterances.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next section is the configuration for the Lambda validation function. Let’s skip past this for the time being and move onto the slots. Slots are used to collect information from the user. In our case, we need to collect verification information to ensure the user is who they say they are. The verification information collected is going to vary between environments. I’m looking to collect the following to verify against Active Directory:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;User ID&lt;/strong&gt; – In my case, this is a 6-digit employee number that is also the sAMAccountName in Active Directory&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User’s birthday&lt;/strong&gt; – This is a custom attribute in my Active Directory&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Month started&lt;/strong&gt; – This is a custom attribute in my Active Directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to this, it’s also worth collecting and verifying the user’s mobile number. This can be done by passing the caller ID information from Amazon Connect, however we’ll skip this, as the bulk of our testing will be text chat and we need to ensure we have a consistent experience.&lt;/p&gt;

&lt;p&gt;To define a slot, we need to specify three items:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Name of the slot&lt;/strong&gt; – Think of this as the variable name.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Slot type&lt;/strong&gt; – The data type expected. This is used to train the machine learning model to recognise the value for the slot.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prompt&lt;/strong&gt; – How the user is prompted to provide the value sought.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many slot types are provided by Amazon, two of which has been used in this scenario. For “MonthStarted”, I’ve decided to create my own custom slot type, as the in-built “AMAZON.Month” slot type wasn’t strictly enforcing recognisable months. To create your own slot type, press the &lt;strong&gt;plus&lt;/strong&gt; symbol on the left-hand side of the page next to &lt;strong&gt;Slot Types&lt;/strong&gt;, then provide a name and description for your slot type. Select to &lt;strong&gt;Restrict to Slot values and Synonyms&lt;/strong&gt;, then enter each month and its abbreviation. Once completed, click Add slot to intent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/monthsofyear.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the custom slot type has been configured, it’s time to set up the slots for the intent. The screenshot below shows the slots that have been configured and the expected order to prompt the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/slots.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last step (for this blog post), is to have the bot verify the information collected is correct. Tick the Confirmation Prompt box and in the Confirm text box provided, enter the following:&lt;/p&gt;

&lt;p&gt;Just to confirm, your user ID is {UserID}, your Date of Birth is {DOB} and the month you started is {MonthStarted}. Is this correct?&lt;/p&gt;

&lt;p&gt;For the Cancel text box, enter the following:
Sorry about that. Please call back and try again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/confirmation.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Be sure to leave the &lt;strong&gt;fulfillment&lt;/strong&gt; to &lt;strong&gt;Return parameters to client&lt;/strong&gt; and hit &lt;strong&gt;Save Intent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Great! We’ve built the bare basics of our bot. It doesn’t really do much yet, but let’s take it for a spin anyway and get a feel for what to expect. In the top right-hand corner, there’s a &lt;strong&gt;build&lt;/strong&gt; button. Go ahead and click the button.&lt;/p&gt;

&lt;p&gt;This takes some time, as building a bot triggers machine learning and creates the models for your bot. Once completed, the bot should be available to text or voice chat on the right side of the page. As you move through the prompts, you can see at the bottom the slots getting populated with the expected format. i.e. 14th April 1983 is converted to 1983-04-14.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/chatlog.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So at the moment, our bot doesn’t do much but collect the information we need. Admittedly, the conversation is a bit robotic as well. In the next few blogs, we’ll give the bot a bit more of a personality, we’ll do some input validation, and we’ll begin to integrate with Active Directory. Once we’ve got our bot working as expected, we’ll bolt on Amazon Connect to allow users to dial in and converse with our new bot.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-lambda-initialisation-and-validation-function&quot;&gt;Creating the Lambda initialisation and validation function&lt;/h2&gt;

&lt;p&gt;As data validation requires compute, we’ll need to start by creating an AWS Lambda function. Head over to the AWS console, then navigate to the AWS Lambda page. Once you’re there, select Create Function and choose to Author from Scratch then specify the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: ResetPWCheck&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Runtime&lt;/strong&gt;: Python 2.7 (it’s really a matter of preference)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Role&lt;/strong&gt;: I use an existing Out of the Box role, “Lambda_basic_execution”, as I only need access to CloudWatch logs for debugging.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/createfunction.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve populated all the fields, go ahead and select Create Function. The script we’ll be using is provided (further down) in this blog, however before we go through the script in detail, there are two items worth mentioning.&lt;/p&gt;

&lt;h3 id=&quot;input-events-and-response-formats&quot;&gt;Input Events and Response Formats&lt;/h3&gt;
&lt;p&gt;It’s well worth familiarising yourself with the page on Lambda Function Input Event and Response Formats in the Lex Developer guide. Every time input is provided to Lex, it invokes the Lambda initalisation and validation function.
&lt;em&gt;&lt;strong&gt;For example&lt;/strong&gt;, when I tell my chatbot “I need to reset my password”, the lambda function is invoked and the following event is passed:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;currentIntent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;slots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;MonthStarted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;confirmationStatus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ResetPW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;slotDetails&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;originalValue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;resolutions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;MonthStarted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;originalValue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;resolutions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;originalValue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;resolutions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sd0xe8xzbgf1kyvtbnzsuymxky2a5bnq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;bot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;alias&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$LATEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$LATEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UserAdministration&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;inputTranscript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I need to reset my password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;requestAttributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;invocationSource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DialogCodeHook&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;outputDialogMode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;messageVersion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;sessionAttributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Amazon Lex expects a response from the Lambda function in JSON format that provides it with the next dialog action.&lt;/p&gt;

&lt;h3 id=&quot;persisting-variables-with-session-attributes&quot;&gt;Persisting Variables with Session Attributes&lt;/h3&gt;

&lt;p&gt;There are many ways to determine within your Lambda function where you’re up to in your chat dialog, however my preferred method is to pass state information within the SessionAttributes object of the input event and response as a key/value pair. The SessionAttributes can persist between invocations of the Lambda function (every time input is provided to the chatbot), however you must remember to collect and pass the attributes between input and responses to ensure it persists.&lt;/p&gt;

&lt;h3 id=&quot;input-validation-code&quot;&gt;Input Validation Code&lt;/h3&gt;
&lt;p&gt;With that out of the way, let’s begin looking at the code. The below script is what I’ve used which you can simply copy and paste, assuming you’re using the same slot and intent names in your Lex bot that were used.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;elicit_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messageType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slotToElicit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;sessionAttributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Completed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ElicitSlot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;contentType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;intentName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ResetPW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;slots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;slotToElicit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slotToElicit&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delegate_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;sessionAttributes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Completed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completed&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Delegate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;slots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chkUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'UserID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;That format seems incorrect. Let's try again. What is your user id?&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elicit_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;userid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chkDob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;That format seems incorrect. Let's try again. What is your Date of Birth?&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elicit_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;userid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chkMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputDialogMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MonthStarted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;That month seems incorrect. Let's try again. What month did you start?&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elicit_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MonthStarted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmIntent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputDialogMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirmIntent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputDialogMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ConfirmIntent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;intentName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ResetPW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;slots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputDialogMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Voice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contentType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SSML&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;speak&amp;gt;Just to confirm, your user id is &amp;lt;say-as interpret-as=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/say-as&amp;gt;, your date of birth is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and the month of your start date is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MonthStarted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;. Is that correct?&amp;lt;/speak&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contentType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Just to confirm, your user id is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;s&quot;&gt;&quot;, your date of birth is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and the month of your start date is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MonthStarted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;. Is that correct?&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Denied&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;fulfillmentState&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;contentType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Please call back and try again.&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;confirmed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'currentIntent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'slots'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sessionAttributes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'currentIntent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;confirmationStatus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outputDialogMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;outputDialogMode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Completed&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sure, i can help with that! But first, i need to verify your identity. What is your user id?&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elicit_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Completed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chkUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Completed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;userid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chkDob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Completed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chkMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputDialogMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s break it down.&lt;/p&gt;

&lt;p&gt;When the lambda function is first invoked, we check to see if any state is set in the sessionAttributes. If not, we can assume this is the first time the lambda function is invoked and as a result, provide a welcoming response while requesting the User’s ID. To ensure the user isn’t welcomed again, we set a session state so the Lambda function knows to move to User ID validation when next invoked. This is done by setting the “Completed” : “None” key/value pair in the response SessionAttributes.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Completed&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sure, i can help with that! But first, i need to verify your identity. What is your user id?&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elicit_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we check the User ID. You’ll notice the chkUserId function checks for two things; That the slot is populated, and if it is, the length of the field. Because the slot type is AMAZON.Number, any non-numeric characters that are entered will be rejected by the slot. If this occurs, the slot will be left empty, hence this is something we’re looking out for. We also want to ensure the User ID is 6 digits, otherwise it is considered invalid. If the input is correct, we set the session state key/value pair to indicate User ID validation is complete then allow the dialog to continue, otherwise we request the user to re-enter their User ID.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chkUserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'UserID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;That format seems incorrect. Let's try again. What is your user id?&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elicit_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;userid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we check the Date of Birth. Because the slot type is strict regarding input, we don’t do much validation here. An utterance for this slot type generally maps to a complete date: YYYY-MM-DD. For validation purpose, we’re just looking for an empty slot. Like the User ID check, we set the session state and allow the dialog to continue if all looks good.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;chkDob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;That format seems incorrect. Let's try again. What is your Date of Birth?&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elicit_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;userid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we check the last slot which is the Month Started. Assuming the input for the month started is correct, we then confirm the intent by reading all the slot values back to the user and asking if it’s correct. You’ll notice here that there’s a bit of logic to determine if the user is using voice or text to interact with Lex. If voice is used, we use Speech Synthesis Markup Language (SSML) to ensure the UserID value is read as digits, rather than as the full number.
If the user is happy with the slot values, the validation completes and Lex then moves to the next Lambda function to fulfil the intent (next blog). If the user isn’t happy with the slot values, the lambda function exits telling the user to call back and try again.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;confirmIntent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputDialogMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ConfirmIntent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;intentName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ResetPW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;slots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputDialogMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Voice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contentType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SSML&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;speak&amp;gt;Just to confirm, your user id is &amp;lt;say-as interpret-as=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/say-as&amp;gt;, your date of birth is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and the month of your start date is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MonthStarted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;. Is that correct?&amp;lt;/speak&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contentType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Just to confirm, your user id is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;s&quot;&gt;&quot;, your date of birth is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DOB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; and the month of your start date is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; \
                &lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MonthStarted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;. Is that correct?&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Denied&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dialogAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;fulfillmentState&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;contentType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PlainText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Please call back and try again.&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate_slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;confirmed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endData&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, now that our Lambda function is finished, we need to enable it as a code hook for initialisation and validation. Head over to your Lex bot, select the “ResetPW” intent, then tick the box under &lt;strong&gt;Lambda initialisation and validation&lt;/strong&gt; and select your Lambda function. A prompt will be given to provide permissions to allow your Lex bot to invoke the lambda function. Select &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/lambdaval.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s hit Build on the chatbot, and test it out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/awscloud/19/chatlog2.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, we’ve managed to make the conversation a bit more human like and we can now detect invalid input. If you use the microphone to chat with your bot, you’ll notice the User ID value is read as digits. That’s it for this blog. Next blog, we’ll integrate Active Directory and actually get a password reset and sent via SNS to a mobile phone.&lt;/p&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;/blog/create-service-desk-with-bots-using-amazon-lex-and-amazon-connect-part-2&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">The service desk with bots using Amazon Lex and Amazon Connect (Part 1)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/aws_cloud.png" /></entry><entry><title type="html">Key Benefits of Angular &amp;amp; Use Cases</title><link href="http://localhost:4000/blog/key-benefits-angular-use-cases" rel="alternate" type="text/html" title="Key Benefits of Angular &amp; Use Cases" /><published>2020-02-02T10:41:00+00:00</published><updated>2020-02-02T10:41:00+00:00</updated><id>http://localhost:4000/blog/key-benefits-angular-use-cases</id><content type="html" xml:base="http://localhost:4000/blog/key-benefits-angular-use-cases">&lt;h2 id=&quot;key-benefits-of-angular--use-cases&quot;&gt;Key Benefits of Angular &amp;amp; Use Cases&lt;/h2&gt;

&lt;p&gt;Have you ever struggled to optimize server communication for your application? Or found it difficult to handle auto-synchronization in an application? You’ve come to the right place. Angular, as one of the top frontend framework, handles this proactively. Let’s discuss some of the key benefits and widely applied use cases of Angular.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/webdevelopment/6/angularjs-benefits-final-BANNER-MARCH.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Angular has come a long way since its inception. The Angular team at Google keeps the framework upgraded with the constant evolution of browsers and their ability to support diverse functionalities over time. And today, it is one of the most preferred choices for &lt;strong&gt;developing feature-rich web applications.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Its user interface and functionality have been acknowledged by several companies and developer communities from time and again. Thanks to Angular business benefits, &lt;strong&gt;over 72,924 websites&lt;/strong&gt; in the US alone use the framework for website development.&lt;/p&gt;

&lt;p&gt;Developers understand the critical challenges and shortcomings in developing a Single Page Application (SPA). While the initial Angular development benefits were more inclined towards tackling that challenge, it gradually evolved to fix several concerns, including mobile optimization, progressive web app development, and more.&lt;/p&gt;

&lt;p&gt;We work on various small and large scale projects. While some use Angular, a lot of them use React, a bunch of them are exploring Vue.js, and a few are still using jQuery. This post is directed towards people who are considering Angular &amp;amp; TypeScript as their choice for frontend engineering. Let’s dig deeper into the Agular advantages and disadvantages to help you evaluate your decision better.&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-angular-for-web-development&quot;&gt;Benefits of Angular for Web Development&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Automatic Synchronization with Two-Way Data Binding&lt;/li&gt;
  &lt;li&gt;Optimized Server Communication&lt;/li&gt;
  &lt;li&gt;POJO Model to Eliminate External Dependencies&lt;/li&gt;
  &lt;li&gt;Testing in Angular – An Integral Part&lt;/li&gt;
  &lt;li&gt;Angular Material – A Comprehensive Modern UI&lt;/li&gt;
  &lt;li&gt;Angular &amp;amp; Single Page Applications&lt;/li&gt;
  &lt;li&gt;Code Consistency and Robust Ecosystem&lt;/li&gt;
  &lt;li&gt;Model-View-View-Model (MMVC) Architecture  to Unify Independent Structures&lt;/li&gt;
  &lt;li&gt;Ivy-Renderer – Next-Generation Renderer for Enhanced Performance&lt;/li&gt;
  &lt;li&gt;Active Community &amp;amp; Easy-to Access Information&lt;/li&gt;
  &lt;li&gt;Improve Productivity with Code Reusability&lt;/li&gt;
  &lt;li&gt;Design Development Workflow&lt;/li&gt;
  &lt;li&gt;Easy to Use&lt;/li&gt;
  &lt;li&gt;When to Use Angular&lt;/li&gt;
  &lt;li&gt;When not to Use Angular&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;automatic-synchronization-with-two-way-data-binding&quot;&gt;Automatic Synchronization with Two-Way Data Binding&lt;/h3&gt;
&lt;p&gt;With most frameworks offering one-way data binding, this feature gives Angular an edge over the others. So what’s the deal with two-way data binding?&lt;/p&gt;

&lt;p&gt;It synchronizes the data between Model and View. As a result, when data is changed or modified, these two components automatically get updated. What’s more, this happens in real-time, preventing developers from putting extra efforts into manual modifications.&lt;/p&gt;

&lt;p&gt;Unlike other web frameworks, which implement two-way data binding by using fragile event listeners and handlers, Angular makes this process an integral function of its architecture. Consequently, there’s little need for sequential callbacks to handle modified data or developer interventions.&lt;/p&gt;

&lt;h3 id=&quot;optimized-server-communication&quot;&gt;Optimized Server Communication&lt;/h3&gt;
&lt;p&gt;Caching becomes trouble-free with Angular!&lt;/p&gt;

&lt;p&gt;Angular reduces the extra burden of CPUs by creating static files. Besides, the response time to API calls is tremendously quick in the framework.&lt;/p&gt;

&lt;p&gt;Referring to an Angular application, we can see it renders the pages in the document object model for the user actions. The framework reduces its efforts just by generating the static app pages, unlike other tech stacks. It gives an overall quick user experience and does not let the users wait until the app becomes completely interactive.&lt;/p&gt;

&lt;h3 id=&quot;pojo-model-to-eliminate-external-dependencies&quot;&gt;POJO Model to Eliminate External Dependencies&lt;/h3&gt;
&lt;p&gt;Angular employs the Plain Old Javascript Objects (POJO) Model to make the code structure handy and independent. This way, we save ourselves from adding complex functions or methods in the programme. Additionally, it eliminates dependencies on external frameworks or plugins.&lt;/p&gt;

&lt;p&gt;The model enables us to keep our codes clean, making the framework goal-oriented since POJO requires less coding, the applications built with Angular load quickly, and offer excellent user accessibility.&lt;/p&gt;

&lt;h3 id=&quot;testing-in-angular--an-integral-part&quot;&gt;Testing in Angular – An Integral Part&lt;/h3&gt;
&lt;p&gt;Testing is an integral part of the Angular framework. All JavaScript code in Angular is required to go through a series of tests. The convenience offered in testing allows us to develop the project from scratch and seamlessly test the components.&lt;/p&gt;

&lt;p&gt;Thanks to the dependency injection in Angular. It manages all the scopes and controllers. Because of this dependency, the unit test functionality in Angular can force dependency injection to perform testing by injecting mock/dummy data into the controller. This process is followed by the assessment of the output and its behavior. What’s more interesting is that Angular also has mock HTTP providers to push fake responses from servers into controllers.&lt;/p&gt;

&lt;h3 id=&quot;angular-material--a-comprehensive-modern-ui&quot;&gt;Angular Material – A Comprehensive Modern UI&lt;/h3&gt;
&lt;p&gt;The Angular Materials follows the Material Design guidelines by Google. It provides in-built components such as navigation elements, layout, button, indicators, and data tables.&lt;/p&gt;

&lt;p&gt;Moreover, Angular Material is not just about creating an eye-pleasant user interface, but it develops applications like Google. For instance, apps like Google drive, Android OS, Gmail, and many have become daily needs of users.&lt;/p&gt;

&lt;h3 id=&quot;angular--single-page-applications&quot;&gt;Angular &amp;amp; Single Page Applications&lt;/h3&gt;
&lt;p&gt;There are two aspects to the smooth functioning of any single page application. One is that all the mandatory codes of JavaScript, CSS, and HTML are retrieved at one single instance when the page loads. The second is that they are retrieved as and when required depending on user behavior and action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/webdevelopment/6/microsoftSPA.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is no page reload happening at any point in time while users are browsing the app, which in turn involves dynamic communication with servers under the hood. However, all these complexities are easily handled by Angular. If your product idea revolves around the development of a radical single-page application, preferring Angular for its development would be the best decision you would make.&lt;/p&gt;

&lt;h3 id=&quot;code-consistency-and-robust-ecosystem&quot;&gt;Code Consistency and Robust Ecosystem&lt;/h3&gt;
&lt;p&gt;For any strong development environment to be successful, code consistency is the key. Thanks to the Angular CLI and documentation style guide, they both drive consistency at the pioneer level.&lt;/p&gt;

&lt;p&gt;Angular CLI tool lets the developer create initial projects, run the tests, and add different features in the same project while keeping the entire team on the same page. Often, I found developers to be thankful for the style guide that Angular offers. This way, the communication between the team becomes comfortable and less likely to be misinterpreted.&lt;/p&gt;

&lt;p&gt;Thanks to the robust ecosystem of the framework that has exceptionally given the power of dependency injection and other resources to the developer communities.&lt;/p&gt;

&lt;h3 id=&quot;model-view-viewmodel-mmvc-architecture-to-unify-independent-structures&quot;&gt;Model-View-Viewmodel (MMVC) Architecture to Unify Independent Structures&lt;/h3&gt;
&lt;p&gt;Angular simplifies the development structure by combining MMVC architecture and two-way data binding. In fact, it takes very little time for this framework to update the changes made in the view layer to the data and vice-versa. Consequently, it is why most developers favor Angular when it comes to building large-scale applications.&lt;/p&gt;

&lt;p&gt;Given that the framework isolates the business logic from the UI components, developers are more confident in designing the neat user interface with smooth business logic applicable. Thanks to the quickest communication established between the model and the view component by the controller. Because of which display of data happens as quickly as possible.&lt;/p&gt;

&lt;h3 id=&quot;ivy-renderer--next-generation-renderer-for-enhanced-performance&quot;&gt;Ivy Renderer – Next-Generation Renderer for Enhanced Performance&lt;/h3&gt;
&lt;p&gt;This new Angular engine is all about its super-optimized bundle size, loading speed, and dynamic loading of components.&lt;/p&gt;

&lt;p&gt;Ivy renderer aims for unparalleled code debugging and user-friendly app experience. It makes the framework accessible and sets an example by reducing the file sizes though making the framework a feature-rich platform. Since it was introduced in NG-CONF 2018, then it wasn’t in its complete form, but currently, Angular 8 serves the best of it. The modern Angular engine will be in its full form with the release of Angular 9.&lt;/p&gt;

&lt;h3 id=&quot;active-community--easy-to-access-information&quot;&gt;Active Community &amp;amp; Easy-to-Access Information&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/webdevelopment/6/DTD5Xh0VwAAKfZf.jpg&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ever since its onset, Angular has been a favorite among developers and engineers for its myriad of advantages. With a pool of resources like study materials, reference documents, FAQs, and others, Angular is easy to integrate for those who want to make the most out of it.&lt;/p&gt;

&lt;h3 id=&quot;prominent-communities-for-angular-to-join&quot;&gt;Prominent communities for Angular to join:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Dev.to&lt;/strong&gt; has got a fantastic community for developers to join&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stackoverflow&lt;/strong&gt; is an all-time favorite for Devs&lt;/p&gt;

&lt;p&gt;Twitter has got many supporting handles for Angular, but you will find everything right from the Angular in this&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AngularAir&lt;/strong&gt; for latest updates and speakers&lt;/p&gt;

&lt;p&gt;You can subscribe to the &lt;strong&gt;ng-newsletter&lt;/strong&gt; for updates right in your inbox!&lt;/p&gt;

&lt;h3 id=&quot;improve-productivity-with-code-reusability&quot;&gt;Improve Productivity with Code Reusability&lt;/h3&gt;

&lt;p&gt;What can be more precious for developers to build applications regardless of worrying about huge file sizes?&lt;/p&gt;

&lt;p&gt;With Angular, developers invest less time and effort, for it lets them reuse codes and streamlines the development process. It results in bringing about more functionality with shorter codes, making it. Productive for the teams working on back to back similar projects.&lt;/p&gt;

&lt;h3 id=&quot;design-development-workflow&quot;&gt;Design Development Workflow&lt;/h3&gt;

&lt;p&gt;With this advantage, coders can refrain from CSS/HTML markup when they are developing apps and add markups without breaking the application. Instead of rearranging codes during development, all they have to do is move corresponding elements around the code.&lt;/p&gt;

&lt;h3 id=&quot;easy-to-use&quot;&gt;Easy to Use&lt;/h3&gt;

&lt;p&gt;Angular offers flexibility in coding like no other framework because of its simple design architecture. In terms of flexibility, it allows beginners to get started and make modifications in their application projects seamlessly. Also, Angular handles heavy web applications that are loaded with features and components exceptionally well. What more can a developer ask for?&lt;/p&gt;

&lt;p&gt;So, these were the advantages of Angular, and by now, we are confident you would have understood the potential of Angular for your web development needs.&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-angular&quot;&gt;When to Use Angular&lt;/h2&gt;
&lt;p&gt;Angular as a full software stack is massive. It enables developers to build as many applications as they want with the easiest efforts involved. Let’s look at some of the popular use cases:&lt;/p&gt;

&lt;h3 id=&quot;video-streaming-apps-like-youtube-playstation-three-app&quot;&gt;Video streaming apps like Youtube PlayStation three app&lt;/h3&gt;
&lt;p&gt;Anyone fond of playing video games wouldn’t have missed YouTube’s version on PlayStation 3. Considering the massive popularity of YouTube, it would require a framework&lt;/p&gt;

&lt;p&gt;Since Google owns Angular, they leveraged it to launch a brand-new version of Youtube on PlayStation 3. The versatile framework has helped Google redesign the PS3 experience by replacing the conventional operating approach to a thoroughly modern one. They replaced mouse movements to basic keystrokes. With Angular accessibility, it is possible to leverage the functionalities of native apps like Youtube PS3 extensively.&lt;/p&gt;

&lt;p&gt;Angular contributed to a greater extent in creating the smooth scrolling and video playback on the YouTube PS3. It is the latest ultra-modern and streamlined experience delivered by Angular and is witnessed by the gamers crowd.&lt;/p&gt;

&lt;h3 id=&quot;ecommerce-applications-like-t-mobile&quot;&gt;eCommerce applications like T-Mobile&lt;/h3&gt;
&lt;p&gt;T-Mobile discovered that its customers had to wait for content to load while connecting to the app. So to make it faster and less troublesome, they employed Angular to reduce the time with server-side rendering.&lt;/p&gt;

&lt;p&gt;Furthermore, they employed Angular so they could use HTML parsing for search engine purposes. They also updated the site autonomously and seamlessly implemented the dynamic page composition.&lt;/p&gt;

&lt;p&gt;This leading telecom leader got massive success in their eCommerce app, which received remarkable search engine traffic. With Angular, they revamped the application layout and converted it into a smooth performing app.&lt;/p&gt;

&lt;h3 id=&quot;real-time-data-application-like-weathercom&quot;&gt;Real-time Data Application like weather.com&lt;/h3&gt;
&lt;p&gt;One of the popular websites for real-time weather updates is weather.com. The credit for its success goes to Angular’s versatile capabilities of modules and directories that enable it to load on the desktop and smartphone devices to utilize the widget’s features.The framework allows the developers to create flexible widgets based on the custom needs of devices. Fetching the real-time data and dynamically showcasing it made it to the internet with the use of Angular technology.&lt;/p&gt;

&lt;h3 id=&quot;user-generated-content-portals-upwork-and-new-york-times&quot;&gt;User-generated Content Portals– Upwork and New York Times.&lt;/h3&gt;
&lt;p&gt;User-generated websites demand a high level of security and management. Angular has made it simple by introducing inner HTML to display the user-generated content and a built-in sanitizer – DomSanitizer – as a security feature. However, it may be a trouble when you use the elements with inline styles because it removes the styles when you do that.&lt;/p&gt;

&lt;p&gt;Angular supports big technicalities that are to be handled and required by user-generated content websites. For example, Upwork as a UGC website and websites that need infinite scrolling like the New York Times are two famous examples having Angular as a back to handle their heavy pages. These websites seem easily fetched and rendered in seconds without sacrificing their single page application features.&lt;/p&gt;

&lt;h3 id=&quot;websites-such-as-the-guardian-for-the-latest-news-and-content&quot;&gt;Websites such as The Guardian for the latest news and content&lt;/h3&gt;
&lt;p&gt;The Guardian is loaded with rich information and is updated all the time. Thanks to the Angular tech stack for setting an example for using RxJS extensions. It allows developers to create the infinite scrolling of search results. The massive that the Guardian is holding is of another level, but it all runs smoothly with the Angularbackend.&lt;/p&gt;

&lt;h2 id=&quot;when-not-to-use-angular&quot;&gt;When not to Use Angular&lt;/h2&gt;
&lt;p&gt;Angular is superheroic, but still, there are places where using Angular may not benefit you.&lt;/p&gt;

&lt;p&gt;Let’s see what they are?&lt;/p&gt;

&lt;h3 id=&quot;websites-with-static-content&quot;&gt;Websites with Static Content:&lt;/h3&gt;
&lt;p&gt;Small websites with lesser objectives and static content. These types of websites are better built with limited tech stacks and need not use Angular since the technology will only add extra chunks of code, which is not required by the website or a particular project. Example: Landing pages, informative websites, event pages, etc.&lt;/p&gt;

&lt;h3 id=&quot;limited-resources-and-startups&quot;&gt;Limited Resources and Startups:&lt;/h3&gt;
&lt;p&gt;For small teams and limited resources, Angular is not a good idea to start with. Angular demands skillful available resources for quick problem-solving in large scale projects. Also, the technology should not be used for small projects; they can be built with other available frameworks and need not much facilitations with technicalities.&lt;/p&gt;

&lt;p&gt;Microservices design chooses to be flexible in coding and lets you choose the tools irrespective of the different modules of a project. But Angular is a complete solution with all the tooling required and hence, does not provide flexibility to choose other external tools. You need to carry all the things that are even not required for the project. So if you are planning to use microservice design architecture and still want to use Angular, you should iterate your planning.&lt;/p&gt;

&lt;h3 id=&quot;game-apps--heavy-analytical-apps&quot;&gt;Game Apps &amp;amp; Heavy Analytical Apps&lt;/h3&gt;
&lt;p&gt;Angular is not for Gaming apps. Other frameworks, like React, can be used to create highly interactive UI in games. It is because of Angular checks each document object model before it changes its place.&lt;/p&gt;

&lt;p&gt;The framework doesn’t work well with heavy and complex mathematical analytics like gaming applications. Although Linkedin, Upwork, Netflix are built with Angular, when it comes to too complex to handle Maths, do not choose Angular.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Our frontend developers love this all-time leading framework because of the consistent code structure it maintains,two-way data binding, code reusability to using plain old javascript object models.&lt;/p&gt;

&lt;p&gt;Angular enables developers to write code with simpler structures without involving third parties or external support. It simplifies writing code with better facilitation of testing configurations.&lt;/p&gt;

&lt;p&gt;I’ve tried to cover all the reasons that our Angular team at we gives us for why they’re glued with this framework.&lt;/p&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Key Benefits of Angular &amp;amp; Use Cases</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/web_development.png" /></entry></feed>