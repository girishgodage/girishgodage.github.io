<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-02T03:17:36+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">1.Python Internet Access</title><link href="http://localhost:4000/blog/PyhonInternetAccess" rel="alternate" type="text/html" title="1.Python Internet Access" /><published>2019-10-02T00:00:00+00:00</published><updated>2019-10-02T00:00:00+00:00</updated><id>http://localhost:4000/blog/PyhonInternetAccess</id><content type="html" xml:base="http://localhost:4000/blog/PyhonInternetAccess">&lt;section class=&quot;Ptutorial26&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Internet Access using Urllib.Request and urlopen() &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h3&gt;&lt;b&gt; What is urllib? &lt;/b&gt;&lt;/h3&gt;
            &lt;p&gt;urllib is a Python module that can be used for opening URLs. It defines functions and classes to help in
                URL actions. &lt;/p&gt;
            &lt;p&gt;With Python you can also access and retrieve data from the internet like XML, HTML, JSON, etc. You can
                also use Python to work with this data directly. In this tutorial we are going to see how we can
                retrieve data from the web. For example, here we used a guru99 video URL, and we are going to access
                this video URL using Python as well as print HTML file of this URL. &lt;/p&gt;
            &lt;p&gt;In this tutorial we will learn &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to Open URL using Urllib&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to read HTML file for your URL in Python &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to Open URL using Urllib&lt;/h2&gt;
            &lt;p&gt;Before we run the code to connect to Internet data, we need to import statement for URL library module or
                &quot;urllib&quot;. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/25/python19_1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Accessing Internet Data with Python&quot;
                        alt=&quot;Internet Access with Python Tutorial: Open, Parse &amp;amp; Read URL&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/25/python19_1.png&quot; width=&quot;90%&quot;&gt;&lt;/a&gt; &lt;/p&gt;

            &lt;ul&gt;
                &lt;li&gt;Import urllib&lt;/li&gt;
                &lt;li&gt;Define your main function&lt;/li&gt;
                &lt;li&gt;Declare the variable webUrl&lt;/li&gt;
                &lt;li&gt;Then call the urlopen function on the URL lib library&lt;/li&gt;
                &lt;li&gt;The URL we are opening is guru99 tutorial on youtube&lt;/li&gt;
                &lt;li&gt;Next, we going to print the result code&lt;/li&gt;
                &lt;li&gt;Result code is retrieved by calling the getcode function on the webUrl variable we have created
                &lt;/li&gt;
                &lt;li&gt;We going to convert that to a string, so that it can be concatenated with our string &quot;result code&quot;
                &lt;/li&gt;
                &lt;li&gt;This will be a regular HTTP code &quot;200&quot;, indicating http request is processed successfully &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to get HTML file form URL in Python&lt;/h2&gt;
            &lt;p&gt;You can also read the HTML file by using the &quot;read function&quot; in Python, and when you run the code, the
                HTML file will appear in the console. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/25/python19_2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Accessing Internet Data with Python&quot;
                        alt=&quot;Internet Access with Python Tutorial: Open, Parse &amp;amp; Read URL&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/25/python19_2.png&quot; width=&quot;90%&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Call the read function on the webURL variable&lt;/li&gt;
                &lt;li&gt;Read variable allows to read the contents of data files&lt;/li&gt;
                &lt;li&gt;Read the entire content of the URL into a variable called data&lt;/li&gt;
                &lt;li&gt;Run the code- It will print the data into HTML format&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Here is the complete code &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #  
         # read the data from the URL and print it
         #
         import urllib2
         
         def main():
         # open a connection to a URL using urllib2
            webUrl = urllib2.urlopen(&quot;https://www.youtube.com/user/guru99com&quot;)
           
         #get the result code and print it
            print &quot;result code: &quot; + str(webUrl.getcode()) 
           
         # read the data from the URL and print it
            data = webUrl.read()
            print data
          
         if __name__ == &quot;__main__&quot;:
           main()&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         # read the data from the URL and print it
         #
         import urllib.request
         # open a connection to a URL using urllib
         webUrl  = urllib.request.urlopen('https://www.youtube.com/user/guru99com')
         
         #get the result code and print it
         print (&quot;result code: &quot; + str(webUrl.getcode()))
         
         # read the data from the URL and print it
         data = webUrl.read()
         print (data)&lt;/pre&gt;

        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonIntetnetAccess&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonXMLParser&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Internet Access using Urllib.Request and urlopen()</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">2.Python XML Parser</title><link href="http://localhost:4000/blog/PyhonXMLParser" rel="alternate" type="text/html" title="2.Python XML Parser" /><published>2019-10-02T00:00:00+00:00</published><updated>2019-10-02T00:00:00+00:00</updated><id>http://localhost:4000/blog/PyhonXMLParser</id><content type="html" xml:base="http://localhost:4000/blog/PyhonXMLParser">&lt;section class=&quot;Ptutorial26&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python XML Parser Tutorial: Read xml file example(Minidom, ElementTree) &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h3&gt;What is XML?&lt;/h3&gt;
            &lt;p&gt;XML stands for eXtensible Markup Language. It was designed to store and transport small to medium amounts
                of data and is widely used for sharing structured information. &lt;/p&gt;
            &lt;p&gt;Python enables you to parse and modify XML document. In order to parse XML document you need to have the
                entire XML document in memory. In this tutorial, we will see how we can use XML minidom class in Python
                to load and parse XML file. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn- &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to Parse XML using minidom &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to Create XML Node &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;How to Parse XML using ElementTree&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;br&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to Parse XML using minidom&lt;/h2&gt;
            &lt;p&gt;We have created a sample XML file that we are going to parse. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Inside file, we can see first name, last name, home and the area of expertise
                (SQL, Python, Testing and Business) &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/26/Python20.1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Manipulating XML with Python&quot;
                        alt=&quot;Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/26/Python20.1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; Once we have parsed the document, we will print out the &lt;strong&gt;&quot;node
                    name&quot;&lt;/strong&gt; of the root of the document and the &quot;&lt;strong&gt;firstchild tagname&quot;&lt;/strong&gt;. Tagname
                and nodename are the standard properties of the XML file. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/26/Python20.2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Manipulating XML with Python&quot;
                        alt=&quot;Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/26/Python20.2.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Import the xml.dom.minidom module and declare file that has to be parsed (myxml.xml)&lt;/li&gt;
                &lt;li&gt;This file carries some basic information about employee like first name, last name, home, expertise,
                    etc.&lt;/li&gt;
                &lt;li&gt;We use the parse function on the XML minidom to load and parse the XML file&lt;/li&gt;
                &lt;li&gt;We have variable doc and doc gets the result of the parse function&lt;/li&gt;
                &lt;li&gt;We want to print the nodename and child tagname from the file, so we declare it in print function
                &lt;/li&gt;
                &lt;li&gt;Run the code- It prints out the nodename (#document) from the XML file and the first child tagname
                    (employee) from the XML file&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;/p&gt;
            &lt;p&gt;Nodename and child tagname are the standard names or properties of an XML dom. In case if you are not
                familiar with these type of naming conventions.&lt;/p&gt;

            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; We can also call the list of XML tags from the XML document and printed out.
                Here we printed out the set of skills like SQL, Python,&lt;a href=&quot;/software-testing.html&quot;
                    onclick=&quot;ga('send', 'event', 'internal_linking', 'Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples', 'Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples');&quot;&gt;
                    Testing &lt;/a&gt;and Business. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/26/Python20.3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Manipulating XML with Python&quot;
                        alt=&quot;Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/26/Python20.3.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Declare the variable expertise, from which we going to extract all the expertise name employee is
                    having&lt;/li&gt;
                &lt;li&gt;Use the dom standard function called &quot;getElementsByTagName&quot;&lt;/li&gt;
                &lt;li&gt;This will get all the elements named skill &lt;/li&gt;
                &lt;li&gt;Declare loop over each one of the skill tags &lt;/li&gt;
                &lt;li&gt;Run the code- It will give list of four skills &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to Create XML Node&lt;/h2&gt;
            &lt;p&gt;We can create a new attribute by using &quot;createElement&quot; function and then append this new attribute or tag
                to the existing XML tags. We added a new tag &quot;BigData&quot; in our XML file. &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;You have to code to add the new attribute (BigData) to the existing XML tag&lt;/li&gt;
                &lt;li&gt;Then you have to print out the XML tag with new attributes appended with existing XML tag&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/26/Python20.4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Manipulating XML with Python&quot;
                        alt=&quot;Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/26/Python20.4.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;To add a new XML and add it to the document, we use code &quot;doc.create elements&quot;&lt;/li&gt;
                &lt;li&gt;This code will create a new skill tag for our new attribute &quot;Big-data&quot;&lt;/li&gt;
                &lt;li&gt;Add this skill tag into the document first child (employee)&lt;/li&gt;
                &lt;li&gt;Run the code- the new tag &quot;big data&quot; will appear with the other list of expertise&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h3&gt;XML Parser Example&lt;/h3&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import xml.dom.minidom
         
         def main():
         # use the parse() function to load and parse an XML file
            doc = xml.dom.minidom.parse(&quot;Myxml.xml&quot;);
           
         # print out the document node and the name of the first child tag
            print doc.nodeName
            print doc.firstChild.tagName
           
         # get a list of XML tags from the document and print each one
            expertise = doc.getElementsByTagName(&quot;expertise&quot;)
            print &quot;%d expertise:&quot; % expertise.length
            for skill in expertise:
              print skill.getAttribute(&quot;name&quot;)
             
         # create a new XML tag and add it into the document
            newexpertise = doc.createElement(&quot;expertise&quot;)
            newexpertise.setAttribute(&quot;name&quot;, &quot;BigData&quot;)
            doc.firstChild.appendChild(newexpertise)
            print &quot; &quot;
         
            expertise = doc.getElementsByTagName(&quot;expertise&quot;)
            print &quot;%d expertise:&quot; % expertise.length
            for skill in expertise:
              print skill.getAttribute(&quot;name&quot;)
             
         if name == &quot;__main__&quot;:
           main();&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import xml.dom.minidom
         
         def main():
             # use the parse() function to load and parse an XML file
             doc = xml.dom.minidom.parse(&quot;Myxml.xml&quot;);
         
             # print out the document node and the name of the first child tag
             print (doc.nodeName)
             print (doc.firstChild.tagName)
             # get a list of XML tags from the document and print each one
             expertise = doc.getElementsByTagName(&quot;expertise&quot;)
             print (&quot;%d expertise:&quot; % expertise.length)
             for skill in expertise:
                 print (skill.getAttribute(&quot;name&quot;))
         
             # create a new XML tag and add it into the document
             newexpertise = doc.createElement(&quot;expertise&quot;)
             newexpertise.setAttribute(&quot;name&quot;, &quot;BigData&quot;)
             doc.firstChild.appendChild(newexpertise)
             print (&quot; &quot;)
         
             expertise = doc.getElementsByTagName(&quot;expertise&quot;)
             print (&quot;%d expertise:&quot; % expertise.length)
             for skill in expertise:
                 print (skill.getAttribute(&quot;name&quot;))
         
         if __name__ == &quot;__main__&quot;:
             main();&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;How to Parse XML using ElementTree&lt;/h2&gt;
            &lt;p&gt;ElementTree is an API for manipulating XML. ElementTree is the easy way to process XML files. &lt;/p&gt;

            &lt;p&gt;We are using the following XML document as the sample data: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
            &amp;lt;data&amp;gt;
            &amp;lt;items&amp;gt;
               &amp;lt;item name=&quot;expertise1&quot;&amp;gt;SQL&amp;lt;/item&amp;gt;
               &amp;lt;item name=&quot;expertise2&quot;&amp;gt;Python&amp;lt;/item&amp;gt;
            &amp;lt;/items&amp;gt;
         &amp;lt;/data&amp;gt;
         &lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Reading XML using ElementTree:&lt;/b&gt; &lt;/p&gt;
            &lt;p&gt;we must first import the xml.etree.ElementTree module. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import xml.etree.ElementTree as ET
         &lt;/pre&gt;
            &lt;p&gt;Now let's fetch the root element: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;root = tree.getroot()
         &lt;/pre&gt;
            &lt;p&gt;Following is the complete code for reading above xml data &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import xml.etree.ElementTree as ET
         tree = ET.parse('items.xml')
         root = tree.getroot()
         
         # all items data
         print('Expertise Data:')
         
         for elem in root:
            for subelem in elem:
               print(subelem.text)
         &lt;/pre&gt;
            &lt;b&gt;output:&lt;/b&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Expertise Data:
         SQL
         Python
         &lt;/pre&gt;
            &lt;h3&gt;Summary:&lt;/h3&gt;
            &lt;p&gt;Python enables you to parse the entire XML document at one go and not just one line at a time. In order
                to parse XML document you need to have the entire document in memory.&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;div&gt;To parse XML document&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Import xml.dom.minidom&lt;/li&gt;
                        &lt;li&gt;Use the function &quot;parse&quot; to parse the document ( doc=xml.dom.minidom.parse (file name);&lt;/li&gt;
                        &lt;li&gt;Call the list of XML tags from the XML document using code (=doc.getElementsByTagName( &quot;name
                            of xml tags&quot;)&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;div&gt;To create and add new attribute in XML document&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Use function &quot;createElement&quot;&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonIntenetAccess&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonLambda&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python XML Parser Tutorial: Read xml file example(Minidom, ElementTree)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">3.Python Lambda</title><link href="http://localhost:4000/blog/PyhonLambda" rel="alternate" type="text/html" title="3.Python Lambda" /><published>2019-10-02T00:00:00+00:00</published><updated>2019-10-02T00:00:00+00:00</updated><id>http://localhost:4000/blog/PyhonLambda</id><content type="html" xml:base="http://localhost:4000/blog/PyhonLambda">&lt;section class=&quot;Ptutorial27&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Lambda Functions with EXAMPLES &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is Lambda?&lt;/h2&gt;
            &lt;p&gt;Lambdas, also known as anonymous functions, are small, restricted functions which do not need a name
                (i.e., an identifier). Lambda functions were first introduced to the field of mathematics by Alonzo
                Church in the 1930s. &lt;/p&gt;
            &lt;p&gt;Today, many modern programming languages like Java, Python, C#, and C++ support lambda functions to add
                functionality to the languages. &lt;/p&gt;
            &lt;p&gt;In this Lambda tutorial, you will learn: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is Lambda?&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Lambdas in Python&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Syntax and Examples&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Using lambdas with Python built-ins&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;lambdas in filter()&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;lambdas in map()&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;lambdas in reduce()&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Why (and why not) use lambda functions?&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Lambdas vs. Regular functions&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Lambdas in Python&lt;/h2&gt;
            &lt;p&gt;In Python, lambda expressions (or lambda forms) are utilized to construct anonymous functions. To do so,
                you will use the &lt;strong&gt;lambda &lt;/strong&gt;keyword (just as you use &lt;strong&gt;def &lt;/strong&gt;to define normal
                functions). &lt;/p&gt;
            &lt;p&gt;Every anonymous function you define in Python will have 3 essential parts: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;The lambda keyword.&lt;/li&gt;
                &lt;li&gt;The parameters (or bound variables), and&lt;/li&gt;
                &lt;li&gt;The function body.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;A lambda function can have any number of parameters, but the function body can only contain
                &lt;strong&gt;one&lt;/strong&gt; expression. &lt;/p&gt;
            &lt;p&gt;Moreover, a lambda is written in a single line of code and can also be invoked immediately. You will see
                all this in action in the upcoming examples. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Syntax and Examples&lt;/h2&gt;
            &lt;p&gt;The formal syntax to write a lambda function is as given below: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;lambda p1, p2: expression &lt;/pre&gt;
            &lt;p&gt;Here, p1 and p2 are the parameters which are passed to the lambda function. You can add as many or few
                parameters as you need. &lt;/p&gt;
            &lt;p&gt;However, notice that we do not use brackets around the parameters as we do with regular functions. The
                last part (expression) is any valid python expression that operates on the parameters you provide to the
                function. &lt;/p&gt;
            &lt;h3&gt;Example 1&lt;/h3&gt;
            &lt;p&gt;Now that you know about lambdas let's try it with an example. So, open your IDLE and type in the
                following: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         adder = lambda x, y: x + y
         print (adder (1, 2))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here is the output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;3&lt;/pre&gt;
            &lt;h3&gt;Code Explanation &lt;/h3&gt;
            &lt;p&gt;Here, we define a variable that will hold the result returned by the lambda function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; The lambda keyword used to define an anonymous function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; x and y are the parameters that we pass to the lambda function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; This is the body of the function, which adds the 2 parameters we passed. Notice that
                it is a single expression. You cannot write multiple statements in the body of a lambda function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; We call the function and print the returned value. &lt;/p&gt;
            &lt;h3&gt;Example 2&lt;/h3&gt;
            &lt;p&gt;That was a basic example to understand the fundamentals and syntax of lambda. Let's now try to print out
                a lambda and see the result. Again, open your IDLE and type in the following: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #What a lambda returns
         string='some kind of a useless lambda'
         print(lambda string : print(string))
         &lt;/pre&gt;
            &lt;p&gt;Now save your file and hit F5 to run the program. This is the output you should get. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;&amp;lt;function &amp;lt;lambda&amp;gt; at 0x00000185C3BF81E0&amp;gt;
         &lt;/pre&gt;
            &lt;p&gt;What's happening here? Let's look at the code to understand further. &lt;/p&gt;
            &lt;p&gt;Code Explanation &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Here, we define a string that you'll pass as a parameter to the lambda.&lt;/li&gt;
                &lt;li&gt;We declare a lambda that calls a print statement and prints the result.&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;But why doesn't the program print the string we pass? This is because the lambda itself returns a
                function object. In this example, the lambda is not being &lt;strong&gt;called&lt;/strong&gt; by the print function
                but simply &lt;strong&gt;returning&lt;/strong&gt; the function object and the memory location where it is stored.
                That's what gets printed at the console. &lt;/p&gt;
            &lt;h3&gt;Example 3&lt;/h3&gt;
            &lt;p&gt;However, if you write a program like this: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #What a lambda returns #2
         x=&quot;some kind of a useless lambda&quot;
         (lambda x : print(x))(x)
         &lt;/pre&gt;
            &lt;p&gt;And run it by hitting F5, you'll see an output like this. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;some kind of a useless lambda&lt;/pre&gt;
            &lt;p&gt;Now, the lambda is being called, and the string we pass gets printed at the console. But what is that
                weird syntax, and why is the lambda definition covered in brackets? Let's understand that now. &lt;/p&gt;
            &lt;p&gt;Code Explanation &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Here is the same string we defined in the previous example.&lt;/li&gt;
                &lt;li&gt;In this part, we are defining a lambda and calling it immediately by passing the string as an
                    argument. This is something called an IIFE, and you'll learn more about it in the upcoming sections
                    of this tutorial.&lt;/li&gt;
            &lt;/ol&gt;
            &lt;h3&gt;Example 4&lt;/h3&gt;
            &lt;p&gt;Let's look at a final example to understand how lambdas and regular functions are executed. So, open your
                IDLE and in a new file, type in the following: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #A REGULAR FUNCTION
         def guru( funct, *args ):
         funct( *args )
         def printer_one( arg ):
         return print (arg)
         def printer_two( arg ):
         print(arg)
         #CALL A REGULAR FUNCTION 
         guru( printer_one, 'printer 1 REGULAR CALL' )
         guru( printer_two, 'printer 2 REGULAR CALL \n' )
         #CALL A REGULAR FUNCTION THRU A LAMBDA
         guru(lambda: printer_one('printer 1 LAMBDA CALL'))
         guru(lambda: printer_two('printer 2 LAMBDA CALL'))
         &lt;/pre&gt;
            &lt;p&gt;Now, save the file and hit F5 to run the program. If you didn't make any mistakes, the output should be
                something like this. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;printer 1 REGULAR CALL &lt;/p&gt;
            &lt;p&gt;printer 2 REGULAR CALL &lt;/p&gt;
            &lt;p&gt;printer 1 LAMBDA CALL &lt;/p&gt;
            &lt;p&gt;printer 2 LAMBDA CALL &lt;/p&gt;
            &lt;p&gt;Code Explanation &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;A function called guru that takes another function as the first parameter and any other arguments
                    following it.&lt;/li&gt;
                &lt;li&gt;printer_one is a simple function which prints the parameter passed to it and returns it. &lt;/li&gt;
                &lt;li&gt;printer_two is similar to printer_one but without the return statement.&lt;/li&gt;
                &lt;li&gt;In this part, we are calling the guru function and passing the printer functions and a string as
                    parameters.&lt;/li&gt;
                &lt;li&gt;This is the syntax to achieve the fourth step (i.e., calling the guru function) but using lambdas.
                &lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;In the next section, you will learn how to use lambda functions with &lt;strong&gt;map(),&lt;/strong&gt;
                &lt;strong&gt;reduce(),&lt;/strong&gt; and &lt;strong&gt;filter()&lt;/strong&gt; in Python. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Using lambdas with Python built-ins&lt;/h2&gt;
            &lt;p&gt;Lambda functions provide an elegant and powerful way to perform operations using built-in methods in
                Python. It is possible because lambdas can be invoked immediately and passed as an argument to these
                functions. &lt;/p&gt;
            &lt;h3&gt;IIFE in Python Lambda&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;IIFE&lt;/strong&gt; stands for &lt;strong&gt;immediately invoked function execution. &lt;/strong&gt;It means that a
                lambda function is callable as soon as it is defined. Let's understand this with an example; fire up
                your IDLE and type in the following:&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt; (lambda x: x + x)(2) &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here is the output and code explanation:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;This ability of lambdas to be invoked immediately allows you to use them inside functions like map() and
                reduce(). It is useful because you may not want to use these functions again. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;lambdas in filter()&lt;/h2&gt;
            &lt;p&gt;The filter function is used to select some particular elements from a sequence of elements. The sequence
                can be any iterator like lists, sets, tuples, etc. &lt;/p&gt;
            &lt;p&gt;The elements which will be selected is based on some pre-defined constraint. It takes 2 parameters: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;A function that defines the filtering constraint&lt;/li&gt;
                &lt;li&gt;A sequence (any iterator like lists, tuples, etc.)&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;For example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         sequences = [10,2,8,7,5,4,3,11,0, 1]
         filtered_result = filter (lambda x: x &amp;gt; 4, sequences) 
         print(list(filtered_result))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here's the output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;[10, 8, 7, 5, 11]&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Code Explanation:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; In the first statement, we define a list called sequences which contains some
                numbers. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Here, we declare a variable called filtered_result, which will store the filtered
                values returned by the filter() function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; A lambda function which runs on each element of the list and returns true if it is
                greater than 4. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt;Print the result returned by the filter function. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;lambdas in map()&lt;/h2&gt;
            &lt;p&gt;the map function is used to apply a particular operation to every element in a sequence. Like filter(),
                it also takes 2 parameters: &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;A function that defines the op to perform on the elements&lt;/li&gt;
                &lt;li&gt;One or more sequences&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;For example, here is a program that prints the squares of numbers in a given list: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;sequences = [10,2,8,7,5,4,3,11,0, 1]
         filtered_result = map (lambda x: x*x, sequences) 
         print(list(filtered_result))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt; [100, 4, 64, 49, 25, 16, 121, 0, 1]&lt;/pre&gt;
            &lt;p&gt;[KR1] &lt;/p&gt;
            &lt;p&gt;Code Explanation: &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Here, we define a list called sequences which contains some numbers. &lt;/li&gt;
                &lt;li&gt;We declare a variable called filtered_result which will store the mapped values &lt;/li&gt;
                &lt;li&gt;A lambda function which runs on each element of the list and returns the square of that number.
                &lt;/li&gt;
                &lt;li&gt;Print the result returned by the map function. &lt;/li&gt;
            &lt;/ol&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;lambdas in reduce[vV2][J3]()&lt;/h2&gt;
            &lt;p&gt;The reduce function, like map(), is used to apply an operation to every element in a sequence. However,
                it differs from the map in its working. These are the steps followed by the reduce() function to compute
                an output: &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1) &lt;/strong&gt;Perform the defined operation on the first 2 elements of the sequence. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2) &lt;/strong&gt;Save this result&lt;/p&gt;

            &lt;p&gt;&lt;strong&gt;Step 3) &lt;/strong&gt;Perform the operation with the saved result and the next element in the
                sequence. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 4) &lt;/strong&gt;Repeat until no more elements are left. &lt;/p&gt;
            &lt;p&gt;It also takes two parameters: &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;A function that defines the operation to be performed&lt;/li&gt;
                &lt;li&gt;A sequence (any iterator like lists, tuples, etc.)&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;For example, here is a program that returns the product of all elements in a list: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from functools import reduce
         sequences = [1,2,3,4,5]
         product = reduce (lambda x, y: x*y, sequences)
         print(product)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here is the output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;120&lt;/pre&gt;
            &lt;p&gt;Code Explanation: &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Import reduce from the functools module &lt;/li&gt;
                &lt;li&gt;Here, we define a list called sequences which contains some numbers. &lt;/li&gt;
                &lt;li&gt;We declare a variable called product which will store the reduced value &lt;/li&gt;
                &lt;li&gt;A lambda function that runs on each element of the list. It will return the product of that number
                    as per the previous result. &lt;/li&gt;
                &lt;li&gt;Print the result returned by the reduce function. &lt;/li&gt;
            &lt;/ol&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Why (and why not) use lambda functions?&lt;/h2&gt;
            &lt;p&gt;As you will see in the next section, lambdas are treated the same as regular functions at the interpreter
                level. In a way, you could say that lambdas provide compact syntax for writing functions which return a
                single expression. &lt;/p&gt;
            &lt;p&gt;However, you should know when it is a good idea to use lambdas and when to avoid them. In this section,
                you will learn some of the design principles used by python developers when writing lambdas. &lt;/p&gt;
            &lt;p&gt;One of the most common use cases for lambdas is in functional programming as Python supports a paradigm
                (or style) of programming known as functional programming. &lt;/p&gt;
            &lt;p&gt;It allows you to provide a function as a parameter to another function (for example, in map, filter,
                etc.). In such cases, using lambdas offer an elegant way to create a one-time function and pass it as
                the parameter. &lt;/p&gt;
            &lt;h3&gt;When should you not use Lambda?&lt;/h3&gt;
            &lt;p&gt;You should never write complicated lambda functions in a production environment. It will be very
                difficult for coders who maintain your code to decrypt it. If you find yourself making complex one-liner
                expressions, it would be a much superior practice to define a proper function. As a best practice, you
                need to remember that simple code is always better than complex code. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Lambdas vs. Regular functions&lt;/h2&gt;
            &lt;p&gt;As previously stated, lambdas are[vV4][J5] just functions which do not have an identifier bound to them.
                In simpler words, they are functions with no names (hence, anonymous). Here is a table to illustrate the
                difference between lambdas and regular functions in python. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Lambdas&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Regular Functions&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Syntax: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;lambda x : x + x &lt;/pre&gt;
            &lt;p&gt;Syntax: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def (x) :
         return x + x 
         &lt;/pre&gt;
            &lt;p&gt;Lambda functions can only have one expression in their body. &lt;/p&gt;
            &lt;p&gt;Regular functions can have multiple expressions and statements in their body. &lt;/p&gt;
            &lt;p&gt;Lambdas do not have a name associated with them. That's why they are also known as anonymous functions.
            &lt;/p&gt;
            &lt;p&gt;Regular functions must have a name and signature. &lt;/p&gt;
            &lt;p&gt;Lambdas do not contain a return statement because the body is automatically returned. &lt;/p&gt;
            &lt;p&gt;Functions which need to return value should include a return statement. &lt;/p&gt;
            &lt;h3&gt;Explanation of the differences?&lt;/h3&gt;
            &lt;p&gt;The primary difference between a lambda and a regular function is that the lambda function evaluates only
                a single expression and yields a function object. Consequently, we can name the result of the lambda
                function and use it in our program as we did in the previous example. &lt;/p&gt;
            &lt;p&gt;A regular function for the above example would look like this: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def adder (x, y):
         return x + y 
         print (adder (1, 2))
         &lt;/pre&gt;
            &lt;p&gt;Here, we have to define a &lt;strong&gt;name&lt;/strong&gt; for the function which &lt;strong&gt;returns &lt;/strong&gt;the
                result when we &lt;strong&gt;call&lt;/strong&gt; it. A lambda function doesn't contain a return statement because it
                will have only a single expression which is always returned by default. You don't even have to assign a
                lambda either as it can be immediately invoked (see the next section). As you will see in the following
                example, lambdas become particularly powerful when we use them with Python's built-in functions. &lt;/p&gt;
            &lt;p&gt;However, you may still be wondering how lambdas are any different from a function that returns a single
                expression (like the one above). At the interpreter level, there is not much difference. It may sound
                surprising, but any lambda function that you define in Python is treated as a normal function by the
                interpreter. &lt;/p&gt;
            &lt;p&gt;As you can see in the diagram, the two definitions are handled in the same way by the python interpreter
                when converted to bytecode. Now, you cannot name a function &lt;strong&gt;lambda&lt;/strong&gt; because it is
                reserved by Python, but any other function name will yield the same bytecode[KR6]. &lt;/p&gt;
            &lt;h3&gt;Summary &lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;Lambdas, also known as anonymous functions, are small, restricted functions which do not need a name
                    (i.e., an identifier).&lt;/li&gt;
                &lt;li&gt;Every lambda function in Python has 3 essential parts:&lt;/li&gt;
                &lt;li&gt;The lambda keyword.&lt;/li&gt;
                &lt;li&gt;The parameters (or bound variables), and&lt;/li&gt;
                &lt;li&gt;The function body.&lt;/li&gt;
                &lt;li&gt;The syntax for writing a lambda is: lambda parameter: expression&lt;/li&gt;
                &lt;li&gt;Lambdas can have any number of parameters, but they are not enclosed in braces&lt;/li&gt;
                &lt;li&gt;A lambda can have only 1 expression in its function body, which is returned by default.&lt;/li&gt;
                &lt;li&gt;At the bytecode level, there is not much difference between how lambdas and regular functions are
                    handled by the interpreter.&lt;/li&gt;
                &lt;li&gt;Lambdas support IIFE thru this syntax: (lambda parameter: expression)(argument) &lt;/li&gt;
                &lt;li&gt;Lambdas are commonly used with the following python built-ins:&lt;/li&gt;
                &lt;li&gt;Filter: filter (lambda parameter: expression, iterable-sequence) &lt;/li&gt;
                &lt;li&gt;Map: map (lambda parameter: expression, iterable-sequences) &lt;/li&gt;
                &lt;li&gt;Reduce: reduce (lambda parameter1, parameter2: expression, iterable-sequence) &lt;/li&gt;
                &lt;li&gt;Do not write complicated lambda functions in a production environment because it will be difficult
                    for code-maintainers.&lt;/li&gt;
            &lt;/ul&gt;
            

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonXMLParser&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Python&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Lambda Functions with EXAMPLES</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">22. Copy in Python</title><link href="http://localhost:4000/blog/PythonCopy" rel="alternate" type="text/html" title="22. Copy in Python" /><published>2019-10-01T00:00:00+00:00</published><updated>2019-10-01T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonCopy</id><content type="html" xml:base="http://localhost:4000/blog/PythonCopy">&lt;section class=&quot;Ptutorial22&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python COPY File using shutil.copy(), shutil.copystat() &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h2&gt;Python Copy File Methods&lt;/h2&gt;
            &lt;p&gt;Python provides in-built functions for easily copying files using the Operating System Shell utilities.
            &lt;/p&gt;
            &lt;p&gt;Following command is used to Copy File &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;shutil.copy(src,dst)&lt;/pre&gt;
            &lt;p&gt;Following command is used to Copy File with MetaData Information &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;shutil.copystat(src,dst)&lt;/pre&gt;
            &lt;p&gt;Here are the steps to copy file in Python &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Before, we copy a file, we need to get the the path to the original file in the
                current directory. In the code - &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Declaring variable&lt;/li&gt;
                &lt;li&gt;Applying split function on variable&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/22/Python18.5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                        alt=&quot;Python OS Module, Shell Script Commands&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/22/Python18.5.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code Explanation&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;First we are going to check that our &quot;guru99.txt&quot; file exists or not. Since we have created
                    guru99.txt file earlier, we know it exists, and we will carry on further with the code&lt;/li&gt;
                &lt;li&gt;We store the file path in the variable &quot;&lt;strong&gt;src&lt;/strong&gt;&quot; if your file exist&lt;/li&gt;
                &lt;li&gt;Once we get the path, we going to separate the path and the file name&lt;/li&gt;
                &lt;li&gt;For that, we are going to use the split &lt;code&gt;path.split&lt;/code&gt; function on source variable&lt;/li&gt;
                &lt;li&gt;Code when executed prints out &quot;&lt;strong&gt;file name&lt;/strong&gt;&quot; and &quot;&lt;strong&gt;file path&lt;/strong&gt;&quot;
                    separately &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; We use Shutil Module to create a copy of the existing file. Here we used to
                create a copy of our existing file &quot;guru99.txt.&quot; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/22/Python18.6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                        alt=&quot;Python OS Module, Shell Script Commands&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/22/Python18.6.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code Explanation&lt;/strong&gt;&lt;/p&gt;

            &lt;ul&gt;
                &lt;li&gt;Take the original file name &quot;guru99.txt&quot; and add letters .bak at the end &quot;guru99.txt.bak&quot;. This name
                    with .bak extension is going to be our duplicate copy &lt;/li&gt;
                &lt;li&gt;And then we going to use utility's copy function to copy from source to the destination&lt;/li&gt;
                &lt;li&gt;When you run the code, you will see a duplicate file with .bak extension is created on right-hand
                    side of the panel&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; Copy function only copies the content of the file but no other information. To
                copy &lt;strong&gt;meta-data&lt;/strong&gt; associated with the file, file permission and other information you have
                to use &quot;&lt;strong&gt;copystat&lt;/strong&gt;&quot; function. Before we run this code, we have to delete our copy file
                &quot;guru99.text.bak&quot;. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/22/Python18.7.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                        alt=&quot;Python OS Module, Shell Script Commands&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/22/Python18.7.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Once you deleted the file and run the program it will create a copy of your .txt file but this time with
                all the information like &lt;strong&gt;file permission, modification time and meta-data information&lt;/strong&gt;.
                You can go to your O.S shell to verify the information. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/22/Python18.8.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                        alt=&quot;Python OS Module, Shell Script Commands&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/22/Python18.8.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Here is the code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import os
         import shutil
         from os import path
         
         def main():
             # make a duplicate of an existing file
             if path.exists(&quot;guru99.txt&quot;):
             # get the path to the file in the current directory
                 src = path.realpath(&quot;guru99.txt&quot;);
             
             #seperate the path from the filter
             head, tail = path.split(src)
             print(&quot;path:&quot; +head)
             print(&quot;file:&quot; +tail)
             
             #let's make a backup copy by appending &quot;bak&quot; to the name
             dst = src+&quot;.bak&quot;
             # nowuse the shell to make a copy of the file
             shutil.copy(src, dst)
             
             #copy over the permissions,modification
             shutil.copystat(src,dst)
             
         if __name__==&quot;__main__&quot;:
             main()
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; You can fetch the information about the text file last modified &lt;/p&gt;
            &lt;p style=&quot;text-align:center; &quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/tutorial/22/Python18.4_New.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                        alt=&quot;Python OS Module, Shell Script Commands&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/22/Python18.4_New.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;div&gt;Code Line#15- It tells the day, date, month, year and time when .txt file (guru99) was last
                        modified. We use the path module to get the file modification time details, and then we are
                        going to use the &lt;strong&gt;time classes c time function &lt;/strong&gt;to convert that into a readable
                        time. So when we run the code, we can see the file guru99.txt was last modified on &lt;strong&gt;Mon,
                            Jan 8&lt;sup&gt;th&lt;/sup&gt; at 13:35 2018. &lt;/strong&gt;&lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                    &lt;div&gt;Code Line#17- It does the same thing giving information about file modification, but it has a
                        different format to represent it. Here we use &lt;strong&gt;Get Modification Time function&lt;/strong&gt;
                        (path.getmtime(&quot;guru99.txt&quot;)). Now instead of using the c time function we going to use
                        &lt;strong&gt;From Time Stamp function &lt;/strong&gt;and going to construct a date time object. In output,
                        you can see file modification time detail is printed out in different format &lt;strong&gt;2018-01-08,
                            13:35:51.334072&lt;/strong&gt; &lt;/div&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Here is the code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         # Example file for working with o.s path module
         
         
         import os
         from os import path
         import datetime
         from datetime import date, time, timedelta
         import time
         
         def main():
         
         
             # Get the modification time
             t = time.ctime(path.getmtime(&quot;guru99.txt.bak&quot;))
             print(t)
             print(datetime.datetime.fromtimestamp(path.getmtime(&quot;guru99.txt.bak&quot;)))
         
         
         if __name__ == &quot;__main__&quot;:
             main()
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;To create a copy of the existing file by use code &lt;strong&gt;shutil.copy (src,dst)&lt;/strong&gt; &lt;/li&gt;
                &lt;li&gt;To copy all the information of original file to duplicate file like &lt;strong&gt;file permission,
                        modification time or meta-data information&lt;/strong&gt; by use code shutil.copystat(src,dst)&lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFileNDir&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonRenameFile&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python COPY File using shutil.copy(), shutil.copystat()</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">24. Zip File in Python</title><link href="http://localhost:4000/blog/PythonZipFile" rel="alternate" type="text/html" title="24. Zip File in Python" /><published>2019-10-01T00:00:00+00:00</published><updated>2019-10-01T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonZipFile</id><content type="html" xml:base="http://localhost:4000/blog/PythonZipFile">&lt;section class=&quot;Ptutorial24&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python ZIP file with Example &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;p&gt;Python allows you to quickly create zip/tar archives. &lt;/p&gt;
            &lt;p&gt;Following command will zip entire directory &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;shutil.make_archive(output_filename, 'zip', dir_name)&lt;/pre&gt;
            &lt;p&gt;Following command gives you control on the files you want to archive &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;ZipFile.write(filename)&lt;/pre&gt;
            &lt;p&gt; Here are the steps to create Zip File in Python &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; To create an archive file from Python, make sure you have your import statement
                correct and in order. Here the import statement for the archive is
                &lt;code&gt;from shutil import make_archive&lt;/code&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.10.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                        alt=&quot;Python OS Module, Shell Script Commands&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.10.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code Explanation&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Import make_archive class from module shutil&lt;/li&gt;
                &lt;li&gt;Use the split function to split out the directory and the file name from the path to the location of
                    the text file (guru99)&lt;/li&gt;
                &lt;li&gt;Then we call the module &quot;shutil.make_archive(&quot;guru99 archive, &quot;zip&quot;, root_dir)&quot; to create archive
                    file, which will be in zip format&lt;/li&gt;
                &lt;li&gt;After then we pass in the root directory of things we want to be zipped up. So everything in the
                    directory will be zipped &lt;/li&gt;
                &lt;li&gt;When you run the code, you can see the archive zip file is created on the right side of the panel.
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt;&lt;/p&gt;
               &lt;p&gt; Once your archive file is made, you can right-click on the file and select the O.S, and it will show
                your archive files in it as shown below &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.11.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.11.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt; Now your archive.zip file will appear on your O.S (Windows Explorer) &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.12.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.12.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; When you double-click on the file, you will see the list all the files in
                    there. &lt;/p&gt;
                &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.13.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.13.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; In Python we can have more control over archive since we can define which
                    specific file to include under archive. In our case, we will include two files under archive
                    &lt;strong&gt;&quot;guru99.txt&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;guru99.txt.bak&quot;.&lt;/strong&gt; &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.14.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.14.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;Code Explanation&lt;/strong&gt; &lt;/p&gt;
                &lt;ul&gt;
                    &lt;li&gt;Import Zipfile class from zip file Python module. This module gives full control over creating
                        zip files&lt;/li&gt;
                    &lt;li&gt;We create a new Zipfile with name ( &quot;testguru99.zip, &quot;w&quot;)&lt;/li&gt;
                    &lt;li&gt;Creating a new Zipfile class, requires to pass in permission because it's a file, so you need to
                        write information into the file as newzip&lt;/li&gt;
                    &lt;li&gt;We used variable &quot;newzip&quot; to refer to the zip file we created&lt;/li&gt;
                    &lt;li&gt;Using the write function on the &quot;newzip&quot; variable, we add the files &quot;guru99.txt&quot; and
                        &quot;guru99.txt.bak&quot; to the archive&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;When you execute the code you can see the file is created on the right side of the panel with name
                    &quot;guru99.zip&quot; &lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Here we don't give any command to &quot;close&quot; the file like &quot;newzip.close&quot; because
                    we use &quot;With&quot; scope lock, so when program falls outside of this scope the file will be cleaned up
                    and is closed automatically. &lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;Step 5)&lt;/strong&gt; When you &lt;strong&gt;-&amp;gt; right click on file (testguru99.zip) and -&amp;gt; select
                        your O.S (Windows Explorer)&lt;/strong&gt;, it will show the archive files in the folder as shown
                    below. &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.15.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.15.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt;When you double click on file &quot;testguru99.zip&quot;, it will open another window, and this will show the
                    files included in it. &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.16.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.16.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt;Here is the complete code &lt;/p&gt;
                &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
                &lt;pre class=&quot;code-toolbar&quot;&gt;
         import os
         import shutil
         from zipfile import ZipFile
         from os import path
         from shutil import make_archive
         
         def main():
         # Check if file exists
             if path.exists(&quot;guru99.txt&quot;):
         # get the path to the file in the current directory
             src = path.realpath(&quot;guru99.txt&quot;);
         # rename the original file
             os.rename(&quot;career.guru99.txt&quot;,&quot;guru99.txt&quot;)
         # now put things into a ZIP archive
             root_dir,tail = path.split(src)
             shutil.make_archive(&quot;guru99 archive&quot;, &quot;zip&quot;, root_dir)
         # more fine-grained control over ZIP files
             with ZipFile(&quot;testguru99.zip&quot;,&quot;w&quot;) as newzip:
             newzip.write(&quot;guru99.txt&quot;)
                 newzip.write(&quot;guru99.txt.bak&quot;)
         if __name__== &quot;__main__&quot;:
               main()&lt;/pre&gt;
                &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
                &lt;pre class=&quot;code-toolbar&quot;&gt;import os
         import shutil
         from zipfile import ZipFile
         from os import path
         from shutil import make_archive
         
             # Check if file exists
                if path.exists(&quot;guru99.txt&quot;):
             # get the path to the file in the current directory
                 src = path.realpath(&quot;guru99.txt&quot;);
             # rename the original file
                 os.rename(&quot;career.guru99.txt&quot;,&quot;guru99.txt&quot;)
             # now put things into a ZIP archive
                 root_dir,tail = path.split(src)
                 shutil.make_archive(&quot;guru99 archive&quot;,&quot;zip&quot;,root_dir)
             # more fine-grained control over ZIP files
                 with ZipFile(&quot;testguru99.zip&quot;, &quot;w&quot;) as newzip:
                     newzip.write(&quot;guru99.txt&quot;)
                     newzip.write(&quot;guru99.txt.bak&quot;)&lt;/pre&gt;
                &lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt; &lt;/p&gt;
                &lt;ul&gt;
                    &lt;li&gt;To zip entire directory use command &quot;shutil.make_archive(&quot;name&quot;,&quot;zip&quot;, root_dir)&lt;/li&gt;
                    &lt;li&gt;To select the files to zip use command &quot;ZipFile.write(filename)&quot;&lt;/li&gt;
                &lt;/ul&gt;

            &lt;/li&gt;
        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonRenameFile&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonZipFile&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python ZIP file with Example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">23. Rename File in Python</title><link href="http://localhost:4000/blog/PythonRenameFile" rel="alternate" type="text/html" title="23. Rename File in Python" /><published>2019-10-01T00:00:00+00:00</published><updated>2019-10-01T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonRenameFile</id><content type="html" xml:base="http://localhost:4000/blog/PythonRenameFile">&lt;section class=&quot;Ptutorial23&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Rename File and Directory using os.rename() &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;p&gt;In Python, rename() method is used to rename a file or directory. It takes two arguments. Let's check the
                syntax. &lt;/p&gt;
            &lt;h3&gt;Syntax &lt;/h3&gt;
            &lt;p&gt;This is the syntax for os.rename() method &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;os.rename(src, dst)&lt;/pre&gt;
            &lt;h3&gt;Parameters&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;src:&lt;/strong&gt; Source is the name of the file or directory. It should must already exist. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;dst:&lt;/strong&gt; Destination is the new name of the file or directory you want to change. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import os  
         os.rename('guru99.txt','career.guru99.txt') &lt;/pre&gt;
            &lt;p&gt; Let's look at example in detail &lt;/p&gt;
            &lt;p&gt;You can rename the original file, we have changed the file name from &quot;Guru99.txt&quot; to &quot;Career.guru99.txt.&quot;
            &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/23/Python18.9.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                        alt=&quot;Python OS Module, Shell Script Commands&quot; src=&quot;http://localhost:4000/img/python/tutorial/23/Python18.9.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;To rename &quot;guru99.txt&quot; file, we going to use &quot;rename function&quot; in the OS module &lt;/li&gt;
                &lt;li&gt;So when the code is executed, you can observe that a new file &quot;career.guru99.txt&quot; is created on the
                    right side of the panel, which we renamed for our original file. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Here is the complete code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
        import os
         import shutil
         from os import path
         
         def main():
             # make a duplicate of an existing file
             if path.exists(&quot;guru99.txt&quot;):
             # get the path to the file in the current directory
                 src = path.realpath(&quot;guru99.txt&quot;);
                 
             # rename the original file
                 os.rename('guru99.txt','career.guru99.txt') 
                 
         if __name__ == &quot;__main__&quot;:
             main()
         &lt;/pre&gt;


        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonCopy&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonZipFile&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Rename File and Directory using os.rename()</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">20. ReadNWriteFile in Python</title><link href="http://localhost:4000/blog/PythonReadNWriteFile" rel="alternate" type="text/html" title="20. ReadNWriteFile in Python" /><published>2019-10-01T00:00:00+00:00</published><updated>2019-10-01T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonReadNWriteFile</id><content type="html" xml:base="http://localhost:4000/blog/PythonReadNWriteFile">&lt;section class=&quot;Ptutorial20&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h1 itemprop=&quot;headline&quot;&gt; Python File Handling: Create, Open, Append, Read, Write &lt;/h1&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;p&gt;In Python, there is no need for importing external library to read and write files. Python provides an
                inbuilt function for creating, writing and reading files. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to Create a Text File &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to Append Data to a File &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;How to Read a File &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;How to Read a File line by line &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;File Modes in Python&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to Create a Text File&lt;/h2&gt;
            &lt;p&gt;With Python you can create a .text files (guru99.txt) by using the code, we have demonstrated here how
                you can do this &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1) &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;	f= open(&quot;guru99.txt&quot;,&quot;w+&quot;)&lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;We declared the variable f to open a file named textfile.txt. Open takes 2 arguments, the file that
                    we want to open and a string that represents the kinds of permission or operation we want to do on
                    the file&lt;/li&gt;
                &lt;li&gt;Here we used &quot;w&quot; letter in our argument, which indicates write and the plus sign that means it will
                    create a file if it does not exist in library&lt;/li&gt;
                &lt;li&gt;The available option beside &quot;w&quot; are &quot;r&quot; for read and &quot;a&quot; for append and plus sign means if it is not
                    there then create it&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 2) &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;for i in range(10):
          f.write(&quot;This is line %d\r\n&quot; % (i+1))&lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;We have a for loop that runs over a range of 10 numbers.&lt;/li&gt;
                &lt;li&gt;Using the &lt;strong&gt;write&lt;/strong&gt; function to enter data into the file.&lt;/li&gt;
                &lt;li&gt;The output we want to iterate in the file is &quot;this is line number&quot;, which we declare with write
                    function and then percent d (displays integer)&lt;/li&gt;
                &lt;li&gt;So basically we are putting in the line number that we are writing, then putting it in a carriage
                    return and a new line character&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 3) &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;	f.close() &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;This will close the instance of the file guru99.txt stored&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Here is the result after code execution &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/20/Python17.1.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Reading and Writing Files in Python&quot;
                        alt=&quot;Python FILE Tutorial: Create, Append, Read, Write&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/20/Python17.1.jpg&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;When you click on your text file in our case &quot;guru99.txt&quot; it will look something like this &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/20/Python17.2.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Reading and Writing Files in Python&quot;
                        alt=&quot;Python FILE Tutorial: Create, Append, Read, Write&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/20/Python17.2.jpg&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to Append Data to a File&lt;/h2&gt;
            &lt;p&gt;You can also append a new text to the already existing file or the new file. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1) &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;f=open(&quot;guru99.txt&quot;, &quot;a+&quot;)&lt;/pre&gt;
            &lt;p&gt;Once again if you could see a plus sign in the code, it indicates that it will create a new file if it
                does not exist. But in our case we already have the file, so we are not required to create a new file.
            &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2) &lt;/strong&gt;&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;
         for i in range(2):
          f.write(&quot;Appended line %d\r\n&quot; % (i+1))&lt;/pre&gt;
            &lt;p&gt;This will write data into the file in append mode. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/20/Python17.3.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Reading and Writing Files in Python&quot;
                        alt=&quot;Python FILE Tutorial: Create, Append, Read, Write&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/20/Python17.3.jpg&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;You can see the output in &quot;guru99.txt&quot; file. The output of the code is that earlier file is appended with
                new data. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/20/Python17.4.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Reading and Writing Files in Python&quot;
                        alt=&quot;Python FILE Tutorial: Create, Append, Read, Write&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/20/Python17.4.jpg&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;How to Read a File&lt;/h2&gt;
            &lt;p&gt;Not only you can create .txt file from Python but you can also call .txt file in a &quot;read mode&quot;(r). &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Open the file in Read mode &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;	f=open(&quot;guru99.txt&quot;, &quot;r&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; We use the mode function in the code to check that the file is in open mode. If
                yes, we proceed ahead &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;	if f.mode == 'r':&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; Use f.read to read file data and store it in variable content &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;	contents =f.read()&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Step 4) &lt;/strong&gt;print contents&lt;/p&gt;
            &lt;p&gt;Here is the output&lt;/p&gt;

            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/20/Python17.5.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Reading and Writing Files in Python&quot;
                        alt=&quot;Python FILE Tutorial: Create, Append, Read, Write&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/20/Python17.5.jpg&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;How to Read a File line by line &lt;/h2&gt;
            &lt;p&gt;You can also read your .txt file line by line if your data is too big to read. This code will segregate
                your data in easy to ready mode &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/20/Python17.6.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Reading and Writing Files in Python&quot;
                        alt=&quot;Python FILE Tutorial: Create, Append, Read, Write&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/20/Python17.6.jpg&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;When you run the code (&lt;strong&gt;f1=f.readlines())&lt;/strong&gt; for reading the file or document line by line,
                it will separate each line and present the file in a readable format. In our case the line is short and
                readable, the output will look similar to the read mode. But if there is a complex data file which is
                not readable, this piece of code could be useful. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;File Modes in Python &lt;/h2&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;th&gt;Mode&lt;/th&gt;
                        &lt;th&gt;Description&lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;'r'&lt;/td&gt;
                        &lt;td&gt;This is the default mode. It Opens file for reading.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;'w'&lt;/td&gt;
                        &lt;td&gt;This Mode Opens file for writing. &lt;br&gt;If file does not exist, it creates a new file.&lt;br&gt;If
                            file exists it truncates the file.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;'x'&lt;/td&gt;
                        &lt;td&gt;Creates a new file. If file already exists, the operation fails.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;'a'&lt;/td&gt;
                        &lt;td&gt;Open file in append mode. &lt;br&gt;If file does not exist, it creates a new file.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;'t'&lt;/td&gt;
                        &lt;td&gt;This is the default mode. It opens in text mode. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;'b'&lt;/td&gt;
                        &lt;td&gt;This opens in binary mode.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;'+'&lt;/td&gt;
                        &lt;td&gt;This will open a file for reading and writing (updating)&lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;br&gt;
            &lt;p&gt;Here is the complete code &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
          f= open(&quot;guru99.txt&quot;,&quot;w+&quot;)
          #f=open(&quot;guru99.txt&quot;,&quot;a+&quot;)
          for i in range(10):
              f.write(&quot;This is line %d\r\n&quot; % (i+1))
          f.close()   
          #Open the file back and read the contents
          #f=open(&quot;guru99.txt&quot;, &quot;r&quot;)
          #   if f.mode == 'r': 
          #     contents =f.read()
          #     print contents
          #or, readlines reads the individual line into a list
          #fl =f.readlines()
          #for x in fl:
          #print x
     if __name__== &quot;__main__&quot;:
       main()&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def main():
         f= open(&quot;guru99.txt&quot;,&quot;w+&quot;)
         #f=open(&quot;guru99.txt&quot;,&quot;a+&quot;)
         for i in range(10):
              f.write(&quot;This is line %d\r\n&quot; % (i+1))
         f.close()
         #Open the file back and read the contents
         #f=open(&quot;guru99.txt&quot;, &quot;r&quot;)
         #if f.mode == 'r':
         #   contents =f.read()
         #    print (contents)
         #or, readlines reads the individual line into a list
         #fl =f.readlines()
         #for x in fl:
         #print(x)
     if __name__== &quot;__main__&quot;:
       main()&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Python allows you to read, write and delete files&lt;/li&gt;
                &lt;li&gt;Use the function open(&quot;filename&quot;,&quot;w+&quot;) to create a file. The + tells the python interpreter to open
                    file with read and write permissions.&lt;/li&gt;
                &lt;li&gt;To append data to an existing file use the command open(&quot;Filename&quot;, &quot;&lt;strong&gt;a&lt;/strong&gt;&quot;)&lt;/li&gt;
                &lt;li&gt;Use the read function to read the ENTIRE contents of a file&lt;/li&gt;
                &lt;li&gt;Use the readlines function to read the content of the file one by one. &lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonList&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonFileNDir&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python File Handling: Create, Open, Append, Read, Write</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">21. If File or Directory Exists in Python</title><link href="http://localhost:4000/blog/PythonFileNDir" rel="alternate" type="text/html" title="21. If File or Directory Exists in Python" /><published>2019-10-01T00:00:00+00:00</published><updated>2019-10-01T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonFileNDir</id><content type="html" xml:base="http://localhost:4000/blog/PythonFileNDir">&lt;section class=&quot;Ptutorial21&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Check If File or Directory Exists &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;p&gt;In this tutorial, we will learn how to determine whether a file (or directory) exists using Python. To
                check this, we use Built-in library functions. &lt;/p&gt;
            &lt;p&gt;There are different ways to verify a file or directory exists, using functions as listed below. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;os.path.exists()&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;os.path.isfile()&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;os.path.isdir()&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;pathlibPath.exists()&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;os.path.exists()&lt;/h2&gt;
            &lt;p&gt;Using path.exists you can quickly check that a file or directory exists. Here are the steps &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Steps 1)&lt;/strong&gt; Before you run the code, it is important that you import the os.path module.
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import os.path
         from os import path&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Steps 2)&lt;/strong&gt; Now, use the path.exists() function to check whether a File Exists. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;path.exists(&quot;guru99.txt&quot;)&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Steps 3)&lt;/strong&gt; Here is the complete code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import os.path
         from os import path
         
         def main():
         
            print (&quot;file exist:&quot;+str(path.exists('guru99.txt')))
            print (&quot;File exists:&quot; + str(path.exists('career.guru99.txt')))
            print (&quot;directory exists:&quot; + str(path.exists('myDirectory')))
         
         if __name__== &quot;__main__&quot;:
            main()&lt;/pre&gt;
            &lt;p&gt; In our case only file guru99.txt is created in the working directory &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;File exists: True&lt;br&gt; File exists: False&lt;br&gt;
                directory exists: False
            &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;os.path.isfile()&lt;/h2&gt;
            &lt;p&gt;We can use the isfile command to check whether a given input is a file or directory. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import os.path
         from os import path
         
         def main():
         
             print (&quot;Is it File?&quot; + str(path.isfile('guru99.txt')))
             print (&quot;Is it File?&quot; + str(path.isfile('myDirectory')))
         if __name__== &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Is it File? True&lt;br&gt; Is it File? False&lt;/p&gt;

            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;os.path.isdir()&lt;/h2&gt;
            &lt;p&gt;If we want to confirm that a given path points to a directory, we can use the os.path.dir() function &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import os.path
         from os import path
         
         def main():
         
            print (&quot;Is it Directory?&quot; + str(path.isdir('guru99.txt')))
            print (&quot;Is it Directory?&quot; + str(path.isdir('myDirectory')))
         
         if __name__== &quot;__main__&quot;:
            main()&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Is it Directory? False&lt;br&gt; Is it Directory? True &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt; pathlibPath.exists() For Python 3.4&lt;/h2&gt;
            &lt;p&gt; Python 3.4 and above versions have pathlib Module for handling with file system path. It used
                object-oriented approach to check if file exist or not. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import pathlib
         file = pathlib.Path(&quot;guru99.txt&quot;)
         if file.exists ():
             print (&quot;File exist&quot;)
         else:
             print (&quot;File not exist&quot;)
         
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;File exist &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Complete Code&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Here is the complete code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import os
         from os import path
         
         def main():
             # Print the name of the OS
             print(os.name)
         #Check for item existence and type
         print(&quot;Item exists:&quot; + str(path.exists(&quot;guru99.txt&quot;)))
         print(&quot;Item is a file: &quot; + str(path.isfile(&quot;guru99.txt&quot;)))
         print(&quot;Item is a directory: &quot; + str(path.isdir(&quot;guru99.txt&quot;)))
         
         if __name__ == &quot;__main__&quot;:
             main()
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Item exists: True&lt;br&gt; Item is a file: True&lt;br&gt;
                Item is a directory: False
            &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt; Use path.exists to check whether a File Exists &lt;/li&gt;
                &lt;li&gt; Use path.isfile and path.isdir to check whether a path is File or Directory respectively &lt;/li&gt;
                &lt;li&gt; In Python 3.4 and above versions use pathlib Module to check a file exists. &lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonReadNWriteFile&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonCopy&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Check If File or Directory Exists</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">14. Loop in Python</title><link href="http://localhost:4000/blog/PythonLoop" rel="alternate" type="text/html" title="14. Loop in Python" /><published>2019-09-30T00:00:00+00:00</published><updated>2019-09-30T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonLoop</id><content type="html" xml:base="http://localhost:4000/blog/PythonLoop">&lt;section class=&quot;Ptutorial14&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python For &amp;amp; While Loops: Enumerate, Break, Continue Statement &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h3&gt;What is Loop?&lt;/h3&gt;
            &lt;p&gt;Loops can execute a block of code number of times until a certain condition is met. Their usage is fairly
                common in programming. Unlike other programming language that have For Loop, while loop, dowhile, etc.
            &lt;/p&gt;
            &lt;h3&gt;What is For Loop?&lt;/h3&gt;
            &lt;p&gt;For loop is used to iterate over elements of a sequence. It is often used when you have a piece of code
                which you want to repeat &quot;n&quot; number of time. &lt;/p&gt;
            &lt;p&gt;&lt;/p&gt;
            &lt;h3&gt;What is While Loop?&lt;/h3&gt;
            &lt;p&gt;While Loop is used to repeat a block of code. Instead of running the code block once, It executes the
                code block multiple times until a certain condition is met. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to use &quot;While Loop&quot; &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to use &quot;For Loop&quot; &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;How to use For Loop for set of other things besides numbers &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Break statements in For Loop &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Continue statement in For Loop &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Enumerate function for For Loop &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Pratical Example&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;How to use for loop to repeat the same statement over and again &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to use &quot;While Loop&quot;&lt;/h2&gt;
            &lt;p&gt;While loop does the exactly same thing what &quot;if statement&quot; does, but instead of running the code block
                once, they jump back to the point where it began the code and repeats the whole process again. &lt;/p&gt;
            &lt;p&gt;Syntax &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;while expression
          Statement  
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         #Example file for working with loops
         #
         def main():
             x=0
             #define a while loop
             while(x &amp;lt;4):
                 print(x)
                 x = x+1
         
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;Code Line 4: Variable x is set to 0&lt;/li&gt;
                &lt;li&gt;Code Line 7: While loop checks for condition x&amp;lt;4. The current value of x is 0. Condition is true.
                    Flow of control enters into while Loop&lt;/li&gt;
                &lt;li&gt;Code Line 8: Value of x is printed&lt;/li&gt;
                &lt;li&gt;Code Line 9: x is incremented by 1. Flow of control goes back to line 7. Now the value of x is 1
                    which is less than 4. The condition is true, and again the while loop is executed. This continues
                    till x becomes 4, and the while condition becomes false.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to use &quot;For Loop&quot;&lt;/h2&gt;
            &lt;p&gt;In Python, &quot;for loops&quot; are called &lt;strong&gt;iterators.&lt;/strong&gt;&lt;/p&gt;
            &lt;p&gt;Just like while loop, &quot;For Loop&quot; is also used to repeat the program. &lt;/p&gt;
            &lt;p&gt;But unlike while loop which depends on condition true or false. &quot;For Loop&quot; depends on the elements it has
                to iterate. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         #Example file for working with loops
         #
         def main():
             x=0
             #define a while loop
         #	while(x &amp;lt;4):
         #		print x
         #		x = x+1
         
         
             #Define a for loop 
         for x in range(2,7):
                 print(x)
         
         
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;For Loop iterates with number declared in the range. &lt;/p&gt;
            &lt;p&gt;For example, &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;For Loop&lt;/strong&gt; for x in range (2,7) &lt;/p&gt;
            &lt;p&gt;When this code is executed, it will print the number between 2 and 7 (2,3,4,5,6). In this code, number 7
                is not considered inside the range. &lt;/p&gt;
            &lt;p&gt;For Loops can also be used for a set of other things and not just number. We will see thin in next
                section. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;How to use For Loop for String &lt;/h2&gt;
            &lt;p&gt;In this step, we will see how &quot;for loops&quot; can also be used for other things besides numbers. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
             #use a for loop over a collection
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for m in Months:
                 print(m)
                 
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;Code Line 3: We store the months (&quot;Jan, Feb , Mar,April,May,June&quot;) in variable Months &lt;/p&gt;
            &lt;p&gt;Code Line 4: We iterate the for loop over each value in Months. The current value of Months in stored in
                variable m&lt;/p&gt;

            &lt;p&gt;Code Line 5: Print the month &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;How to use break statements in For Loop&lt;/h2&gt;
            &lt;p&gt;Breakpoint is a unique function in For Loop that allows you to break or terminate the execution of the
                for loop &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
             #use a for loop over a collection
             #Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             #for m in Months:
                 #print m
                 
         # use the break and continue statements
                 
                 
                 for x in range (10,20):
                     if (x == 15): break
                     #if (x % 2 == 0) : continue
                     print(x)
         
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;In this example, we declared the numbers from 10-20, but we want that our for loop to terminate at number 15
            and stop executing further. For that, we declare break function by defining (x==15): break, so as soon as
            the code calls the number 15 it terminates the program Code Line 10 declare variable x between range (10,
            20)&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Code Line 11 declare the condition for breakpoint at x==15,&lt;/li&gt;
                &lt;li&gt;Code Line 12 checks and repeats the steps until it reaches number 15&lt;/li&gt;
                &lt;li&gt;Code Line 13 Print the result in output &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;How to use &quot;continue statement&quot; in For Loop&lt;/h2&gt;
            &lt;p&gt;Continue function, as the name indicates, will terminate the current iteration of the for loop BUT will
                continue execution of the remaining iterations. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
             #use a for loop over a collection
             #Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             #for m in Months:
                 #print m
                 
         # use the break and continue statements
                 
                 
                 for x in range (10,20):
                     #if (x == 15): break
                     if (x % 5 == 0) : continue
                     print(x)
         
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;Continue statement can be used in for loop when you want to fetch a specific value from the list. &lt;/p&gt;
            &lt;p&gt;In our example, we have declared value 10-20, but between these numbers we only want those number that
                are NOT divisible by 5 or in other words which don't give zero when divided by 5. &lt;/p&gt;
            &lt;p&gt; So, in our range (10,11, 12….19,20) only 3 numbers falls (10,15,20) that are divisible by 5 and rest are
                not. &lt;/p&gt;
            &lt;p&gt;So except number 10,15 &amp;amp; 20 the &quot;for loop&quot; will not continue and print out those number as output.
            &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Code line 10 declare the variable x for range (10, 20)&lt;/li&gt;
                &lt;li&gt;Code line 12 declare the condition for x divided by 5=0 continue&lt;/li&gt;
                &lt;li&gt;Code line 13 print the result &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;How to use &quot;enumerate&quot; function for &quot;For Loop&quot;&lt;/h2&gt;
            &lt;p&gt;Enumerate function in &quot;for loop&quot; does two things &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;It returns the index number for the member &lt;/li&gt;
                &lt;li&gt;And the member of the collection that we are looking at&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: &lt;/p&gt;
            &lt;p&gt;Enumerate function is used for the numbering or indexing the members in the list. &lt;/p&gt;
            &lt;p&gt;Suppose, we want to do numbering for our month ( Jan, Feb, Marc, ….June), so we declare the variable i
                that enumerate the numbers while m will print the number of month in list. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
             #use a for loop over a collection
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for i, m in enumerate (Months):
                 print(i,m)
                 
         # use the break and continue statements
                 
                 
                 #for x in range (10,20):
                 #if (x == 15): break
                 #if (x % 5 == 0) : continue
                 #print x
         
         
                 
         if __name__ == &quot;__main__&quot;:
             main()&lt;/pre&gt;
            &lt;p&gt;When code is executed the output of the enumerate function returns the months name with an index number
                like (0-Jan), (1- Feb), (2- March), etc. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Code Line 3 declares the list of months [ Jan, Feb,…Jun]&lt;/li&gt;
                &lt;li&gt;Code Line 4 declares variable i and m for For Loop &lt;/li&gt;
                &lt;li&gt;Code Line 5 will print the result and again enter the For Loop for the rest of the months to
                    enumerate&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Pratical Example&lt;/h2&gt;
            &lt;p&gt;Let see another example for For Loop to repeat the same statement over and again. &lt;/p&gt;
            &lt;div&gt;
                &lt;table class=&quot;table table-striped table-bordered&quot; width=&quot;100%&quot;&gt;
                    &lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;&lt;strong&gt;Python loop&lt;/strong&gt;&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;p&gt;&lt;strong&gt;Working Code for all exercises&lt;/strong&gt;&lt;/p&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;Code for while loop&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
            x=0    
            while (x&amp;lt;4):
               
                print x
                x= x+1
         if __name__== &quot;__main__&quot;:
           main()  
         &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;For Loop Simple Example&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
            x=0 
               
            for x in range (2,7):
               
                print x
             
         if __name__== &quot;__main__&quot;:
           main()        
             
            &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;Use of for loop in string&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
                
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for m in (Months):
                 print m
                 
         if __name__== &quot;__main__&quot;:
          main()
         
         &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;Use break-statement in for loop&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
                
            for x in range (10,20):
                if (x == 15): break
                print x
             
         if __name__== &quot;__main__&quot;:
           main()  
         
         &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;
                                &lt;p&gt;Use of Continue statement in for loop&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
                
            for x in range (10,20):
                if (x % 5 == 0): continue
                print x
             
         if __name__== &quot;__main__&quot;:
           main()        
         
           &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td width=&quot;50%&quot;&gt;
                                &lt;p&gt;Code for &quot;enumerate function&quot; with &quot;for loop&quot;&lt;/p&gt;
                            &lt;/td&gt;
                            &lt;td&gt;
                                &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
              
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for i, m in enumerate (Months):
                 print i,m
                 
         if __name__== &quot;__main__&quot;:
           main()     
               &lt;/pre&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/div&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;How to use for loop to repeat the same statement over and again&lt;/h2&gt;
            &lt;p&gt;You can use for loop for even repeating the same statement over and again. Here in the example we have
                printed out word &quot;guru99&quot; three times. &lt;/p&gt;
            &lt;p&gt;Example: To repeat same statement number of times, we have declared the number in variable i (i in 123).
                So when you run the code as shown below, it prints the statement (guru99) that many times the number
                declared for our the variable in ( i in 123). &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;for i in '123':
          print &quot;guru99&quot;,i,&lt;/pre&gt;
            &lt;p&gt;Like other programming languages, Python also uses a loop but instead of using a range of different loops
                it is restricted to only two loops &quot;While loop&quot; and &quot;for loop&quot;. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;While loops are executed based on whether the conditional statement is true or false.&lt;/li&gt;
                &lt;li&gt;For loops are called iterators, it iterates the element based on the condition set&lt;/li&gt;
                &lt;li&gt;Python For loops can also be used for a set of various other things (specifying the collection of
                    elements we want to loop over)&lt;/li&gt;
                &lt;li&gt;Breakpoint is used in For Loop to break or terminate the program at any particular point&lt;/li&gt;
                &lt;li&gt;Continue statement will continue to print out the statement, and prints out the result as per the
                    condition set&lt;/li&gt;
                &lt;li&gt;Enumerate function in &quot;for loop&quot; returns the member of the collection that we are looking at with
                    the index number&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;p&gt;Above codes are Python 3 examples, If you want to run in Python 2 please consider following code. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         # How to use &quot;While Loop&quot;
         #Example file for working with loops
         #
         def main():
             x=0
             #define a while loop
             while(x &amp;lt;4):
                 print x
                 x = x+1
         
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use &quot;For Loop&quot;
         #Example file for working with loops
         #
         def main():
             x=0
             #define a while loop
         #	while(x &amp;lt;4):
         #		print x
         #		x = x+1
         
         
         #Define a for loop 
         for x in range(2,7):
                 print x
         
         
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use For Loop for String
         def main():
             #use a for loop over a collection
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for m in Months:
                 print m
                 
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use break statements in For Loop
         def main():
             #use a for loop over a collection
             #Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             #for m in Months:
                 #print m
                 
         # use the break and continue statements
                 for x in range (10,20):
                     if (x == 15): break
                     #if (x % 2 == 0) : continue
                     print x
         
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use &quot;continue statement&quot; in For Loop
         def main():
             #use a for loop over a collection
             #Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             #for m in Months:
                 #print m
                 
         # use the break and continue statements		
                 for x in range (10,20):
                     #if (x == 15): break
                     if (x % 5 == 0) : continue
                     print x
         
         if __name__ == &quot;__main__&quot;:
             main()
         
         #How to use &quot;enumerate&quot; function for &quot;For Loop&quot;
         def main():
             #use a for loop over a collection
             Months = [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;April&quot;,&quot;May&quot;,&quot;June&quot;]
             for i, m in enumerate (Months):
                 print i,m
                 
         # use the break and continue statements
                 #for x in range (10,20):
                 #if (x == 15): break
                 #if (x % 5 == 0) : continue
                 #print x
             
         if __name__ == &quot;__main__&quot;:
             main()
         &lt;/pre&gt;


        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonIf&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonClass&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python For &amp;amp; While Loops: Enumerate, Break, Continue Statement</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">19. List in Python</title><link href="http://localhost:4000/blog/PythonList" rel="alternate" type="text/html" title="19. List in Python" /><published>2019-09-30T00:00:00+00:00</published><updated>2019-09-30T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonList</id><content type="html" xml:base="http://localhost:4000/blog/PythonList">&lt;section class=&quot;Ptutorial19&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python List: Comprehension, Apend, Sort, Length, Reverse EXAMPLES &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is a Python List?&lt;/h2&gt;
            &lt;p&gt;A list is exactly what it sounds like, a container that contains different Python objects, which could be
                integers, words, values, etc. It is the equivalent of an array in other programming languages. It is
                represented by square brackets (and this is one of the attributes that differentiates it from tuples,
                which are separated by parentheses). It is also mutable, that is, it can be modified or updated; unlike
                tuples, which are immutable. &lt;/p&gt;
            &lt;p&gt;In this python tutorial, you will learn: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is a Python List? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Examples of Python lists: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Accessing values within lists &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;List slicing &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Updating lists &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Deleting list elements &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Appending list elements &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;List built-in functions (methods) &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Looping through lists &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;List comprehensions &lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Examples of Python lists:&lt;/h2&gt;
            &lt;p&gt;Python lists can be homogeneous, meaning that they can contain the same type of objects; or
                heterogeneous, including different types of objects. &lt;/p&gt;
            &lt;p&gt;Examples of homogeneous lists include: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list of integers =  [1, 2, 3, 8, 33]
         list of animals = ['dog', 'cat', 'goat']
         list of names = ['John', 'Travis', 'Sheila']
         list of floating numbers = [2.2, 4.5, 9.8, 10.4]
         &lt;/pre&gt;
            &lt;p&gt;Examples of heterogeneous lists include: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         [2, 'cat', 34.33, 'Travis']
         [2.22, 33, 'pen']
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Accessing values within lists&lt;/h2&gt;
            &lt;p&gt;To access values within lists, the index of the objects inside the lists can be used. An index in Python
                lists refers to the position of an element within an ordered list. For example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list = [3, 22, 30, 5.3, 20]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;The first value in the list above, 3, has an index of 0&lt;/li&gt;
                &lt;li&gt;The second value, 22, has an index of 1&lt;/li&gt;
                &lt;li&gt;The third value, 30, has an index of 2&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;and so on. To access each of the values from the list, you would use: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list[0] to access 3
         list[1] to access 22
         list[2] to access 30
         list[3] to access 5.3
         list[4] to access 20
         &lt;/pre&gt;
            &lt;p&gt;The last member of a list can also be accessed by using the index -1. For example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;list[-1] = 20
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;List slicing&lt;/h2&gt;
            &lt;p&gt;List slicing is the method of splitting a subset of a list, and the indices of the list objects are also
                used for this. For example, using the same list example above; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list[:] = [3, 22, 30, 5.3, 20] (all the members of the list];
         list[1:3] = [22, 30] (members of the list from index 1 to index 3, without the member at index 3);
         list[:4] = [3, 22, 30, 5.3] (members of the list from index 0 to index 4, without the member at index 4)
         list[2:-1] = [30, 5.3] (members of the list from index 2, which is the third element, to the second to the last element in the list, which is 5.3).
         &lt;/pre&gt;
            &lt;p&gt;Python lists are upper-bound exclusive, and this means that the last index during list slicing is usually
                ignored. That is why &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list[2:-1] = [30, 5.3] &lt;/pre&gt;
            , and not [30, 5.3, 20]. The same goes for all the other list slicing examples given above.
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Updating lists&lt;/h2&gt;
            &lt;p&gt;Let's say you have a list = [physics, chemistry, mathematics], and you want to change the list to
                [biology, chemistry, mathematics], effectively changing the member at index 0. That can easily be done
                by assigning that index to the new member you want. &lt;/p&gt;
            &lt;p&gt;That is, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         list = [physics, chemistry, mathematics]
         list[0] = biology
         print(list)
            &lt;/pre&gt;
            &lt;p&gt;Output: [biology, chemistry, mathematics] &lt;/p&gt;
            &lt;p&gt;This replaces the member at index 0 (physics) with the new value you want (chemistry). This can be done
                for any member or subset of the list you want to change. &lt;/p&gt;
            &lt;p&gt;To give another example; let's say you have a list called integers and containing the numbers [2, 5, 9,
                20, 27]. To replace 5 in that list with 10, you can do that with: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         integers = [2, 5, 9, 20, 27]
         integers[1] = 10
         print(integers)
         
         &amp;gt;&amp;gt;&amp;gt; [2, 10, 9, 20, 27]
         &lt;/pre&gt;
            &lt;p&gt;To replace the last member of the list of integers, which is 27, with a free number like 30.5, you would
                use: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         integers = [2, 5, 9, 20, 27]
         integers[-1] = 30.5
         print(integers)
         
         &amp;gt;&amp;gt;&amp;gt; [2, 5, 9, 20, 30.5]
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Deleting list elements&lt;/h2&gt;
            &lt;p&gt;There are 3 Python methods for deleting list elements: list.remove(), list.pop(), and del operator.
                Remove method takes the particular element to be removed as an argument while pop and del take the index
                of the element to be removed as an argument. For example: &lt;/p&gt;
            &lt;p&gt; list = [3, 5, 7, 8, 9, 20] &lt;/p&gt;
            &lt;p&gt;To delete 3 (the 1st element) from the list, you could use:&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt; list.remove(3) or&lt;/li&gt;
                &lt;li&gt; list.pop[0], or&lt;/li&gt;
                &lt;li&gt; del list[0]&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;To delete 8, the item at index 3, from the list, you could use: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt; list.remove(8), or&lt;/li&gt;
                &lt;li&gt; list.pop[3]&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Appending list elements&lt;/h2&gt;
            &lt;p&gt;To append elements to a list, the append method is used, and this adds the element to the end of the
                list. &lt;/p&gt;
            &lt;p&gt;For example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             list_1 = [3, 5, 7, 8, 9, 20]
             list_1.append(3.33)
             print(list_1)
         
             &amp;gt;&amp;gt;&amp;gt; list_1 = [3, 5, 7, 8, 9, 20, 3.33]
         
             list_1.append(&quot;cats&quot;)
             print(list_1)
             &amp;gt;&amp;gt;&amp;gt; list_1 = [3, 5, 7, 8, 9, 20, 3.33, &quot;cats&quot;]
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;List built-in functions (methods)&lt;/h2&gt;
            &lt;p&gt;The following is a list of list built-in functions and methods with their descriptions: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;len(list):&lt;/strong&gt; this gives the length of the list as output. For example:&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9]
         print(len(numbers))
         &amp;gt;&amp;gt;&amp;gt; 4
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;max(list):&lt;/strong&gt; returns the item in the list with the maximum value. For example:&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9]
         print(max(numbers))
         &amp;gt;&amp;gt;&amp;gt; 9
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;min(list):&lt;/strong&gt; returns the item in the list with the maximum value. For example:&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9]
         print(min(numbers))
         &amp;gt;&amp;gt;&amp;gt; 2
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list(tuple):&lt;/strong&gt; converts a tuple object a list. For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;animals = (cat, dog, fish, cow)
         print(list(animals))
         &amp;gt;&amp;gt;&amp;gt; [cat, dog, fish, cow]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.append&lt;/strong&gt;(element): appends the element to the list. For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9]
         numbers.append(15)
         print(numbers)
         &amp;gt;&amp;gt;&amp;gt; [2, 5, 7, 9, 15]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.pop&lt;/strong&gt;(index): removes the element at the specified index from the list. For
                    example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;numbers = [2, 5, 7, 9, 15]
         numbers.pop(2)
         print(numbers)
         &amp;gt;&amp;gt;&amp;gt; [2, 5, 9, 15]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.remove&lt;/strong&gt;(element):deletes the element from the list.For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;values = [2, 5, 7, 9]
         values.remove(2)
         print(values)
         &amp;gt;&amp;gt;&amp;gt; [5, 7, 9]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.reverse&lt;/strong&gt;(): reverses the objects of the list. For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;values = [2, 5, 7, 10]
         values.reverse()
         print(values)
         &amp;gt;&amp;gt;&amp;gt; [10, 7, 5, 2]
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;list.index&lt;/strong&gt;(element): to get the index value of an element within the list. For
                    example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;animals = ['cat', 'dog', 'fish', 'cow', 'goat']
         fish_index = animals.index('fish')
         print(fish_index)
         &amp;gt;&amp;gt;&amp;gt; 2
         &lt;/pre&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;sum&lt;/strong&gt;(list): to get the sum of all the values in the list, if the values are all
                    numbers (integers or decimals). For example;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;values = [2, 5, 10]
         sum_of_values = sum(values)
         print(sum_of_values)
         
         &amp;gt;&amp;gt;&amp;gt; 17
         &lt;/pre&gt;
            &lt;p&gt;If the list contains any element that is not a number, such as a string, the sum method would not work.
                You would get an error saying: &quot;&lt;strong&gt;TypeError&lt;/strong&gt;: unsupported operand type(s) for +: 'int' and
                'str'&quot; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;list.sort(): to arrange a list of integers, floating point numbers, or strings, in ascending or
                    descending order. For example: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;values = [1, 7, 9, 3, 5]
         # To sort the values in ascending order:
         values.sort()
         print(values)
         
         &amp;gt;&amp;gt;&amp;gt; [1, 3, 5, 7, 9]
         &lt;/pre&gt;
            &lt;p&gt;Another example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         values = [2, 10, 7, 14, 50]
         # To sort the values in descending order:
         values.sort(reverse = True)
         print(values)
         
         &amp;gt;&amp;gt;&amp;gt; [50, 14, 10, 7, 2]
         &lt;/pre&gt;
            &lt;p&gt;A list of strings can also be sorted, either alphabetically, or by length of the strings. For example;
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         # to sort the list by length of the elements
         strings = ['cat', 'mammal', 'goat', 'is']
         sort_by_alphabet = strings.sort()
         sort_by_length = strings.sort(key = len)
         print(sort_by_alphabet)
         print(sort_by_length)
         
         &amp;gt;&amp;gt;&amp;gt; ['cat', 'goat', 'is', 'mammal']
                 ['is', 'cat', 'goat', 'mammal']
         &lt;/pre&gt;
            &lt;p&gt;We can sort the same list alphabetically by using 'strings. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Looping through lists&lt;/h2&gt;
            &lt;p&gt;Looping through lists can be done in just the same way as any other looping function in Python. This way,
                a method can be performed on multiple elements of a list at the same time. For example: &lt;/p&gt;
            &lt;p&gt;list = [10, 20, 30, 40, 50, 60, 70]. &lt;/p&gt;
            &lt;p&gt;To loop through all the elements of this list, and let's say, add 10 to each element: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                 for elem in list:
                 elem = elem + 5
                 print(elem)
             
             &amp;gt;&amp;gt;&amp;gt;&amp;gt;15
                 25
                 35
                 45
                 55
                 65
                 75
         &lt;/pre&gt;
            &lt;p&gt;To loop through the first three elements of the list, and delete all of them; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             for elem in list[:3]:
             list.remove(elem)
         
             &amp;gt;&amp;gt;&amp;gt;list = [40, 50, 60, 70]
         &lt;/pre&gt;
            &lt;p&gt;To loop through the 3&lt;sup&gt;rd&lt;/sup&gt; (index 2) to last element on the list, and append them to a new list
                called new_list: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             new_list = []	
             for elem in list[2:]:
                 new_list.append(elem)
                 print(“New List: {}”.format(new_list))
             
            Output:
             New List: [30, 40, 50, 60, 70]
         &lt;/pre&gt;
            &lt;p&gt;In this way, any or method or function can be applied to the members of a list to perform a particular
                operation. You can either loop through all the members of the list, or loop through a subset of the list
                by using list slicing. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;10&quot;&gt;&lt;/a&gt;List Comprehensions&lt;/h2&gt;
            &lt;p&gt;List comprehensions are Python functions that are used for creating new sequences (such as lists,
                dictionaries, etc.) using sequences that have already been created. They help to reduce longer loops and
                make your code easier to read and maintain. &lt;/p&gt;
            &lt;p&gt;For example; let's say you wanted to create a list which contains the squares of all the numbers from 1
                to 9: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             list_of squares = []
             for int in range(1, 10):
                 square = int ** 2
                 list_of_squares.append(square)
         
             print(list_of_squares)
         
         List_of_squares using for loop:
         
             [1, 4, 9, 16, 25, 36, 49, 64, 81]
         &lt;/pre&gt;
            &lt;p&gt;To do the same thing with list comprehensions: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             list_of_squares_2 = [int**2 for int in range(1, 10)]
         
             print('List of squares using list comprehension: {}'.format(list_of_squares_2))
         
         Output using list comprehension:
         
             [1, 4, 9, 16, 25, 36, 49, 64, 81]
         &lt;/pre&gt;
            &lt;p&gt;As seen above, writing the code using list comprehensions is much shorter than using traditional for
                loops, and is also faster. This is just one example of using list comprehensions in place of for loops,
                but this can be replicated and used in a lot of places where for loops can also be used. Sometimes,
                going with a for loop is the better option, especially if the code is complex, but in many cases, list
                comprehensions will make your coding easier and faster. &lt;/p&gt;
            &lt;p&gt;Below is a table containing some list functions and methods, and their descriptions. &lt;/p&gt;
            &lt;h3&gt;Built-in Functions&lt;/h3&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td width=&quot;50%&quot;&gt;FUNCTION &lt;/td&gt;
                        &lt;td&gt;DESCRIPTION &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Round() &lt;/td&gt;
                        &lt;td&gt;Rounds off the number passed as an argument to a specified number of digits and returns the
                            floating point value &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Min() &lt;/td&gt;
                        &lt;td&gt;return minimum element of a given list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Max() &lt;/td&gt;
                        &lt;td&gt;return maximum element of a given list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;len() &lt;/td&gt;
                        &lt;td&gt;Returns the length of the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Enumerate() &lt;/td&gt;
                        &lt;td&gt;This built-in function generates both the values and indexes of items in an iterable, so we
                            don't need to count manually &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Filter() &lt;/td&gt;
                        &lt;td&gt;tests if each element of a list true or not &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Lambda &lt;/td&gt;
                        &lt;td&gt;An expression that can appear in places where a def (for creating functions) is not
                            syntactic, inside a list literal or a function's call arguments &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Map() &lt;/td&gt;
                        &lt;td&gt;returns a list of the results after applying the given function to each item of a given
                            iterable &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Accumulate() &lt;/td&gt;
                        &lt;td&gt;apply a particular function passed in its argument to all of the list elements returns a
                            list containing the intermediate results &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Sum() &lt;/td&gt;
                        &lt;td&gt;Returns the sum of all the numbers in the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Cmp() &lt;/td&gt;
                        &lt;td&gt;This is used for comparing two lists and returns 1 if the first list is greater than the
                            second list. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Insert &lt;/td&gt;
                        &lt;td&gt;Insert element to list at particular position &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h3&gt;List Methods&lt;/h3&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td width=&quot;50%&quot;&gt;FUNCTION &lt;/td&gt;
                        &lt;td&gt;DESCRIPTION &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Append() &lt;/td&gt;
                        &lt;td&gt;Adds a new item to the end of the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Clear() &lt;/td&gt;
                        &lt;td&gt;Removes all items from the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Copy() &lt;/td&gt;
                        &lt;td&gt;Returns a copy of the original list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Extend() &lt;/td&gt;
                        &lt;td&gt;Add many items to the end of the list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Count() &lt;/td&gt;
                        &lt;td&gt;Returns the number of occurrences of a particular item in a list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Index() &lt;/td&gt;
                        &lt;td&gt;Returns the index of a specific element of a list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Pop() &lt;/td&gt;
                        &lt;td&gt;Deletes item from the list at particular index (delete by position) &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Remove() &lt;/td&gt;
                        &lt;td&gt;Deletes specified item from the list (delete by value) &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Reverse() &lt;/td&gt;
                        &lt;td&gt;In-place reversal method which reverses the order of the elements of the list &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h2&gt;Summary&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;A list is exactly what it sounds like, a container that contains different Python objects, which
                    could be integers, words, values, etc.&lt;/li&gt;
                &lt;li&gt;Python lists can be homogeneous, means they can contain the same type of objects; or heterogeneous,
                    containing different types of objects.&lt;/li&gt;
                &lt;li&gt;To access values within lists, the index of the objects inside the lists can be used.&lt;/li&gt;
                &lt;li&gt;List slicing is the method of splitting a subset of a list, and the indices of the list objects are
                    also used for this.&lt;/li&gt;
                &lt;li&gt;Three methods for deleting list elements are : 1)list.remove(), 2)list.pop(), and 3)del operator
                &lt;/li&gt;
                &lt;li&gt;Append method is used to append elements. This adds the element to the end of the list. &lt;/li&gt;
                &lt;li&gt;Looping method of Python program can be performed on multiple elements of a data list at the same
                    time. &lt;/li&gt;
                &lt;li&gt;List comprehensions are Python functions that are used for creating new sequences (such as lists,
                    dictionaries, etc.) using sequences that have already been created. &lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonCalendar&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonReadNWriteFile&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python List: Comprehension, Apend, Sort, Length, Reverse EXAMPLES</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry></feed>