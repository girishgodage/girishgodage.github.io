<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-10T07:46:49+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">3.Python JSON</title><link href="http://localhost:4000/blog/PythonJSON" rel="alternate" type="text/html" title="3.Python JSON" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonJSON</id><content type="html" xml:base="http://localhost:4000/blog/PythonJSON">&lt;section class=&quot;Ptutorial31&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python JSON: Encode(dump), Decode(load) json Data &amp;amp; File (Example) &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is JSON?&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;JSON &lt;/strong&gt;is a standard format for data exchange, which is inspired by JavaScript. Generally,
                JSON is in string or text format. &lt;strong&gt;JSON &lt;/strong&gt;stands for&lt;strong&gt;
                    J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation. &lt;/p&gt;
            &lt;p&gt;The syntax of JSON: JSON is written as key and value pair. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         {
                 &quot;Key&quot;:  &quot;Value&quot;,
                 &quot;Key&quot;:  &quot;Value&quot;,
         } 
         &lt;/pre&gt;
            &lt;p&gt;JSON is very similar to&lt;strong&gt; &lt;/strong&gt;Python dictionary. Python supports JSON, and it has an inbuilt
                library as a JSON. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;JSON Library in Python &lt;/h2&gt;
            &lt;p&gt;'&lt;strong&gt;marshal&lt;/strong&gt;' and '&lt;strong&gt;pickle' &lt;/strong&gt;external modules of Python maintain a version of
                &lt;strong&gt;JSON&lt;/strong&gt; library. To perform JSON related operations like encoding and decoding in Python
                you need first to &lt;strong&gt;import &lt;/strong&gt;JSON library and for that in your &lt;strong&gt;.py&lt;/strong&gt; file,
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import json
         &lt;/pre&gt;
            &lt;p&gt;Following methods are available in the JSON module &lt;/p&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;th width=&quot;50%&quot;&gt;Method &lt;/th&gt;
                        &lt;th&gt;Description &lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;dumps() &lt;/td&gt;
                        &lt;td&gt;encoding to JSON objects &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;dump() &lt;/td&gt;
                        &lt;td&gt;encoded string writing on file &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;loads() &lt;/td&gt;
                        &lt;td&gt;Decode the JSON string &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;load() &lt;/td&gt;
                        &lt;td&gt;Decode while JSON file read &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;div class=&quot;toc_container&quot;&gt;
                &lt;center&gt;&lt;span&gt;&lt;strong&gt;&lt;p&gt;What You Will Learn:&lt;/p&gt;&lt;/strong&gt; &lt;span class=&quot;toc_toggle&quot;&gt;[&lt;a id=&quot;toggler&quot;
                                onclick=&quot;showme('widget', this.id);&quot; style=&quot;cursor: pointer;&quot;&gt;hide&lt;/a&gt;]&lt;/span&gt;&lt;/span&gt;
                &lt;/center&gt;
                &lt;div id=&quot;widget&quot; style=&quot;display:block;&quot;&gt;
                    &lt;ul&gt;
                        &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is JSON? &lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;JSON Library in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Python to JSON (Encoding) &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;JSON to Python (Decoding) &lt;/a&gt; &lt;/li&gt;
                        &lt;ul&gt;
                            &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Decoding JSON File or Parsing JSON file in Python &lt;/a&gt; &lt;/li&gt;
                            &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Compact Encoding in Python &lt;/a&gt; &lt;/li&gt;
                            &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Format JSON code (Pretty print) &lt;/a&gt; &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Complex Object encoding of Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Complex JSON object decoding in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;Overview of JSON Serialization class JSONEncoder &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#11&quot;&gt;Overview of JSON Deserialization class JSONDecoder &lt;/a&gt; &lt;/li&gt;
                        &lt;ul&gt;
                            &lt;li&gt;&lt;a href=&quot;#12&quot;&gt;Decoding JSON data from URL: Real Life Example. &lt;/a&gt; &lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;li&gt;&lt;a href=&quot;#13&quot;&gt;Exceptions Related to JSON Library in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#14&quot;&gt;Infinite and NaN Numbers in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#15&quot;&gt;Repeated key in JSON String &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#16&quot;&gt;CLI (Command Line Interface) with JSON in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#17&quot;&gt;Advantages of JSON in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#18&quot;&gt;Implementation limitation of JSON in Python &lt;/a&gt; &lt;/li&gt;
                        &lt;li&gt;&lt;a href=&quot;#19&quot;&gt;Cheat Code &lt;/a&gt; &lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Python to JSON (Encoding)&lt;/h2&gt;
            &lt;p&gt; JSON Library of Python performs following translation of Python objects into JSON objects by default
            &lt;/p&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td width=&quot;50%&quot;&gt;&lt;strong&gt;Python&lt;/strong&gt; &lt;/td&gt;
                        &lt;td&gt;&lt;strong&gt;JSON&lt;/strong&gt; &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;dict &lt;/td&gt;
                        &lt;td&gt;Object &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;list &lt;/td&gt;
                        &lt;td&gt;Array &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;unicode &lt;/td&gt;
                        &lt;td&gt;String &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;number - int, long &lt;/td&gt;
                        &lt;td&gt;number – int &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;float &lt;/td&gt;
                        &lt;td&gt;number – real &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;True &lt;/td&gt;
                        &lt;td&gt;True &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;False &lt;/td&gt;
                        &lt;td&gt;False &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;None &lt;/td&gt;
                        &lt;td&gt;Null &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p&gt;Converting Python data to JSON is called an Encoding operation. Encoding is done with the help of JSON
                library method – &lt;strong&gt;dumps()&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;dumps() &lt;/strong&gt;method converts dictionary object of python into JSON string data format. &lt;/p&gt;
            &lt;p&gt;Now lets we perform our first encoding example with Python. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         
         x = {
           &quot;name&quot;: &quot;Ken&quot;,
           &quot;age&quot;: 45,
           &quot;married&quot;: True,
           &quot;children&quot;: (&quot;Alice&quot;,&quot;Bob&quot;),
           &quot;pets&quot;: ['Dog'],
           &quot;cars&quot;: [
             {&quot;model&quot;: &quot;Audi A1&quot;, &quot;mpg&quot;: 15.1},
             {&quot;model&quot;: &quot;Zeep Compass&quot;, &quot;mpg&quot;: 18.1}
           ]
         }
         # sorting result in asscending order by keys:
         sorted_string = json.dumps(x, indent=4, sort_keys=True)
         print(sorted_string)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{&quot;person&quot;: {&quot;name&quot;: &quot;Kenn&quot;, &quot;sex&quot;: &quot;male&quot;, &quot;age&quot;: 28}})
         &lt;/pre&gt;
            &lt;p&gt;Let's create a JSON file of the dictionary using the same function &lt;strong&gt;dump() &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         # here we create new data_file.json file with write mode using file i/o operation 
         with open('json_file.json', &quot;w&quot;) as file_write:
         # write json data into file
         json.dump(person_data, file_write)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p&gt; Nothing to show…In your system json_file.json is created you can check that file. &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE1.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;JSON to Python (Decoding)&lt;/h2&gt;
            &lt;p&gt;JSON string decoding is done with the help of inbuilt method &lt;strong&gt;loads()&lt;/strong&gt; &amp;amp;
                &lt;strong&gt;load() &lt;/strong&gt;of JSON library in Python. Here translation table show example of JSON objects
                to Python objects which are helpful to perform decoding in Python of JSON string. &lt;/p&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td width=&quot;50%&quot;&gt;&lt;strong&gt;JSON&lt;/strong&gt; &lt;/td&gt;
                        &lt;td&gt;&lt;strong&gt;Python&lt;/strong&gt; &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Object &lt;/td&gt;
                        &lt;td&gt;dict &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Array &lt;/td&gt;
                        &lt;td&gt;list &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;String &lt;/td&gt;
                        &lt;td&gt;unicode &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;number – int &lt;/td&gt;
                        &lt;td&gt;number - int, long &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;number – real &lt;/td&gt;
                        &lt;td&gt;float &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;True &lt;/td&gt;
                        &lt;td&gt;True &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;False &lt;/td&gt;
                        &lt;td&gt;False &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Null &lt;/td&gt;
                        &lt;td&gt;None &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p&gt;Let's see a basic example of decoding in Python with the help of &lt;strong&gt;json.loads()&lt;/strong&gt; function,
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import json  # json library imported
         # json data string
         person_data = '{  &quot;person&quot;:  { &quot;name&quot;:  &quot;Kenn&quot;,  &quot;sex&quot;:  &quot;male&quot;,  &quot;age&quot;:  28}}'
         # Decoding or converting JSON format in dictionary using loads()
         dict_obj = json.loads(person_data)
         print(dict_obj)
         # check type of dict_obj
         print(&quot;Type of dict_obj&quot;, type(dict_obj))
         # get human object details
         print(&quot;Person......&quot;,  dict_obj.get('person'))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         {'person': {'name': 'Kenn', 'sex': 'male', 'age': 28}}
         Type of dict_obj &amp;lt;class 'dict'&amp;gt;
         Person...... {'name': 'John', 'sex': 'male'}
         &lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE2.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;h3&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;Decoding JSON File or Parsing JSON file in Python&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;NOTE: &lt;/strong&gt;Decoding JSON file is File Input /Output (I/O) related operation. The JSON file
                must exist on your system at specified the location that you mention in your program.&lt;strong&gt; &lt;/strong&gt;
            &lt;/p&gt;
            &lt;p&gt;Example,&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;import json
         #File I/O Open function for read data from JSON File
         with open('X:/json_file.json') as file_object:
                 # store file data in object
                 data = json.load(file_object)
         print(data)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here data&lt;/strong&gt; is a dictionary object of Python. &lt;/p&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{'person': {'name': 'Kenn', 'sex': 'male', 'age': 28}}&lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE3.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h3&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Compact Encoding in Python&lt;/h3&gt;
            &lt;p&gt;When you need to reduce the size of your JSON file, you can use compact encoding in Python. &lt;/p&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         # Create a List that contains dictionary
         lst = ['a', 'b', 'c',{'4': 5, '6': 7}]
         # separator used for compact representation of JSON.
         # Use of ',' to identify list items
         # Use of ':' to identify key and value in dictionary
         compact_obj = json.dumps(lst, separators=(',', ':'))
         print(compact_obj)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre
                class=&quot;code-toolbar&quot;&gt;'[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, {&quot;4&quot;: 5, &quot;6&quot;: 7}]'
         
         ** Here output of JSON is represented in a single line which is the most compact representation by removing the space character from compact_obj **  &lt;/pre&gt;
            &lt;h3&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Format JSON code (Pretty print)&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;The aim is to write well-formatted code for human understanding. With the help of pretty printing,
                    anyone can easily understand the code.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Example,&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         dic = { 'a': 4, 'b': 5 }
         ''' To format the code use of indent and 4 shows number of space and use of separator is not necessary but standard way to write code of particular function. '''
         formatted_obj = json.dumps(dic, indent=4, separators=(',', ': '))
         print(formatted_obj)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{
            &quot;a&quot; : 4,
            &quot;b&quot; : 5
         }
         &lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE4.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;To better understand this, change indent to 40 and observe the output- &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE5.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Ordering the JSON code:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;sort_keys&lt;/strong&gt; attribute in dumps() function's argument will sort the key in JSON in
                ascending order. The sort_keys argument is a Boolean attribute. When it's true sorting is allowed
                otherwise not &lt;/p&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         
         x = {
           &quot;name&quot;: &quot;Ken&quot;,
           &quot;age&quot;: 45,
           &quot;married&quot;: True,
           &quot;children&quot;: (&quot;Alice&quot;, &quot;Bob&quot;),
           &quot;pets&quot;: [ 'Dog' ],
           &quot;cars&quot;: [
             {&quot;model&quot;: &quot;Audi A1&quot;, &quot;mpg&quot;: 15.1},
             {&quot;model&quot;: &quot;Zeep Compass&quot;, &quot;mpg&quot;: 18.1}
               ],
         }
         # sorting result in asscending order by keys:
         sorted_string = json.dumps(x, indent=4, sort_keys=True)
         print(sorted_string)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         {
             &quot;age&quot;: 45,
             &quot;cars&quot;: [ {
                 &quot;model&quot;: &quot;Audi A1&quot;, 
                 &quot;mpg&quot;: 15.1
             },
             {
                 &quot;model&quot;: &quot;Zeep Compass&quot;, 
                 &quot;mpg&quot;: 18.1
             }
             ],
             &quot;children&quot;: [ &quot;Alice&quot;,
                   &quot;Bob&quot;
             ],
             &quot;married&quot;: true,
             &quot;name&quot;: &quot;Ken&quot;,
             &quot;pets&quot;: [ 
                 &quot;Dog&quot;
             ]
         }
         &lt;/pre&gt;
            &lt;p&gt;As you may observe the keys age, cars, children, etc are arranged in ascending order. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Complex Object encoding of Python&lt;/h2&gt;
            &lt;p&gt;A Complex object has two different parts that is &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Real part &lt;/li&gt;
                &lt;li&gt;Imaginary part&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE6.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example: 3 +2i&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Before performing encoding of a complex object, you need to check a variable is complex or not. You need
                to create a function which checks the value stored in a variable by using an instance method.&lt;/p&gt;

            &lt;p&gt;Let's create the specific function for check object is complex or eligible for encoding.&lt;strong&gt;
                &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         
         # create function to check instance is complex or not
         def complex_encode(object):
             # check using isinstance method
             if isinstance(object, complex):
                 return [object.real, object.imag]
             # raised error using exception handling if object is not complex
             raise TypeError(repr(object) + &quot; is not JSON serialized&quot;)
         
         
         # perform json encoding by passing parameter
         complex_obj = json.dumps(4 + 5j, default=complex_encode)
         print(complex_obj)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;'[4.0, 5.0]'&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Complex JSON object decoding in Python&lt;/h2&gt;
            &lt;p&gt;To decode complex object in JSON, use an object_hook parameter which checks JSON string contains the
                complex object or not. Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
           # function check JSON string contains complex object
           def is_complex(objct):
             if '__complex__' in objct:
               return complex(objct['real'], objct['img'])
             return objct
           
           # use of json loads method with object_hook for check object complex or not
           complex_object =json.loads('{&quot;__complex__&quot;: true, &quot;real&quot;: 4, &quot;img&quot;: 5}', object_hook = is_complex)
           #here we not passed complex object so it's convert into dictionary
           simple_object =json.loads('{&quot;real&quot;: 6, &quot;img&quot;: 7}', object_hook = is_complex)
           print(&quot;Complex_object......&quot;,complex_object)
           print(&quot;Without_complex_object......&quot;,simple_object)
         &lt;/pre&gt;
            &lt;p&gt; Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Complex_object...... (4+5j)
         Without_complex_object...... {'real': 6, 'img': 7}
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;10&quot;&gt;&lt;/a&gt;Overview of JSON Serialization class JSONEncoder&lt;/h2&gt;
            &lt;p&gt;JSONEncoder class is used for serialization of any Python object while performing encoding. It contains
                three different methods of encoding which are &lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;default(o)&lt;/strong&gt; – Implemented in the subclass and return serialize object for
                    &lt;strong&gt;o&lt;/strong&gt; object.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;encode(o)&lt;/strong&gt; – Same as json.dumps() method return JSON string of Python data
                    structure.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;iterencode(o) &lt;/strong&gt;– Represent string one by one and encode object o. &lt;strong&gt; &lt;/strong&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;With the help of encode() method of JSONEncoder class, we can also encode any Python object.&lt;strong&gt;
                &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;# import JSONEncoder class from json
         from json.encoder import JSONEncoder
         colour_dict = { &quot;colour&quot;: [&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot; ]}
         # directly called encode method of JSON
         JSONEncoder().encode(colour_dict)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;'{&quot;colour&quot;: [&quot;red&quot;, &quot;yellow&quot;, &quot;green&quot;]}'&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;11&quot;&gt;&lt;/a&gt;Overview of JSON Deserialization class JSONDecoder &lt;/h2&gt;
            &lt;p&gt;JSONDecoder class is used for deserialization of any Python object while performing decoding. It contains
                three different methods of decoding which are &lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;default(o)&lt;/strong&gt; – Implemented in the subclass and return deserialized object
                    &lt;strong&gt;o&lt;/strong&gt; object.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;decode(o)&lt;/strong&gt; – Same as json.loads() method return Python data structure of JSON string
                    or data.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;raw_decode(o) &lt;/strong&gt;– Represent Python dictionary one by one and decode object o.
                    &lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;With the help of decode() method of JSONDecoder class, we can also decode JSON string.&lt;strong&gt; &lt;/strong&gt;
            &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         # import JSONDecoder class from json
         from json.decoder import JSONDecoder
         colour_string = '{ &quot;colour&quot;: [&quot;red&quot;, &quot;yellow&quot;]}'
         # directly called decode method of JSON
         JSONDecoder().decode(colour_string)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt; Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{'colour': ['red', 'yellow']}&lt;/pre&gt;
            &lt;h3&gt;&lt;a id=&quot;12&quot;&gt;&lt;/a&gt;Decoding JSON data from URL: Real Life Example&lt;/h3&gt;
            &lt;p&gt;We will fetch data of CityBike NYC (Bike Sharing System) from specified URL(&lt;a
                    href=&quot;https://feeds.citibikenyc.com/stations/stations.json&quot;&gt;https://feeds.citibikenyc.com/stations/stations.json&lt;/a&gt;)
                and convert into dictionary format. &lt;/p&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;p&gt;NOTE:- Make sure requests library is already installed in your Python, If not then open Terminal or CMD
                and type &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt; (For Python 3 or above) &lt;strong&gt;pip3 install requests&lt;/strong&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         import requests
         
         # get JSON string data from CityBike NYC using web requests library
         json_response= requests.get(&quot;https://feeds.citibikenyc.com/stations/stations.json&quot;)
         # check type of json_response object
         print(type(json_response.text))
         # load data in loads() function of json library
         bike_dict = json.loads(json_response.text)
         #check type of news_dict
         print(type(bike_dict))
         # now get stationBeanList key data from dict
         print(bike_dict['stationBeanList'][0]) 
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         &amp;lt;class 'str'&amp;gt;
         &amp;lt;class 'dict'&amp;gt;
         {
             'id': 487,
              'stationName': 'E 20 St &amp;amp; FDR Drive',
             'availableDocks': 24,
             'totalDocks': 34,
             'latitude': 40.73314259,
             'longitude': -73.97573881,
             'statusValue': 'In Service',
             'statusKey': 1,
             'availableBikes': 9,
             'stAddress1': 'E 20 St &amp;amp; FDR Drive',
             'stAddress2': '',
             'city': '',
             'postalCode': '',
             'location': '', 
             'altitude': '', 
             'testStation': False, 
             'lastCommunicationTime': '2018-12-11 10:59:09 PM', 'landMark': ''
         }
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;13&quot;&gt;&lt;/a&gt;Exceptions Related to JSON Library in Python:&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Class &lt;strong&gt;json.JSONDecoderError&lt;/strong&gt; handles the exception related to decoding operation.
                    and it's a subclass of &lt;strong&gt;ValueError.&lt;/strong&gt; &lt;/li&gt;
                &lt;li&gt;Exception - &lt;strong&gt;json.JSONDecoderError(msg, doc)&lt;/strong&gt; &lt;/li&gt;
                &lt;li&gt;
                    Parameters of Exception are,
                    &lt;ul&gt;
                        &lt;li&gt;msg – Unformatted Error message&lt;/li&gt;
                        &lt;li&gt;doc – JSON docs parsed&lt;/li&gt;
                        &lt;li&gt;pos – start index of doc when it's failed&lt;/li&gt;
                        &lt;li&gt;lineno – line no shows correspond to pos&lt;/li&gt;
                        &lt;li&gt;colon – column no correspond to pos&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         #File I/O Open function for read data from JSON File
         data = {} #Define Empty Dictionary Object
         try:
                 with open('json_file_name.json') as file_object:
                         data = json.load(file_object)
         except ValueError:
              print(&quot;Bad JSON file format,  Change JSON File&quot;)
         &lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE7.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE7.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;14&quot;&gt;&lt;/a&gt;Infinite and NaN Numbers in Python&lt;/h2&gt;
            &lt;p&gt;JSON Data Interchange Format (RFC – Request For Comments) doesn't allow Infinite or Nan Value but there
                is no restriction in Python- JSON Library to perform Infinite and Nan Value related operation. If JSON
                gets INFINITE and Nan datatype than it's converted it into literal. &lt;/p&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         # pass float Infinite value
         infinite_json = json.dumps(float('inf'))
         # check infinite json type
         print(infinite_json)
         print(type(infinite_json))
         json_nan = json.dumps(float('nan'))
         print(json_nan)
         # pass json_string as Infinity
         infinite = json.loads('Infinity')
         print(infinite)
         # check type of Infinity
         print(type(infinite))
         &lt;/pre&gt;
            &lt;p&gt;Output:&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Infinity
         &amp;lt;class 'str'&amp;gt;
         NaN
         inf
         &amp;lt;class 'float'&amp;gt;	
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;15&quot;&gt;&lt;/a&gt;Repeated key in JSON String &lt;/h2&gt;
            &lt;p&gt;RFC specifies the key name should be unique in a JSON object, but it's not mandatory. Python JSON library
                does not raise an exception of repeated objects in JSON. It ignores all repeated key-value pair and
                considers only last key-value pair among them. &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Example,&lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import json
         repeat_pair = '{&quot;a&quot;:  1, &quot;a&quot;:  2, &quot;a&quot;:  3}'
         json.loads(repeat_pair)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;{'a': 3}&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;16&quot;&gt;&lt;/a&gt;CLI (Command Line Interface) with JSON in Python&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;json.tool &lt;/strong&gt;provides the command line interface to validate JSON pretty-print syntax.
                Let's see an example of CLI&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE8.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/3/122818_1014_PythonJSONE8.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;$ echo '{&quot;name&quot; : &quot;Kings Authur&quot; }' | python3 -m json.tool&lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
        {
             &quot;name&quot;: &quot; Kings Authur &quot;
         }
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;17&quot;&gt;&lt;/a&gt;Advantages of JSON in Python&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Easy to move back between container and value (JSON to Python and Python to JSON)&lt;/li&gt;
                &lt;li&gt;Human readable (Pretty-print) JSON Object&lt;/li&gt;
                &lt;li&gt;Widely used in data handling.&lt;/li&gt;
                &lt;li&gt;Doesn't have the same data structure in the single file.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;18&quot;&gt;&lt;/a&gt;Implementation limitation of JSON in Python&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;In deserializer of JSON range and prediction of a number&lt;/li&gt;
                &lt;li&gt;The Maximum length of JSON string and arrays of JSON and nesting levels of object.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;19&quot;&gt;&lt;/a&gt;Cheat Code&lt;/h2&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;json.dumps(person_data) &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Create JSON Object &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;json.dump(person_data, file_write) &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Create JSON File using File I/O of Python &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;compact_obj = json.dumps(data, separators=(',',':'))&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Compact JSON Object by removing space character from JSON Object using separator &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;formatted_obj = json.dumps(dic, indent=4, separators=(',', ': '))&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Formatting JSON code using Indent &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;sorted_string = json.dumps(x, indent=4, sort_keys=True)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Sorting JSON object key by alphabetic order &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;complex_obj = json.dumps(4 + 5j, default=complex_encode)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Python Complex Object encoding in JSON &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;JSONEncoder().encode(colour_dict)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Use of JSONEncoder Class for Serialization &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;json.loads(data_string)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Decoding JSON String in Python dictionary using json.loads() function &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt; json.loads('{&quot;__complex__&quot;: true, &quot;real&quot;: 4, &quot;img&quot;: 5}', object_hook =
                                is_complex)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Decoding of complex JSON object to Python &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;
                            &lt;p&gt;JSONDecoder().decode(colour_string)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
                        &lt;/td&gt;
                        &lt;td&gt;
                            &lt;p&gt;Use of Decoding JSON to Python with Deserialization &lt;/p&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p id=&quot;slidetag&quot;&gt;&amp;nbsp;&lt;/p&gt;
        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonReadWriteCSV&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMySQL&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python JSON: Encode(dump), Decode(load) json Data &amp;amp; File (Example)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">1.Python SciPy</title><link href="http://localhost:4000/blog/PythonSciPy" rel="alternate" type="text/html" title="1.Python SciPy" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonSciPy</id><content type="html" xml:base="http://localhost:4000/blog/PythonSciPy">&lt;section class=&quot;Ptutorial29&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python SciPy Tutorial: Learn with Example &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is SciPy?&lt;/h2&gt;
            &lt;p&gt;SciPy is an Open Source Python-based library, which is used in mathematics, scientific computing,
                Engineering, and technical computing. &lt;/p&gt;
            &lt;p&gt;SciPy also pronounced as &quot;Sigh Pi.&quot; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Sub-packages of SciPy:&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;File input/output - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/io.html&quot;&gt;&lt;strong&gt;scipy.io&lt;/strong&gt;&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;Special Function - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/special.html&quot;&gt;&lt;strong&gt;scipy.special&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Linear Algebra Operation - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/linalg.html&quot;&gt;&lt;strong&gt;scipy.linalg&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Interpolation - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/interpolate.html&quot;&gt;&lt;strong&gt;scipy.interpolate&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Optimization and fit - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/optimize.html&quot;&gt;&lt;strong&gt;scipy.optimize&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Statistics and random numbers - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/stats.html&quot;&gt;&lt;strong&gt;scipy.stats&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Numerical Integration - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/integrate.html&quot;&gt;&lt;strong&gt;scipy.integrate&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Fast Fourier transforms - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/fftpack.html&quot;&gt;&lt;strong&gt;scipy.fftpack&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Signal Processing - &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/signal.html&quot;&gt;&lt;strong&gt;scipy.signal&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Image manipulation – &lt;a
                        href=&quot;https://docs.scipy.org/doc/scipy/reference/ndimage.html&quot;&gt;&lt;strong&gt;scipy.ndimage&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;
                    &lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In this tutorial, you will learn: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is SciPy? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Why use SciPy &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Numpy VS SciPy &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;SciPy - Installation and Environment Setup &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;File Input / Output package: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Special Function package: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Linear Algebra with SciPy: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Discrete Fourier Transform – scipy.fftpack &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Optimization and Fit in SciPy – scipy.optimize &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#10&quot;&gt;Nelder –Mead Algorithm: &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#11&quot;&gt;Image Processing with SciPy – scipy.ndimage &lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Why use SciPy&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;SciPy contains varieties of sub packages which help to solve the most common issue related to
                    Scientific Computation.&lt;/li&gt;
                &lt;li&gt;SciPy is the most used Scientific library only second to GNU Scientific Library for C/C++ or
                    Matlab's.&lt;/li&gt;
                &lt;li&gt;Easy to use and understand as well as fast computational power.&lt;/li&gt;
                &lt;li&gt;It can operate on an array of NumPy library. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Numpy VS SciPy&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Numpy:&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Numpy is written in C and use for mathematical or numeric calculation.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;It is faster than other Python Libraries&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Numpy is the most useful library for Data Science to perform basic calculations.&lt;strong&gt; &lt;/strong&gt;
                &lt;/li&gt;
                &lt;li&gt;Numpy contains nothing but array data type which performs the most basic operation like sorting,
                    shaping, indexing, etc.&lt;strong&gt; &lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;SciPy:&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;SciPy is built in top of the NumPy &lt;/li&gt;
                &lt;li&gt;SciPy is a fully-featured version of Linear Algebra while Numpy contains only a few features. &lt;/li&gt;
                &lt;li&gt;Most new Data Science features are available in Scipy rather than Numpy.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;SciPy - Installation and Environment Setup&lt;/h2&gt;
            &lt;p&gt;You can also install SciPy in Windows via pip &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;Python3 -m pip install --user numpy scipy 
         &lt;/pre&gt;
            &lt;p&gt;Install Scipy on Linux &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;sudo apt-get install  python-scipy python-numpy
         &lt;/pre&gt;
            &lt;p&gt;Install SciPy in Mac &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;sudo port install py35-scipy py35-numpy
         &lt;/pre&gt;
            &lt;p&gt;Before start to learning SciPy, you need to know basic functionality as well as different types of an
                array of &lt;a href=&quot;https://www.guru99.com/numpy-tutorial.html&quot;&gt;NumPy&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;The standard way of import infSciPy modules and Numpy: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import special   #same for other modules
         import numpy as np
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;File Input / Output package:&lt;/h2&gt;
            &lt;p&gt;Scipy, I/O package, has a wide range of functions for work with different files format which are Matlab,
                Arff, Wave, Matrix Market, IDL, NetCDF, TXT, CSV and binary format. &lt;/p&gt;
            &lt;p&gt;Let's we take one file format example as which are regularly use of MatLab: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
          import numpy as np
          from scipy import io as sio
          array = np.ones((4, 4))
          sio.savemat('example.mat', {'ar': array}) 
          data = sio.loadmat(‘example.mat', struct_as_record=True)
          data['array']
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;array([[ 1., 1., 1., 1.],
                    [ 1., 1., 1., 1.],
                    [ 1., 1., 1., 1.],
                    [ 1., 1., 1., 1.]])
         &lt;/pre&gt;
            &lt;p&gt;Code Explanation &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;Line 1 &amp;amp; 2: &lt;/strong&gt; Import the essential library scipy with i/o package and Numpy.
                &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: Create 4 x 4, dimensional one's array &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Line 4&lt;/strong&gt;: Store array in &lt;strong&gt;example.mat&lt;/strong&gt; file. &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Line 5: &lt;/strong&gt;Get data from &lt;strong&gt;example.mat&lt;/strong&gt; file &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Line 6&lt;/strong&gt;: Print output. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;Special Function package&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;strong&gt;scipy.special&lt;/strong&gt; package contains numerous functions of mathematical physics.&lt;/li&gt;
                &lt;li&gt; SciPy special function includes Cubic Root, Exponential, Log sum Exponential, Lambert, Permutation
                    and Combinations, Gamma, Bessel, hypergeometric, Kelvin, beta, parabolic cylinder, Relative Error
                    Exponential, etc.. &lt;/li&gt;
                &lt;li&gt;For one line description all of these function, type in Python console: &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         help(scipy.special)	
         Output : 
         NAME
             scipy.special
         
         DESCRIPTION
             ========================================
             Special functions (:mod:`scipy.special`)
             ========================================
              
             .. module:: scipy.special
              
             Nearly all of the functions below are universal functions and follow
             broadcasting and automatic array-looping rules. Exceptions are noted.
         &lt;/pre&gt;
            &lt;h3&gt;Cubic Root Function:&lt;/h3&gt;
            &lt;p&gt;Cubic Root function finds the cube root of values. &lt;/p&gt;
            &lt;p&gt;Syntax: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.special.cbrt(x)
         &lt;/pre&gt;
            &lt;p&gt;Example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy.special import cbrt
         #Find cubic root of 27 &amp;amp; 64 using cbrt() function
         cb = cbrt([27, 64])
         #print value of cb
         print(cb)
         &lt;/pre&gt;
            &lt;p&gt;Output: array([3., 4.]) &lt;/p&gt;
            &lt;h3&gt;Exponential Function:&lt;/h3&gt;
            &lt;p&gt;Exponential function computes the 10**x element-wise.&lt;/p&gt;

            &lt;p&gt;Example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy.special import exp10
         #define exp10 function and pass value in its
         exp = exp10([1,10])
         print(exp)
         &lt;/pre&gt;
            &lt;p&gt;Output: [1.e+01 1.e+10] &lt;/p&gt;
            &lt;h3&gt;Permutations &amp;amp; Combinations:&lt;/h3&gt;
            &lt;p&gt;SciPy also gives functionality to calculate Permutations and Combinations. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Combinations - &lt;/strong&gt; scipy.special.comb(N,k&lt;strong&gt;)&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy.special import comb
         #find combinations of 5, 2 values using comb(N, k)
         com = comb(5, 2, exact = False, repetition=True)
         print(com)
         &lt;/pre&gt;
            &lt;p&gt;Output: 15.0 &lt;/p&gt;
            &lt;p&gt; &lt;strong&gt;Permutations – &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.special.perm(N,k)
         &lt;/pre&gt;
            &lt;p&gt;Example: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy.special import perm
         #find permutation of 5, 2 using perm (N, k) function
         per = perm(5, 2, exact = True)
         print(per)
         &lt;/pre&gt;
            &lt;p&gt;Output: 20 &lt;/p&gt;
            &lt;h3&gt;Log Sum Exponential Function &lt;/h3&gt;
            &lt;p&gt;Log Sum Exponential computes the log of sum exponential input element. &lt;/p&gt;
            &lt;p&gt;Syntax : &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.special.logsumexp(x) 
         &lt;/pre&gt;
            &lt;h3&gt; Bessel Function &lt;/h3&gt;
            &lt;p&gt;Nth integer order calculation function &lt;/p&gt;
            &lt;p&gt;Syntax : &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.special.jn()
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Linear Algebra with SciPy&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Linear Algebra of SciPy is an implementation of BLAS and ATLAS LAPACK libraries. &lt;/li&gt;
                &lt;li&gt;Performance of Linear Algebra is very fast compared to BLAS and LAPACK.&lt;/li&gt;
                &lt;li&gt;Linear algebra routine accepts two-dimensional array object and output is also a two-dimensional
                    array.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Now let's do some test with &lt;strong&gt;scipy.linalg,&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Calculating &lt;strong&gt;determinant&lt;/strong&gt; of a two-dimensional matrix, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import linalg
         import numpy as np
         #define square matrix
         two_d_array = np.array([ [4,5], [3,2] ])
         #pass values to det() function
         linalg.det( two_d_array )
         &lt;/pre&gt;
            &lt;p&gt;Output: -7.0 &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Inverse Matrix – &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;scipy.linalg.inv()&lt;/pre&gt;
            &lt;p&gt;Inverse Matrix of Scipy calculates the inverse of any square matrix. &lt;/p&gt;
            &lt;p&gt; Let's see,&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import linalg
         import numpy as np
         # define square matrix
         two_d_array = np.array([ [4,5], [3,2] ])
         #pass value to function inv()
         linalg.inv( two_d_array )
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                array( [[-0.28571429,  0.71428571],
                [ 0.42857143, -0.57142857]] )
         &lt;/pre&gt;
            &lt;p&gt; &lt;strong&gt;Eigenvalues and Eigenvector – &lt;/strong&gt;scipy.linalg.eig() &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;The most common problem in linear algebra is eigenvalues and eigenvector which can be easily solved
                    using &lt;strong&gt;eig()&lt;/strong&gt; &lt;strong&gt; &lt;/strong&gt;function.&lt;/li&gt;
                &lt;li&gt;Now lets we find the Eigenvalue of (&lt;strong&gt;X&lt;/strong&gt;) and correspond eigenvector of a
                    two-dimensional square matrix.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import linalg
         import numpy as np
         #define two dimensional array
         arr = np.array([[5,4],[6,3]])
         #pass value into function
         eg_val, eg_vect = linalg.eig(arr)
         #get eigenvalues
         print(eg_val)
         #get eigenvectors
         print(eg_vect)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         [ 9.+0.j -1.+0.j] #eigenvalues
          [ [ 0.70710678 -0.5547002 ] #eigenvectors
            [ 0.70710678  0.83205029] ]
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Discrete Fourier Transform – scipy.fftpack&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;DFT is a mathematical technique which is used in converting spatial data into frequency data.&lt;/li&gt;
                &lt;li&gt;FFT (Fast Fourier Transformation) is an algorithm for computing DFT &lt;/li&gt;
                &lt;li&gt;FFT is applied to a multidimensional array.&lt;/li&gt;
                &lt;li&gt;Frequency defines the number of signal or wavelength in particular time period.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example: Take a wave and show using Matplotlib library. we take simple periodic function example of
                sin(20 × 2πt) &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         %matplotlib inline
         from matplotlib import pyplot as plt
         import numpy as np 
         
         #Frequency in terms of Hertz
         fre  = 5 
         #Sample rate
         fre_samp = 50
         t = np.linspace(0, 2, 2 * fre_samp, endpoint = False )
         a = np.sin(fre  * 2 * np.pi * t)
         figure, axis = plt.subplots()
         axis.plot(t, a)
         axis.set_xlabel ('Time (s)')
         axis.set_ylabel ('Signal amplitude')
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt;Output : &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy1.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;You can see this. Frequency is 5 Hz and its signal repeats in 1/5 seconds – it's call as a particular
                time period. &lt;/p&gt;
            &lt;p&gt;Now let us use this sinusoid wave with the help of DFT application. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import fftpack
         
         A = fftpack.fft(a)
         frequency = fftpack.fftfreq(len(a)) * fre_samp
         figure, axis = plt.subplots()
         
         axis.stem(frequency, np.abs(A))
         axis.set_xlabel('Frequency in Hz')
         axis.set_ylabel('Frequency Spectrum Magnitude')
         axis.set_xlim(-fre_samp / 2, fre_samp/ 2)
         axis.set_ylim(-5, 110)
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy2.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;You can clearly see that output is a one-dimensional array.&lt;/li&gt;
                &lt;li&gt;Input containing complex values are zero except two points.&lt;/li&gt;
                &lt;li&gt;In DFT example we visualize the magnitude of the signal.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Optimization and Fit in SciPy – scipy.optimize&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Optimization provides a useful algorithm for minimization of curve fitting, multidimensional or
                    scalar and root fitting. &lt;/li&gt;
                &lt;li&gt;Let's take an example of &lt;strong&gt;a Scalar Function, &lt;/strong&gt;to find minimum scalar
                    function&lt;strong&gt;.&lt;/strong&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         %matplotlib inline
         import matplotlib.pyplot as plt
         from scipy import optimize
         import numpy as np
         
         def function(a):
                return   a*2 + 20 * np.sin(a)
         plt.plot(a, function(a))
         plt.show()
         #use BFGS algorithm for optimization
         optimize.fmin_bfgs(function, 0) 
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy3.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Optimization terminated successfully. &lt;/p&gt;
            &lt;p&gt; Current function value: -23.241676 &lt;/p&gt;
            &lt;p&gt; Iterations: 4 &lt;/p&gt;
            &lt;p&gt; Function evaluations: 18 &lt;/p&gt;
            &lt;p&gt; Gradient evaluations: 6 &lt;/p&gt;
            &lt;p&gt;array([-1.67096375])&lt;/p&gt;

            &lt;ul&gt;
                &lt;li&gt;In this example, optimization is done with the help of the gradient descent algorithm from the
                    initial point &lt;/li&gt;
                &lt;li&gt;But the possible issue is local minima instead of global minima. If we don't find a neighbor of
                    global minima, then we need to apply global optimization and find global minima function used as
                    &lt;strong&gt;basinhopping()&lt;/strong&gt; which combines local optimizer. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;optimize.basinhopping(function, 0)&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
          fun: -23.241676238045315
          lowest_optimization_result:
               fun: -23.241676238045315
          hess_inv: array([[0.05023331]])
               jac: array([4.76837158e-07])
           message: 'Optimization terminated successfully.'
              nfev: 15
               nit: 3
              njev: 5
            status: 0
           success: True
                 x: array([-1.67096375])
                             message: ['requested number of basinhopping iterations completed successfully']
               minimization_failures: 0
                                nfev: 1530
                                 nit: 100
                                njev: 510
                        x: array([-1.67096375])
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;10&quot;&gt;&lt;/a&gt;Nelder –Mead Algorithm:&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Nelder-Mead algorithm selects through method parameter.&lt;/li&gt;
                &lt;li&gt;It provides the most straightforward way of minimization for fair behaved function. &lt;/li&gt;
                &lt;li&gt;Nelder – Mead algorithm is not used for gradient evaluations because it may take a longer time to
                    find the solution. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import numpy as np
         from scipy.optimize import minimize
         #define function f(x)
         def f(x):   
             return .4*(1 - x[0])**2
           
         optimize.minimize(f, [2, -1], method=&quot;Nelder-Mead&quot;)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
                final_simplex: (array([[ 1.        , -1.27109375],
                [ 1.        , -1.27118835],
                [ 1.        , -1.27113762]]), array([0., 0., 0.]))
                    fun: 0.0
                message: 'Optimization terminated successfully.'
                   nfev: 147
                    nit: 69
                 status: 0
                success: True
                      x: array([ 1.        , -1.27109375])
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;11&quot;&gt;&lt;/a&gt;Image Processing with SciPy – scipy.ndimage&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;scipy.ndimage is a submodule of SciPy which is mostly used for performing an image related operation
                &lt;/li&gt;
                &lt;li&gt;ndimage means the &quot;n&quot; dimensional image.&lt;/li&gt;
                &lt;li&gt;SciPy Image Processing provides Geometrics transformation (rotate, crop, flip), image filtering
                    (sharp and de nosing), display image, image segmentation, classification and features extraction.
                &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;MISC Package&lt;/strong&gt; in SciPy contains prebuilt images which can be used to perform image
                    manipulation task &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example: Let's take a geometric transformation example of images &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import misc
         from matplotlib import pyplot as plt
         import numpy as np
         #get face image of panda from misc package
         panda = misc.face()
         #plot or show image of face
         plt.imshow( panda )
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt; Output: &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy4.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Now we &lt;strong&gt;Flip-down&lt;/strong&gt; current image: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #Flip Down using scipy misc.face image  
         flip_down = np.flipud(misc.face())
         plt.imshow(flip_down)
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt;Output:&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy5.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy5.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Example&lt;strong&gt;: Rotation of Image using Scipy,&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import ndimage, misc
         from matplotlib import pyplot as plt
         panda = misc.face()
         #rotatation function of scipy for image – image rotated 135 degree
         panda_rotate = ndimage.rotate(panda, 135)
         plt.imshow(panda_rotate)
         plt.show()
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy6.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy6.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h3&gt; Integration with Scipy – Numerical Integration&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;When we integrate any function where analytically integrate is not possible, we need to turn for
                    numerical integration &lt;/li&gt;
                &lt;li&gt;SciPy provides functionality to integrate function with numerical integration.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;scipy.integrate&lt;/strong&gt; library has single integration, double, triple, multiple, Gaussian
                    quadrate, Romberg, Trapezoidal and Simpson's rules.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Example: Now take an example of &lt;strong&gt;Single Integration&lt;/strong&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy7.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy7.jpg&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;Here &lt;strong&gt;a&lt;/strong&gt; is the upper limit and &lt;strong&gt;b&lt;/strong&gt; is the lower limit &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import integrate
         # take f(x) function as f
         f = lambda x : x**2
         #single integration with a = 0 &amp;amp; b = 1  
         integration = integrate.quad(f, 0 , 1)
         print(integration)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p&gt;(0.33333333333333337, 3.700743415417189e-15) &lt;/p&gt;
            &lt;p&gt;Here function returns two values, in which the first value is integration and second value is estimated
                error in integral. &lt;/p&gt;
            &lt;p&gt;Example: Now take an example of &lt;strong&gt;double integration. &lt;/strong&gt;We find the double integration of
                the following equation, &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy8.jpg&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/1/120518_0746_PythonSciPy8.jpg&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from scipy import integrate
         import numpy as np
         #import square root function from math lib
         from math import sqrt
         # set  fuction f(x)
         f = lambda x, y : 64 *x*y
         # lower limit of second integral
         p = lambda x : 0
         # upper limit of first integral
         q = lambda y : sqrt(1 - 2*y**2)
         # perform double integration
         integration = integrate.dblquad(f , 0 , 2/4,  p, q)
         print(integration)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt; &lt;/strong&gt;(3.0, 9.657432734515774e-14)&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt; You have seen that above output as same previous one. &lt;/p&gt;
            &lt;h2&gt;Summary&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;SciPy(pronounced as &quot;Sigh Pi&quot;) is an Open Source Python-based library, which is used in mathematics,
                    scientific computing, Engineering, and technical computing.&lt;/li&gt;
                &lt;li&gt;SciPy contains varieties of sub packages which help to solve the most common issue related to
                    Scientific Computation.&lt;/li&gt;
                &lt;li&gt;SciPy is built in top of the NumPy &lt;/li&gt;
            &lt;/ul&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;th&gt;Package Name &lt;/th&gt;
                        &lt;th&gt;Description &lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.io &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; File input/output &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.special &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Special Function &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.linalg &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Linear Algebra Operation &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.interpolate &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Interpolation &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.optimize &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Optimization and fit &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.stats &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Statistics and random numbers &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.integrate &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Numerical Integration &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.fftpack &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Fast Fourier transforms &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt; scipy.signal &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Signal Processing &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;scipy.ndimage &lt;/td&gt;
                        &lt;td&gt;
                            &lt;ul&gt;
                                &lt;li&gt; Image manipulation – &lt;/li&gt;
                            &lt;/ul&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;

        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonSciPy&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonReadWriteCSV&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python SciPy Tutorial: Learn with Example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">2.Reading and Writing CSV Files</title><link href="http://localhost:4000/blog/PythonReadWriteCSV" rel="alternate" type="text/html" title="2.Reading and Writing CSV Files" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonReadWriteCSV</id><content type="html" xml:base="http://localhost:4000/blog/PythonReadWriteCSV">&lt;section class=&quot;Ptutorial30&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Reading and Writing CSV Files in Python using CSV Module &amp;amp; Pandas &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is a CSV file? &lt;/h2&gt;
            &lt;p&gt;A CSV file is a type of plain text file that uses specific structuring to arrange tabular data. CSV is a
                common format for data interchange as it's compact, simple and general. Many online services allow its
                users to export tabular data from the website into a CSV file. Files of CSV will open into Excel, and
                nearly all databases have a tool to allow import from CSV file. The standard format is defined by rows
                and columns data. Moreover, each row is terminated by a newline to begin the next row. Also within the
                row, each column is separated by a comma. &lt;/p&gt;
            &lt;p&gt;In this tutorial, you will learn: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is a CSV file? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;CSV Sample File. &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Python CSV Module &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;CSV Module Functions &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;Reading CSV Files &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;Reading as a Dictionary &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Writing to CSV Files &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Reading CSV Files with Pandas &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Writing to CSV Files with Pandas &lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;CSV Sample File.&lt;/h2&gt;
            &lt;p&gt;Data in the form of tables is also called CSV (comma separated values) - literally &quot;comma-separated
                values.&quot; This is a text format intended for the presentation of tabular data. Each line of the file is
                one line of the table. The values of individual columns are separated by a separator symbol - a comma
                (,), a semicolon (;) or another symbol. CSV can be easily read and processed by Python. &lt;/p&gt;
            &lt;p&gt;Consider the following Tabe &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Table Data&lt;/strong&gt; &lt;/p&gt;
            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Programming language &lt;/td&gt;
                        &lt;td&gt;Designed by &lt;/td&gt;
                        &lt;td&gt;Appeared &lt;/td&gt;
                        &lt;td&gt;Extension &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Python &lt;/td&gt;
                        &lt;td&gt;Guido van Rossum &lt;/td&gt;
                        &lt;td&gt;1991 &lt;/td&gt;
                        &lt;td&gt;.py &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Java &lt;/td&gt;
                        &lt;td&gt;James Gosling &lt;/td&gt;
                        &lt;td&gt;1995 &lt;/td&gt;
                        &lt;td&gt;.java &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;C++ &lt;/td&gt;
                        &lt;td&gt;Bjarne Stroustrup &lt;/td&gt;
                        &lt;td&gt;1983 &lt;/td&gt;
                        &lt;td&gt;.cpp &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;p&gt;You can represent this table in csv as below.&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;CSV Data&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Programming language, Designed by, Appeared, Extension &lt;/p&gt;
            &lt;p&gt;Python, Guido van Rossum, 1991, .py &lt;/p&gt;
            &lt;p&gt;Java, James Gosling, 1995, .java &lt;/p&gt;
            &lt;p&gt;C++, Bjarne Stroustrup,1983,.cpp &lt;/p&gt;
            &lt;p&gt;As you can see each row is a new line, and each column is separated with a comma. This is an example of
                how a CSV file looks like. &lt;/p&gt;
            &lt;p class=&quot;alert alert-error&quot; style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;https://drive.google.com/uc?export=download&amp;amp;id=1e4zXe62E41RqLexYusECd5RSvN5aVZGI&quot;
                    onclick=&quot;ga('send', 'event', 'download', 'Python CSV File', 'Python CSV File');&quot;&gt; Download CSV
                    Data&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Python CSV Module&lt;/h2&gt;
            &lt;p&gt;Python provides a CSV module to handle CSV files. To read/write data, you need to loop through rows of
                the CSV. You need to use the split method to get data from specified columns. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;CSV Module Functions&lt;/h2&gt;
            &lt;p&gt;In CSV module documentation you can find following functions: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;csv.field_size_limit – return maximum field size&lt;/li&gt;
                &lt;li&gt;csv.get_dialect – get the dialect which is associated with the name&lt;/li&gt;
                &lt;li&gt;csv.list_dialects – show all registered dialects&lt;/li&gt;
                &lt;li&gt;csv.reader – read data from a csv file&lt;/li&gt;
                &lt;li&gt;csv.register_dialect - associate dialect with name&lt;/li&gt;
                &lt;li&gt;csv.writer – write data to a csv file&lt;/li&gt;
                &lt;li&gt;csv.unregister_dialect - delete the dialect associated with the name the dialect registry &lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;csv.QUOTE_ALL&lt;/strong&gt; - Quote everything, regardless of type.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;csv.QUOTE_MINIMAL&lt;/strong&gt; - Quote fields with special characters&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;csv.QUOTE_NONNUMERIC&lt;/strong&gt; - Quote all fields that aren't numbers value&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;csv.QUOTE_NONE&lt;/strong&gt; – Don't quote anything in output &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;In this tutorial, we are going to focus only on the reader and writer functions which allow you to edit,
                modify, and manipulate the data in a CSV file. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;How to Read a CSV File&lt;strong&gt; &lt;/strong&gt;&lt;/h2&gt;
            &lt;p&gt;To read data from CSV files, you must use the reader function to generate a reader object. &lt;/p&gt;
            &lt;p&gt;The reader function is developed to take each row of the file and make a list of all columns. Then, you
                have to choose the column you want the variable data for. &lt;/p&gt;
            &lt;p&gt;It sounds a lot more intricate than it is. Let's take a look at this example, and we will find out that
                working with csv file isn't so hard. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #import necessary modules
         import csv
         with open('X:\data.csv','rt')as f:
           data = csv.reader(f)
           for row in data:
                 print(row)
         &lt;/pre&gt;
            &lt;p&gt;When you execute the program above, the output will be:&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;
         ['Programming language; Designed by; Appeared; Extension']
         ['Python; Guido van Rossum; 1991; .py']
         ['Java; James Gosling; 1995; .java']
         ['C++; Bjarne Stroustrup;1983;.cpp']
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;How to Read a CSV as a Dictionary&lt;/h2&gt;
            &lt;p&gt;You can also you use DictReader to read CSV files. The results are interpreted as a dictionary where the
                header row is the key, and other rows are values. &lt;/p&gt;
            &lt;p&gt;Consider the following code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #import necessary modules
         import csv
         
         reader = csv.DictReader(open(&quot;file2.csv&quot;))
         for raw in reader:
             print(raw)
         &lt;/pre&gt;
            &lt;p&gt;The result of this code is: &lt;/p&gt;
            &lt;pre
                class=&quot;code-toolbar&quot;&gt;
         OrderedDict([('Programming language', 'Python'), ('Designed by', 'Guido van Rossum'), (' Appeared', ' 1991'), (' Extension', ' .py')])
         OrderedDict([('Programming language', 'Java'), ('Designed by', 'James Gosling'), (' Appeared', ' 1995'), (' Extension', ' .java')])
         OrderedDict([('Programming language', 'C++'), ('Designed by', ' Bjarne Stroustrup'), (' Appeared', ' 1985'), (' Extension', ' .cpp')])&lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW1.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;And this way to read data from CSV file is much easier than earlier method. However, this is not isn't
                the best way to read data. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;How to write CSV File&lt;/h2&gt;
            &lt;p&gt;When you have a set of data that you would like to store in a CSV file you have to use writer() function.
                To iterate the data over the rows(lines), you have to use the writerow() function. &lt;/p&gt;
            &lt;p&gt;Consider the following example. We write data into a file &quot;writeData.csv&quot; where the delimiter is an
                apostrophe. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #import necessary modules
         import csv
         
         with open('X:\writeData.csv', mode='w') as file:
             writer = csv.writer(file, delimiter=',', quotechar='&quot;', quoting=csv.QUOTE_MINIMAL)
         
             #way to write to csv file
             writer.writerow(['Programming language', 'Designed by', 'Appeared', 'Extension'])
             writer.writerow(['Python', 'Guido van Rossum', '1991', '.py'])
             writer.writerow(['Java', 'James Gosling', '1995', '.java'])
             writer.writerow(['C++', 'Bjarne Stroustrup', '1985', '.cpp'])
         &lt;/pre&gt;
            &lt;p&gt;Result in csv file is: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Programming language, Designed by, Appeared, Extension 
         Python, Guido van Rossum, 1991, .py
         Java, James Gosling, 1995, .java
         C++, Bjarne Stroustrup,1983,.cpp&lt;/pre&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW2.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Reading CSV Files with Pandas&lt;/h2&gt;
            &lt;p&gt;Pandas is an opensource library that allows to you perform data manipulation in Python. Pandas provide an
                easy way to create, manipulate and delete the data. &lt;/p&gt;
            &lt;p&gt;You must install pandas library with command &amp;lt;code&amp;gt;pip install pandas&amp;lt;/code&amp;gt;. In windows, you
                will execute this command in Command Prompt while in Linux in the Terminal. &lt;/p&gt;
            &lt;p&gt;Reading the CSV into a pandas DataFrame is very quick and easy: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #import necessary modules
         import pandas
         result = pandas.read_csv('X:\data.csv')
         print(result)
         &lt;/pre&gt;
            &lt;p&gt;Result: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Programming language, Designed by, Appeared, Extension 
         0    Python, Guido van Rossum, 1991, .py
         1    Java, James Gosling, 1995, .java
         2    C++, Bjarne Stroustrup,1983,.cpp	&lt;/pre&gt;
            &lt;p&gt;Very useful library. In just three lines of code you the same result as earlier. Pandas know that the
                first line of the CSV contained column names, and it will use them automatically. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Writing to CSV Files with Pandas&lt;/h2&gt;
            &lt;p&gt;Writing to CSV file with Pandas is as easy as reading. Here you can convince in it. First you must create
                DataFrame based on the following code. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from pandas import DataFrame
         C = {'Programming language': ['Python','Java', 'C++'],
                 'Designed by': ['Guido van Rossum', 'James Gosling', 'Bjarne Stroustrup'],
                 'Appeared': ['1991', '1995', '1985'],
                 'Extension': ['.py', '.java', '.cpp'],
             }
         df = DataFrame(C, columns= ['Programming language', 'Designed by', 'Appeared', 'Extension'])
         export_csv = df.to_csv (r'X:\pandaresult.csv', index = None, header=True) # here you have to write path, where result file will be stored
         print (df)
         &lt;/pre&gt;
            &lt;p&gt;Here is the output &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;Programming language, Designed by, Appeared, Extension
         0    Python, Guido van Rossum, 1991, .py
         1    Java, James Gosling, 1995, .java
         2    C++, Bjarne Stroustrup,1983,.cpp&lt;/pre&gt;
            &lt;p&gt;And CSV file is created at the specified location. &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img src=&quot;http://localhost:4000/img/python/datascience/img/2/122118_0714_ReadingandW3.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;So, now you know how use method 'csv' and also read and write data in CSV format. CSV files are widely
                used in software applications because they are easy to read and manage, and their small size makes them
                relatively fast for processing and transmission. &lt;/p&gt;
            &lt;p&gt;The csv module provides various functions and classes which allow you to read and write easily. You can
                look at the official Python documentation and find some more interesting tips and modules. CSV is the
                best way for saving, viewing, and sending data. Actually, it isn't so hard to learn as it seems at the
                beginning. But with a little practice, you'll master it. &lt;/p&gt;
            &lt;p&gt;Pandas is a great alternative to read CSV files. &lt;/p&gt;
            &lt;p&gt;Also, there are other ways to parse text files with libraries like ANTLR, PLY, and PlyPlus. They can all
                handle heavy-duty parsing, and if simple String manipulation doesn't work, there are regular expressions
                which you can use. &lt;/p&gt;


        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonSciPy&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonJSON&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Reading and Writing CSV Files in Python using CSV Module &amp;amp; Pandas</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">4.Python MySQL</title><link href="http://localhost:4000/blog/PythonMySQL" rel="alternate" type="text/html" title="4.Python MySQL" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonMySQL</id><content type="html" xml:base="http://localhost:4000/blog/PythonMySQL">&lt;section class=&quot;Ptutorial32&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python with MySQL: Connect, Create Database, Table, Insert [Examples] &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;p&gt;Before diving deep, let's understand &lt;/p&gt;
            &lt;h2&gt;What is MySQL?&lt;/h2&gt;
            &lt;p&gt;MySQL is an Open-Source database and one of the best type of RDBMS (Relational Database Management
                System). Co-founder of MySQLdb is Michael Widenius's, and also MySQL name derives from the daughter of
                Michael. &lt;/p&gt;
            &lt;h2&gt;How to Install MySQL&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Install MySQL in Linux/Unix:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Download RPM package for Linux/Unix from Official site: &lt;a
                    href=&quot;https://www.mysql.com/downloads/&quot;&gt;https://www.mysql.com/downloads/&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;In terminal use following command &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;rpm  -i &amp;lt;Package_name&amp;gt;&lt;/pre&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;Example   rpm -i MySQL-5.0.9.0.i386.rpm
         &lt;/pre&gt;
            &lt;p&gt;To check in Linux &lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;mysql --version&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Install MySQL in Windows&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt; Download MySQL database exe from &lt;a href=&quot;https://www.mysql.com/downloads/&quot;&gt;official site&lt;/a&gt; and
                install as usual normal installation of software in Windows. Refer this &lt;a
                    href=&quot;https://www.guru99.com/introduction-to-mysql-workbench.html&quot;&gt;tutorial&lt;/a&gt;, for a step by step
                guide&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;h2&gt;Install MySQL Connector Library for Python&lt;/h2&gt;
            &lt;p&gt;For Python 2.7 or lower install using pip as: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;pip install mysql-connector
         &lt;/pre&gt;
            &lt;p&gt;For Python 3 or higher version install using pip3 as:&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;pip3 install mysql-connector &lt;/pre&gt;
            &lt;h2&gt; Test the MySQL Database connection with Python&lt;/h2&gt;
            &lt;p&gt;To test database connection here we use pre-installed MySQL connector and pass credentials into
                &lt;strong&gt;connect()&lt;/strong&gt; function like host, username and password. &lt;/p&gt;
            &lt;p&gt;Syntax to access MySQL with Python: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
             import mysql.connector
             db_connection = mysql.connector.connect(
               host=&quot;hostname&quot;,
               user=&quot;username&quot;,
               passwd=&quot;password&quot;
             )
         &lt;/pre&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import mysql.connector
         db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;
         )
         print(db_connection)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre
                class=&quot;code-toolbar&quot;&gt;&amp;lt;mysql.connector.connection.MySQLConnection object at 0x000002338A4C6B00&amp;gt;&lt;/pre&gt;
            &lt;p&gt; Here output shows the connection created successfully. &lt;/p&gt;
            &lt;h2&gt;Creating Database in MySQL using Python&lt;/h2&gt;
            &lt;p&gt;Syntax to Create new database in SQL is &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;CREATE DATABASE &quot;database_name&quot;
         &lt;/pre&gt;
            &lt;p&gt;Now we create database using Python in MySQL&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host= &quot;localhost&quot;,
           user= &quot;root&quot;,
           passwd= &quot;root&quot;
           )
         # creating database_cursor to perform SQL operation
         db_cursor = db_connection.cursor()
         # executing cursor with execute method and pass SQL query
         db_cursor.execute(&quot;CREATE DATABASE my_first_db&quot;)
         # get list of all databases
         db_cursor.execute(&quot;SHOW DATABASES&quot;)
         #print all databases
         for db in db_cursor:
             print(db)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/4/030819_0707_PythonwithM1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/4/030819_0707_PythonwithM1.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;

            &lt;p&gt;Here above image shows the &lt;strong&gt;my_first_db&lt;/strong&gt; database is created &lt;/p&gt;
            &lt;h2&gt;Create a Table in MySQL with Python&lt;/h2&gt;
            &lt;p&gt;Let's create a simple table &quot;student&quot; which has two columns. &lt;/p&gt;
            &lt;p&gt;SQL Syntax: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;CREATE  TABLE student (id INT, name VARCHAR(255))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;,
           database=&quot;my_first_db&quot;
           )
         db_cursor = db_connection.cursor()
         #Here creating database table as student'
         db_cursor.execute(&quot;CREATE TABLE student (id INT, name VARCHAR(255))&quot;)
         #Get database table'
         db_cursor.execute(&quot;SHOW TABLES&quot;)
         for table in db_cursor:
             print(table)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt; ('student',) &lt;/pre&gt;
            &lt;h2&gt;Create a Table with Primary Key&lt;/h2&gt;
            &lt;p&gt;Let's create an &lt;strong&gt;Employee&lt;/strong&gt; table with three different columns. We will add a primary key
                in &lt;strong&gt;id&lt;/strong&gt; column with AUTO_INCREMENT constraint &lt;/p&gt;
            &lt;p&gt;SQL Syntax, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;CREATE TABLE employee(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), salary INT(6))
         &lt;/pre&gt;
            &lt;p&gt;Example,&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;,
           database=&quot;my_first_db&quot;
           )
         db_cursor = db_connection.cursor()
         #Here creating database table as employee with primary key
         db_cursor.execute(&quot;CREATE TABLE employee(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), salary INT(6))&quot;)
         #Get database table
         db_cursor.execute(&quot;SHOW TABLES&quot;)
         for table in db_cursor:
             print(table)	
         &lt;/pre&gt;
            &lt;p&gt; Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;('employee',) ('student',)&lt;/pre&gt;
            &lt;h2&gt;ALTER table in MySQL with Python&lt;/h2&gt;
            &lt;p&gt;Alter command is used for modification of Table structure in SQL. Here we will alter &lt;strong&gt;Student
                &lt;/strong&gt;table and add a primary key to the &lt;strong&gt;id&lt;/strong&gt; field. &lt;/p&gt;
            &lt;p&gt;SQL Syntax, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;ALTER TABLE student MODIFY id INT PRIMARY KEY
         &lt;/pre&gt;
            &lt;p&gt;Example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;,
           database=&quot;my_first_db&quot;
           )
         db_cursor = db_connection.cursor()
         #Here we modify existing column id
         db_cursor.execute(&quot;ALTER TABLE student MODIFY id INT PRIMARY KEY&quot;)
         &lt;/pre&gt;
            &lt;p&gt; Output: &lt;/p&gt;
            &lt;p&gt; Here below you can see the &lt;strong&gt;id &lt;/strong&gt;column is modified. &lt;/p&gt;
            &lt;p style=&quot;text-align:center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/4/030819_0707_PythonwithM2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/4/030819_0707_PythonwithM2.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;h2&gt;Insert Operation with MySQL in Python:&lt;/h2&gt;
            &lt;p&gt;Let's perform insertion operation in MySQL Database table which we already create. We will insert data oi
                STUDENT table and EMPLOYEE table. &lt;/p&gt;
            &lt;p&gt;SQL Syntax, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         INSERT INTO student (id, name) VALUES (01, &quot;John&quot;)
         INSERT INTO employee (id, name, salary) VALUES(01, &quot;John&quot;, 10000)
         &lt;/pre&gt;
            &lt;p&gt;Example,&lt;strong&gt; &lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
           import mysql.connector
           db_connection = mysql.connector.connect(
           host=&quot;localhost&quot;,
           user=&quot;root&quot;,
           passwd=&quot;root&quot;,
           database=&quot;my_first_db&quot;
           )
         db_cursor = db_connection.cursor()
         student_sql_query = &quot;INSERT INTO student(id,name) VALUES(01, 'John')&quot;
         employee_sql_query = &quot; INSERT INTO employee (id, name, salary) VALUES (01, 'John', 10000)&quot;
         #Execute cursor and pass query as well as student data
         db_cursor.execute(student_sql_query)
         #Execute cursor and pass query of employee and data of employee
             db_cursor.execute(employee_sql_query)
         db_connection.commit()
         print(db_cursor.rowcount, &quot;Record Inserted&quot;)
         &lt;/pre&gt;
            &lt;p&gt;Output: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt; 2 Record Inserted &lt;/pre&gt;


        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonJSON&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonKeyDiff&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python with MySQL: Connect, Create Database, Table, Insert [Examples]</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">5.Python 2 vs Python 3 - Key Differences</title><link href="http://localhost:4000/blog/PythonKeyDiff" rel="alternate" type="text/html" title="5.Python 2 vs Python 3 - Key Differences" /><published>2019-10-03T00:00:00+00:00</published><updated>2019-10-03T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonKeyDiff</id><content type="html" xml:base="http://localhost:4000/blog/PythonKeyDiff">&lt;section class=&quot;Ptutorial32&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python 2 vs Python 3: Key Differences &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is Python 2?&lt;/h2&gt;
            &lt;p&gt;Python 2 made code development process easier than earlier versions. It implemented technical details of
                Python Enhancement Proposal (PEP). Python 2.7 (last version in 2.x ) is no longer under development and
                in 2020 will be discontinued. &lt;/p&gt;
            &lt;p&gt;In this tutorial, you will learn, &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is Python 2? &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;What is Python 3? &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Why should you learn Python 2? &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Why should you use Python 3? &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;History of Python 2 &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;History of Python 3 &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;Key Differences Between Python 2 and Python 3 &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Python 2 vs. Python 3 Example Code &lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Which Python Version to Use? &lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;What is Python 3?&lt;/h2&gt;
            &lt;p&gt;On December 2008, Python released version 3.0. This version was mainly released to fix problems which
                exist in Python 2. The nature of these change is such that Python 3 was incompatible with Python 2. It
                is &lt;strong&gt;backward incompatible&lt;/strong&gt; Some features of Python 3 have been backported to Python 2.x
                versions to make the migration process easy in Python 3. &lt;/p&gt;
            &lt;p&gt;As a result, for any organization who was using Python 2.x version, migrating their project to 3.x needed
                lots of changes. These changes not only relate to projects and applications but also all the libraries
                that form part of the Python ecosystem. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Why should you learn Python 2?&lt;/h2&gt;
            &lt;figure style=&quot;margin-left: auto;margin-right: auto;&quot;&gt;
                &lt;center&gt;
                    &lt;a href=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy1.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            src=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy1.png&quot;
                            alt=&quot;&quot;&gt;&lt;/a&gt;
                    &lt;figcaption style=&quot;display: table;&quot;&gt;Google Trends Python 2 vs. Python 3&lt;/figcaption&gt;
                &lt;/center&gt;
            &lt;/figure&gt;
            &lt;p&gt;Although, Python 2 is an old open source version here are where you still need to learn Python 2: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;To become a DevOps engineer and you need to work with configurations management tools like puppet or
                    ansible. Here, you need to work with both of these versions. &lt;/li&gt;
                &lt;li&gt;If your company's code written in Python 2, you will require to learn to work with that &lt;/li&gt;
                &lt;li&gt;If your development team is working on a project that depends on specific third-party libraries or
                    software which you are not able to port to Python 3, then Python 2 is the only option available for
                    you. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Why should you use Python 3?&lt;/h2&gt;
            &lt;figure style=&quot;margin-left: auto;margin-right: auto;&quot;&gt;
                &lt;center&gt;
                    &lt;a href=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy2.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            src=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy2.png&quot;
                            alt=&quot;&quot;&gt;&lt;/a&gt;
                    &lt;figcaption style=&quot;display: table;&quot;&gt;Stack Overflow Questions Python 2 vs. Python 3&lt;/figcaption&gt;
                &lt;/center&gt;
            &lt;/figure&gt;
            &lt;p&gt;Here, are prime reasons for using Python 3.x versions: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Python 3 supports modern techniques like AI, machine learning, and data science&lt;/li&gt;
                &lt;li&gt;Python 3 is supported by a large Python developer's community. Getting support is easy.&lt;/li&gt;
                &lt;li&gt;Its easier to learn Python language compared to earlier versions.&lt;/li&gt;
                &lt;li&gt;Offers Powerful toolkit and libraries&lt;/li&gt;
                &lt;li&gt;Mixable with other languages&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;History of Python 2&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Python 2.0 - October 16, 2000 &lt;/li&gt;
                &lt;li&gt;Python 2.1 - April 17, 2001 &lt;/li&gt;
                &lt;li&gt;Python 2.2 - December 21, 2001 &lt;/li&gt;
                &lt;li&gt;Python 2.3 - July 29, 2003 &lt;/li&gt;
                &lt;li&gt;Python 2.4 - November 30, 2004 &lt;/li&gt;
                &lt;li&gt;Python 2.5 - September 19, 2006 &lt;/li&gt;
                &lt;li&gt;Python 2.6 - October 1, 2008 &lt;/li&gt;
                &lt;li&gt;Python 2.7-July 3, 2010&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;History of Python 3&lt;/h2&gt;
            &lt;ul&gt;
                &lt;li&gt;Python 3.0 - December 3, 2008 &lt;/li&gt;
                &lt;li&gt;Python 3.1 - June 27, 2009 &lt;/li&gt;
                &lt;li&gt;Python 3.2 - February 20, 2011 &lt;/li&gt;
                &lt;li&gt;Python 3.3 - September 29, 2012 &lt;/li&gt;
                &lt;li&gt;Python 3.4-March 16, 2014 &lt;/li&gt;
                &lt;li&gt;Python 3.5 - September 13, 2015&lt;/li&gt;
                &lt;li&gt;Python 3.6- October 2016&lt;/li&gt;
                &lt;li&gt;Python 3.7- June 2018.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;Key Differences Between Python 2 and Python 3&lt;/h2&gt;
            &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        src=&quot;http://localhost:4000/img/python/datascience/img/5/032219_1004_Python2vsPy3.png&quot;
                        alt=&quot;&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;table class=&quot;table1 table-striped table-bordered&quot;&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;th&gt;&lt;strong&gt;Basis of comparison&lt;/strong&gt; &lt;/th&gt;
                        &lt;th&gt;&lt;strong&gt;Python 3&lt;/strong&gt; &lt;/th&gt;
                        &lt;th&gt;&lt;strong&gt;Python 2&lt;/strong&gt; &lt;/th&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Release Date&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;2008 &lt;/td&gt;
                        &lt;td&gt;2000 &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Function print&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;print (&quot;hello&quot;) &lt;/td&gt;
                        &lt;td&gt;print &quot;hello&quot; &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Division of Integers &lt;/td&gt;
                        &lt;td&gt;Whenever two integers are divided, you get a float value &lt;/td&gt;
                        &lt;td&gt;When two integers are divided, you always provide integer value. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Unicode&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;In Python 3, default storing of strings is Unicode. &lt;/td&gt;
                        &lt;td&gt;To store Unicode string value, you require to define them with &quot;u&quot;. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Syntax &lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;The syntax is simpler and easily understandable. &lt;/td&gt;
                        &lt;td&gt;The syntax of Python 2 was comparatively difficult to understand. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Rules of ordering Comparisons &lt;/td&gt;
                        &lt;td&gt;In this version, Rules of ordering comparisons have been simplified. &lt;/td&gt;
                        &lt;td&gt;Rules of ordering comparison are very complex. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Iteration&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;The new Range() function introduced to perform iterations. &lt;/td&gt;
                        &lt;td&gt;In Python 2, the xrange() is used for iterations. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Exceptions&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;It should be enclosed in parenthesis. &lt;/td&gt;
                        &lt;td&gt;It should be enclosed in notations. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Leak of variables&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;The value of variables never changes. &lt;/td&gt;
                        &lt;td&gt;The value of the global variable will change while using it inside for-loop. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Backward compatibility &lt;/td&gt;
                        &lt;td&gt;Not difficult to port python 2 to python 3 but it is never reliable. &lt;/td&gt;
                        &lt;td&gt;Python version 3 is not backwardly compatible with Python 2. &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Library&lt;br&gt;&lt;br&gt; &lt;/td&gt;
                        &lt;td&gt;Many recent developers are creating libraries which you can only use with Python 3. &lt;/td&gt;
                        &lt;td&gt;Many older libraries created for Python 2 is not forward-compatible. &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Python 2 vs. Python 3 Example Code&lt;/h2&gt;
            &lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
           print(&quot;Hello World!&quot;)
           
         if __name__== &quot;__main__&quot;:
           main()
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Python 2&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def main():
           print &quot;Hello World!&quot;
           
         if __name__== &quot;__main__&quot;:
           main()
         &lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Which Python Version to Use?&lt;/h2&gt;
            &lt;p&gt;When it comes to Python version 2 vs. 3 today, Python 3 is the outright winner. That's because Python 2
                won't be available after 2020. Mass Python 3 adoption is the clear direction of the future. &lt;/p&gt;
            &lt;p&gt;After considering declining support for Python 2 programming language and added benefits from upgrades to
                Python 3, it is always advisable for a new developer to select Python version 3. However, if a job
                demands Python 2 capabilities, that would be an only compelling reason to use this version. &lt;/p&gt;


        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonMySQL&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonKeyDiff&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python 2 vs Python 3: Key Differences</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">1.Python Internet Access</title><link href="http://localhost:4000/blog/PyhonInternetAccess" rel="alternate" type="text/html" title="1.Python Internet Access" /><published>2019-10-02T00:00:00+00:00</published><updated>2019-10-02T00:00:00+00:00</updated><id>http://localhost:4000/blog/PyhonInternetAccess</id><content type="html" xml:base="http://localhost:4000/blog/PyhonInternetAccess">&lt;section class=&quot;Ptutorial26&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Internet Access using Urllib.Request and urlopen() &lt;/h2&gt;
        &lt;/div&gt;
        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h3&gt;&lt;b&gt; What is urllib? &lt;/b&gt;&lt;/h3&gt;
            &lt;p&gt;urllib is a Python module that can be used for opening URLs. It defines functions and classes to help in
                URL actions. &lt;/p&gt;
            &lt;p&gt;With Python you can also access and retrieve data from the internet like XML, HTML, JSON, etc. You can
                also use Python to work with this data directly. In this tutorial we are going to see how we can
                retrieve data from the web. For example, here we used a guru99 video URL, and we are going to access
                this video URL using Python as well as print HTML file of this URL. &lt;/p&gt;
            &lt;p&gt;In this tutorial we will learn &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to Open URL using Urllib&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to read HTML file for your URL in Python &lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to Open URL using Urllib&lt;/h2&gt;
            &lt;p&gt;Before we run the code to connect to Internet data, we need to import statement for URL library module or
                &quot;urllib&quot;. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/25/python19_1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Accessing Internet Data with Python&quot;
                        alt=&quot;Internet Access with Python Tutorial: Open, Parse &amp;amp; Read URL&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/25/python19_1.png&quot; width=&quot;90%&quot;&gt;&lt;/a&gt; &lt;/p&gt;

            &lt;ul&gt;
                &lt;li&gt;Import urllib&lt;/li&gt;
                &lt;li&gt;Define your main function&lt;/li&gt;
                &lt;li&gt;Declare the variable webUrl&lt;/li&gt;
                &lt;li&gt;Then call the urlopen function on the URL lib library&lt;/li&gt;
                &lt;li&gt;The URL we are opening is guru99 tutorial on youtube&lt;/li&gt;
                &lt;li&gt;Next, we going to print the result code&lt;/li&gt;
                &lt;li&gt;Result code is retrieved by calling the getcode function on the webUrl variable we have created
                &lt;/li&gt;
                &lt;li&gt;We going to convert that to a string, so that it can be concatenated with our string &quot;result code&quot;
                &lt;/li&gt;
                &lt;li&gt;This will be a regular HTTP code &quot;200&quot;, indicating http request is processed successfully &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to get HTML file form URL in Python&lt;/h2&gt;
            &lt;p&gt;You can also read the HTML file by using the &quot;read function&quot; in Python, and when you run the code, the
                HTML file will appear in the console. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/25/python19_2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Accessing Internet Data with Python&quot;
                        alt=&quot;Internet Access with Python Tutorial: Open, Parse &amp;amp; Read URL&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/25/python19_2.png&quot; width=&quot;90%&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Call the read function on the webURL variable&lt;/li&gt;
                &lt;li&gt;Read variable allows to read the contents of data files&lt;/li&gt;
                &lt;li&gt;Read the entire content of the URL into a variable called data&lt;/li&gt;
                &lt;li&gt;Run the code- It will print the data into HTML format&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Here is the complete code &lt;/p&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #  
         # read the data from the URL and print it
         #
         import urllib2
         
         def main():
         # open a connection to a URL using urllib2
            webUrl = urllib2.urlopen(&quot;https://www.youtube.com/user/guru99com&quot;)
           
         #get the result code and print it
            print &quot;result code: &quot; + str(webUrl.getcode()) 
           
         # read the data from the URL and print it
            data = webUrl.read()
            print data
          
         if __name__ == &quot;__main__&quot;:
           main()&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #
         # read the data from the URL and print it
         #
         import urllib.request
         # open a connection to a URL using urllib
         webUrl  = urllib.request.urlopen('https://www.youtube.com/user/guru99com')
         
         #get the result code and print it
         print (&quot;result code: &quot; + str(webUrl.getcode()))
         
         # read the data from the URL and print it
         data = webUrl.read()
         print (data)&lt;/pre&gt;

        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonIntetnetAccess&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonXMLParser&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Internet Access using Urllib.Request and urlopen()</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">2.Python XML Parser</title><link href="http://localhost:4000/blog/PyhonXMLParser" rel="alternate" type="text/html" title="2.Python XML Parser" /><published>2019-10-02T00:00:00+00:00</published><updated>2019-10-02T00:00:00+00:00</updated><id>http://localhost:4000/blog/PyhonXMLParser</id><content type="html" xml:base="http://localhost:4000/blog/PyhonXMLParser">&lt;section class=&quot;Ptutorial26&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python XML Parser Tutorial: Read xml file example(Minidom, ElementTree) &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h3&gt;What is XML?&lt;/h3&gt;
            &lt;p&gt;XML stands for eXtensible Markup Language. It was designed to store and transport small to medium amounts
                of data and is widely used for sharing structured information. &lt;/p&gt;
            &lt;p&gt;Python enables you to parse and modify XML document. In order to parse XML document you need to have the
                entire XML document in memory. In this tutorial, we will see how we can use XML minidom class in Python
                to load and parse XML file. &lt;/p&gt;
            &lt;p&gt;In this tutorial, we will learn- &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;How to Parse XML using minidom &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;How to Create XML Node &lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;How to Parse XML using ElementTree&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;br&gt;
            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;How to Parse XML using minidom&lt;/h2&gt;
            &lt;p&gt;We have created a sample XML file that we are going to parse. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; Inside file, we can see first name, last name, home and the area of expertise
                (SQL, Python, Testing and Business) &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/26/Python20.1.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Manipulating XML with Python&quot;
                        alt=&quot;Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/26/Python20.1.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; Once we have parsed the document, we will print out the &lt;strong&gt;&quot;node
                    name&quot;&lt;/strong&gt; of the root of the document and the &quot;&lt;strong&gt;firstchild tagname&quot;&lt;/strong&gt;. Tagname
                and nodename are the standard properties of the XML file. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/26/Python20.2.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Manipulating XML with Python&quot;
                        alt=&quot;Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/26/Python20.2.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Import the xml.dom.minidom module and declare file that has to be parsed (myxml.xml)&lt;/li&gt;
                &lt;li&gt;This file carries some basic information about employee like first name, last name, home, expertise,
                    etc.&lt;/li&gt;
                &lt;li&gt;We use the parse function on the XML minidom to load and parse the XML file&lt;/li&gt;
                &lt;li&gt;We have variable doc and doc gets the result of the parse function&lt;/li&gt;
                &lt;li&gt;We want to print the nodename and child tagname from the file, so we declare it in print function
                &lt;/li&gt;
                &lt;li&gt;Run the code- It prints out the nodename (#document) from the XML file and the first child tagname
                    (employee) from the XML file&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;/p&gt;
            &lt;p&gt;Nodename and child tagname are the standard names or properties of an XML dom. In case if you are not
                familiar with these type of naming conventions.&lt;/p&gt;

            &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; We can also call the list of XML tags from the XML document and printed out.
                Here we printed out the set of skills like SQL, Python,&lt;a href=&quot;/software-testing.html&quot;
                    onclick=&quot;ga('send', 'event', 'internal_linking', 'Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples', 'Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples');&quot;&gt;
                    Testing &lt;/a&gt;and Business. &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/26/Python20.3.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Manipulating XML with Python&quot;
                        alt=&quot;Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/26/Python20.3.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Declare the variable expertise, from which we going to extract all the expertise name employee is
                    having&lt;/li&gt;
                &lt;li&gt;Use the dom standard function called &quot;getElementsByTagName&quot;&lt;/li&gt;
                &lt;li&gt;This will get all the elements named skill &lt;/li&gt;
                &lt;li&gt;Declare loop over each one of the skill tags &lt;/li&gt;
                &lt;li&gt;Run the code- It will give list of four skills &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;How to Create XML Node&lt;/h2&gt;
            &lt;p&gt;We can create a new attribute by using &quot;createElement&quot; function and then append this new attribute or tag
                to the existing XML tags. We added a new tag &quot;BigData&quot; in our XML file. &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;You have to code to add the new attribute (BigData) to the existing XML tag&lt;/li&gt;
                &lt;li&gt;Then you have to print out the XML tag with new attributes appended with existing XML tag&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/26/Python20.4.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img title=&quot;Manipulating XML with Python&quot;
                        alt=&quot;Python XML Parser Tutorial: Create &amp;amp; Read XML with Examples&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/26/Python20.4.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;To add a new XML and add it to the document, we use code &quot;doc.create elements&quot;&lt;/li&gt;
                &lt;li&gt;This code will create a new skill tag for our new attribute &quot;Big-data&quot;&lt;/li&gt;
                &lt;li&gt;Add this skill tag into the document first child (employee)&lt;/li&gt;
                &lt;li&gt;Run the code- the new tag &quot;big data&quot; will appear with the other list of expertise&lt;/li&gt;
            &lt;/ul&gt;
            &lt;h3&gt;XML Parser Example&lt;/h3&gt;
            &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import xml.dom.minidom
         
         def main():
         # use the parse() function to load and parse an XML file
            doc = xml.dom.minidom.parse(&quot;Myxml.xml&quot;);
           
         # print out the document node and the name of the first child tag
            print doc.nodeName
            print doc.firstChild.tagName
           
         # get a list of XML tags from the document and print each one
            expertise = doc.getElementsByTagName(&quot;expertise&quot;)
            print &quot;%d expertise:&quot; % expertise.length
            for skill in expertise:
              print skill.getAttribute(&quot;name&quot;)
             
         # create a new XML tag and add it into the document
            newexpertise = doc.createElement(&quot;expertise&quot;)
            newexpertise.setAttribute(&quot;name&quot;, &quot;BigData&quot;)
            doc.firstChild.appendChild(newexpertise)
            print &quot; &quot;
         
            expertise = doc.getElementsByTagName(&quot;expertise&quot;)
            print &quot;%d expertise:&quot; % expertise.length
            for skill in expertise:
              print skill.getAttribute(&quot;name&quot;)
             
         if name == &quot;__main__&quot;:
           main();&lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import xml.dom.minidom
         
         def main():
             # use the parse() function to load and parse an XML file
             doc = xml.dom.minidom.parse(&quot;Myxml.xml&quot;);
         
             # print out the document node and the name of the first child tag
             print (doc.nodeName)
             print (doc.firstChild.tagName)
             # get a list of XML tags from the document and print each one
             expertise = doc.getElementsByTagName(&quot;expertise&quot;)
             print (&quot;%d expertise:&quot; % expertise.length)
             for skill in expertise:
                 print (skill.getAttribute(&quot;name&quot;))
         
             # create a new XML tag and add it into the document
             newexpertise = doc.createElement(&quot;expertise&quot;)
             newexpertise.setAttribute(&quot;name&quot;, &quot;BigData&quot;)
             doc.firstChild.appendChild(newexpertise)
             print (&quot; &quot;)
         
             expertise = doc.getElementsByTagName(&quot;expertise&quot;)
             print (&quot;%d expertise:&quot; % expertise.length)
             for skill in expertise:
                 print (skill.getAttribute(&quot;name&quot;))
         
         if __name__ == &quot;__main__&quot;:
             main();&lt;/pre&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;How to Parse XML using ElementTree&lt;/h2&gt;
            &lt;p&gt;ElementTree is an API for manipulating XML. ElementTree is the easy way to process XML files. &lt;/p&gt;

            &lt;p&gt;We are using the following XML document as the sample data: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
            &amp;lt;data&amp;gt;
            &amp;lt;items&amp;gt;
               &amp;lt;item name=&quot;expertise1&quot;&amp;gt;SQL&amp;lt;/item&amp;gt;
               &amp;lt;item name=&quot;expertise2&quot;&amp;gt;Python&amp;lt;/item&amp;gt;
            &amp;lt;/items&amp;gt;
         &amp;lt;/data&amp;gt;
         &lt;/pre&gt;
            &lt;p&gt;&lt;b&gt;Reading XML using ElementTree:&lt;/b&gt; &lt;/p&gt;
            &lt;p&gt;we must first import the xml.etree.ElementTree module. &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;import xml.etree.ElementTree as ET
         &lt;/pre&gt;
            &lt;p&gt;Now let's fetch the root element: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;root = tree.getroot()
         &lt;/pre&gt;
            &lt;p&gt;Following is the complete code for reading above xml data &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import xml.etree.ElementTree as ET
         tree = ET.parse('items.xml')
         root = tree.getroot()
         
         # all items data
         print('Expertise Data:')
         
         for elem in root:
            for subelem in elem:
               print(subelem.text)
         &lt;/pre&gt;
            &lt;b&gt;output:&lt;/b&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         Expertise Data:
         SQL
         Python
         &lt;/pre&gt;
            &lt;h3&gt;Summary:&lt;/h3&gt;
            &lt;p&gt;Python enables you to parse the entire XML document at one go and not just one line at a time. In order
                to parse XML document you need to have the entire document in memory.&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;div&gt;To parse XML document&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Import xml.dom.minidom&lt;/li&gt;
                        &lt;li&gt;Use the function &quot;parse&quot; to parse the document ( doc=xml.dom.minidom.parse (file name);&lt;/li&gt;
                        &lt;li&gt;Call the list of XML tags from the XML document using code (=doc.getElementsByTagName( &quot;name
                            of xml tags&quot;)&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul&gt;
                &lt;li&gt;
                    &lt;div&gt;To create and add new attribute in XML document&lt;/div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;Use function &quot;createElement&quot;&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/li&gt;
            &lt;/ul&gt;

        &lt;/div&gt;

    &lt;/div&gt;

&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonIntenetAccess&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonLambda&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python XML Parser Tutorial: Read xml file example(Minidom, ElementTree)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">3.Python Lambda</title><link href="http://localhost:4000/blog/PyhonLambda" rel="alternate" type="text/html" title="3.Python Lambda" /><published>2019-10-02T00:00:00+00:00</published><updated>2019-10-02T00:00:00+00:00</updated><id>http://localhost:4000/blog/PyhonLambda</id><content type="html" xml:base="http://localhost:4000/blog/PyhonLambda">&lt;section class=&quot;Ptutorial27&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Lambda Functions with EXAMPLES &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;h2&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;What is Lambda?&lt;/h2&gt;
            &lt;p&gt;Lambdas, also known as anonymous functions, are small, restricted functions which do not need a name
                (i.e., an identifier). Lambda functions were first introduced to the field of mathematics by Alonzo
                Church in the 1930s. &lt;/p&gt;
            &lt;p&gt;Today, many modern programming languages like Java, Python, C#, and C++ support lambda functions to add
                functionality to the languages. &lt;/p&gt;
            &lt;p&gt;In this Lambda tutorial, you will learn: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;#1&quot;&gt;What is Lambda?&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#2&quot;&gt;Lambdas in Python&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#3&quot;&gt;Syntax and Examples&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#4&quot;&gt;Using lambdas with Python built-ins&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#5&quot;&gt;lambdas in filter()&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#6&quot;&gt;lambdas in map()&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#7&quot;&gt;lambdas in reduce()&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#8&quot;&gt;Why (and why not) use lambda functions?&lt;/a&gt; &lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;#9&quot;&gt;Lambdas vs. Regular functions&lt;/a&gt; &lt;/li&gt;
            &lt;/ul&gt;
            &lt;h2&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;Lambdas in Python&lt;/h2&gt;
            &lt;p&gt;In Python, lambda expressions (or lambda forms) are utilized to construct anonymous functions. To do so,
                you will use the &lt;strong&gt;lambda &lt;/strong&gt;keyword (just as you use &lt;strong&gt;def &lt;/strong&gt;to define normal
                functions). &lt;/p&gt;
            &lt;p&gt;Every anonymous function you define in Python will have 3 essential parts: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;The lambda keyword.&lt;/li&gt;
                &lt;li&gt;The parameters (or bound variables), and&lt;/li&gt;
                &lt;li&gt;The function body.&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;A lambda function can have any number of parameters, but the function body can only contain
                &lt;strong&gt;one&lt;/strong&gt; expression. &lt;/p&gt;
            &lt;p&gt;Moreover, a lambda is written in a single line of code and can also be invoked immediately. You will see
                all this in action in the upcoming examples. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;Syntax and Examples&lt;/h2&gt;
            &lt;p&gt;The formal syntax to write a lambda function is as given below: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;lambda p1, p2: expression &lt;/pre&gt;
            &lt;p&gt;Here, p1 and p2 are the parameters which are passed to the lambda function. You can add as many or few
                parameters as you need. &lt;/p&gt;
            &lt;p&gt;However, notice that we do not use brackets around the parameters as we do with regular functions. The
                last part (expression) is any valid python expression that operates on the parameters you provide to the
                function. &lt;/p&gt;
            &lt;h3&gt;Example 1&lt;/h3&gt;
            &lt;p&gt;Now that you know about lambdas let's try it with an example. So, open your IDLE and type in the
                following: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         adder = lambda x, y: x + y
         print (adder (1, 2))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here is the output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;3&lt;/pre&gt;
            &lt;h3&gt;Code Explanation &lt;/h3&gt;
            &lt;p&gt;Here, we define a variable that will hold the result returned by the lambda function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; The lambda keyword used to define an anonymous function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; x and y are the parameters that we pass to the lambda function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; This is the body of the function, which adds the 2 parameters we passed. Notice that
                it is a single expression. You cannot write multiple statements in the body of a lambda function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; We call the function and print the returned value. &lt;/p&gt;
            &lt;h3&gt;Example 2&lt;/h3&gt;
            &lt;p&gt;That was a basic example to understand the fundamentals and syntax of lambda. Let's now try to print out
                a lambda and see the result. Again, open your IDLE and type in the following: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #What a lambda returns
         string='some kind of a useless lambda'
         print(lambda string : print(string))
         &lt;/pre&gt;
            &lt;p&gt;Now save your file and hit F5 to run the program. This is the output you should get. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt;&amp;lt;function &amp;lt;lambda&amp;gt; at 0x00000185C3BF81E0&amp;gt;
         &lt;/pre&gt;
            &lt;p&gt;What's happening here? Let's look at the code to understand further. &lt;/p&gt;
            &lt;p&gt;Code Explanation &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Here, we define a string that you'll pass as a parameter to the lambda.&lt;/li&gt;
                &lt;li&gt;We declare a lambda that calls a print statement and prints the result.&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;But why doesn't the program print the string we pass? This is because the lambda itself returns a
                function object. In this example, the lambda is not being &lt;strong&gt;called&lt;/strong&gt; by the print function
                but simply &lt;strong&gt;returning&lt;/strong&gt; the function object and the memory location where it is stored.
                That's what gets printed at the console. &lt;/p&gt;
            &lt;h3&gt;Example 3&lt;/h3&gt;
            &lt;p&gt;However, if you write a program like this: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #What a lambda returns #2
         x=&quot;some kind of a useless lambda&quot;
         (lambda x : print(x))(x)
         &lt;/pre&gt;
            &lt;p&gt;And run it by hitting F5, you'll see an output like this. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;some kind of a useless lambda&lt;/pre&gt;
            &lt;p&gt;Now, the lambda is being called, and the string we pass gets printed at the console. But what is that
                weird syntax, and why is the lambda definition covered in brackets? Let's understand that now. &lt;/p&gt;
            &lt;p&gt;Code Explanation &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Here is the same string we defined in the previous example.&lt;/li&gt;
                &lt;li&gt;In this part, we are defining a lambda and calling it immediately by passing the string as an
                    argument. This is something called an IIFE, and you'll learn more about it in the upcoming sections
                    of this tutorial.&lt;/li&gt;
            &lt;/ol&gt;
            &lt;h3&gt;Example 4&lt;/h3&gt;
            &lt;p&gt;Let's look at a final example to understand how lambdas and regular functions are executed. So, open your
                IDLE and in a new file, type in the following: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         #A REGULAR FUNCTION
         def guru( funct, *args ):
         funct( *args )
         def printer_one( arg ):
         return print (arg)
         def printer_two( arg ):
         print(arg)
         #CALL A REGULAR FUNCTION 
         guru( printer_one, 'printer 1 REGULAR CALL' )
         guru( printer_two, 'printer 2 REGULAR CALL \n' )
         #CALL A REGULAR FUNCTION THRU A LAMBDA
         guru(lambda: printer_one('printer 1 LAMBDA CALL'))
         guru(lambda: printer_two('printer 2 LAMBDA CALL'))
         &lt;/pre&gt;
            &lt;p&gt;Now, save the file and hit F5 to run the program. If you didn't make any mistakes, the output should be
                something like this. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;printer 1 REGULAR CALL &lt;/p&gt;
            &lt;p&gt;printer 2 REGULAR CALL &lt;/p&gt;
            &lt;p&gt;printer 1 LAMBDA CALL &lt;/p&gt;
            &lt;p&gt;printer 2 LAMBDA CALL &lt;/p&gt;
            &lt;p&gt;Code Explanation &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;A function called guru that takes another function as the first parameter and any other arguments
                    following it.&lt;/li&gt;
                &lt;li&gt;printer_one is a simple function which prints the parameter passed to it and returns it. &lt;/li&gt;
                &lt;li&gt;printer_two is similar to printer_one but without the return statement.&lt;/li&gt;
                &lt;li&gt;In this part, we are calling the guru function and passing the printer functions and a string as
                    parameters.&lt;/li&gt;
                &lt;li&gt;This is the syntax to achieve the fourth step (i.e., calling the guru function) but using lambdas.
                &lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;In the next section, you will learn how to use lambda functions with &lt;strong&gt;map(),&lt;/strong&gt;
                &lt;strong&gt;reduce(),&lt;/strong&gt; and &lt;strong&gt;filter()&lt;/strong&gt; in Python. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;Using lambdas with Python built-ins&lt;/h2&gt;
            &lt;p&gt;Lambda functions provide an elegant and powerful way to perform operations using built-in methods in
                Python. It is possible because lambdas can be invoked immediately and passed as an argument to these
                functions. &lt;/p&gt;
            &lt;h3&gt;IIFE in Python Lambda&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;IIFE&lt;/strong&gt; stands for &lt;strong&gt;immediately invoked function execution. &lt;/strong&gt;It means that a
                lambda function is callable as soon as it is defined. Let's understand this with an example; fire up
                your IDLE and type in the following:&lt;/p&gt;

            &lt;pre class=&quot;code-toolbar&quot;&gt; (lambda x: x + x)(2) &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here is the output and code explanation:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;This ability of lambdas to be invoked immediately allows you to use them inside functions like map() and
                reduce(). It is useful because you may not want to use these functions again. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;lambdas in filter()&lt;/h2&gt;
            &lt;p&gt;The filter function is used to select some particular elements from a sequence of elements. The sequence
                can be any iterator like lists, sets, tuples, etc. &lt;/p&gt;
            &lt;p&gt;The elements which will be selected is based on some pre-defined constraint. It takes 2 parameters: &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;A function that defines the filtering constraint&lt;/li&gt;
                &lt;li&gt;A sequence (any iterator like lists, tuples, etc.)&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;For example, &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         sequences = [10,2,8,7,5,4,3,11,0, 1]
         filtered_result = filter (lambda x: x &amp;gt; 4, sequences) 
         print(list(filtered_result))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here's the output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;[10, 8, 7, 5, 11]&lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Code Explanation:&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; In the first statement, we define a list called sequences which contains some
                numbers. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Here, we declare a variable called filtered_result, which will store the filtered
                values returned by the filter() function. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; A lambda function which runs on each element of the list and returns true if it is
                greater than 4. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt;Print the result returned by the filter function. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;lambdas in map()&lt;/h2&gt;
            &lt;p&gt;the map function is used to apply a particular operation to every element in a sequence. Like filter(),
                it also takes 2 parameters: &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;A function that defines the op to perform on the elements&lt;/li&gt;
                &lt;li&gt;One or more sequences&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;For example, here is a program that prints the squares of numbers in a given list: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;sequences = [10,2,8,7,5,4,3,11,0, 1]
         filtered_result = map (lambda x: x*x, sequences) 
         print(list(filtered_result))
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt; [100, 4, 64, 49, 25, 16, 121, 0, 1]&lt;/pre&gt;
            &lt;p&gt;[KR1] &lt;/p&gt;
            &lt;p&gt;Code Explanation: &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Here, we define a list called sequences which contains some numbers. &lt;/li&gt;
                &lt;li&gt;We declare a variable called filtered_result which will store the mapped values &lt;/li&gt;
                &lt;li&gt;A lambda function which runs on each element of the list and returns the square of that number.
                &lt;/li&gt;
                &lt;li&gt;Print the result returned by the map function. &lt;/li&gt;
            &lt;/ol&gt;
            &lt;h2&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;lambdas in reduce[vV2][J3]()&lt;/h2&gt;
            &lt;p&gt;The reduce function, like map(), is used to apply an operation to every element in a sequence. However,
                it differs from the map in its working. These are the steps followed by the reduce() function to compute
                an output: &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1) &lt;/strong&gt;Perform the defined operation on the first 2 elements of the sequence. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 2) &lt;/strong&gt;Save this result&lt;/p&gt;

            &lt;p&gt;&lt;strong&gt;Step 3) &lt;/strong&gt;Perform the operation with the saved result and the next element in the
                sequence. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 4) &lt;/strong&gt;Repeat until no more elements are left. &lt;/p&gt;
            &lt;p&gt;It also takes two parameters: &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;A function that defines the operation to be performed&lt;/li&gt;
                &lt;li&gt;A sequence (any iterator like lists, tuples, etc.)&lt;/li&gt;
            &lt;/ol&gt;
            &lt;p&gt;For example, here is a program that returns the product of all elements in a list: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         from functools import reduce
         sequences = [1,2,3,4,5]
         product = reduce (lambda x, y: x*y, sequences)
         print(product)
         &lt;/pre&gt;
            &lt;p&gt;&lt;strong&gt;Here is the output:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;120&lt;/pre&gt;
            &lt;p&gt;Code Explanation: &lt;/p&gt;
            &lt;ol&gt;
                &lt;li&gt;Import reduce from the functools module &lt;/li&gt;
                &lt;li&gt;Here, we define a list called sequences which contains some numbers. &lt;/li&gt;
                &lt;li&gt;We declare a variable called product which will store the reduced value &lt;/li&gt;
                &lt;li&gt;A lambda function that runs on each element of the list. It will return the product of that number
                    as per the previous result. &lt;/li&gt;
                &lt;li&gt;Print the result returned by the reduce function. &lt;/li&gt;
            &lt;/ol&gt;
            &lt;h2&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;Why (and why not) use lambda functions?&lt;/h2&gt;
            &lt;p&gt;As you will see in the next section, lambdas are treated the same as regular functions at the interpreter
                level. In a way, you could say that lambdas provide compact syntax for writing functions which return a
                single expression. &lt;/p&gt;
            &lt;p&gt;However, you should know when it is a good idea to use lambdas and when to avoid them. In this section,
                you will learn some of the design principles used by python developers when writing lambdas. &lt;/p&gt;
            &lt;p&gt;One of the most common use cases for lambdas is in functional programming as Python supports a paradigm
                (or style) of programming known as functional programming. &lt;/p&gt;
            &lt;p&gt;It allows you to provide a function as a parameter to another function (for example, in map, filter,
                etc.). In such cases, using lambdas offer an elegant way to create a one-time function and pass it as
                the parameter. &lt;/p&gt;
            &lt;h3&gt;When should you not use Lambda?&lt;/h3&gt;
            &lt;p&gt;You should never write complicated lambda functions in a production environment. It will be very
                difficult for coders who maintain your code to decrypt it. If you find yourself making complex one-liner
                expressions, it would be a much superior practice to define a proper function. As a best practice, you
                need to remember that simple code is always better than complex code. &lt;/p&gt;
            &lt;h2&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;Lambdas vs. Regular functions&lt;/h2&gt;
            &lt;p&gt;As previously stated, lambdas are[vV4][J5] just functions which do not have an identifier bound to them.
                In simpler words, they are functions with no names (hence, anonymous). Here is a table to illustrate the
                difference between lambdas and regular functions in python. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Lambdas&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Regular Functions&lt;/strong&gt; &lt;/p&gt;
            &lt;p&gt;Syntax: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;lambda x : x + x &lt;/pre&gt;
            &lt;p&gt;Syntax: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;def (x) :
         return x + x 
         &lt;/pre&gt;
            &lt;p&gt;Lambda functions can only have one expression in their body. &lt;/p&gt;
            &lt;p&gt;Regular functions can have multiple expressions and statements in their body. &lt;/p&gt;
            &lt;p&gt;Lambdas do not have a name associated with them. That's why they are also known as anonymous functions.
            &lt;/p&gt;
            &lt;p&gt;Regular functions must have a name and signature. &lt;/p&gt;
            &lt;p&gt;Lambdas do not contain a return statement because the body is automatically returned. &lt;/p&gt;
            &lt;p&gt;Functions which need to return value should include a return statement. &lt;/p&gt;
            &lt;h3&gt;Explanation of the differences?&lt;/h3&gt;
            &lt;p&gt;The primary difference between a lambda and a regular function is that the lambda function evaluates only
                a single expression and yields a function object. Consequently, we can name the result of the lambda
                function and use it in our program as we did in the previous example. &lt;/p&gt;
            &lt;p&gt;A regular function for the above example would look like this: &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         def adder (x, y):
         return x + y 
         print (adder (1, 2))
         &lt;/pre&gt;
            &lt;p&gt;Here, we have to define a &lt;strong&gt;name&lt;/strong&gt; for the function which &lt;strong&gt;returns &lt;/strong&gt;the
                result when we &lt;strong&gt;call&lt;/strong&gt; it. A lambda function doesn't contain a return statement because it
                will have only a single expression which is always returned by default. You don't even have to assign a
                lambda either as it can be immediately invoked (see the next section). As you will see in the following
                example, lambdas become particularly powerful when we use them with Python's built-in functions. &lt;/p&gt;
            &lt;p&gt;However, you may still be wondering how lambdas are any different from a function that returns a single
                expression (like the one above). At the interpreter level, there is not much difference. It may sound
                surprising, but any lambda function that you define in Python is treated as a normal function by the
                interpreter. &lt;/p&gt;
            &lt;p&gt;As you can see in the diagram, the two definitions are handled in the same way by the python interpreter
                when converted to bytecode. Now, you cannot name a function &lt;strong&gt;lambda&lt;/strong&gt; because it is
                reserved by Python, but any other function name will yield the same bytecode[KR6]. &lt;/p&gt;
            &lt;h3&gt;Summary &lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;Lambdas, also known as anonymous functions, are small, restricted functions which do not need a name
                    (i.e., an identifier).&lt;/li&gt;
                &lt;li&gt;Every lambda function in Python has 3 essential parts:&lt;/li&gt;
                &lt;li&gt;The lambda keyword.&lt;/li&gt;
                &lt;li&gt;The parameters (or bound variables), and&lt;/li&gt;
                &lt;li&gt;The function body.&lt;/li&gt;
                &lt;li&gt;The syntax for writing a lambda is: lambda parameter: expression&lt;/li&gt;
                &lt;li&gt;Lambdas can have any number of parameters, but they are not enclosed in braces&lt;/li&gt;
                &lt;li&gt;A lambda can have only 1 expression in its function body, which is returned by default.&lt;/li&gt;
                &lt;li&gt;At the bytecode level, there is not much difference between how lambdas and regular functions are
                    handled by the interpreter.&lt;/li&gt;
                &lt;li&gt;Lambdas support IIFE thru this syntax: (lambda parameter: expression)(argument) &lt;/li&gt;
                &lt;li&gt;Lambdas are commonly used with the following python built-ins:&lt;/li&gt;
                &lt;li&gt;Filter: filter (lambda parameter: expression, iterable-sequence) &lt;/li&gt;
                &lt;li&gt;Map: map (lambda parameter: expression, iterable-sequences) &lt;/li&gt;
                &lt;li&gt;Reduce: reduce (lambda parameter1, parameter2: expression, iterable-sequence) &lt;/li&gt;
                &lt;li&gt;Do not write complicated lambda functions in a production environment because it will be difficult
                    for code-maintainers.&lt;/li&gt;
            &lt;/ul&gt;
            

        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonXMLParser&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/Python&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Lambda Functions with EXAMPLES</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">24. Zip File in Python</title><link href="http://localhost:4000/blog/PythonZipFile" rel="alternate" type="text/html" title="24. Zip File in Python" /><published>2019-10-01T00:00:00+00:00</published><updated>2019-10-01T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonZipFile</id><content type="html" xml:base="http://localhost:4000/blog/PythonZipFile">&lt;section class=&quot;Ptutorial24&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python ZIP file with Example &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;
            &lt;p&gt;Python allows you to quickly create zip/tar archives. &lt;/p&gt;
            &lt;p&gt;Following command will zip entire directory &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;shutil.make_archive(output_filename, 'zip', dir_name)&lt;/pre&gt;
            &lt;p&gt;Following command gives you control on the files you want to archive &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;ZipFile.write(filename)&lt;/pre&gt;
            &lt;p&gt; Here are the steps to create Zip File in Python &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; To create an archive file from Python, make sure you have your import statement
                correct and in order. Here the import statement for the archive is
                &lt;code&gt;from shutil import make_archive&lt;/code&gt; &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                    href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.10.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                        alt=&quot;Python OS Module, Shell Script Commands&quot;
                        src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.10.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code Explanation&lt;/strong&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Import make_archive class from module shutil&lt;/li&gt;
                &lt;li&gt;Use the split function to split out the directory and the file name from the path to the location of
                    the text file (guru99)&lt;/li&gt;
                &lt;li&gt;Then we call the module &quot;shutil.make_archive(&quot;guru99 archive, &quot;zip&quot;, root_dir)&quot; to create archive
                    file, which will be in zip format&lt;/li&gt;
                &lt;li&gt;After then we pass in the root directory of things we want to be zipped up. So everything in the
                    directory will be zipped &lt;/li&gt;
                &lt;li&gt;When you run the code, you can see the archive zip file is created on the right side of the panel.
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt;&lt;/p&gt;
               &lt;p&gt; Once your archive file is made, you can right-click on the file and select the O.S, and it will show
                your archive files in it as shown below &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.11.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.11.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt; Now your archive.zip file will appear on your O.S (Windows Explorer) &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.12.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.12.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; When you double-click on the file, you will see the list all the files in
                    there. &lt;/p&gt;
                &lt;p style=&quot;text-align: center;&quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.13.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.13.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;

                &lt;p&gt;&lt;strong&gt;Step 4)&lt;/strong&gt; In Python we can have more control over archive since we can define which
                    specific file to include under archive. In our case, we will include two files under archive
                    &lt;strong&gt;&quot;guru99.txt&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;guru99.txt.bak&quot;.&lt;/strong&gt; &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.14.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.14.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;Code Explanation&lt;/strong&gt; &lt;/p&gt;
                &lt;ul&gt;
                    &lt;li&gt;Import Zipfile class from zip file Python module. This module gives full control over creating
                        zip files&lt;/li&gt;
                    &lt;li&gt;We create a new Zipfile with name ( &quot;testguru99.zip, &quot;w&quot;)&lt;/li&gt;
                    &lt;li&gt;Creating a new Zipfile class, requires to pass in permission because it's a file, so you need to
                        write information into the file as newzip&lt;/li&gt;
                    &lt;li&gt;We used variable &quot;newzip&quot; to refer to the zip file we created&lt;/li&gt;
                    &lt;li&gt;Using the write function on the &quot;newzip&quot; variable, we add the files &quot;guru99.txt&quot; and
                        &quot;guru99.txt.bak&quot; to the archive&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;When you execute the code you can see the file is created on the right side of the panel with name
                    &quot;guru99.zip&quot; &lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Here we don't give any command to &quot;close&quot; the file like &quot;newzip.close&quot; because
                    we use &quot;With&quot; scope lock, so when program falls outside of this scope the file will be cleaned up
                    and is closed automatically. &lt;/p&gt;
                &lt;p&gt;&lt;strong&gt;Step 5)&lt;/strong&gt; When you &lt;strong&gt;-&amp;gt; right click on file (testguru99.zip) and -&amp;gt; select
                        your O.S (Windows Explorer)&lt;/strong&gt;, it will show the archive files in the folder as shown
                    below. &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.15.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.15.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt;When you double click on file &quot;testguru99.zip&quot;, it will open another window, and this will show the
                    files included in it. &lt;/p&gt;
                &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a
                        href=&quot;http://localhost:4000/img/python/tutorial/24/Python18.16.png&quot;
                        class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                            title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                            alt=&quot;Python OS Module, Shell Script Commands&quot;
                            src=&quot;http://localhost:4000/img/python/tutorial/24/Python18.16.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
                &lt;p&gt;Here is the complete code &lt;/p&gt;
                &lt;p&gt;&lt;b&gt;Python 2 Example&lt;/b&gt; &lt;/p&gt;
                &lt;pre class=&quot;code-toolbar&quot;&gt;
         import os
         import shutil
         from zipfile import ZipFile
         from os import path
         from shutil import make_archive
         
         def main():
         # Check if file exists
             if path.exists(&quot;guru99.txt&quot;):
         # get the path to the file in the current directory
             src = path.realpath(&quot;guru99.txt&quot;);
         # rename the original file
             os.rename(&quot;career.guru99.txt&quot;,&quot;guru99.txt&quot;)
         # now put things into a ZIP archive
             root_dir,tail = path.split(src)
             shutil.make_archive(&quot;guru99 archive&quot;, &quot;zip&quot;, root_dir)
         # more fine-grained control over ZIP files
             with ZipFile(&quot;testguru99.zip&quot;,&quot;w&quot;) as newzip:
             newzip.write(&quot;guru99.txt&quot;)
                 newzip.write(&quot;guru99.txt.bak&quot;)
         if __name__== &quot;__main__&quot;:
               main()&lt;/pre&gt;
                &lt;p&gt;&lt;b&gt;Python 3 Example&lt;/b&gt; &lt;/p&gt;
                &lt;pre class=&quot;code-toolbar&quot;&gt;import os
         import shutil
         from zipfile import ZipFile
         from os import path
         from shutil import make_archive
         
             # Check if file exists
                if path.exists(&quot;guru99.txt&quot;):
             # get the path to the file in the current directory
                 src = path.realpath(&quot;guru99.txt&quot;);
             # rename the original file
                 os.rename(&quot;career.guru99.txt&quot;,&quot;guru99.txt&quot;)
             # now put things into a ZIP archive
                 root_dir,tail = path.split(src)
                 shutil.make_archive(&quot;guru99 archive&quot;,&quot;zip&quot;,root_dir)
             # more fine-grained control over ZIP files
                 with ZipFile(&quot;testguru99.zip&quot;, &quot;w&quot;) as newzip:
                     newzip.write(&quot;guru99.txt&quot;)
                     newzip.write(&quot;guru99.txt.bak&quot;)&lt;/pre&gt;
                &lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt; &lt;/p&gt;
                &lt;ul&gt;
                    &lt;li&gt;To zip entire directory use command &quot;shutil.make_archive(&quot;name&quot;,&quot;zip&quot;, root_dir)&lt;/li&gt;
                    &lt;li&gt;To select the files to zip use command &quot;ZipFile.write(filename)&quot;&lt;/li&gt;
                &lt;/ul&gt;

            &lt;/li&gt;
        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonRenameFile&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonZipFile&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python ZIP file with Example</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry><entry><title type="html">23. Rename File in Python</title><link href="http://localhost:4000/blog/PythonRenameFile" rel="alternate" type="text/html" title="23. Rename File in Python" /><published>2019-10-01T00:00:00+00:00</published><updated>2019-10-01T00:00:00+00:00</updated><id>http://localhost:4000/blog/PythonRenameFile</id><content type="html" xml:base="http://localhost:4000/blog/PythonRenameFile">&lt;section class=&quot;Ptutorial23&quot;&gt;
    &lt;div class=&quot;item-page&quot; itemscope=&quot;&quot; itemtype=&quot;https://schema.org/Article&quot;&gt;
        &lt;meta itemprop=&quot;inLanguage&quot; content=&quot;en-GB&quot;&gt;
        &lt;div class=&quot;page-header&quot;&gt;
            &lt;h2 itemprop=&quot;headline&quot;&gt; Python Rename File and Directory using os.rename() &lt;/h2&gt;
        &lt;/div&gt;

        &lt;div itemprop=&quot;articleBody&quot;&gt;

            &lt;p&gt;In Python, rename() method is used to rename a file or directory. It takes two arguments. Let's check the
                syntax. &lt;/p&gt;
            &lt;h3&gt;Syntax &lt;/h3&gt;
            &lt;p&gt;This is the syntax for os.rename() method &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;os.rename(src, dst)&lt;/pre&gt;
            &lt;h3&gt;Parameters&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;src:&lt;/strong&gt; Source is the name of the file or directory. It should must already exist. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;dst:&lt;/strong&gt; Destination is the new name of the file or directory you want to change. &lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
         import os  
         os.rename('guru99.txt','career.guru99.txt') &lt;/pre&gt;
            &lt;p&gt; Let's look at example in detail &lt;/p&gt;
            &lt;p&gt;You can rename the original file, we have changed the file name from &quot;Guru99.txt&quot; to &quot;Career.guru99.txt.&quot;
            &lt;/p&gt;
            &lt;p style=&quot;text-align: center; &quot;&gt;&lt;a href=&quot;http://localhost:4000/img/python/tutorial/23/Python18.9.png&quot;
                    class=&quot;jh-image-popup-colorbox cboxElement&quot;&gt;&lt;img
                        title=&quot;O.S Path Utilities &amp;amp; File System Shell Methods Python&quot;
                        alt=&quot;Python OS Module, Shell Script Commands&quot; src=&quot;http://localhost:4000/img/python/tutorial/23/Python18.9.png&quot;&gt;&lt;/a&gt; &lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;To rename &quot;guru99.txt&quot; file, we going to use &quot;rename function&quot; in the OS module &lt;/li&gt;
                &lt;li&gt;So when the code is executed, you can observe that a new file &quot;career.guru99.txt&quot; is created on the
                    right side of the panel, which we renamed for our original file. &lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Here is the complete code &lt;/p&gt;
            &lt;pre class=&quot;code-toolbar&quot;&gt;
        import os
         import shutil
         from os import path
         
         def main():
             # make a duplicate of an existing file
             if path.exists(&quot;guru99.txt&quot;):
             # get the path to the file in the current directory
                 src = path.realpath(&quot;guru99.txt&quot;);
                 
             # rename the original file
                 os.rename('guru99.txt','career.guru99.txt') 
                 
         if __name__ == &quot;__main__&quot;:
             main()
         &lt;/pre&gt;


        &lt;/div&gt;

    &lt;/div&gt;
&lt;/section&gt;
&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr&gt;
   
    &lt;div class=&quot;row&quot; &gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonCopy&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot; 
                &gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot; &gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/PythonZipFile&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;
                 &gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><category term="Installation" /><summary type="html">Python Rename File and Directory using os.rename()</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/Python_logo.png" /></entry></feed>