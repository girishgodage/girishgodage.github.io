<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-17T07:24:29+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Girish Godage</title><subtitle>I am a passionate Leader, who has a good command in technology &amp; Mangement. Also, I am a creative designer and an innovatie techie.</subtitle><author><name>Girish Godage</name></author><entry><title type="html">Programming Basics - Introduction To Object Oriented Programming</title><link href="http://localhost:4000/blog/SwProgrammingLesson2" rel="alternate" type="text/html" title="Programming Basics - Introduction To Object Oriented Programming" /><published>2019-10-15T20:30:00+00:00</published><updated>2019-10-15T20:30:00+00:00</updated><id>http://localhost:4000/blog/SwProgrammingLesson2</id><content type="html" xml:base="http://localhost:4000/blog/SwProgrammingLesson2">&lt;p&gt;Object oriented programming (OOP) is all about thinking in terms of objects. Let’s dig deeper.&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What Is Structured Programming?&lt;/li&gt;
  &lt;li&gt;What Is Object Oriented Programming?&lt;/li&gt;
  &lt;li&gt;How is Object Oriented Programming different from Structured Programming?&lt;/li&gt;
  &lt;li&gt;How can you think in terms of objects - state and responsibility?&lt;/li&gt;
  &lt;li&gt;We look at a few examples of designing object oriented programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we discuss OOP, let us first look at structured programming.&lt;/p&gt;

&lt;h3 id=&quot;what-is-structured-programming&quot;&gt;What Is Structured Programming?&lt;/h3&gt;

&lt;p&gt;If you have ever done any programming in languages such as C and Pascal, then you have done what is called &lt;strong&gt;procedural&lt;/strong&gt;, or &lt;strong&gt;structured programming&lt;/strong&gt;. Such programming involves thinking in terms of procedures (or methods/functions). If you have a problem to solve, you split the logic of the solution into a sequence of multiple procedures, as the steps. You would start thinking about what functions need to be written.&lt;/p&gt;

&lt;h4 id=&quot;example-flight-problem&quot;&gt;Example: Flight Problem&lt;/h4&gt;

&lt;p&gt;Suppose the problem at hand is flying from one city to another. The different steps involved in that would take the form of a sequence of procedures as shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	// Global Data

	fly() {
		travelToairport();
		findCheckInCounter();
		checkIn();
		passSecurityCheck();
		waitForBoardingCall();
		boardTheFlight();
		wishTheAirHostess();
		takeOff();
		haveFun();
		landing();
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are looking to combine the functions that we write, to solve the stated problem.&lt;/p&gt;

&lt;h3 id=&quot;what-is-object-oriented-programming&quot;&gt;What Is Object Oriented Programming?&lt;/h3&gt;

&lt;p&gt;Object Oriented Programming (OOP) brings a new thought process to the table. OOP focuses instead on the actors in the system called objects. It focuses on:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The data that these objects contain&lt;/li&gt;
  &lt;li&gt;The actions that can be performed on them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this sounds complex to you, then you are not alone!&lt;/p&gt;

&lt;p&gt;Every new programmer who is introduced to OOP feels pretty much the same way.&lt;/p&gt;

&lt;p&gt;How would OOP approach the problem of taking a flight from one city to another?&lt;/p&gt;

&lt;h3 id=&quot;example-flight-problem-revisited&quot;&gt;Example: Flight Problem Revisited&lt;/h3&gt;

&lt;p&gt;Lets take a step by step approach:&lt;/p&gt;

&lt;h4 id=&quot;step-1--identify-objects&quot;&gt;Step-1 : Identify Objects&lt;/h4&gt;

&lt;p&gt;We first think about the different objects involved in the solution.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Aeroplane&lt;/li&gt;
  &lt;li&gt;Airhostess&lt;/li&gt;
  &lt;li&gt;Passenger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to these, we could have more objects such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cab&lt;/li&gt;
  &lt;li&gt;Airport&lt;/li&gt;
  &lt;li&gt;Co-passengers&lt;/li&gt;
  &lt;li&gt;Pilot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and many more.&lt;/p&gt;

&lt;h4 id=&quot;step-2&quot;&gt;Step-2&lt;/h4&gt;

&lt;p&gt;Once you have identified the objects of the system, you next determine the data an object would contains and actions that can be performed on it.&lt;/p&gt;

&lt;p&gt;Aeroplane&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data : airline, make, type, position&lt;/li&gt;
  &lt;li&gt;Actions : takeOff(), land(), cruise()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Airhostess&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data : name, address&lt;/li&gt;
  &lt;li&gt;Actions : wish(), serve()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Passenger&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data : name, address&lt;/li&gt;
  &lt;li&gt;Actions : takeCab(), checkIn(), walk(), smile()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there could be a lot more data and actions in each of the objects that we have elaborated on, above.&lt;/p&gt;

&lt;p&gt;In summary, structured programming is only concerned about identifying procedures, and combining them to form a solution. In contrast, OOP focuses on the objects involves, and deals with their individual data and actions.&lt;/p&gt;

&lt;h3 id=&quot;understanding-oop-terminology&quot;&gt;Understanding OOP Terminology&lt;/h3&gt;

&lt;p&gt;Let’s now deal with a few standard terms that are used, when dealing with OOP.&lt;/p&gt;

&lt;h4 id=&quot;class&quot;&gt;Class&lt;/h4&gt;

&lt;p&gt;A class is nothing but a template used to create objects within a program. A class allows you to define the data that can be stored inside the object, as well as what actions can be performed on them. What you see below is the definition of a simple class, named Planet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	class Planet {
		name, location, distanceFromSun //state
		revolve(), rotate() // behavior
	}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;object&quot;&gt;Object&lt;/h4&gt;

&lt;p&gt;An object is defined as an instance of a class. For example, earth and venus are instances of the Planet class. Here is how you go about creating Planet instances:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	Planet earth = new Planet();
	Planet venus = new Planet();

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can have other instances as well. If Planet defined the attributes of a planet, then earth and venus are live instances of planets.&lt;/p&gt;

&lt;h4 id=&quot;state&quot;&gt;State&lt;/h4&gt;

&lt;p&gt;The data that an object might contain is also referred to as its &lt;strong&gt;state&lt;/strong&gt;. These are represented by the member variables inside the class.&lt;/p&gt;

&lt;p&gt;The state of an object can change over a period of time.&lt;/p&gt;

&lt;p&gt;The position of an Aeroplane at this point of time, would be different from what it will be after say, an hour’s time. Similarly, the distance of the earth from the Sun changes with the passage of time.&lt;/p&gt;

&lt;h4 id=&quot;behavior&quot;&gt;Behavior&lt;/h4&gt;

&lt;p&gt;The actions that can be performed on an object are referred to as its &lt;strong&gt;behavior&lt;/strong&gt;. This translates to the methods that can be defined inside a class.&lt;/p&gt;

&lt;h3 id=&quot;lets-try-some-exercises&quot;&gt;Let’s Try Some Exercises&lt;/h3&gt;

&lt;p&gt;Let’s now apply what we have learned so far, by applying OOPs to a couple of exercises.&lt;/p&gt;

&lt;h4 id=&quot;exercise-1--online-shopping-system&quot;&gt;Exercise 1 : Online Shopping System&lt;/h4&gt;

&lt;p&gt;Think about the different things that are involved in creating an online shopping system. Make sure to focus on their data, and enumerate what actions can be performed on them.&lt;/p&gt;

&lt;h4 id=&quot;exercise-2--person&quot;&gt;Exercise 2 : Person&lt;/h4&gt;

&lt;p&gt;Think about the different things that are related to a Person. Make sure to focus on the data that such a class stores, and enumerate what actions can be performed on a Person.&lt;/p&gt;

&lt;h3 id=&quot;solutions-to-exercises&quot;&gt;Solutions To Exercises&lt;/h3&gt;

&lt;h4 id=&quot;exercise-1--online-shopping-system-1&quot;&gt;Exercise 1 : Online Shopping System&lt;/h4&gt;
&lt;p&gt;Customer&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data : name, address&lt;/li&gt;
  &lt;li&gt;Actions : login(), logout(), selectProduct(product)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shopping Cart&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data : items&lt;/li&gt;
  &lt;li&gt;Actions : addItem(item), removeItem(item)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Product&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data : name, price, quantityAvailable&lt;/li&gt;
  &lt;li&gt;Actions : order(), changePrice()&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;exercise-2--person-1&quot;&gt;Exercise 2 : Person&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Data - name, address, hobbies, work&lt;/li&gt;
  &lt;li&gt;Actions - walk(), run(), sleep(), eat(), drink()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea behind these exercises was to get you thinking about applying concepts in OOP.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this article, we had a introductory look at object oriented programming, or OOP. We first saw the approach taken by structured programming, that focuses on procedures. OOP brings a different approach by focusing on objects involved, and their data and actions. We introduced some OOP terminology, such as class, object, state and behavior. Finally, we explored a couple of exercises to try and apply the simple concepts of OOP that we saw here.&lt;/p&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwProgrammingLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwProgrammingLesson3&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Object oriented programming (OOP) is all about thinking in terms of objects. Let’s dig deeper. You will learn What Is Structured Programming? What Is Object Oriented Programming? How is Object Oriented Programming different from Structured Programming? How can you think in terms of objects - state and responsibility? We look at a few examples of designing object oriented programs.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_program.png" /></entry><entry><title type="html">Introduction To Aspect Oriented Programming and Cross Cutting Concerns</title><link href="http://localhost:4000/blog/SwProgrammingLesson3" rel="alternate" type="text/html" title="Introduction To Aspect Oriented Programming and Cross Cutting Concerns" /><published>2019-10-15T20:30:00+00:00</published><updated>2019-10-15T20:30:00+00:00</updated><id>http://localhost:4000/blog/SwProgrammingLesson3</id><content type="html" xml:base="http://localhost:4000/blog/SwProgrammingLesson3">&lt;p&gt;Software applications are built in layers. There is common functionality that is sometimes needed across layers - logging, performance tracing etc.&lt;/p&gt;

&lt;p&gt;How do you implement these common features?&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will learn?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What Is Aspect Oriented Programming?&lt;/li&gt;
  &lt;li&gt;What are the important concepts behind Aspect-Oriented Programming?&lt;/li&gt;
  &lt;li&gt;What are the situations where AOP is used?&lt;/li&gt;
  &lt;li&gt;Why is AOP needed?&lt;/li&gt;
  &lt;li&gt;What are the best Java frameworks to implement AOP?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-aspect-oriented-programming&quot;&gt;What Is Aspect Oriented Programming?&lt;/h3&gt;

&lt;p&gt;In order to understand what &lt;strong&gt;Aspect Oriented Programming (AOP)&lt;/strong&gt; is all about, let’s first talk about &lt;strong&gt;layered architecture&lt;/strong&gt;, and  something called &lt;strong&gt;cross-cutting concerns&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;what-is-a-layered-architecture&quot;&gt;What is a Layered Architecture&lt;/h4&gt;

&lt;p&gt;Whenever we design and develop a large software application, we make use of  a &lt;strong&gt;layered architecture&lt;/strong&gt;. For instance, in a web application, it is quite common to see an architecture similar to the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-02-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we see that the application is organized into a Web layer, a Business layer, and a Data layer.&lt;/p&gt;

&lt;h4 id=&quot;understanding-cross-cutting-concerns&quot;&gt;Understanding Cross Cutting Concerns&lt;/h4&gt;

&lt;p&gt;In a layered architecture, there are specific parts that are common to all these different layers. Such parts include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Logging&lt;/li&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Performance&lt;/li&gt;
  &lt;li&gt;Auditing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these features are applicable across layers, hence it makes sense to implement them in a common way.&lt;/p&gt;

&lt;p&gt;Let’s say you want to implement logic to find out how much time each method takes to execute, in each of the three layers (Web, Business and Data) above.&lt;/p&gt;

&lt;p&gt;That’s where AOP steps in.&lt;/p&gt;

&lt;h4 id=&quot;an-example-of-aop&quot;&gt;An Example Of AOP&lt;/h4&gt;

&lt;p&gt;Let’s now look at a simple example where we apply AOP.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HiByeService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayBye&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bye&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returnSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi Bye&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;HiByeService&lt;/code&gt; has a few methods such as &lt;code class=&quot;highlighter-rouge&quot;&gt;sayHi()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sayBye()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;returnSomething()&lt;/code&gt; defined within it.&lt;/p&gt;

&lt;p&gt;We want to do a few computations by taking up each of these methods, by turn at the following stages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Do something before the method begins execution&lt;/li&gt;
  &lt;li&gt;Do something after the method completes execution&lt;/li&gt;
  &lt;li&gt;Track how much time the method takes during its execution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we take &lt;code class=&quot;highlighter-rouge&quot;&gt;HiByeService&lt;/code&gt; as a specific example to work with. The same could be done across several classes that make up such an application.&lt;/p&gt;

&lt;p&gt;Let’s take each of these computations and look at them in some detail.&lt;/p&gt;

&lt;h4 id=&quot;doing-stuff-before-execution&quot;&gt;Doing Stuff Before Execution&lt;/h4&gt;

&lt;p&gt;Have a look at the following AOP code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyAspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* HiByeService.*(..))&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Before &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We first define an &lt;strong&gt;aspect&lt;/strong&gt; with the annotation &lt;code class=&quot;highlighter-rouge&quot;&gt;@Aspect&lt;/code&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;MyAspect&lt;/code&gt;. Within it is another annotation, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Before&lt;/code&gt; that describes the method &lt;code class=&quot;highlighter-rouge&quot;&gt;before()&lt;/code&gt;. The idea of this aspect is that whatever logic lies in the &lt;code class=&quot;highlighter-rouge&quot;&gt;before()&lt;/code&gt; body, is executed before any method of &lt;code class=&quot;highlighter-rouge&quot;&gt;HiByeService&lt;/code&gt; is run. Note that in the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Before&lt;/code&gt; annotation, a package name could also be mentioned instead of a class name. This aspect would then be executed before any method in the entire package.&lt;/p&gt;

&lt;h4 id=&quot;doing-stuff-after-execution&quot;&gt;Doing Stuff After Execution&lt;/h4&gt;

&lt;p&gt;Similar to this, it is also possible to define an aspect to execute after every method within &lt;code class=&quot;highlighter-rouge&quot;&gt;HiByeService&lt;/code&gt; is run:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@AfterReturning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;execution(* HiByeService.*(..))&quot;&lt;/span&gt;
	                    &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;After &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; result is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this, you need to define a method with an &lt;code class=&quot;highlighter-rouge&quot;&gt;@AfterReturning&lt;/code&gt; annotation, defined above for the &lt;code class=&quot;highlighter-rouge&quot;&gt;after()&lt;/code&gt; method. This method here takes an extra argument to store the result of execution of the method of &lt;code class=&quot;highlighter-rouge&quot;&gt;HiByeService&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;doing-stuff-around-execution&quot;&gt;Doing Stuff Around Execution&lt;/h4&gt;

&lt;p&gt;An additional thing you can do is define an aspect around the execution of a method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;execution(* HiByeService.*(..))&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
	                                      &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	  &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Execution Time - &quot;&lt;/span&gt; 
	                  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Over here, we have made use of an annotation called &lt;code class=&quot;highlighter-rouge&quot;&gt;@Around&lt;/code&gt; to decorate the &lt;code class=&quot;highlighter-rouge&quot;&gt;around()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In this method body, we intercept the call to the method in &lt;code class=&quot;highlighter-rouge&quot;&gt;HiByeService&lt;/code&gt; in the following manner:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We make note of the start time of execution&lt;/li&gt;
  &lt;li&gt;Allow the method to run its course&lt;/li&gt;
  &lt;li&gt;Finally, we make note of the end time of execution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We then output the computed execution time of that method.&lt;/p&gt;

&lt;h4 id=&quot;how-to-make-use-of-aop&quot;&gt;How To Make Use Of AOP&lt;/h4&gt;

&lt;p&gt;At a high level, AOP allows you to intercept calls to methods, and perform logic around these calls. We have used annotations to decorate our computations within the aspect.&lt;/p&gt;

&lt;p&gt;In our examples above, we have restricted ourselves to a single class. However, we could easily extend it to more classes or packages by &lt;em&gt;varying&lt;/em&gt; the &lt;strong&gt;regular expression&lt;/strong&gt; we use in the annotations.&lt;/p&gt;

&lt;p&gt;For example, we could choose to intercept classes pertaining to the web layer, or classes across all three layers of the example web application.&lt;/p&gt;

&lt;h4 id=&quot;terms-we-use-in-aop&quot;&gt;Terms We Use In AOP&lt;/h4&gt;

&lt;p&gt;Let’s now look at some important terms we use when talking about AOP.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Point Cut&lt;/strong&gt; : It refers to the regular expression that defines what methods need to be intercepted by this aspect. It essentially says where the logic within an aspect method is applicable.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Advice&lt;/strong&gt; : This is nothing but the logic within the aspect method. It describes what we do when the Point Cut expression is matched.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aspect&lt;/strong&gt;: The combination of the Point Cut and the Advice&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Join Point&lt;/strong&gt;: This refers to the situation where a method’s execution has been intercepted, and the aspect is in execution&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Weaving&lt;/strong&gt;: The entire process of taking a method, intercepting its execution and applying an aspect to its execution. This is the functionality provided by the AOP framework. Examples of AOP frameworks are &lt;strong&gt;SpringAOP&lt;/strong&gt; and &lt;strong&gt;AspectJ&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;aop-in-summary&quot;&gt;AOP In Summary&lt;/h4&gt;

&lt;p&gt;In this article, we looked at Aspect Oriented Programming (AOP). We talked about cross-cutting concerns, and described the situations where AOP can be used. In particular, we saw examples of how we can define a point cut, and define the logic of an aspect. We focused on how we can specify aspects to run before, after or around the execution of a method. We then examined the important terms that describe AOP concepts.&lt;/p&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwProgrammingLesson2&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwProgrammingLesson3&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Software applications are built in layers. There is common functionality that is sometimes needed across layers - logging, performance tracing etc.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_program.png" /></entry><entry><title type="html">Programming Basics - Five Things To Think About While Programming</title><link href="http://localhost:4000/blog/SwProgrammingLesson1" rel="alternate" type="text/html" title="Programming Basics - Five Things To Think About While Programming" /><published>2019-10-15T20:17:00+00:00</published><updated>2019-10-15T20:17:00+00:00</updated><id>http://localhost:4000/blog/SwProgrammingLesson1</id><content type="html" xml:base="http://localhost:4000/blog/SwProgrammingLesson1">&lt;p&gt;You would obviously want to write code that meets your core requirements and provide good performance - choosing right data structures and algorithms to use is the fundamental part of programming.&lt;/p&gt;

&lt;p&gt;What are the other things that you need to worry about? Here are five things that we think are essential.&lt;/p&gt;

&lt;h3 id=&quot;readability-of-code&quot;&gt;Readability of Code&lt;/h3&gt;

&lt;p&gt;This is an indicator of how easy it is for another programmer, to read your code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Would another programmer be able to easily understand what your classes and methods do?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The critical aspect to be addressed here is how well your variables, methods and classes are named.&lt;/p&gt;

&lt;h3 id=&quot;reusability-of-components&quot;&gt;Reusability of Components&lt;/h3&gt;

&lt;p&gt;Before you implement a new functionality, check whether there is already a common component that can do the work for you.&lt;/p&gt;

&lt;p&gt;Is any part of your feature reusable across the enterprise? Is there is a need to create a component out of this feature?&lt;/p&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h3&gt;

&lt;p&gt;The best way to systematically ensure unit tests are written, is to follow Test Driven Development (TDD). With TDD, you write the tests before you actually write the code.&lt;/p&gt;

&lt;p&gt;Writing unit tests and running them regularly, is the only way to continuously improve the design of your code. If you fail to do so, your design becomes stagnant.&lt;/p&gt;

&lt;h3 id=&quot;non-functional-requirements&quot;&gt;Non Functional Requirements&lt;/h3&gt;

&lt;p&gt;Non functional requirements are typically those requirements which are missing in your requirement documents or user stories.&lt;/p&gt;

&lt;p&gt;Examples of non functional requirements are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Scalability&lt;/li&gt;
  &lt;li&gt;Performance&lt;/li&gt;
  &lt;li&gt;Maintainability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and other kinds of fun stuff! Doing well on these parameters should always be on the back of your mind.&lt;/p&gt;

&lt;h3 id=&quot;whats-for-dinner&quot;&gt;What’s For Dinner?&lt;/h3&gt;

&lt;p&gt;Always have fun when you code. Programming is an intense mental activity, and keep taking fun breaks during the course of a day. It could mean pulling your teammate’s leg.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we took a quick look at 5 things programmers should focus on while writing code.&lt;/p&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwProgrammingLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwProgrammingLesson2&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">You would obviously want to write code that meets your core requirements and provide good performance - choosing right data structures and algorithms to use is the fundamental part of programming.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_program.png" /></entry><entry><title type="html">Software Architecture - Why do we use Layered Architectures?</title><link href="http://localhost:4000/blog/SwArchitectLesson5" rel="alternate" type="text/html" title="Software Architecture - Why do we use Layered Architectures?" /><published>2019-10-15T18:55:00+00:00</published><updated>2019-10-15T18:55:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson5</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson5">&lt;p&gt;In this article, we explore the reasons why we build applications with several layers. We also look at different options for each layer in the Java world.&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will Learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Why Have Multiple Layers?&lt;/li&gt;
  &lt;li&gt;What are typical layers and their responsiblities?&lt;/li&gt;
  &lt;li&gt;What are the typical frameworks used in each layer in the Java world?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-have-multiple-layers&quot;&gt;Why Have Multiple Layers?&lt;/h3&gt;

&lt;p&gt;When we build any large application, such as a web application or service, we try to organize it into multiple layers. We could go for layers such as Web, Business, Access, among others:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The reason we go to such lengths is a very important underlying principle : &lt;strong&gt;separation of concerns&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each of the layers above have different responsibilities. Web layer is responsible for presenting information to the user. The Business layer is responsible for application’s business logic. The Data layer is responsible for taking care of the data access, and configuring and talking to the data stores. You might also have an additional access layer to talk to external applications, or queueing messages for dispatch.&lt;/p&gt;

&lt;p&gt;By defining each layer to have a separate responsibility, you ensure high cohesion with-in each such layer.&lt;/p&gt;

&lt;h3 id=&quot;layers-in-enterprise-java&quot;&gt;Layers In Enterprise Java&lt;/h3&gt;

&lt;p&gt;When it comes to the Java world, the typical organization of enterprise applications follows this schematic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;implementing-the-web-layer&quot;&gt;Implementing The Web Layer&lt;/h3&gt;

&lt;p&gt;Earlier, the web layer of a Java EE application is responsible for rendering the final view to the user with technologies like JSPs and variety of templating languages.  With the advent of RESTful web services and evolution of JavaScript SPA frameworks, this has changed drastically.&lt;/p&gt;

&lt;p&gt;Today, we expose a REST API from the Java Web layer, and a front-end framework (such as AngularJS or ReactJS) handles the user presentation.&lt;/p&gt;

&lt;p&gt;The main responsibility of a web layer is to talk to business layer and send a proper response to REST API calls.&lt;/p&gt;

&lt;p&gt;Another responsibility that a web layer typically handles is authentication and authorizations using a module like Spring Security.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few important decisions when designing your web layer are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Should the application have state? If yes, you need to store session information about the user. Ideally, you should not.&lt;/li&gt;
  &lt;li&gt;Which framework to use? The popular options are Spring Boot (MVC), JAX-RS(REST), JAX-WS(SOAP).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;implementing-the-business-layer&quot;&gt;Implementing The Business Layer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-05.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets look at the important business layer responsibilities:&lt;/p&gt;

&lt;h4 id=&quot;transaction-management&quot;&gt;Transaction Management&lt;/h4&gt;

&lt;p&gt;This is taken care of by Java Transaction API (JTA) and Spring Transactions.&lt;/p&gt;

&lt;h3 id=&quot;implementing-the-access-layer&quot;&gt;Implementing The Access Layer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-06.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following are the responsibilities of the Access layer:&lt;/p&gt;

&lt;h4 id=&quot;communicating-with-data-store&quot;&gt;Communicating with Data Store&lt;/h4&gt;

&lt;p&gt;If your application communicates with an external database, JPA might be a good choice. If very complex database queries are needed, then you might want to use JDBC or MyBatis.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Data JPA might be a good starting point for using JPA and Hibernate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;communication-with-external-interfaces&quot;&gt;Communication With External Interfaces&lt;/h4&gt;

&lt;p&gt;This layer provides interface with the JMS module. It also communicates with AMQP implementations.&lt;/p&gt;

&lt;h3 id=&quot;other-layers&quot;&gt;Other Layers&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-038-07.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the most important aspects that needs to be handled in any system is Cross Cutting Concerns. This includes tasks such as logging, performance and security.&lt;/p&gt;

&lt;p&gt;Typically these are implemented using Aspect Oriented Programming. AspectJ and Spring AOP are options to consider.&lt;/p&gt;

&lt;h3 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;/h3&gt;

&lt;p&gt;Unit testing of the application is another important concern. Typical frameworks that are provided include JUnit, Mockito and Spring Unit.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we understood why we need to have multiple layers in an application. We looked at the layers in a typical Java web application, along with framework options available. We then had a look at the makeup of the individual Data, Business and Access layers of a typical Java web application.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson4&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson5&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we explore the reasons why we build applications with several layers. We also look at different options for each layer in the Java world.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_architect.png" /></entry><entry><title type="html">5 Important Responsibilities of a Software Architect</title><link href="http://localhost:4000/blog/SwArchitectLesson4" rel="alternate" type="text/html" title="5 Important Responsibilities of a Software Architect" /><published>2019-10-15T18:50:00+00:00</published><updated>2019-10-15T18:50:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson4</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson4">&lt;p&gt;In this article, we look at some of the important responsibilities that an architect is expected to handle. Although we chiefly focus on application architects, most of these also hold true for enterprise architects as well.&lt;/p&gt;

&lt;p&gt;Five Responsibilities Of Architects that we look at are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Clean And Simple Architecture&lt;/li&gt;
  &lt;li&gt;Clear Standards&lt;/li&gt;
  &lt;li&gt;Proper Governance&lt;/li&gt;
  &lt;li&gt;Best Engineering Practices&lt;/li&gt;
  &lt;li&gt;Awesome Technical Processes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;clean-and-simple-architecture&quot;&gt;Clean And Simple Architecture&lt;/h3&gt;

&lt;p&gt;Any application that you work on needs to have a very clean and simple architecture. There must be great clarity in the organization on application layers, the use of specific frameworks at each layer, and patterns in communication with external applications.&lt;/p&gt;

&lt;h3 id=&quot;clear-standards&quot;&gt;Clear Standards&lt;/h3&gt;

&lt;p&gt;There needs to be clarity on the sets of standards followed in design, development, deployment and operations.&lt;/p&gt;

&lt;h3 id=&quot;governance&quot;&gt;Governance&lt;/h3&gt;

&lt;p&gt;Architects needs to ensure proper governance around the various standards, and on the creation of common components. In any enterprise application, it always adds great value to have common components that are frequently reused across different applications and application layers.&lt;/p&gt;

&lt;h3 id=&quot;best-engineering-practices&quot;&gt;Best Engineering Practices&lt;/h3&gt;

&lt;p&gt;It is very important to adhere to engineering best practices over the lifetime of an application. Interesting examples are Test Driven Development, Behavior Driven Development, DevOps. Such practices also involve use of consistent build and deployment tools and processes.&lt;/p&gt;

&lt;p&gt;The question you need to ask yourself frequently is - Are you are making the best possible use of these practices, to achieve business goals?&lt;/p&gt;

&lt;h3 id=&quot;awesome-technical-processes&quot;&gt;Awesome Technical Processes&lt;/h3&gt;

&lt;p&gt;You need to make sure that you have great processes in place for the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Development&lt;/li&gt;
  &lt;li&gt;Deployment&lt;/li&gt;
  &lt;li&gt;Continuous Integration&lt;/li&gt;
  &lt;li&gt;Immediate Defect Feedback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to have complete control over such issues.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the some of the important responsibilities of a software architect.&lt;/p&gt;

&lt;p&gt;Five Responsibilities Of Architects that we looked at are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Clean And Simple Architecture&lt;/li&gt;
  &lt;li&gt;Clear Standards&lt;/li&gt;
  &lt;li&gt;Proper Governance&lt;/li&gt;
  &lt;li&gt;Best Engineering Practices&lt;/li&gt;
  &lt;li&gt;Awesome Technical Processes&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson3&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson5&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we look at some of the important responsibilities that an architect is expected to handle. Although we chiefly focus on application architects, most of these also hold true for enterprise architects as well.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_architect.png" /></entry><entry><title type="html">5 Qualities of a Great Software Architect</title><link href="http://localhost:4000/blog/SwArchitectLesson3" rel="alternate" type="text/html" title="5 Qualities of a Great Software Architect" /><published>2019-10-15T18:30:00+00:00</published><updated>2019-10-15T18:30:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson3</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson3">&lt;p&gt;In this article, we look at some of the important qualities of a great software architect. Although we chiefly focus on application architects, most of these also hold true for enterprise architects as well.&lt;/p&gt;

&lt;p&gt;Five Qualities Of Architects that we look at are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Great Communication&lt;/li&gt;
  &lt;li&gt;Great Technical Skills&lt;/li&gt;
  &lt;li&gt;Forward Thinker&lt;/li&gt;
  &lt;li&gt;Super Diagnostic Skills&lt;/li&gt;
  &lt;li&gt;Hands-on&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;great-communication&quot;&gt;Great Communication&lt;/h3&gt;

&lt;p&gt;Architecture is all about conveying your vision to every member of the team. There are multiple stakeholders who are interested in knowing how we achieve business needs. Within a business, there are architects at multiple levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enterprise Architects&lt;/li&gt;
  &lt;li&gt;Application Architects&lt;/li&gt;
  &lt;li&gt;Core Architects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from them, there are other stakeholders such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Development Team&lt;/li&gt;
  &lt;li&gt;QA Team&lt;/li&gt;
  &lt;li&gt;Operations Team&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is vital that all these stakeholders have a clear view of the future direction of the business and technology.&lt;/p&gt;

&lt;h3 id=&quot;great-technical-skills&quot;&gt;Great Technical Skills&lt;/h3&gt;

&lt;p&gt;You being an architect, it is but natural for us to expect a great understanding of technology from you. You need to have a good grasp of concepts such as tools, languages, frameworks and tools used in the application.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is something taken as a given!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;forward-thinker&quot;&gt;Forward Thinker&lt;/h3&gt;

&lt;p&gt;As an architect, you need to be forward thinking and proactive. You need to understand where technology is heading, what kinds of architectures are trending, what programming languages are becoming popular, in what direction is the business headed, and what could be the business needs of the future.&lt;/p&gt;

&lt;p&gt;You need to be able to have a plan of how to evolve the application to meet future business needs.&lt;/p&gt;

&lt;p&gt;In the modern world of Agile practices, you should be able to break down these future expectations into manageable chunks, in order to evolve the application.&lt;/p&gt;

&lt;h3 id=&quot;super-diagnostic-skills&quot;&gt;Super Diagnostic Skills&lt;/h3&gt;

&lt;p&gt;You need to be able to resolve real world problems the application might face. This is not just about handling exceptions. If the application has a security, scalability or performance issue, then the architect needs to get involved and work out a solution. This requires the ability to look at the big picture, and at the same time understand the minor details.&lt;/p&gt;

&lt;h3 id=&quot;hands-on&quot;&gt;Hands-On&lt;/h3&gt;

&lt;p&gt;When needed, architects should be able to get the system up and running, checking out code from the repository, and start fixing bugs.&lt;/p&gt;

&lt;p&gt;I loved working in organizations where even Enterprise Architects could get their hands dirty when needed. At a minimum, atleast the application architects should be able to write production code.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the top 5 qualities of a great software architect has. Those are great communication, great technical skills, forward thinking, great diagnostic skills, and being hands-on.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson2&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson4&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we look at some of the important qualities of a great software architect. Although we chiefly focus on application architects, most of these also hold true for enterprise architects as well.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_architect.png" /></entry><entry><title type="html">Quick Introduction To Software Architecture - What, Why and How?</title><link href="http://localhost:4000/blog/SwArchitectLesson1" rel="alternate" type="text/html" title="Quick Introduction To Software Architecture - What, Why and How?" /><published>2019-10-15T18:17:00+00:00</published><updated>2019-10-15T18:17:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson1</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson1">&lt;p&gt;Good Software Architecture is essential to building great software. What is Software Architecture all about?&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What Is Software Architecture?&lt;/li&gt;
  &lt;li&gt;What do Software Architects do?&lt;/li&gt;
  &lt;li&gt;What are some of the important decisions software architects make?&lt;/li&gt;
  &lt;li&gt;Why do we need Software Architecture?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-software-architecture&quot;&gt;What Is Software Architecture?&lt;/h3&gt;

&lt;p&gt;To understand what software architecture is all about, let us look at the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Capture-087-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This application architecture has multiple microservices - Microservice1, Microservice2 and Microservice3. There are a set of common components that handle functionality such as security, logging, archetype creation, and the like. You also have components to handle common infrastructure concerns/ These include an API Gateway, a naming server, and a centralized logging system.&lt;/p&gt;

&lt;h4 id=&quot;answering-some-important-questions&quot;&gt;Answering Some Important Questions&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Who made the decision that there need to be three microservices, and assigned specific responsibility to each one of them?&lt;/li&gt;
  &lt;li&gt;Who decided that certain functionalities of the application need to be handled by common components?&lt;/li&gt;
  &lt;li&gt;Who designed the mode of interaction between the microservices and the common components?&lt;/li&gt;
  &lt;li&gt;Who classifies the common infrastructure components, and designs their interfaces with each of the microservices?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;architecture-is-all-about-making-decisions&quot;&gt;Architecture Is All About Making Decisions&lt;/h4&gt;

&lt;p&gt;Designing an application architecture is all about making such important decisions. It involves staring from a level that involves these decisions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What are the applications? What are their individual boundaries?&lt;/li&gt;
  &lt;li&gt;What are the interactions between the individual applications? In other words, the services of which other applications are needed by a particular application?&lt;/li&gt;
  &lt;li&gt;What are the common functionalities that can be identified in the system? How do you design them as components, and how to interface them with the other applications/components?&lt;/li&gt;
  &lt;li&gt;What services of the system need to be abstracted into the common infrastructure? How do you decide on how to make these services available to the rest of the system?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-do-we-need-software-architecture&quot;&gt;Why Do We Need Software Architecture?&lt;/h3&gt;

&lt;p&gt;A few decades earlier, software programs built were small and simple. However, things have changed dramatically.&lt;/p&gt;

&lt;p&gt;Software has become quite complex, with the advent of cloud computing, microservices, big data, and what not.&lt;/p&gt;

&lt;p&gt;Factors that have contributed to this complexity include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Distributed Systems&lt;/strong&gt;: Even a single web page that you may view online, might be driven by a cluster of hundreds of systems.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Device Explosion&lt;/strong&gt;: Earlier, devices owned by users were limited to a single PC or laptop per person. Nowadays, you have a choice of mobile phones, tablets, IoT devices, and what not! Software that needs to run on  more than one device, will be complex&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enormous Scale&lt;/strong&gt;: The load or the scale of users that an enterprise application needs to support has also gone up significantly&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Technology Evolution&lt;/strong&gt;: The languages, frameworks, tools and processes used in software development continuously undergo change, and applications need to keep pace with them&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Non Functional Requirements&lt;/strong&gt;: It is very important to ensure that all non functional requirements are adhered to when designing your applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The challenge in such a dynamic scenario, is to develop applications that work today, and adapt to stay relevant tomorrow. This is the puzzle that architects try to solve.&lt;/p&gt;

&lt;p&gt;That’s also the reason why you need to pay attention to the architecture, when you develop applications.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Software architecture is all about making decisions. It mainly involves identifying applications and components, and clearly demarcating their boundaries.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson2&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Good Software Architecture is essential to building great software. What is Software Architecture all about?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_architect.png" /></entry><entry><title type="html">What Is The Goal Of a Software Architect?</title><link href="http://localhost:4000/blog/SwArchitectLesson2" rel="alternate" type="text/html" title="What Is The Goal Of a Software Architect?" /><published>2019-10-15T18:17:00+00:00</published><updated>2019-10-15T18:17:00+00:00</updated><id>http://localhost:4000/blog/SwArchitectLesson2</id><content type="html" xml:base="http://localhost:4000/blog/SwArchitectLesson2">&lt;p&gt;In this article, we have a close look at what your goal as an architect should be. Before reading any further, take a piece of paper and put down the list of goals from your perspective.&lt;/p&gt;

&lt;h3 id=&quot;technology-enablessupports-business&quot;&gt;Technology Enables/Supports Business&lt;/h3&gt;

&lt;p&gt;The most important point to understand is that technology enables and supports businesses. That is the primary reason why we build awesome applications and frameworks.&lt;/p&gt;

&lt;p&gt;For example, Netflix built an excellent microservices architecture, in order to support its business and consumer needs. Netflix’s architecture enables them to provide an out-of-this-world movie streaming experience to all their customers. Simply having great technology will not help them survive.&lt;/p&gt;

&lt;p&gt;Your role as an architect is very similar - architect applications that support business needs.&lt;/p&gt;

&lt;h3 id=&quot;what-are-these-business-needs&quot;&gt;What Are These Business Needs?&lt;/h3&gt;

&lt;p&gt;The business needs can be put into the following categories:&lt;/p&gt;

&lt;h4 id=&quot;functional-requirements&quot;&gt;Functional Requirements&lt;/h4&gt;

&lt;p&gt;Netflix might say it needs a web page where all the available movies are listed. A user should then be able to select a movie by clicking on it, and watch it. This is an example of a functional requirement. All businesses have them.&lt;/p&gt;

&lt;h4 id=&quot;non-functional-requirements&quot;&gt;Non Functional Requirements&lt;/h4&gt;

&lt;p&gt;Netflix might put down a condition that the application needs to support over 100,000 users. The amount of time needed to load a page should not exceed 2 seconds. Also, application should be very secure. In addition, the system should be available 99.9999% of the time. These are all non functional requirements.&lt;/p&gt;

&lt;h4 id=&quot;quick-feature-releases&quot;&gt;Quick Feature Releases&lt;/h4&gt;

&lt;p&gt;In general, if you get a fresh requirement today, you don’t want it be delivered 6 months down the line. There is a need for early delivery of features.&lt;/p&gt;

&lt;p&gt;High performance organizations such as Facebook, Twitter, Amazon and Netflix do multiple feature releases in a single day.&lt;/p&gt;

&lt;h4 id=&quot;early-feedback&quot;&gt;Early Feedback&lt;/h4&gt;

&lt;p&gt;Another thing that all businesses need is early feedback. If a system is down, a particular feature is not working as expected, or if a large number of users don’t like a particular feature, the business wants to know of it as early as possible.&lt;/p&gt;

&lt;h4 id=&quot;quick-troubleshooting-and-support&quot;&gt;Quick Troubleshooting And Support&lt;/h4&gt;

&lt;p&gt;In today’s customer-centered world, it is of high importance that you have teams to deliver quick troubleshooting, and excellent customer support services. You also need to solve any problems that customers raise, very quickly.&lt;/p&gt;

&lt;h3 id=&quot;focus-on-the-right-things-as-an-architect&quot;&gt;Focus On The Right Things as an Architect&lt;/h3&gt;

&lt;p&gt;A lot of technology folks are obsessed with technology - tools, frameworks, languages and stuff like that. These are very important in their own right, without a doubt.&lt;/p&gt;

&lt;p&gt;However, the problems comes when we forget the very reason why the application is being built - to enable a business to succeed.&lt;/p&gt;

&lt;p&gt;As an architect, your unwavering focus should be on the business entirely, and look to reach business goals using the right technology solutions.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we focused on what the goals of an architect should be. We saw that most developers focus on the technology, but lose sight of the business goals. Applications are enablers of businesses. We then saw the five categories of business goals that an architect should try to meet through the application design.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on important Software Architecture:&lt;/p&gt;

&lt;p&gt;This is the first article in the following series of articles on Software Architecture :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson1&quot; target=&quot;_blank&quot;&gt;1 - Quick Introduction To Software Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson2&quot; target=&quot;_blank&quot;&gt;2 - What Is The Goal Of a Software Architect?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson3&quot; target=&quot;_blank&quot;&gt;3 - 5 Qualities of a Great Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson4&quot; target=&quot;_blank&quot;&gt;4 - 5 Important Responsibilities of a Software Architect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwArchitectLesson5&quot; target=&quot;_blank&quot;&gt;5 - Software Architecture - Why do we use Layered Architectures?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson1&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwArchitectLesson3&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">In this article, we have a close look at what your goal as an architect should be. Before reading any further, take a piece of paper and put down the list of goals from your perspective.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_architect.png" /></entry><entry><title type="html">Software Design - Introduction to Evolutionary Design</title><link href="http://localhost:4000/blog/SwDesignLesson13" rel="alternate" type="text/html" title="Software Design - Introduction to Evolutionary Design" /><published>2019-10-15T11:51:00+00:00</published><updated>2019-10-15T11:51:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson13</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson13">&lt;p&gt;With extreme programming and agile, the focus is being lean and doing just in time design. In this context, how do you ensure that your design remains good and evolves along with the application requirements?&lt;/p&gt;

&lt;h3 id=&quot;we-learn&quot;&gt;We learn&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is Evolutionary Design?&lt;/li&gt;
  &lt;li&gt;Why is it important?&lt;/li&gt;
  &lt;li&gt;How can you use Evolutionary Design in the best way possible?&lt;/li&gt;
  &lt;li&gt;What Are The Advantages Of Evolutionary Design?&lt;/li&gt;
  &lt;li&gt;How does Evolutionary Design fit in with agile?&lt;/li&gt;
  &lt;li&gt;What are the best practices with Evolutionary Design?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;waterfall-model-in-perspective&quot;&gt;Waterfall Model In Perspective&lt;/h3&gt;

&lt;p&gt;One of the first software implementation model was the &lt;strong&gt;Waterfall Model&lt;/strong&gt;. Before we start with Evolutionary Design, lets look at how design was done in a Waterfall Model.&lt;/p&gt;

&lt;p&gt;The Waterfall Model typically involves the following project stages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Architecture&lt;/li&gt;
  &lt;li&gt;Design&lt;/li&gt;
  &lt;li&gt;Programming/Coding&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The duration of each of these phases could be a month, two months or even three months.&lt;/p&gt;

&lt;p&gt;Before you can get to the programming step, you need to be involved for a long time in the architecture and design phases. The result of this is that you have the components of your program fully specified - the classes, methods among others - before you even start coding.&lt;/p&gt;

&lt;p&gt;This model assumes that you can design software just like you design your buildings or bridges.&lt;/p&gt;

&lt;p&gt;However, there were several problems with this approach and we quickly moved on to other design approaches as new sotware development models evolved.&lt;/p&gt;

&lt;h3 id=&quot;introducing-evolutionary-design&quot;&gt;Introducing Evolutionary Design&lt;/h3&gt;

&lt;p&gt;In the waterfall model, we architect and design the entire system before we even start coding.&lt;/p&gt;

&lt;p&gt;Evolutionary Design adopts a radically different approach. It focuses on having a simple design that works to start with. Now, what is simple design?&lt;/p&gt;

&lt;p&gt;A software application is said to have a simple design if it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Runs all tests&lt;/strong&gt; : There are good unit tests and all tests succeed all the time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contains no duplication&lt;/strong&gt; : There is no duplication of code or intent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expresses intent of programmers&lt;/strong&gt; : Code is clear, easy to read and simple.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minimizes number of classes and methods&lt;/strong&gt; : Architecture and Design are as simple as possible to get things dones. Classes and Methods are as small as possible without losing clarity or performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thought process behind Evolution Design is that once the design is simple, you can enhance it easily to meet future needs.&lt;/p&gt;

&lt;h3 id=&quot;evolutionary-design-and-agile&quot;&gt;Evolutionary Design and Agile&lt;/h3&gt;

&lt;p&gt;Evolution design fits very well with the agile way of working.&lt;/p&gt;

&lt;p&gt;Agile focuses on getting things done in small cycles. You design a little. You code a little. You test a little. You move your code to production often. Focusing on 4 principles of Simple Design helps you in keeping the design simple and evolve design over a period of time instead of a one time design.&lt;/p&gt;

&lt;h3 id=&quot;architecture-vs-design&quot;&gt;Architecture vs Design&lt;/h3&gt;

&lt;p&gt;While the focus of agile is on just in time design, it is important to distinguish between design decisions and architectural decisions.&lt;/p&gt;

&lt;p&gt;Some decision are difficult to change, once you made the choice. For example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What frameworks to use to build your application?&lt;/li&gt;
  &lt;li&gt;How do you integrate with other applications?&lt;/li&gt;
  &lt;li&gt;What is the boundary of the application you are building?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These decisions are what I call - architectural decisions. It is important to take time while making architectural decisions and involve your architecture team as well.&lt;/p&gt;

&lt;h3 id=&quot;how-evolutionary-design-works&quot;&gt;How Evolutionary Design Works&lt;/h3&gt;

&lt;p&gt;In Evolutionary design, we follow an iterative approach:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Does your feature involve an architectural decision? If not, go to next step. Otherwise, get your architecture team involved and possibly do a prototype to test your architecural decision.&lt;/li&gt;
  &lt;li&gt;Code the feature&lt;/li&gt;
  &lt;li&gt;Refactor code to meet 4 Principles of Simple Design&lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-are-the-advantages-of-evolutionary-design&quot;&gt;What Are The Advantages Of Evolutionary Design?&lt;/h3&gt;

&lt;p&gt;The following are the stand-out advantages of Evolutionary Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Avoids over-design&lt;/strong&gt; : When we follow older design methods, we tend to prepare our software to handle future requirements. This is a classic case of over-design.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoids wastage of effort&lt;/strong&gt;: This could happen when we design for future requirements that never happen&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Designs just-in-time&lt;/strong&gt;: It follows an iterative cycle of development, where the focus is on current requirements, delivering current value, and incorporating relevant feedback.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-challenges-arise-with-evolutionary-design&quot;&gt;What Challenges Arise With Evolutionary Design?&lt;/h3&gt;

&lt;p&gt;The following are the significant challenges posed by Evolutionary Design:&lt;/p&gt;

&lt;h4 id=&quot;needs-a-clear-separation-between-architecture-and-design&quot;&gt;Needs a clear separation between Architecture and Design&lt;/h4&gt;

&lt;p&gt;All design cannot be done in the nick of time; architecture decisions are difficult to change and time must be devoted to those. You may want to create a separate category of user story, or even a separate process sprint to cover the architecture decisions. Also, everyone in the project needs to be clear about these two kinds of decisions for the project.&lt;/p&gt;

&lt;h4 id=&quot;need-for-skilled-and-experienced-architects-and-developers&quot;&gt;Need for skilled and experienced architects and developers&lt;/h4&gt;

&lt;p&gt;A group of inexperienced or less experienced developers cannot pull off a well-designed software application, using evolutionary design. You need guidance from experienced people.&lt;/p&gt;

&lt;h4 id=&quot;need-for-continuous-integration&quot;&gt;Need for Continuous Integration&lt;/h4&gt;

&lt;p&gt;Continuous Integration is essential for Evolutionary Design is effective:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To be sure your tests are running regularly&lt;/li&gt;
  &lt;li&gt;To ensure that code quality is under check&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;needs-high-quality-tests&quot;&gt;Needs High Quality Tests&lt;/h4&gt;

&lt;p&gt;Your unit tests need to be really top-class. If these unit tests are not good, then refactoring the code is out of question. This leads to the design getting stagnated, as the 
developers are reluctant to refactor the code. Now, the design is no longer evolutionary!&lt;/p&gt;

&lt;h3 id=&quot;understanding-the-best-practices&quot;&gt;Understanding The Best Practices&lt;/h3&gt;

&lt;p&gt;The two major points to stress on here are:&lt;/p&gt;

&lt;h4 id=&quot;use-test-driven-development-tdd&quot;&gt;Use Test-Driven Development (TDD)&lt;/h4&gt;

&lt;p&gt;This is the best way to ensure that your low-level design is good. With TDD, your focus before you write any code is how you will go about testing it. For example, you start thinking about how someone will use your class and its methods, before you write the method. You thus have an &lt;em&gt;outside-in&lt;/em&gt; perspective, and that’s always good to have as a developer. This results in the software having a good and robust API.&lt;/p&gt;

&lt;p&gt;Another things that results from TDD is you have great unit tests!&lt;/p&gt;

&lt;p&gt;When following TDD, you first write a unit test, make it fail, and then write the code to make it pass. So, you have more reliable tests.&lt;/p&gt;

&lt;h4 id=&quot;use-continuous-integration&quot;&gt;Use Continuous Integration&lt;/h4&gt;

&lt;p&gt;As we saw a short while ago, we need to make sure we keep running the tests we write, regularly. This ensures you get immediate feedback if something has gone wrong.&lt;/p&gt;

&lt;h3 id=&quot;how-to-learn-evolutionary-design&quot;&gt;How To Learn Evolutionary Design?&lt;/h3&gt;

&lt;p&gt;The best way to learn this is by using &lt;strong&gt;pair programming&lt;/strong&gt;: pair with good, experienced programmers. This will give you insights into how to evolve your program’s design, over a period of time.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we gave you an insight into Evolutionary Design. Evolutionary Design helps us avoid over design and keeps our design simple.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson12&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson13&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">With extreme programming and agile, the focus is being lean and doing just in time design. In this context, how do you ensure that your design remains good and evolves along with the application requirements?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry><entry><title type="html">Software Design - Coupling - with examples</title><link href="http://localhost:4000/blog/SwDesignLesson11" rel="alternate" type="text/html" title="Software Design - Coupling - with examples" /><published>2019-10-15T11:36:00+00:00</published><updated>2019-10-15T11:36:00+00:00</updated><id>http://localhost:4000/blog/SwDesignLesson11</id><content type="html" xml:base="http://localhost:4000/blog/SwDesignLesson11">&lt;p&gt;Software architects and programmers love low coupling. What is coupling? Why is coupling important? Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;you-will-learn&quot;&gt;You will learn&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What is coupling?&lt;/li&gt;
  &lt;li&gt;What are common examples of coupling in software?&lt;/li&gt;
  &lt;li&gt;How can we reduce the amount of coupling between classes, between components, and the like?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-of-couping&quot;&gt;Example of Couping&lt;/h3&gt;

&lt;p&gt;Let’s start with an example.&lt;/p&gt;

&lt;p&gt;Let’s say a friend of mine is developing a Java component, in the form of a JAR file, for me to use. However, there is an implicit constraint imposed here - I need to use Java (or a JVM Based language) to use the utility JAR file! In other words, developing the component as a Java JAR has &lt;strong&gt;coupled&lt;/strong&gt; me to using Java as well. To break free, I need to &lt;strong&gt;decouple&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;how-to-decouple-an-example&quot;&gt;How to Decouple? An Example:&lt;/h4&gt;

&lt;p&gt;Instead of providing me with a JAR, I could ask my friend to create a web service interface for me to access the same functionality. The concept would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-06-01.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The web service is created around the JAR, and can be accessed from a Java, a PHP, or a .NET application. We can use any kind of application to invoke the web service.&lt;/p&gt;

&lt;p&gt;This implies we have effectively decoupled from the underlying technology of the component. We are no longer affected by the fact that the component was developed in Java.&lt;/p&gt;

&lt;h3 id=&quot;another-example-for-low-coupling---spring-framework&quot;&gt;Another Example for Low Coupling - Spring Framework&lt;/h3&gt;

&lt;p&gt;Spring Framework has a highly modular structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-06-03.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Suppose we want to use a specific module from this framework; for instance, the Spring JDBC module.&lt;/p&gt;

&lt;p&gt;What would happen if Spring tells you that you can only use Spring JDBC if you also use the Beans and Context modules?&lt;/p&gt;

&lt;p&gt;You would probably not use it at all, because it introduces additional dependencies such as configuration etc.&lt;/p&gt;

&lt;p&gt;Spring does get this right; it does not force you to use Beans or Context along with JDBC. In other words, Spring modules are not coupled with the other ones.&lt;/p&gt;

&lt;h3 id=&quot;class-level-coupling---the-order-class&quot;&gt;Class-level coupling - The &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class&lt;/h3&gt;

&lt;p&gt;Let’s now go one level deeper. Let’s look at Coupling at the level of classes.&lt;/p&gt;

&lt;p&gt;Let’s look at a simple shopping cart example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ShoppingCart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salesTax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salexTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;orderTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cartTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You would observe that &lt;code class=&quot;highlighter-rouge&quot;&gt;orderTotalPrice()&lt;/code&gt; knows the internal details of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It accesses the &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; field of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; directly&lt;/li&gt;
  &lt;li&gt;It accesses the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt; fields of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt;, also directly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scenario : Try and imagine a situation where we change the name of the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; field of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt;, to something else.&lt;/p&gt;

&lt;p&gt;Approach : Code within &lt;code class=&quot;highlighter-rouge&quot;&gt;orderTotalPrice()&lt;/code&gt; would also need to change.&lt;/p&gt;

&lt;p&gt;If you change the type of the &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; array (possibly to a list) within &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt;, that would also lead to a change within &lt;code class=&quot;highlighter-rouge&quot;&gt;orderTotalPrice()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class is &lt;strong&gt;tightly coupled&lt;/strong&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCart&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; classes.&lt;/p&gt;

&lt;p&gt;How do we decouple them?&lt;/p&gt;

&lt;h4 id=&quot;decoupling-the-order-class-example&quot;&gt;Decoupling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class Example&lt;/h4&gt;

&lt;p&gt;Here is one way of achieving this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CartContents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ShoppingCartEntry&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;item:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTotalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;CartContents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CartContents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;salesTax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;totalPrice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTotalPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesTax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the following points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead of making the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;quantity&lt;/code&gt; fields accessible, &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; now makes a method named &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; available to &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt; class does something very similar, by also providing a &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; method for &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; to use.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; class now only invokes the &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; methhod exposed by &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt;, to compute the total cart value in &lt;code class=&quot;highlighter-rouge&quot;&gt;totalPrice()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;price&lt;/code&gt; field in &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; has its name changed, only &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; within the same class would be affected&lt;/li&gt;
  &lt;li&gt;If the type of &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; within &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt; is changed from an array to a list, again only the &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;getTotalPrice()&lt;/code&gt; method needs to be altered.&lt;/li&gt;
  &lt;li&gt;The code within &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; is not affected by either of these changes at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have now completely decoupled &lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt; from both &lt;code class=&quot;highlighter-rouge&quot;&gt;ShoppingCartEntry&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;CartContents&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;another-coupling-example-with-spring-framework&quot;&gt;Another Coupling Example with Spring Framework&lt;/h3&gt;

&lt;p&gt;Consider the following body of code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorthm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bubbleSortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You would notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class is directly dependent on the &lt;code class=&quot;highlighter-rouge&quot;&gt;BubbleSortAlgorithm&lt;/code&gt; class. If we need to change the actual sort algorithm, to use quicksort for instance, then a lot of code within &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; needs to change.&lt;/p&gt;

&lt;p&gt;We can solve this issue by making use of &lt;strong&gt;interfaces&lt;/strong&gt;. Here is how our modified code would look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intrface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you use the Spring framework, you could use the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; annotation with the &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySearchImpl&lt;/code&gt; class, to automatically fetch an implementation of an available sort algorithm:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BinarySearchImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BinarySearchImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sortAlgorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberToSearchFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortAlgorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we have achieved here is reduce the coupling between &lt;code class=&quot;highlighter-rouge&quot;&gt;BinarySeacrhImpl&lt;/code&gt; and a specific sort algorithm.&lt;/p&gt;

&lt;h3 id=&quot;a-practical-viewpoint-of-coupling&quot;&gt;A Practical Viewpoint of Coupling&lt;/h3&gt;

&lt;p&gt;A good way of thinking about coupling, is if you change the inner details of a class or a component, do you need to make changes elsewhere as well?&lt;/p&gt;

&lt;p&gt;Such dependencies are not desirable. If you intend to reuse code from one place to another, the related dependencies should be as few as possible.&lt;/p&gt;

&lt;p&gt;Coupling can occur at multiple levels in an application:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Class-level&lt;/li&gt;
  &lt;li&gt;API-level&lt;/li&gt;
  &lt;li&gt;Component-level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at an example of coupling at component level:&lt;/p&gt;

&lt;h3 id=&quot;component-level-coupling&quot;&gt;Component-Level Coupling&lt;/h3&gt;

&lt;p&gt;Consider the following organization of an enterprise web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-05-02.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the Security component were coupled with the Logging component, then wherever we need Security, we would also need to access Logging. That’s not good.&lt;/p&gt;

&lt;h3 id=&quot;coupling-with-layers&quot;&gt;Coupling With Layers&lt;/h3&gt;

&lt;p&gt;Let’s look at an example of a layered web application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sw_design/11/Capture-06-04.png&quot; alt=&quot;image info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is organized into these three layers. Also assume that from the Web layer Controller, I need to call multiple methods from the Business layer. Let’s say five different methods need to be called for a single such requirement. This is a clear case of coupling.&lt;/p&gt;

&lt;p&gt;A very effective way to avoid such layer-to-layer coupling is to use the &lt;strong&gt;Facade Pattern&lt;/strong&gt;. You can create a Facade component on top of the Business layer, that manages calls to these five methods. The web layer can then make do with calling a  single method from the Facade component.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All in all, decoupling makes the code more reusable and testable.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;In this article, we looked at the concept of coupling at multiple levels: at the class, the component, the API and the layer level. We also looked at how to get around this factor through decoupling, at each of these levels. We identified the key question to ask about coupling:  “If something changes at a particular place, would other things need to change as well? And If I use something, would I be forced to use something else as well?”&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;software-design&quot;&gt;Software Design&lt;/h3&gt;

&lt;p&gt;This is the article in a series of articles on Software Design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson7&quot; target=&quot;_blank&quot;&gt;1 - How do you keep your design simple?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson8&quot; target=&quot;_blank&quot;&gt;2 - Design Patterns For Beginners - with Java Examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson9&quot; target=&quot;_blank&quot;&gt;3 - What is Abstraction?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson10&quot; target=&quot;_blank&quot;&gt;4 - Encapsulation - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson11&quot; target=&quot;_blank&quot;&gt;5 - Coupling - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson12&quot; target=&quot;_blank&quot;&gt;6 - Cohesion - with examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/SwDesignLesson13&quot; target=&quot;_blank&quot;&gt;7 - Introduction to Evolutionary Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--Section: Lesson UI--&gt;
&lt;section class=&quot;text-center&quot;&gt;
    &lt;hr /&gt;
   
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson10&quot; class=&quot;btn  btn-sm&quot; id=&quot;round-button&quot;&gt;
                &lt;i class=&quot;fas fa-arrow-left mr-2&quot;&gt;&lt;/i&gt;Previous Lesson
            &lt;/a&gt;
        &lt;/div&gt;
     
        &lt;div class=&quot;col-lg-4 col-md-6 col-sm-6&quot;&gt;
            &lt;a target=&quot;_blank&quot; href=&quot;https://girishgodage.github.io/blog/SwDesignLesson12&quot; class=&quot;btn btn-sm&quot; id=&quot;round-button&quot;&gt;Next Lesson
                &lt;i class=&quot;fas fa-arrow-right ml-2&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;       
    &lt;/div&gt;

&lt;/section&gt;</content><author><name>Girish Godage</name></author><category term="learning" /><summary type="html">Software architects and programmers love low coupling. What is coupling? Why is coupling important? Let’s get started.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://girishgodage.github.io/img/sw_design.png" /></entry></feed>