I"¬1<p>Developers starting with the Spring framework often get confused with terminology - Dependency, Dependency Injection and Inversion Of Control. In this article, we introduce you to the concepts of Dependency Injection and Inversion Of Control.</p>

<h2 id="you-will-learn">You will learn</h2>
<ul>
  <li>What Is Dependency Injection?</li>
  <li>Why do you need Dependency Injection?</li>
  <li>What Is tight coupling?</li>
  <li>What Is de-coupling?</li>
  <li>How does Spring Framework provide Dependency Injection?</li>
  <li>What Is Inversion Of Control?</li>
  <li>What are good examples of inversion of control?</li>
  <li>How does Spring Framework implement Inversion of Control?</li>
  <li>Why Is Inversion of Control Important and what are its advantages?</li>
</ul>

<h3 id="what-is-dependency-injection">What Is Dependency Injection?</h3>

<p>Dependency injection is the core feature of the Spring Framework.  Dependency injection is a concept that is borrowed from the Dependency Inversion Principle (DIP).</p>

<h4 id="tight-coupling">Tight Coupling</h4>

<p>Have a look at the following examples of code:</p>

<h5 id="example-1">Example-1</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TodoBusinessService</span> <span class="o">{</span>
		<span class="nc">TodoDataServiceImpl</span> <span class="n">dataService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TodoDataServiceImpl</span><span class="o">();</span>
		<span class="c1">//... </span>
	<span class="o">}</span>

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">TodoBusinessService</code> is directly creating an instance of <code class="language-plaintext highlighter-rouge">TodoDataServiceImpl</code> within itself.</p>

<h5 id="example-2">Example-2</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComplexAlgorithmImpl</span> <span class="o">{</span>
		<span class="nc">BubbleSortAlgorithm</span> <span class="n">bubbleSortAlgorithm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BubbleSortAlgorithm</span><span class="o">();</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> is meant to perform a lot of complex logic, and one of the things it does is sorting. here, it is directly creating an instance of <code class="language-plaintext highlighter-rouge">BubbleSortAlgorithm</code> within itself.</p>

<p>These two examples highlight code with tight coupling.</p>

<p>Imagine what you need to do, if you want to change the sort algorithm to quicksort. You need to change the relevant code within <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code>.</p>

<p>Hence, <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> is tightly coupled to <code class="language-plaintext highlighter-rouge">BubbleSortAlgorithm</code>, a specific sort algorithm.</p>

<h4 id="decoupling-complexalgorithmimpl">Decoupling <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code></h4>

<p>How do we decouple <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> from the specific sort algorithm?</p>

<p>We want it to be used with bubble sort, or quick sort, or radix sort, or any other sort. The solution is to make use of an interface.</p>

<p>Have a look at the following code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SortAlgorithm</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Component</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComplexAlgorithmImpl</span> <span class="o">{</span>
		<span class="nd">@Autowired</span>
		<span class="kd">private</span> <span class="nc">SortAlgorithm</span> <span class="n">sortAlgorithm</span><span class="o">;</span>	
		<span class="c1">//...</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BubbleSortAlgorithm</span> <span class="kd">implements</span> <span class="nc">SortAlogrithm</span> <span class="o">{</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuickSortAlgorithm</span> <span class="kd">implements</span> <span class="nc">SortAlogrithm</span> <span class="o">{</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>
<h4 id="decoupling-explained">Decoupling Explained</h4>

<p>We have created an interface named <code class="language-plaintext highlighter-rouge">SortAlgorithm</code> that has <code class="language-plaintext highlighter-rouge">sort()</code> method defined. Specific sort algorithms all implement <code class="language-plaintext highlighter-rouge">SortAlgorithm</code> by overriding <code class="language-plaintext highlighter-rouge">sort()</code>. Here, <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> makes use of <code class="language-plaintext highlighter-rouge">SortAlgorithm</code> as a dependency by declaring it as a member. However, the actual implementation of <code class="language-plaintext highlighter-rouge">SortAlgorithm</code> needs to be passed in as a parameter to its constructor, or a setter method. The user decides which specific sort algorithm <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> gets to use.</p>

<p>Whichever class wants to make use of <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> needs to write code such as this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="nc">CompexAlgorithmImpl</span> <span class="n">binarySearch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ComplexAlgorithmImpl</span><span class="o">(</span><span class="k">new</span> <span class="nc">QuickSortAlgorithm</span><span class="o">());</span>

</code></pre></div></div>

<p>Other classes may choose to pass in <code class="language-plaintext highlighter-rouge">SortAlgorithm</code> implementations for bubble sort, heap sort or radix sort.</p>

<h4 id="inversion-of-control-with-complexalgorithmimpl">Inversion of Control with <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code></h4>

<p>Look at it from the perspective of <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code>.</p>

<p>In the first approach, it took up the responsibility of selecting the specific sort algorithm. As a result, the specific <code class="language-plaintext highlighter-rouge">BubbleSortAlgorithm</code> was hard-coded.</p>

<p>In the second approach, the class which uses <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> gets to decide which specific sort algorithm is to be used.</p>

<p>There is a clear inversion of responsibility taking place. This is also called Inversion of Control or <strong>dependency inversion</strong>.</p>

<p>Dependency inversion results in <strong>loose coupling</strong>.  <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> is not tied to a specific sort algorithm.</p>

<h3 id="dependency-injection-in-spring">Dependency Injection In Spring</h3>

<p>Now where does Spring framework come into picture?</p>

<p>Lets look at the code below:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="nc">CompexAlgorithmImpl</span> <span class="n">binarySearch</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ComplexAlgorithmImpl</span><span class="o">(</span><span class="k">new</span> <span class="nc">QuickSortAlgorithm</span><span class="o">());</span>

</code></pre></div></div>

<p>In the above piece of code, we are manually creating the objects and tying them up with dependencies. In a typical application, we might have thousands of objects. Do you want to write the code for all it manually. How about having a framework that does this for you?</p>

<p>Letâ€™s consider the following example:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="nd">@Component</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComplexAlgorithmImpl</span> <span class="o">{</span>
		<span class="nd">@Autowired</span>
		<span class="kd">private</span> <span class="nc">SortAlgorithm</span> <span class="n">sortAlgorithm</span><span class="o">;</span>	
		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>

<p>When this code is run - Spring creates an instance of <code class="language-plaintext highlighter-rouge">QuickSortAlgorithm</code> which implements <code class="language-plaintext highlighter-rouge">SortAlgorithm</code> interface, and wires it into an instance of <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code>.</p>

<p>This process, where the Spring framework identifies the beans, identifies the dependencies, and populates the dependencies inside the beans is called <strong>dependency injection</strong>.</p>

<h4 id="dependency-inversion-and-dependency-injection">Dependency Inversion And Dependency Injection</h4>

<p>So far in this article, we have discussed two important concepts:</p>

<ul>
  <li>Dependency Inversion : We create loosely couple code by explicitly declaring dependencies, and introducing interfaces for them.</li>
  <li>Dependency Injection : The Spring framework identifies beans and dependencies, and wires dependencies inside beans.</li>
</ul>

<h3 id="summary">Summary</h3>

<p>In this article, we talked about dependency injection. Dependency injection has its roots in a core SOLID principle of object oriented programming, named the Dependency Inversion principle. We saw how dependency inversion transforms tightly couple code into a loosely coupled one. Dependencies are explicitly identified, and classes that use them become flexible.</p>

<p>Dependency injection is a mechanism based on dependency inversion. The Spring framework identifies beans and dependencies, and autowires the dependencies into beans.</p>

<hr />
<h3 id="spring-framework">Spring Framework</h3>

<p>This is the first article in a series of articles on Spring Framework:</p>

<ul>
  <li><a href="/blog/introduction-to-the-spring-framework" target="_blank">1 - Introduction To Spring Framework</a></li>
  <li><a href="/blog/spring-framework-what-is-a-dependency" target="_blank">2 - What Is A Dependency?</a></li>
  <li><a href="/blog/spring-framework-dependency-injection-inversion-of-control" target="_blank">3 - What Is Dependency Injection?</a></li>
  <li><a href="/blog/spring-and-spring-boot-what-is-component-scan" target="_blank">4 - What Is Component Scan?</a></li>
  <li><a href="/blog/spring-framework-architectures-and-modules" target="_blank">5 - Architecture of Spring Framework - Modularity and Spring Modules</a></li>
  <li><a href="/blog/spring-projects-with-examples" target="_blank">6 - What Are Spring Projects?</a></li>
  <li><a href="/blog/spring-basics-introduction-to-spring-batch" target="_blank">7 - Introduction To Spring Batch</a></li>
</ul>

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/spring-framework-what-is-a-dependency" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/spring-and-spring-boot-what-is-component-scan" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET