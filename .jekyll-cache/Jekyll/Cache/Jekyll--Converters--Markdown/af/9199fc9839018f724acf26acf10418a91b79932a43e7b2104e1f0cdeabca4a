I"5<p>Spring framework identifies the beans and their dependencies, creates the beans and injects the dependencies into beans. How does the Spring Framework know where to search for beans and dependencies? How does Spring Boot make component scan easier?</p>

<h2 id="you-will-learn">You will learn</h2>
<ul>
  <li>Why do we need Component Scan in Spring?</li>
  <li>How can you configure a Component Scan in Spring with XML and Java Annotation based configuration?</li>
  <li>How does Spring Boot provide an automatic Component Scan?</li>
  <li>How do you solve problems with Component Scan?</li>
</ul>

<p>In this article, we understand a little bit about component scan in the context of the Spring framework. We also see how component scan works with the Spring Boot framework.</p>

<h3 id="functionality-of-the-spring-framework">Functionality Of The Spring Framework?</h3>

<p>What is the fundamental functionality of the Spring framework? It is dependency injection.</p>

<p>Spring framework identifies the beans and their dependencies, finds them and injects the dependencies into beans.</p>

<p>Have a look at the following example:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="nd">@Component</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComplexAlgorithmImpl</span> <span class="o">{</span>
		<span class="nd">@Autowired</span>
		<span class="n">privare</span> <span class="nc">SortAlgorithm</span> <span class="n">sortAlgorithm</span><span class="o">;</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SortAlgorithm</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Component</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuickSortAlgorithm</span> <span class="kd">implements</span> <span class="nc">SortAlgorithm</span> <span class="o">{</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>

<p>Let’s quickly look at what Spring Framework needs to do get the autowiring working.</p>

<p>Spring framework needs to create instances of <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> and <code class="language-plaintext highlighter-rouge">QuickSortAlgorithm</code>.</p>

<p>Since <code class="language-plaintext highlighter-rouge">QuickSortAlgorithm</code> is the only implementation of <code class="language-plaintext highlighter-rouge">SortAlgorithm</code> available, it needs to be auto-wired into the <code class="language-plaintext highlighter-rouge">sortAlgorithm</code> field of <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code>.</p>

<h3 id="how-does-spring-search-for-beans">How Does Spring Search For Beans?</h3>

<p>Let’s look at a few questions?</p>
<ul>
  <li>How does Spring know where to look for the beans?</li>
  <li>How does it know where it needs to search for classes with annotations such as <code class="language-plaintext highlighter-rouge">@Component</code> and <code class="language-plaintext highlighter-rouge">@Service</code>?</li>
</ul>

<p>A typical application could have hundreds of JARS, and as a result, thousands of classes. Therefore, it is not practical for Spring to search in all the classes present in the <code class="language-plaintext highlighter-rouge">CLASSPATH</code>.</p>

<h3 id="enter-component-scan">Enter Component Scan</h3>

<p>Clearly, Spring needs to be given inputs to identify the packages of the beans and dependencies. This is where component scan comes into the picture.</p>

<p>You declare a component scan by passing in a list of packages where the scan needs to take place:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="nd">@Configuration</span>
	<span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">basePackages</span> <span class="o">=</span> <span class="o">{</span>
			<span class="s">"com.girishgodage.spring.example1.businessservice"</span><span class="o">,</span>
			<span class="s">"com.girishgodage.spring.example1.dataservice.stub"</span><span class="o">})</span>

	<span class="kd">class</span> <span class="nc">SpringContext</span> <span class="o">{</span>
	<span class="o">}</span>

</code></pre></div></div>

<p>The packages mentioned above are the locations where the beans and their dependencies are defined. This <code class="language-plaintext highlighter-rouge">@ComponentScan</code> gives a clue to the Spring framework on where to search.</p>

<h3 id="component-scan-with-xml-configuration">Component Scan With XML Configuration</h3>

<p>The thing is, component scan an also be done with XML configuration:</p>

<p><img src="/images/Capture-092-02.png" alt="image info" /></p>

<p>For this, use the <code class="language-plaintext highlighter-rouge">&lt;context:component-scan&gt;</code> tag, and specify the packages that are the locations.</p>

<h3 id="how-does-auto-configuration-work-with-spring-boot">How does Auto Configuration work with Spring Boot?</h3>

<p>Spring Boot tries to automate a lot of stuff. Consider the code example below:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kn">package</span> <span class="nn">com.girishgodage.spring.basics.springin5steps</span><span class="o">;</span>

	<span class="nd">@SpringBootApplication</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringIn5StepsApplication</span> <span class="o">{</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kn">package</span> <span class="nn">com.girishgodage.spring.basics.springin5steps</span><span class="o">;</span>
	
	<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>

	<span class="nd">@SpringBootTest</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringIn5StepsApplicationTests</span> <span class="o">{</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>

<p>As soon as Spring Boot sees the annotation <code class="language-plaintext highlighter-rouge">@SpringBootApplication</code>, it does an automatic scan on the current package, which is <code class="language-plaintext highlighter-rouge">com.girishgodage.spring.basics.springin5steps</code>.</p>

<p>You don’t need to explicitly define a component scan. If all the components that you need are present in the same package as <code class="language-plaintext highlighter-rouge">SpringIn5StepsApplication</code>, you don’t need to explicitly specify component scan.</p>

<h3 id="troubleshooting-component-scan-in-spring-boot">Troubleshooting Component Scan In Spring Boot</h3>

<p>Have a look at the following Spring Boot application:</p>

<p><img src="/images/Capture-092-03.png" alt="image info" /></p>

<p>Since <code class="language-plaintext highlighter-rouge">SpringbootIn10StepsApplication</code> has a <code class="language-plaintext highlighter-rouge">@SpringBootApplication</code> annotation attached to it, an automatic component scan in the package <code class="language-plaintext highlighter-rouge">com.girishgodage.springboot.basics.springbootin10steps</code>, and all its sub-packages.</p>

<p>However, what would happen if you have one of the components defined in a different package, say <code class="language-plaintext highlighter-rouge">com.in28mnutes.springboot.somethingelse</code>?</p>

<p>In this case, you need to add that package to the component scan. There are a couple of options available for doing this.</p>

<h3 id="explicit-component-scan-in-spring-boot">Explicit Component Scan In Spring Boot</h3>

<p>There are two ways of doing an explicit component scan:</p>

<h4 id="scan-a-parent-package">Scan a parent package</h4>

<p>This would scan the entire parent package tree of <code class="language-plaintext highlighter-rouge">com.girishgodage.springboot</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">"com.girishgodage.springboot"</span><span class="o">)</span>
	
	<span class="nd">@SpringBootApplication</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBootApllicationIn10Steps</span> <span class="o">{</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>

<h4 id="define-explicit-scans">Define explicit scans</h4>

<p>In this case, we explicitly mention a list of specific packages within the tree. Therefore, only those two paths in the package tree will now get scanned.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="nd">@ComponentScan</span><span class="o">({</span>
		<span class="s">"com.girishgodage.springboot.basics.springbootin10steps"</span><span class="o">,</span>
		<span class="s">"com.girishgodage.springboot.somethingelse"</span><span class="o">})</span>
	
	<span class="nd">@SpringBootApplication</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBootApllicationIn10Steps</span> <span class="o">{</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>

<p>As soon as you explicitly define a component scan, you are taking complete control. The default automatic scan that generally happens with Spring Boot will not longer take place. You need to specify the default package, as well as other packages.</p>

<h3 id="errors-related-to-component-scan">Errors Related To Component Scan</h3>

<p>Let’s look at some of the errors related to component scan and how you can solve them.</p>

<h4 id="typical-errors">Typical Errors</h4>

<p>When the controllers are not scanned, the URLs would not work. You would observe behaviors like this:</p>

<p><img src="/images/Capture-092-04.png" alt="image info" /></p>

<p>The other kind of error is when Spring does not find the dependencies. A typical error looks like this:</p>

<p><img src="/images/Capture-092-05.png" alt="image info" /></p>

<p>This means Spring expects at least one bean to auto-wire a dependency, but is not able to locate them.</p>

<h3 id="solving-errors-with-component-scan">Solving Errors With Component Scan</h3>

<p>Here are some of the things to look fo:</p>
<ul>
  <li>Make sure that you have the right annotation for the concerned bean - <code class="language-plaintext highlighter-rouge">@Controller</code>, <code class="language-plaintext highlighter-rouge">@Repository</code>, <code class="language-plaintext highlighter-rouge">@Component</code>.</li>
  <li>Make sure that the package that a component is present in, is part of the component scan.</li>
</ul>

<h3 id="summary">Summary</h3>

<p>In this article, we talked about component scan in the context of Spring and Spring Boot frameworks.The <code class="language-plaintext highlighter-rouge">@ComponentScan</code> annotation is used to specify packages to locate components in Spring. This is automatically done in the default package, in the case of Spring Boot.</p>

<hr />
<h3 id="spring-framework">Spring Framework</h3>

<p>This is the first article in a series of articles on Spring Framework:</p>

<ul>
  <li><a href="/blog/introduction-to-the-spring-framework" target="_blank">1 - Introduction To Spring Framework</a></li>
  <li><a href="/blog/spring-framework-what-is-a-dependency" target="_blank">2 - What Is A Dependency?</a></li>
  <li><a href="/blog/spring-framework-dependency-injection-inversion-of-control" target="_blank">3 - What Is Dependency Injection?</a></li>
  <li><a href="/blog/spring-and-spring-boot-what-is-component-scan" target="_blank">4 - What Is Component Scan?</a></li>
  <li><a href="/blog/spring-framework-architectures-and-modules" target="_blank">5 - Architecture of Spring Framework - Modularity and Spring Modules</a></li>
  <li><a href="/blog/spring-projects-with-examples" target="_blank">6 - What Are Spring Projects?</a></li>
  <li><a href="/blog/spring-basics-introduction-to-spring-batch" target="_blank">7 - Introduction To Spring Batch</a></li>
</ul>

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/spring-framework-dependency-injection-inversion-of-control" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/spring-framework-architectures-and-modules" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET