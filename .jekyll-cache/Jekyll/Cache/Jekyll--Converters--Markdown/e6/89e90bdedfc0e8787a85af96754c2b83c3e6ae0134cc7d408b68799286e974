I"³*<p>Most important feature of Spring Framework is Dependency Injection. To understand Dependency Injection, you need to understand the concept of a Dependency.</p>

<h2 id="you-will-learn">You will learn</h2>
<ul>
  <li>What is a Dependency?</li>
  <li>How are applications built? How is one layer dependent on another?</li>
  <li>How is a class dependent on another?</li>
  <li>How does the Spring Framework do Dependency Injection?</li>
</ul>

<p>In this article, we have a look at what a dependency is in general terms, and then in the context of the Spring framework.</p>

<h3 id="dependencies-at-a-high-level">Dependencies At A High Level</h3>

<p>We build enterprise applications in multiple layers:
<img src="/images/Capture-093-02.png" alt="image info" /></p>

<p>A typical Java application will have three layers in its architecture: web, business and data.</p>
<ul>
  <li>The web layer</li>
  <li>The business layer</li>
  <li>The data layer</li>
</ul>

<p>In the above scenario:</p>
<ul>
  <li>Web Layer depends on Business Layer. The business layer is a dependency for the web layer.</li>
  <li>Business layer depends on Data Layer. The data layer is a dependency for the business layer.</li>
</ul>

<h3 id="dependencies-at-class-level">Dependencies At Class Level</h3>

<p>Letâ€™s look at an example:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="nd">@Service</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClientBOImpl</span> <span class="n">implemented</span> <span class="nc">ClientBO</span> <span class="o">{</span>
		<span class="nd">@Autowired</span>
		<span class="nc">ProductDO</span> <span class="n">productDO</span><span class="o">;</span>
		<span class="nd">@Autowired</span>
		<span class="nc">ClientDO</span> <span class="n">clientDo</span><span class="o">;</span>

		<span class="nd">@Override</span>
		<span class="kd">public</span> <span class="nc">Amount</span> <span class="nf">getClientProductsSum</span><span class="o">(</span><span class="kt">long</span> <span class="n">cliendId</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>

		<span class="nd">@Override</span>
		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveChangedProducts</span><span class="o">(</span><span class="kt">long</span> <span class="n">clientId</span><span class="o">,</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Product</span><span class="o">&gt;</span> <span class="n">userEnteredProducts</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>

		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ClientBOImpl</code> is the business class, and it makes use of two data layer classes - <code class="language-plaintext highlighter-rouge">ProductDO</code> and <code class="language-plaintext highlighter-rouge">ClientDO</code>.</p>

<p>Letâ€™s now have a look at the business logic within ````ClientBOImpl```:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getClientProductsSum()</code> : This returns the sum of all products for a given client.</li>
  <li><code class="language-plaintext highlighter-rouge">saveChangedProducts()</code> : When products are modified on the application page, this method is called.</li>
</ul>

<p>Both methods in ClientBOImpl need either <code class="language-plaintext highlighter-rouge">ProductDO</code> or <code class="language-plaintext highlighter-rouge">ClientDO</code>. <code class="language-plaintext highlighter-rouge">ProductDO</code> and <code class="language-plaintext highlighter-rouge">ClientDO</code> are dependencies of ClientBOImpl.</p>

<h3 id="inputsoutputs-are-not-dependencies">Inputs/Outputs Are Not Dependencies</h3>

<p>If you look at <code class="language-plaintext highlighter-rouge">public Amount getClientProductsSum(long clientId)</code>, clientId is merely an input, not a dependency. Similarly, the total calculated amount returned by <code class="language-plaintext highlighter-rouge">getClientProductsSum</code> is an output, not a dependency.</p>

<h3 id="a-few-more-examples-of-dependencies">A Few More Examples Of Dependencies</h3>

<h4 id="example-1">Example-1</h4>

<p>Have a look at the following code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="nd">@Component</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComplexAlgorithmImpl</span> <span class="o">{</span>
		<span class="nd">@Autowired</span>
		<span class="kd">private</span> <span class="nc">SortAlgorithm</span> <span class="n">sortAlgorithm</span><span class="o">;</span>	
		<span class="c1">//...</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SortAlgorithm</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Component</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuickSortAlgorithm</span> <span class="kd">implements</span> <span class="nc">SortAlogrithm</span> <span class="o">{</span>
		<span class="c1">//...</span>
	<span class="o">}</span>

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code> performs a lot of complex logic, and sorting is one of the steps.</p>

<p>The <code class="language-plaintext highlighter-rouge">SortAlgorithm</code> is a dependency of <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code>.</p>

<p>Since <code class="language-plaintext highlighter-rouge">SortAlgorithm</code> is an interface, you can easily change the actual sort algorithm used by <code class="language-plaintext highlighter-rouge">ComplexAlgorithmImpl</code>, without changing its code.</p>

<h4 id="example-2">Example-2</h4>

<p>Consider the following code:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kn">import</span> <span class="nn">java.sql.ResultSet</span><span class="o">;</span>

	<span class="nd">@Repository</span>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonJdbcDao</span> <span class="o">{</span>
		<span class="nd">@Autowired</span>
		<span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

		<span class="kd">class</span> <span class="nc">PersonRowMapper</span> <span class="kd">implements</span> <span class="nc">RowMapper</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="o">{</span>
			<span class="nd">@Override</span>
			<span class="kd">public</span> <span class="nc">Person</span> <span class="nf">mapRow</span><span class="o">(</span><span class="nc">ResultSet</span> <span class="n">rs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rowNum</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
				<span class="c1">//...</span>
			<span class="o">}</span>
			<span class="c1">//...</span>
		<span class="o">}</span>
	<span class="o">}</span>

</code></pre></div></div>

<p>To execute a query on the database, <code class="language-plaintext highlighter-rouge">PersonJdbcDao</code> needs <code class="language-plaintext highlighter-rouge">JdbcTemplate</code>. Therefore, <code class="language-plaintext highlighter-rouge">JdbcTemplate</code> is a dependency of <code class="language-plaintext highlighter-rouge">PersonJdbcDao</code>.</p>

<p>Letâ€™s look at a simple method:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kd">public</span> <span class="nc">Person</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">queryForObject</span><span class="o">(</span><span class="c1">//...);</span>
	<span class="o">}</span>

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">id</code> is the input for this method, and the output returned is of type <code class="language-plaintext highlighter-rouge">Person</code>.</p>

<p>In the above method, we are making use of a dependeny <code class="language-plaintext highlighter-rouge">jdbcTemplate</code> . The inputs and outputs are not dependencies.</p>

<h3 id="summary">Summary</h3>

<p>In this article, we focused on the most important concept in Spring Framework - a dependency.</p>

<hr />
<h3 id="spring-framework">Spring Framework</h3>

<p>This is the first article in a series of articles on Spring Framework:</p>

<ul>
  <li><a href="/blog/introduction-to-the-spring-framework" target="_blank">1 - Introduction To Spring Framework</a></li>
  <li><a href="/blog/spring-framework-what-is-a-dependency" target="_blank">2 - What Is A Dependency?</a></li>
  <li><a href="/blog/spring-framework-dependency-injection-inversion-of-control" target="_blank">3 - What Is Dependency Injection?</a></li>
  <li><a href="/blog/spring-and-spring-boot-what-is-component-scan" target="_blank">4 - What Is Component Scan?</a></li>
  <li><a href="/blog/spring-framework-architectures-and-modules" target="_blank">5 - Architecture of Spring Framework - Modularity and Spring Modules</a></li>
  <li><a href="/blog/spring-projects-with-examples" target="_blank">6 - What Are Spring Projects?</a></li>
  <li><a href="/blog/spring-basics-introduction-to-spring-batch" target="_blank">7 - Introduction To Spring Batch</a></li>
</ul>

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/introduction-to-the-spring-framework" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/spring-framework-dependency-injection-inversion-of-control" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET