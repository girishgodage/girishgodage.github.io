I"˝0<p>For me, Single Responsibility Principle (SRP) is the most important design principle.</p>

<p>What is Single Responsibility Principle? How do you use it? How does it help with making your software better? Let‚Äôs get started.</p>

<h3 id="we-learn">We learn</h3>
<ul>
  <li>What is the Single Responsibility Principle?</li>
  <li>How do you apply this principle in developing and designing software applications?</li>
</ul>

<h2 id="what-is-the-single-responsibility-principle-srp">What Is The Single Responsibility Principle (SRP)?</h2>

<p>As the term says, this principle is all about having single responsibility.</p>

<p>In any software system, this principle is applicable at multiple levels</p>
<ul>
  <li>a variable</li>
  <li>a method</li>
  <li>a class</li>
  <li>a package</li>
  <li>a component</li>
  <li>application layers or</li>
  <li>the entire application itself</li>
</ul>

<h2 id="srp-for-methods">SRP For Methods</h2>

<p>Any method that you write should have a single responsibility -  it should either be a high-level method, or a low-level one. Only when a method has a single responsibility, you will be able to give it an appropriate name.</p>

<h2 id="srp-for-classes">SRP For Classes</h2>

<blockquote>
  <p>‚ÄúA class should have one, and only one reason to change‚Äù</p>
</blockquote>

<p>Let‚Äôs now have a look at a few examples of classes that violate this principle, and then look at how to correct the violation.</p>

<h3 id="example-1-the-task-class">Example 1: The <code class="language-plaintext highlighter-rouge">Task</code> class</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Task</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">downloadFile</span><span class="o">(</span><span class="nc">Strign</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">parseTheFile</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>

		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">persistTheData</span><span class="o">(</span><span class="nc">Data</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>
	<span class="o">}</span>

</code></pre></div></div>

<p>Does the class <code class="language-plaintext highlighter-rouge">Task</code> adhere to the single responsibility principle? Not at all, because it does a lot of different things:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">downloadFile()</code> downloads the file, by communicating over the internet</li>
  <li><code class="language-plaintext highlighter-rouge">parseTheFile()</code> parses the file contents</li>
  <li><code class="language-plaintext highlighter-rouge">persistTheData()</code> saves the data into a database</li>
</ul>

<p>A better solution would be to have separate classes for each of the responsibilities currently taken up by <code class="language-plaintext highlighter-rouge">Task</code>. Here is one such solution.</p>

<h4 id="identifying-the-low-level-classes">Identifying The Low-level Classes</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileDownloader</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">downloadFile</span><span class="o">()</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataParser</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">parseData</span><span class="o">()</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DatabaseStorer</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">storeIntoDatabase</span><span class="o">()</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>
	<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">FileDownloader</code> only downloads the file from the internet</li>
  <li><code class="language-plaintext highlighter-rouge">DataParser</code> only parses the downloaded file</li>
  <li><code class="language-plaintext highlighter-rouge">DatabaseStorer</code> only stores the parsed data, into the database</li>
</ul>

<p>These are all low-level classes here.</p>

<h4 id="adding-a-high-level-class">Adding A High-Level Class</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DownloadAndStore</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">doEverything</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">new</span> <span class="nf">FileDownloader</span><span class="o">().</span><span class="na">downloadFile</span><span class="o">();</span>
			<span class="k">new</span> <span class="nf">DataParser</span><span class="o">().</span><span class="na">parseData</span><span class="o">();</span>
			<span class="k">new</span> <span class="nf">DatabaseStorer</span><span class="o">().</span><span class="na">storeIntoDatabase</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>

</code></pre></div></div>

<p>Then, you can create a high-level class such as <code class="language-plaintext highlighter-rouge">DownloadAndStore</code> that invokes the functionality of these low-level classes to perform the complete task. Such an organization ensures that the low-level classes are reusable.</p>

<h3 id="example-2-the-employee-class">Example 2: The Employee Class</h3>

<p>Consider next, the <code class="language-plaintext highlighter-rouge">Employee</code> class shown below:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
		<span class="kd">public</span> <span class="nc">Money</span> <span class="nf">calculatePay</span><span class="o">()</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>
		<span class="kd">public</span> <span class="nc">String</span> <span class="nf">reportHours</span><span class="o">()</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>
		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
			<span class="c1">//...</span>
		<span class="o">}</span>
	<span class="o">}</span>

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Employee</code> concerns itself with not just calculating the pay of an employee, but also reporting hours for work, and saving these details to the database.</p>

<p>I will leave it as an exercise to fix the Employee class to adhere to SRP.</p>

<h2 id="srp-for-components">SRP For Components</h2>

<p>Every enterprise application has parts of its functionality organized as Components. For example, have a look at the diagram below:</p>

<p><img src="/img/sw_design/4/Capture-05-02.png" alt="image info" /></p>

<p>Here, the following components are of note:</p>

<ul>
  <li>Security component  takes care of user authentication and authorization. Designing such a component helps abstract applications from the low-level security details. All microservices can interact with this component to find out if a user has access.</li>
  <li>The Logging component - does the low level logging functionality</li>
  <li>The Archetype component - Can be used to create new microservices</li>
</ul>

<p>Each of these components have a single responsibility. If the Security component takes care of logging, it would become less reusable. Therefore, at the component level, a well-defined single responsibility is highly desirable.</p>

<h3 id="using-srp-for-common-infrastructure">Using SRP For Common Infrastructure</h3>

<p><img src="/img/sw_design/4/Capture-05-02.png" alt="image info" /></p>

<p>In the diagram shown above, you can identify the following infrastructure components:</p>

<ul>
  <li>Naming Service - Has the responsibility to retrieve the service location based on its name</li>
  <li>API Gateway - All requests go through the API Gateway. Common features like authentication, logging, rate limiting can be implemented in an API Gateway.</li>
  <li>Centralized Logging - Centralized store for logs from all microservices so that we can easily debug problems</li>
</ul>

<p>Even with these sub-systems, a single responsibility for each of them is most desirable.</p>

<h3 id="using-srp-for-application-layering">Using SRP For Application Layering</h3>

<p>Single responsibility is also an important factor in how you layer your application. Have a look at the following conceptual layers in a web application:</p>

<p><img src="/img/sw_design/4/Capture-05-03.png" alt="image info" /></p>

<ul>
  <li>Web Layer: All functionality concerned with direct user interaction sits here</li>
  <li>Business Layer: Houses the core business logic</li>
  <li>Data layer: All the functionality dealing with storing and retrieving data goes here</li>
</ul>

<p>If you had the need to talk to other systems, there would have been an additional Enterprise Messaging Layer added onto this setup.</p>

<h3 id="summary">Summary</h3>

<p>In this article, we talked about the Single Responsibility Principle. It is applicable at multiple levels to the parts of an application. This includes methods, classes, packages, components and application layers. With regards to classes, at a low level it means a class has only one reason to change.</p>

<p>In general, <strong>Single Responsibility ensures high cohesion, low coupling and enhanced reusability</strong>.</p>

<hr />

<h3 id="software-design-principles">Software Design Principles</h3>

<p>This is the article in a series of articles on important Software Design Principles:</p>

<ul>
  <li><a href="/blog/four-principles-of-simple-design" target="_blank">1 - Introduction to Four Principles Of Simple Design</a></li>
  <li><a href="/blog/software-design-seperation-of-concerns-with-examples" target="_blank">2 - Software Design - Separation Of Concerns - with examples</a></li>
  <li><a href="/blog/software-design-solid-principles" target="_blank">3 - Object Oriented Software Design - Solid Principles - with examples</a></li>
  <li><a href="/blog/software-design-single-responsibility-principle" target="_blank">4 - Software Design - Single Responsibility Principle - with examples</a></li>
  <li><a href="/blog/software-design-open-closed-principle" target="_blank">5 - Software Design - Open Closed Principle - with examples</a></li>
  <li><a href="/blog/software-design-dependency-inversion-principle" target="_blank">6 - Software Design - What is Dependency Inversion Principle?</a></li>
</ul>

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/software-design-solid-principles" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/software-design-open-closed-principle" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET