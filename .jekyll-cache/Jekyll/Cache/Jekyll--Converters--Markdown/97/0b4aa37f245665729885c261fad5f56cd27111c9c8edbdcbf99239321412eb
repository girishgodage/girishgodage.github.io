I"“º<h1 id="building-a-spa-front-end">Building a SPA Front End</h1>

<p>In this session, weâ€™ll add the code for the client application. Create a view for the conference sessions, details and speaker information.</p>

<blockquote>
  <p>This example uses the SpaServices templates which combines the FrontEnd and Web API by default. In this code sample/lab, the API (BackEnd) is a separate project therefore unneeded portions of the generated code can be removed and setting the url for the API will be handled in a way more apt to a production setup.</p>
</blockquote>

<blockquote>
  <p><em>Note:</em> This uses the 2.0 templates for SPA which are not included in .NET Core 2.0.x SDK. If you are on one of those SDKs you will need to follow the instructions <a href="https://docs.microsoft.com/en-us/aspnet/core/spa/index?view=aspnetcore-2.1#installation">here</a> to get the newer templates</p>
</blockquote>

<h2 id="creating-the-project">Creating the project</h2>

<p>Create the new SPA application using the <code class="language-plaintext highlighter-rouge">dotnet</code> CLI in the <strong>ConferencePlanner</strong> folder.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new angular <span class="nt">-n</span> FrontEndSpa <span class="nt">-o</span> src/FrontEndSpa
</code></pre></div></div>

<p>Add the new project to the solution</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet sln add src/FrontEnd/FrontEnd.csproj
</code></pre></div></div>

<h3 id="clean-up">Clean up</h3>

<p>Since the API is a separate project, some initial setup and cleaning out the unnecessary files can be done.</p>

<h4 id="remove-the-weather-components">Remove the Weather components</h4>

<ul>
  <li>delete the <strong>Controllers</strong> folder</li>
  <li>delete <strong>ClientApp/src/app/fetch-data</strong> folder</li>
  <li>remove all references (entire line) to <strong>FetchDataComponent</strong> in <strong>ClientApp/src/app/app.module.ts</strong></li>
  <li>remove the link from the <strong>nav-menu.component.html</strong></li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;li</span> <span class="na">[routerLinkActive]=</span><span class="s">'["link-active"]'</span> <span class="na">[routerLinkActiveOptions]=</span><span class="s">'{ exact: true }'</span><span class="nt">&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">[routerLink]=</span><span class="s">'["/"]'</span> <span class="na">(click)=</span><span class="s">'collapse()'</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">'glyphicon glyphicon-home'</span><span class="nt">&gt;&lt;/span&gt;</span> Counter
  <span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/li&gt;</span>
</code></pre></div></div>

<h3 id="remove-the-counter-components">Remove the Counter components</h3>

<ul>
  <li>delete <strong>ClientApp/src/app/counter</strong> folder</li>
  <li>remove all references (entire line) to <strong>CounterComponent</strong> in <strong>ClientApp/src/app/app.module.ts</strong></li>
  <li>remove the link from the <strong>nav-menu.component.html</strong></li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;li</span> <span class="na">[routerLinkActive]=</span><span class="s">'["link-active"]'</span><span class="nt">&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">[routerLink]=</span><span class="s">'["/counter"]'</span> <span class="na">(click)=</span><span class="s">'collapse()'</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">'glyphicon glyphicon-education'</span><span class="nt">&gt;&lt;/span&gt;</span> Counter
  <span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/li&gt;</span>
</code></pre></div></div>

<h2 id="setup-the-url-for-the-web-api-service">Setup the URL for the Web API Service</h2>

<p>The URL for the ASP.NET Core Web API service needs to be configured as a setting. Futhermore, makes sense to have the ability to use a different setting per environment. Angluar uses the <em>*environments</em> files to do so.</p>

<p>Open <strong>ClientApp/src/environments/environments.ts</strong> and change it to the following.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">environment</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">production</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">API_URL</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://localhost:50069</span><span class="dl">'</span>
<span class="p">};</span>
</code></pre></div></div>

<p>For a production setting, add the <code class="language-plaintext highlighter-rouge">API_URL</code> value to the <strong>environment.prod.ts</strong> file as well.</p>

<p>Open <strong>ClientApp/src/main.ts</strong> , add the <code class="language-plaintext highlighter-rouge">getApiUrl()</code> function and add the new <code class="language-plaintext highlighter-rouge">API_URL</code> to the providers</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">getApiUrl</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">environment</span><span class="p">.</span><span class="nx">API_URL</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">providers</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">provide</span><span class="p">:</span> <span class="dl">'</span><span class="s1">BASE_URL</span><span class="dl">'</span><span class="p">,</span> <span class="na">useFactory</span><span class="p">:</span> <span class="nx">getBaseUrl</span><span class="p">,</span> <span class="na">deps</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">provide</span><span class="p">:</span> <span class="dl">'</span><span class="s1">API_URL</span><span class="dl">'</span><span class="p">,</span> <span class="na">useFactory</span><span class="p">:</span> <span class="nx">getApiUrl</span><span class="p">,</span> <span class="na">deps</span><span class="p">:</span> <span class="p">[]</span> <span class="p">}</span>
<span class="p">];</span>
</code></pre></div></div>

<h2 id="create-and-wire-up-the-api-using-an-angular-service">Create and wire-up the API using an Angular Service</h2>

<blockquote>
  <p>Weâ€™ll create the models to map to the ConferenceDTO classes and a class to talk to the ASP.NET Core Web API service</p>
</blockquote>

<h3 id="create-the-model">Create the model</h3>

<p>Using the Angular CLI, create the class for the model to map the ConferenceDTO classes to TypeScript classes. Change directory to ClientApp, and create a <strong>model.ts</strong> using the following command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng g class shared/model
</code></pre></div></div>

<p>Add the following code to the file.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">export</span> <span class="kd">class</span> <span class="nx">Track</span> <span class="p">{</span>
    <span class="nl">trackID</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">conferenceID</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">export</span> <span class="kd">class</span> <span class="nx">Speaker</span> <span class="p">{</span>
    <span class="nl">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nx">bio</span><span class="p">?:</span> <span class="nx">any</span><span class="p">;</span>
    <span class="nx">webSite</span><span class="p">?:</span> <span class="nx">any</span><span class="p">;</span>
    <span class="nx">sessions</span><span class="p">?:</span> <span class="nx">Session</span><span class="p">[];</span>
  <span class="p">}</span>

  <span class="k">export</span> <span class="kd">class</span> <span class="nx">Session</span> <span class="p">{</span>
    <span class="nl">track</span><span class="p">:</span> <span class="nx">Track</span><span class="p">;</span>
    <span class="nl">speakers</span><span class="p">:</span> <span class="nx">Speaker</span><span class="p">[];</span>
    <span class="nl">tags</span><span class="p">:</span> <span class="nx">any</span><span class="p">[];</span>
    <span class="nl">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">conferenceID</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
    <span class="nl">title</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">abstract</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">startTime</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>
    <span class="nl">endTime</span><span class="p">:</span> <span class="nb">Date</span><span class="p">;</span>
    <span class="nl">duration</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">trackId</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<h3 id="create-the-data-service">Create the data service</h3>

<p>Create a data service to call the ASP.NET Core Web API.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng g service shared/data
</code></pre></div></div>

<p>Update the code to the following.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span><span class="p">,</span> <span class="nx">Inject</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Headers</span><span class="p">,</span> <span class="nx">Http</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/http</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="dl">'</span><span class="s1">rxjs/add/operator/toPromise</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">Session</span><span class="p">,</span> <span class="nx">Speaker</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./model</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">DataService</span> <span class="p">{</span>

  <span class="kr">private</span> <span class="nx">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Headers</span><span class="p">({</span> <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span> <span class="p">});</span>
  <span class="kr">private</span> <span class="nx">sessionUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">api/sessions</span><span class="dl">'</span><span class="p">;</span>
  <span class="kr">private</span> <span class="nx">speakerUrl</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">api/speakers</span><span class="dl">'</span><span class="p">;</span>
  <span class="cm">/**
   * init with Http
   */</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">http</span><span class="p">:</span> <span class="nx">Http</span><span class="p">,</span> <span class="p">@</span><span class="nd">Inject</span><span class="p">(</span><span class="dl">'</span><span class="s1">API_URL</span><span class="dl">'</span><span class="p">)</span> <span class="kr">private</span> <span class="nx">baseUrl</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

  <span class="nx">getSessions</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Session</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">baseUrl</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">sessionUrl</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">toPromise</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Session</span><span class="p">[]</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">getSession</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Session</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">baseUrl</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">sessionUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">toPromise</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Session</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">getSpeaker</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Speaker</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">baseUrl</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">speakerUrl</span><span class="p">}</span><span class="s2">/</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">toPromise</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Speaker</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">getSpeakers</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">Speaker</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">baseUrl</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">speakerUrl</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">toPromise</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Speaker</span><span class="p">[]</span><span class="o">&gt;</span><span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">handleError</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kr">private</span> <span class="nx">getData</span><span class="p">(</span><span class="nx">response</span><span class="p">:</span> <span class="nx">Response</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
  <span class="kr">private</span> <span class="nx">handleError</span><span class="p">(</span><span class="nx">error</span><span class="p">:</span> <span class="nx">any</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">any</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">An error occurred</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span> <span class="c1">// for demo purposes only</span>
    <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span> <span class="o">||</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="list-the-sessions">List the sessions</h2>

<blockquote>
  <p>Now that we have a service to talk to the API, weâ€™ll add the views to display a basic list of all sessions for the conference and validate the FrontEnd / API communication.</p>
</blockquote>

<h3 id="create-and-add-the-sessions-component">Create and add the Sessions component</h3>

<ol>
  <li>
    <p>Create the sessions component</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ng g component sessions
</code></pre></div>    </div>
  </li>
  <li>
    <p>Update the <strong>sessions.component.ts</strong> file to the following</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">Router</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/router</span><span class="dl">'</span><span class="p">;</span>

 <span class="k">import</span> <span class="p">{</span> <span class="nx">DataService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../shared/data.service</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">Session</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../shared/model</span><span class="dl">'</span><span class="p">;</span>

 <span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
     <span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">conf-sessions</span><span class="dl">'</span><span class="p">,</span>
     <span class="na">templateUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./sessions.component.html</span><span class="dl">'</span>
 <span class="p">})</span>
 <span class="k">export</span> <span class="kd">class</span> <span class="nx">SessionsComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
     <span class="nl">sessions</span><span class="p">:</span> <span class="nx">Session</span><span class="p">[];</span>

     <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">dataService</span><span class="p">:</span> <span class="nx">DataService</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

     <span class="nx">getSessions</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">dataService</span>
             <span class="p">.</span><span class="nx">getSessions</span><span class="p">()</span>
             <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">sessions</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">sessions</span> <span class="o">=</span> <span class="nx">sessions</span><span class="p">);</span>
     <span class="p">}</span>

     <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">getSessions</span><span class="p">();</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Update the template <strong>sessions.component.html</strong></p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"agenda"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;h1&gt;</span>My Conference 2017<span class="nt">&lt;/h1&gt;</span>

   <span class="nt">&lt;p</span> <span class="na">*ngIf=</span><span class="s">"!sessions"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;em&gt;</span>Loading...<span class="nt">&lt;/em&gt;</span>
   <span class="nt">&lt;/p&gt;</span>

   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;div</span> <span class="na">*ngFor=</span><span class="s">"let session of sessions"</span> <span class="na">class=</span><span class="s">"col-md-3"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel panel-default session"</span><span class="nt">&gt;</span>
         <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"panel-body"</span><span class="nt">&gt;</span>
           <span class="nt">&lt;p&gt;&lt;/p&gt;</span>
           <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"panel-title"</span><span class="nt">&gt;</span>
             <span class="nt">&lt;a</span> <span class="na">[routerLink]=</span><span class="s">"['/sessiondetail', session.id]"</span><span class="nt">&gt;&lt;/a&gt;</span>
           <span class="nt">&lt;/h3&gt;</span>
           <span class="nt">&lt;p</span> <span class="na">*ngFor=</span><span class="s">"let speaker of session.speakers"</span><span class="nt">&gt;</span>
             <span class="nt">&lt;em&gt;</span>
               <span class="nt">&lt;a</span> <span class="na">[routerLink]=</span><span class="s">"['/speaker', speaker.id]"</span><span class="nt">&gt;&lt;/a&gt;</span>
             <span class="nt">&lt;/em&gt;</span>
           <span class="nt">&lt;/p&gt;</span>
         <span class="nt">&lt;/div&gt;</span>
       <span class="nt">&lt;/div&gt;</span>
     <span class="nt">&lt;/div&gt;</span>
   <span class="nt">&lt;/div&gt;</span>
 <span class="nt">&lt;/div&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now that the components and data service is created, open <strong>app.module.ts</strong> to import the DataService component. Add the following to the top to import the module.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">import</span> <span class="p">{</span> <span class="nx">DataService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/shared/data.service</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>In the same file add the <strong>SessionsComponent</strong> in the <code class="language-plaintext highlighter-rouge">declarations</code> part of the <strong>@NgModule</strong></p>
  </li>
  <li>
    <p>Add the route for the sessions page to the <strong>RouterModule</strong></p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">{</span> <span class="nl">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sessions</span><span class="dl">'</span><span class="p">,</span> <span class="nx">component</span><span class="p">:</span> <span class="nx">SessionsComponent</span> <span class="p">},</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Add the <strong>DataService</strong> as a provider after the imports.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">providers</span><span class="p">:</span> <span class="p">[</span><span class="nx">DataService</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Finally, add the following in <strong>nav-menu.component.html</strong> to add a link to the sessions list from the left nav:</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;li</span> <span class="na">[routerLinkActive]=</span><span class="s">"['link-active']"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;a</span> <span class="na">[routerLink]=</span><span class="s">"['/sessions']"</span><span class="nt">&gt;</span>
         <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">'glyphicon glyphicon-th-list'</span><span class="nt">&gt;&lt;/span&gt;</span> Sessions
     <span class="nt">&lt;/a&gt;</span>
 <span class="nt">&lt;/li&gt;</span>
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="running-the-application">Running the application</h4>

<p>Start the Web API Application using Visual Studio or VS Code. It should start on http://localhost:50069</p>

<p>In another editor or process, start the FrontEndSpa application pressing F5 or running <code class="language-plaintext highlighter-rouge">dotnet run</code> and your SPA application will be available on http://localhost:5000. Since we are using Webpack with the hot module reload, you can continue to make changes to the Angular application and see the changes as you work through the rest of the code.</p>

<h3 id="creating-the-session-detail-page">Creating the Session Detail Page</h3>

<blockquote>
  <p>Now that we have a home page showing all the sessions, weâ€™ll create a page to show all the details of a specific session</p>
</blockquote>

<ol>
  <li>
    <p>Create the Session Detail component</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ng g component sessionDetail
</code></pre></div>    </div>
  </li>
  <li>
    <p>Update the component code to the following</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">import</span> <span class="dl">'</span><span class="s1">rxjs/add/operator/switchMap</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">ActivatedRoute</span><span class="p">,</span> <span class="nx">ParamMap</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/router</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">Location</span> <span class="p">}</span>                 <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/common</span><span class="dl">'</span><span class="p">;</span>

 <span class="k">import</span> <span class="p">{</span> <span class="nx">Session</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../shared/model</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">DataService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../shared/data.service</span><span class="dl">'</span><span class="p">;</span>

 <span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
   <span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">session-detail</span><span class="dl">'</span><span class="p">,</span>
   <span class="na">templateUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./sessiondetail.component.html</span><span class="dl">'</span>
 <span class="p">})</span>
 <span class="k">export</span> <span class="kd">class</span> <span class="nx">SessionDetailComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
   <span class="nl">session</span><span class="p">:</span> <span class="nx">Session</span><span class="p">;</span>

   <span class="kd">constructor</span><span class="p">(</span>
     <span class="k">private</span> <span class="nx">sessionService</span><span class="p">:</span> <span class="nx">DataService</span><span class="p">,</span>
     <span class="k">private</span> <span class="nx">route</span><span class="p">:</span> <span class="nx">ActivatedRoute</span><span class="p">,</span>
     <span class="k">private</span> <span class="nx">location</span><span class="p">:</span> <span class="nx">Location</span>
   <span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

   <span class="nx">ngOnInit</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>

     <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">.</span><span class="nx">paramMap</span>
       <span class="p">.</span><span class="nx">switchMap</span><span class="p">((</span><span class="na">params</span><span class="p">:</span> <span class="nx">ParamMap</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">sessionService</span><span class="p">.</span><span class="nx">getSession</span><span class="p">(</span><span class="o">+</span><span class="nx">params</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">)</span><span class="o">!</span><span class="p">))</span>
       <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">session</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">session</span> <span class="o">=</span> <span class="nx">session</span><span class="p">);</span>
   <span class="p">}</span>

   <span class="nx">goBack</span><span class="p">()</span> <span class="p">{</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">back</span><span class="p">();</span>
   <span class="p">}</span>

 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Update the template <strong>session-detail.component.html</strong></p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;ol</span> <span class="na">class=</span><span class="s">"breadcrumb"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">(click)=</span><span class="s">"goBack()"</span> <span class="na">style=</span><span class="s">"cursor: pointer"</span><span class="nt">&gt;</span>Back<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
     <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">[routerLink]=</span><span class="s">"['/sessions']"</span><span class="nt">&gt;</span>Agenda<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
     <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"active"</span><span class="nt">&gt;&lt;/li&gt;</span>
 <span class="nt">&lt;/ol&gt;</span>

 <span class="nt">&lt;h1&gt;&lt;/h1&gt;</span>
 <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"label label-default"</span><span class="nt">&gt;&lt;/span&gt;</span>

 <span class="nt">&lt;p</span> <span class="na">*ngFor=</span><span class="s">"let speaker of session.speakers"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;em&gt;</span>
       <span class="nt">&lt;a</span> <span class="na">[routerLink]=</span><span class="s">"['/speaker', speaker.id]"</span><span class="nt">&gt;&lt;/a&gt;</span>
     <span class="nt">&lt;/em&gt;</span>
   <span class="nt">&lt;/p&gt;</span>

 <span class="nt">&lt;p&gt;&lt;/p&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Add the route for the session detail page to the <strong>RouterModule</strong> also adding the <code class="language-plaintext highlighter-rouge">/:id</code> parameter to be passed along for the specific session.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">{</span> <span class="nl">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sessiondetail/:id</span><span class="dl">'</span><span class="p">,</span> <span class="nx">component</span><span class="p">:</span> <span class="nx">SessionDetailComponent</span> <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="create-the-speaker-detail-page">Create the Speaker Detail Page</h3>

<blockquote>
  <p>Weâ€™ll add a page to show details for a given speaker</p>
</blockquote>

<ol>
  <li>
    <p>Create the Speaker Detail component</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">ng</span> <span class="nx">g</span> <span class="nx">component</span> <span class="nx">speakerDetail</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Update the code for the component to the following</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">import</span> <span class="dl">'</span><span class="s1">rxjs/add/operator/switchMap</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">ActivatedRoute</span><span class="p">,</span> <span class="nx">ParamMap</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/router</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">Location</span> <span class="p">}</span>                 <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/common</span><span class="dl">'</span><span class="p">;</span>

 <span class="k">import</span> <span class="p">{</span> <span class="nx">DataService</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../shared/data.service</span><span class="dl">'</span><span class="p">;</span>
 <span class="k">import</span> <span class="p">{</span> <span class="nx">Speaker</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../shared/model</span><span class="dl">'</span><span class="p">;</span>

 <span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
   <span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">conf-speakerdetail</span><span class="dl">'</span><span class="p">,</span>
   <span class="na">templateUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./speakerdetail.component.html</span><span class="dl">'</span>
 <span class="p">})</span>
 <span class="k">export</span> <span class="kd">class</span> <span class="nx">SpeakerDetailComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
   <span class="nl">speaker</span><span class="p">:</span> <span class="nx">Speaker</span><span class="p">;</span>

   <span class="kd">constructor</span><span class="p">(</span>
     <span class="k">private</span> <span class="nx">dataService</span><span class="p">:</span> <span class="nx">DataService</span><span class="p">,</span>
     <span class="k">private</span> <span class="nx">route</span><span class="p">:</span> <span class="nx">ActivatedRoute</span><span class="p">,</span>
     <span class="k">private</span> <span class="nx">location</span><span class="p">:</span> <span class="nx">Location</span>
   <span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

   <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">.</span><span class="nx">paramMap</span>
     <span class="p">.</span><span class="nx">switchMap</span><span class="p">((</span><span class="nx">params</span><span class="p">:</span> <span class="nx">ParamMap</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">dataService</span><span class="p">.</span><span class="nx">getSpeaker</span><span class="p">(</span><span class="o">+</span><span class="nx">params</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">)</span><span class="o">!</span><span class="p">))</span>
     <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">speaker</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">speaker</span><span class="o">=</span> <span class="nx">speaker</span><span class="p">);</span>
   <span class="p">}</span>

   <span class="nx">goBack</span><span class="p">()</span> <span class="p">{</span>
     <span class="k">this</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">back</span><span class="p">();</span>
   <span class="p">}</span>

 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Update the template <strong>speaker-detail.component.html</strong> to the following</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;ol</span> <span class="na">class=</span><span class="s">"breadcrumb"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">(click)=</span><span class="s">"goBack()"</span> <span class="na">style=</span><span class="s">"cursor: pointer"</span><span class="nt">&gt;</span>Back<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
   <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">[routerLink]=</span><span class="s">"['/speakers']"</span><span class="nt">&gt;</span>Speakers<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
   <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"active"</span><span class="nt">&gt;&lt;/li&gt;</span>
 <span class="nt">&lt;/ol&gt;</span>

 <span class="nt">&lt;h2&gt;&lt;/h2&gt;</span>

 <span class="nt">&lt;p&gt;&lt;/p&gt;</span>

 <span class="nt">&lt;h3&gt;</span>Sessions<span class="nt">&lt;/h3&gt;</span>
 <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-md-5"</span><span class="nt">&gt;</span>
       <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"list-group"</span><span class="nt">&gt;</span>
         <span class="nt">&lt;li</span> <span class="na">*ngFor=</span><span class="s">"let session of speaker.sessions"</span> <span class="na">class=</span><span class="s">"list-group-item"</span><span class="nt">&gt;</span>
           <span class="nt">&lt;a</span> <span class="na">[routerLink]=</span><span class="s">"['/sessiondetail', session.id]"</span><span class="nt">&gt;&lt;/a&gt;</span>
         <span class="nt">&lt;/li&gt;</span>
     <span class="nt">&lt;/ul&gt;</span>
   <span class="nt">&lt;/div&gt;</span>
 <span class="nt">&lt;/div&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Add the route for the speaker detail page to the <strong>RouterModule</strong> also adding the <code class="language-plaintext highlighter-rouge">/:id</code> parameter to be passed along for the specific session.</p>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">{</span> <span class="nl">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">speaker/:id</span><span class="dl">'</span><span class="p">,</span> <span class="nx">component</span><span class="p">:</span> <span class="nx">SpeakerDetailComponent</span> <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="challenge--bonus">Challenge / Bonus</h3>

<p>Add a Speakers Listing Page and link from it to the <code class="language-plaintext highlighter-rouge">/speakerdetail</code> route</p>

<hr />
<h2 id="sessions">Sessions</h2>

<p>This is series of articles on Building Conf planner app with Asp.net Core:</p>

<ul>
  <li><a href="/blog/CreateBackEndAPIproject" target="_blank">1 - Build the back-end API with basic EF model</a></li>
  <li><a href="/blog/BuildoutBackEndandRefactor" target="_blank">2 - Finish the back-end API and EF model, refactor into view modelsl</a></li>
  <li><a href="/blog/Addfront-endrenderagendasetupfront-endmodels" target="_blank">3 - Add front-end, render agenda, set up front-end models</a></li>
  <li><a href="/blog/Addauthfeatures" target="_blank">4 - Add authentication, add admin policy, allow editing sessions, users can sign-in with Identity, custom auth tag helper</a></li>
  <li><a href="/blog/Addpersonalagenda" target="_blank">5 - Add user association and personal agenda</a></li>
  <li><a href="/blog/ProductionReadinessandDeployment" target="_blank">6 - Deployment, Azure and other production environments, configuring environments, diagnostics</a></li>
  <li><a href="/blog/Challenges" target="_blank">7 - Challenges</a></li>
  <li><a href="/blog/SPAFrontEnd" target="_blank">8 - SPA front-end </a></li>
</ul>

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/Challenges" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/SPAFrontEnd" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET