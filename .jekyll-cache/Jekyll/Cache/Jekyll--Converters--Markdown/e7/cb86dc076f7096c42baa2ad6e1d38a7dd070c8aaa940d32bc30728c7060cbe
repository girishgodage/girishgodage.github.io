I"µ™<p>Letâ€™s learn the basics of microservices and microservices architectures. We will also start looking at a basic implementation of a microservice with Spring Boot. We will create a couple of microservices and get them to talk to each other using Eureka Naming Server and Ribbon for Client Side Load Balancing.</p>

<p>This is part 2 of this series. In this part, we will focus on creating the Forex Microservice.</p>

<h2 id="you-will-learn">You will learn</h2>
<ul>
  <li>How to create a microservice with Spring Boot?</li>
  <li>How to create a JPA Entity and Resource?</li>
  <li>How to get Spring MVC, Spring Boot, JPA, Hibernate and H2 to work together?</li>
</ul>

<h2 id="resources-overview">Resources Overview</h2>

<p>Forex Service (FS) is the Service Provider. It provides currency exchange values for various currency. Letâ€™s assume that it talks to a Forex Exchange and provides the current conversion value between currencies.</p>

<p>An example request and response is shown below:</p>

<p>GET to http://localhost:8000/currency-exchange/from/EUR/to/INR</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">{</span><span class="w">
    </span><span class="err">id:</span><span class="w"> </span><span class="mi">10002</span><span class="p">,</span><span class="w">
    </span><span class="err">from:</span><span class="w"> </span><span class="s2">"EUR"</span><span class="p">,</span><span class="w">
    </span><span class="err">to:</span><span class="w"> </span><span class="s2">"INR"</span><span class="p">,</span><span class="w">
    </span><span class="err">conversionMultiple:</span><span class="w"> </span><span class="mi">75</span><span class="p">,</span><span class="w">
    </span><span class="err">port:</span><span class="w"> </span><span class="mi">8000</span><span class="p">,</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The request above is the currency exchange value for EUR to INR. In the response, conversionMultiple is 75.</p>

<h2 id="project-code-structure">Project Code Structure</h2>

<p>Following screenshot shows the structure of the project we will create.</p>

<p><img src="/images/spring-boot-microservice-forex-service-project-structure.png" alt="Image" title="Project Structure" /></p>

<p>A few details:</p>
<ul>
  <li>SpringBootMicroserviceForexServiceApplication.java - The Spring Boot Application class generated with Spring Initializer. This class acts as the launching point for application.</li>
  <li><code class="language-plaintext highlighter-rouge">pom.xml</code> - Contains all the dependencies needed to build this project. We will use Spring Boot Starter Web and JPA.</li>
  <li><code class="language-plaintext highlighter-rouge">ExchangeValue.java</code> - Exchange Value Entity</li>
  <li><code class="language-plaintext highlighter-rouge">ExchangeValueRepository.java</code> - ExchangeValue JPA Repository. This is created using Spring Data JpaRepository.</li>
  <li><code class="language-plaintext highlighter-rouge">ForexController.java</code> - Spring Rest Controller exposing the forex conversion service.</li>
  <li>data.sql - Initial data for the exchange_value table. Spring Boot would execute this script after the tables are created from the entities.</li>
</ul>

<h2 id="tools-you-will-need">Tools you will need</h2>
<ul>
  <li>Maven 3.0+ is your build tool</li>
  <li>Your favorite IDE. We use Eclipse.</li>
  <li>JDK 1.8+</li>
</ul>

<h2 id="bootstrapping-with-spring-initializr">Bootstrapping with Spring Initializr</h2>

<p>Creating a Microservice with Spring Initializr is a cake walk.</p>

<p>Spring Initializr <a href="http://start.spring.io/" target="_blank">http://start.spring.io/</a> is great tool to bootstrap your Spring Boot projects.</p>

<p>You can create a wide variety of projects using Spring Initializr.</p>

<p><img src="/images/Spring-Initializr-Web-JPA.png" alt="Image" title="Web, JPA, Hibernate and Developer Tools" /></p>

<p>Following steps have to be done for a Web Services project</p>

<ul>
  <li>Launch Spring Initializr and choose the following
    <ul>
      <li>Choose <code class="language-plaintext highlighter-rouge">com.girishgodage.springboot.microservice.example.forex</code> as Group</li>
      <li>Choose <code class="language-plaintext highlighter-rouge">spring-boot-microservice-forex-service</code> as Artifact</li>
      <li>Choose following dependencies
        <ul>
          <li>Web</li>
          <li>DevTools</li>
          <li>Starter JPA</li>
          <li>H2</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Click Generate Project.</li>
  <li>Import the project into Eclipse. File -&gt; Import -&gt; Existing Maven Project.</li>
</ul>

<h2 id="creating-exchange-value-entity">Creating Exchange Value Entity</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  @Entity
  public class ExchangeValue {
    
    @Id
    private Long id;
    
    @Column(name="currency_from")
    private String from;
    
    @Column(name="currency_to")
    private String to;
    
    private BigDecimal conversionMultiple;
    private int port;
    
    public ExchangeValue() {
      
    }
    

    public ExchangeValue(Long id, String from, String to, BigDecimal conversionMultiple) {
      super();
      this.id = id;
      this.from = from;
      this.to = to;
      this.conversionMultiple = conversionMultiple;
    }

    public Long getId() {
      return id;
    }

    public String getFrom() {
      return from;
    }

    public String getTo() {
      return to;
    }

    public BigDecimal getConversionMultiple() {
      return conversionMultiple;
    }
    
    public int getPort() {
      return port;
    }

    public void setPort(int port) {
      this.port = port;
    }

  }
</code></pre></div></div>

<p>Important things to note:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Entity</code>: Specifies that the class is an entity. This annotation is applied to the entity class.</li>
  <li><code class="language-plaintext highlighter-rouge">@Id</code>: Specifies the primary key of an entity.</li>
</ul>

<h3 id="creating-exchange-value-jpa-repository">Creating Exchange Value JPA Repository</h3>

<p>/spring-boot-microservice-forex-service/src/main/java/com/girishgodage/springboot/microservice/example/forex/ExchangeValueRepository.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">com.girishgodage.springboot.microservice.example.forex</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ExchangeValueRepository</span> <span class="kd">extends</span> 
      <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">ExchangeValue</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;{</span>
    <span class="nc">ExchangeValue</span> <span class="nf">findByFromAndTo</span><span class="o">(</span><span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nc">String</span> <span class="n">to</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>Notes</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">public interface ExchangeValueRepository extends JpaRepository&lt;ExchangeValue, Long&gt;</code> - We are extending JpaRepository using two generics - ExchangeValue &amp; Long. ExchangeValue is the entity that is being managed and the primary key of ExchangeValue is Long.</li>
  <li><code class="language-plaintext highlighter-rouge">ExchangeValue findByFromAndTo(String from, String to);</code>  - We would want to query the conversion value from one currency to another. We are defining a query method for it.</li>
</ul>

<h2 id="create-the-resource---forexcontroller">Create the Resource - ForexController</h2>

<p>/spring-boot-microservice-forex-service/src/main/java/com/girishgodage/springboot/microservice/example/forex/ForexController.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@RestController</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ForexController</span> <span class="o">{</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">Environment</span> <span class="n">environment</span><span class="o">;</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ExchangeValueRepository</span> <span class="n">repository</span><span class="o">;</span>
    
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/currency-exchange/from/{from}/to/{to}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ExchangeValue</span> <span class="nf">retrieveExchangeValue</span>
      <span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">to</span><span class="o">){</span>
      
      <span class="nc">ExchangeValue</span> <span class="n">exchangeValue</span> <span class="o">=</span> 
          <span class="n">repository</span><span class="o">.</span><span class="na">findByFromAndTo</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">to</span><span class="o">);</span>
      
      <span class="n">exchangeValue</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span>
          <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">environment</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"local.server.port"</span><span class="o">)));</span>
      
      <span class="k">return</span> <span class="n">exchangeValue</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>Notes</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@RestController public class ForexController {</code> - Create a Controller to expose a Rest Service</li>
  <li><code class="language-plaintext highlighter-rouge">@Autowired private Environment environment</code> - We would want to return the server port back. This will help us identify which instance service is giving the response back.</li>
  <li><code class="language-plaintext highlighter-rouge">@Autowired private ExchangeValueRepository repository</code> - Autowire the repository.</li>
  <li><code class="language-plaintext highlighter-rouge">ExchangeValue exchangeValue = repository.findByFromAndTo(from, to)</code> - Get the exchange value from the database.</li>
  <li><code class="language-plaintext highlighter-rouge">exchangeValue.setPort(Integer.parseInt(environment.getProperty("local.server.port")))</code> - Get the port from environment and set it into the response bean.</li>
</ul>

<h2 id="configure-application-name-and-a-few-other-configuration">Configure Application Name and a few other configuration</h2>

<p>/spring-boot-microservice-forex-service/src/main/resources/application.properties</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="py">spring.application.name</span><span class="p">=</span><span class="s">forex-service</span>
  <span class="py">server.port</span><span class="p">=</span><span class="s">8000</span>

  <span class="py">spring.jpa.show-sql</span><span class="p">=</span><span class="s">true</span>
  <span class="py">spring.h2.console.enabled</span><span class="p">=</span><span class="s">true</span>

</code></pre></div></div>

<p>We are assigning a port of 8000 for this application and enabling debug logging.</p>

<h2 id="insert-some-test-data-into-datasql">Insert some test data into data.sql</h2>

<p>Letâ€™s insert some test data by creating a file called data.sql. Spring Boot Auto Configuration ensures that this data is loaded up when application starts up.</p>

<p>/spring-boot-microservice-forex-service/src/main/resources/data.sql</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  insert into exchange_value(id,currency_from,currency_to,conversion_multiple,port)
  values(10001,'USD','INR',65,0);
  insert into exchange_value(id,currency_from,currency_to,conversion_multiple,port)
  values(10002,'EUR','INR',75,0);
  insert into exchange_value(id,currency_from,currency_to,conversion_multiple,port)
  values(10003,'AUD','INR',25,0);
</code></pre></div></div>

<h2 id="test-forex-microservice">Test Forex Microservice</h2>

<p>GET to http://localhost:8000/currency-exchange/from/EUR/to/INR</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">{</span><span class="w">
    </span><span class="err">id:</span><span class="w"> </span><span class="mi">10002</span><span class="p">,</span><span class="w">
    </span><span class="err">from:</span><span class="w"> </span><span class="s2">"EUR"</span><span class="p">,</span><span class="w">
    </span><span class="err">to:</span><span class="w"> </span><span class="s2">"INR"</span><span class="p">,</span><span class="w">
    </span><span class="err">conversionMultiple:</span><span class="w"> </span><span class="mi">75</span><span class="p">,</span><span class="w">
    </span><span class="err">port:</span><span class="w"> </span><span class="mi">8000</span><span class="p">,</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="complete-code-example">Complete Code Example</h2>

<h6 id="spring-boot-microservice-forex-servicepomxml">/spring-boot-microservice-forex-service/pom.xml</h6>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
  <span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

    <span class="nt">&lt;groupId&gt;</span>com.girishgodage.springboot.microservice.example.forex<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-microservice-forex-service<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>

    <span class="nt">&lt;name&gt;</span>spring-boot-microservice-forex-service<span class="nt">&lt;/name&gt;</span>
    <span class="nt">&lt;description&gt;</span>Microservices with Spring Boot and Spring Cloud - Forex Service<span class="nt">&lt;/description&gt;</span>

    <span class="nt">&lt;parent&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>2.0.0.RELEASE<span class="nt">&lt;/version&gt;</span>
      <span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
    <span class="nt">&lt;/parent&gt;</span>

    <span class="nt">&lt;properties&gt;</span>
      <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
      <span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
      <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
      <span class="nt">&lt;spring-cloud.version&gt;</span>Finchley.M8<span class="nt">&lt;/spring-cloud.version&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>

    <span class="nt">&lt;dependencies&gt;</span>
      <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;/dependency&gt;</span>
      <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;/dependency&gt;</span>

      <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
      <span class="nt">&lt;/dependency&gt;</span>
      <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>com.h2database<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>h2<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
      <span class="nt">&lt;/dependency&gt;</span>
      <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
      <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>

    <span class="nt">&lt;dependencyManagement&gt;</span>
      <span class="nt">&lt;dependencies&gt;</span>
        <span class="nt">&lt;dependency&gt;</span>
          <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
          <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
          <span class="nt">&lt;version&gt;</span>${spring-cloud.version}<span class="nt">&lt;/version&gt;</span>
          <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
          <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
      <span class="nt">&lt;/dependencies&gt;</span>
    <span class="nt">&lt;/dependencyManagement&gt;</span>

    <span class="nt">&lt;build&gt;</span>
      <span class="nt">&lt;plugins&gt;</span>
        <span class="nt">&lt;plugin&gt;</span>
          <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
          <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;/plugin&gt;</span>
      <span class="nt">&lt;/plugins&gt;</span>
    <span class="nt">&lt;/build&gt;</span>

    <span class="nt">&lt;repositories&gt;</span>
      <span class="nt">&lt;repository&gt;</span>
        <span class="nt">&lt;id&gt;</span>spring-snapshots<span class="nt">&lt;/id&gt;</span>
        <span class="nt">&lt;name&gt;</span>Spring Snapshots<span class="nt">&lt;/name&gt;</span>
        <span class="nt">&lt;url&gt;</span>https://repo.spring.io/snapshot<span class="nt">&lt;/url&gt;</span>
        <span class="nt">&lt;snapshots&gt;</span>
          <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
        <span class="nt">&lt;/snapshots&gt;</span>
      <span class="nt">&lt;/repository&gt;</span>
      <span class="nt">&lt;repository&gt;</span>
        <span class="nt">&lt;id&gt;</span>spring-milestones<span class="nt">&lt;/id&gt;</span>
        <span class="nt">&lt;name&gt;</span>Spring Milestones<span class="nt">&lt;/name&gt;</span>
        <span class="nt">&lt;url&gt;</span>https://repo.spring.io/milestone<span class="nt">&lt;/url&gt;</span>
        <span class="nt">&lt;snapshots&gt;</span>
          <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
        <span class="nt">&lt;/snapshots&gt;</span>
      <span class="nt">&lt;/repository&gt;</span>
    <span class="nt">&lt;/repositories&gt;</span>

    <span class="nt">&lt;pluginRepositories&gt;</span>
      <span class="nt">&lt;pluginRepository&gt;</span>
        <span class="nt">&lt;id&gt;</span>spring-snapshots<span class="nt">&lt;/id&gt;</span>
        <span class="nt">&lt;name&gt;</span>Spring Snapshots<span class="nt">&lt;/name&gt;</span>
        <span class="nt">&lt;url&gt;</span>https://repo.spring.io/snapshot<span class="nt">&lt;/url&gt;</span>
        <span class="nt">&lt;snapshots&gt;</span>
          <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
        <span class="nt">&lt;/snapshots&gt;</span>
      <span class="nt">&lt;/pluginRepository&gt;</span>
      <span class="nt">&lt;pluginRepository&gt;</span>
        <span class="nt">&lt;id&gt;</span>spring-milestones<span class="nt">&lt;/id&gt;</span>
        <span class="nt">&lt;name&gt;</span>Spring Milestones<span class="nt">&lt;/name&gt;</span>
        <span class="nt">&lt;url&gt;</span>https://repo.spring.io/milestone<span class="nt">&lt;/url&gt;</span>
        <span class="nt">&lt;snapshots&gt;</span>
          <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
        <span class="nt">&lt;/snapshots&gt;</span>
      <span class="nt">&lt;/pluginRepository&gt;</span>
    <span class="nt">&lt;/pluginRepositories&gt;</span>


  <span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>
<hr />

<h6 id="spring-boot-microservice-forex-servicesrcmainjavacomgirishgodagespringbootmicroserviceexampleforexexchangevaluejava">/spring-boot-microservice-forex-service/src/main/java/com/girishgodage/springboot/microservice/example/forex/ExchangeValue.java</h6>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">com.girishgodage.springboot.microservice.example.forex</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>

  <span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>

  <span class="nd">@Entity</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExchangeValue</span> <span class="o">{</span>
    
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"currency_from"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">from</span><span class="o">;</span>
    
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"currency_to"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">to</span><span class="o">;</span>
    
    <span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">conversionMultiple</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">ExchangeValue</span><span class="o">()</span> <span class="o">{</span>
      
    <span class="o">}</span>
    

    <span class="kd">public</span> <span class="nf">ExchangeValue</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nc">String</span> <span class="n">to</span><span class="o">,</span> <span class="nc">BigDecimal</span> <span class="n">conversionMultiple</span><span class="o">)</span> <span class="o">{</span>
      <span class="kd">super</span><span class="o">();</span>
      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">from</span> <span class="o">=</span> <span class="n">from</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">to</span> <span class="o">=</span> <span class="n">to</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">conversionMultiple</span> <span class="o">=</span> <span class="n">conversionMultiple</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getFrom</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">from</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getTo</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">to</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">getConversionMultiple</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">conversionMultiple</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPort</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">port</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPort</span><span class="o">(</span><span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="n">port</span><span class="o">;</span>
    <span class="o">}</span>

  <span class="o">}</span>
</code></pre></div></div>
<hr />

<h6 id="spring-boot-microservice-forex-servicesrcmainjavacomgirishgodagespringbootmicroserviceexampleforexexchangevaluerepositoryjava">/spring-boot-microservice-forex-service/src/main/java/com/girishgodage/springboot/microservice/example/forex/ExchangeValueRepository.java</h6>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">com.girishgodage.springboot.microservice.example.forex</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ExchangeValueRepository</span> <span class="kd">extends</span> 
      <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">ExchangeValue</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;{</span>
    <span class="nc">ExchangeValue</span> <span class="nf">findByFromAndTo</span><span class="o">(</span><span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nc">String</span> <span class="n">to</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div></div>
<hr />

<h6 id="spring-boot-microservice-forex-servicesrcmainjavacomgirishgodagespringbootmicroserviceexampleforexforexcontrollerjava">/spring-boot-microservice-forex-service/src/main/java/com/girishgodage/springboot/microservice/example/forex/ForexController.java</h6>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">com.girishgodage.springboot.microservice.example.forex</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.math.BigDecimal</span><span class="o">;</span>

  <span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.core.env.Environment</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PathVariable</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>

  <span class="nd">@RestController</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ForexController</span> <span class="o">{</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">Environment</span> <span class="n">environment</span><span class="o">;</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">ExchangeValueRepository</span> <span class="n">repository</span><span class="o">;</span>
    
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/currency-exchange/from/{from}/to/{to}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ExchangeValue</span> <span class="nf">retrieveExchangeValue</span>
      <span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">from</span><span class="o">,</span> <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">to</span><span class="o">){</span>
      
      <span class="nc">ExchangeValue</span> <span class="n">exchangeValue</span> <span class="o">=</span> 
          <span class="n">repository</span><span class="o">.</span><span class="na">findByFromAndTo</span><span class="o">(</span><span class="n">from</span><span class="o">,</span> <span class="n">to</span><span class="o">);</span>
      
      <span class="n">exchangeValue</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span>
          <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">environment</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"local.server.port"</span><span class="o">)));</span>
      
      <span class="k">return</span> <span class="n">exchangeValue</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>
<hr />

<h6 id="spring-boot-microservice-forex-servicesrcmainjavacomgirishgodagespringbootmicroserviceexampleforexspringbootmicroserviceforexserviceapplicationjava">/spring-boot-microservice-forex-service/src/main/java/com/girishgodage/springboot/microservice/example/forex/SpringBootMicroserviceForexServiceApplication.java</h6>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">com.girishgodage.springboot.microservice.example.forex</span><span class="o">;</span>

  <span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>

  <span class="nd">@SpringBootApplication</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBootMicroserviceForexServiceApplication</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringBootMicroserviceForexServiceApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>
<hr />

<h6 id="spring-boot-microservice-forex-servicesrcmainresourcesapplicationproperties">/spring-boot-microservice-forex-service/src/main/resources/application.properties</h6>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="py">spring.application.name</span><span class="p">=</span><span class="s">forex-service</span>
  <span class="py">server.port</span><span class="p">=</span><span class="s">8000</span>

  <span class="py">spring.jpa.show-sql</span><span class="p">=</span><span class="s">true</span>
  <span class="py">spring.h2.console.enabled</span><span class="p">=</span><span class="s">true</span>

</code></pre></div></div>
<hr />

<h6 id="spring-boot-microservice-forex-servicesrcmainresourcesdatasql">/spring-boot-microservice-forex-service/src/main/resources/data.sql</h6>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  insert into exchange_value(id,currency_from,currency_to,conversion_multiple,port)
  values(10001,'USD','INR',65,0);
  insert into exchange_value(id,currency_from,currency_to,conversion_multiple,port)
  values(10002,'EUR','INR',75,0);
  insert into exchange_value(id,currency_from,currency_to,conversion_multiple,port)
  values(10003,'AUD','INR',25,0);
</code></pre></div></div>
<hr />

<h6 id="spring-boot-microservice-forex-servicesrctestjavacomgirishgodagespringbootmicroserviceexampleforexspringbootmicroserviceforexserviceapplicationtestsjava">/spring-boot-microservice-forex-service/src/test/java/com/girishgodage/springboot/microservice/example/forex/SpringBootMicroserviceForexServiceApplicationTests.java</h6>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">package</span> <span class="nn">com.girishgodage.springboot.microservice.example.forex</span><span class="o">;</span>

  <span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.boot.test.context.SpringBootTest</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringRunner</span><span class="o">;</span>

  <span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
  <span class="nd">@SpringBootTest</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBootMicroserviceForexServiceApplicationTests</span> <span class="o">{</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextLoads</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

  <span class="o">}</span>
</code></pre></div></div>
<hr />

<hr />
<h3 id="springboot-microservice">SpringBoot Microservice</h3>

<p>This is a 5 Part Article Series</p>

<p>Microservices with Spring Boot</p>
<ul>
  <li>Part 1 - <a href="/blog/creating-microservices-with-spring-boot-part-1-getting-started" target="_blank">Getting Started with Microservices Architecture</a></li>
  <li>Part 2 - <a href="/blog/creating-microservices-with-spring-boot-part-2-forex-microservice" target="_blank">Creating Forex Microservice</a></li>
  <li>Part 3 - <a href="/blog/creating-microservices-with-spring-boot-part-3-currency-conversion-microservice" target="_blank">Creating Currency Conversion Microservice</a></li>
  <li>Part 4 - <a href="/blog/microservices-with-spring-boot-part-4-ribbon-for-load-balancing" target="_blank">Using Ribbon for Load Balancing</a></li>
  <li>Part 5 - <a href="/blog/microservices-with-spring-boot-part-5-eureka-naming-server" target="_blank">Using Eureka Naming Server</a></li>
</ul>

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/creating-microservices-with-spring-boot-part-1-getting-started" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/creating-microservices-with-spring-boot-part-3-currency-conversion-microservice" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET