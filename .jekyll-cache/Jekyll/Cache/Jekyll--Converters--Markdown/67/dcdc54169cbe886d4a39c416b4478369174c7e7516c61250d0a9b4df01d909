I"	¬<h2 id="building-out-the-back-end">Building out the Back End</h2>
<p>In this session, we‚Äôll add the rest of our models and controllers that expose them. We‚Äôll also refactor our application, moving our DTOs to a shared project so they can be used by our front-end application later.</p>

<h2 id="add-a-conferencedto-project">Add a ConferenceDTO project</h2>
<blockquote>
  <p>We‚Äôll start by creating the new shared project to hold our data transfer objects.</p>
  <h3 id="adding-the-conferencedto-project-using-visual-studio">Adding the ConferenceDTO Project using Visual Studio</h3>
  <ol>
    <li>If using Visual Studio, right-click on the Solution and select <em>Add</em> / <em>New Project‚Ä¶</em>.</li>
    <li>Select <em>.NET Standard</em> from the project types on the left and select the <em>Class Library (.NET Standard)</em> template. Name the project ConferenceDTO and press OK.
<img src="/img/aspdotnetcore/confplanner/3/vs2019-create-dto-project.png" alt="" /></li>
    <li>Delete the generated <code class="language-plaintext highlighter-rouge">Class1.cs</code> file from this new project.
<img src="/img/aspdotnetcore/confplanner/3/31.png" alt="" /></li>
    <li>Right-click the ‚ÄòDependencies‚Äô node under the BackENd project, select ‚ÄúAdd Reference‚Ä¶‚Äù and put a checkmark near ConferenceDTO.
<img src="/img/aspdotnetcore/confplanner/3/32.png" alt="" />
      <h3 id="adding-the-conferencedto-project-via-the-command-line">Adding the ConferenceDTO project via the Command Line</h3>
    </li>
    <li>Open a command prompt and navigate to the root <code class="language-plaintext highlighter-rouge">ConferencePlanner</code> directory.</li>
    <li>Run the following command:
      <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">dotnet new classlib -o ConferenceDTO -f netstandard2.0
</span></code></pre></div>      </div>
    </li>
    <li>Next we‚Äôll need to add a reference to the ConferenceDTO project from the BackEnd project. From the command line, navigate to the BackEnd project directory and execute the following command:
      <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">dotnet add reference ../ConferenceDTO
</span></code></pre></div>      </div>
    </li>
    <li>Add the ConferenceDTO project to the solution:
      <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet sln add ConferenceDTO/ConferenceDTO.csproj
</code></pre></div>      </div>
    </li>
  </ol>
</blockquote>

<h2 id="refactoring-the-speaker-model-into-the-conferencedto-project">Refactoring the Speaker model into the ConferenceDTO project</h2>
<ol>
  <li>Copy the <code class="language-plaintext highlighter-rouge">Speaker.cs</code> class from the <em>BackEnd</em> application into the root of the new ConferenceDTO project, and change the namespace to <code class="language-plaintext highlighter-rouge">ConferenceDTO</code>.</li>
  <li>The data annotations references should be broken at this point, to resovle it, we need to add a nuget the missing NuGet package into the <code class="language-plaintext highlighter-rouge">ConferenceDTO</code> project.</li>
  <li>Add a reference to the NuGet package <code class="language-plaintext highlighter-rouge">System.ComponentModel.Annotations</code> version <code class="language-plaintext highlighter-rouge">4.6.0</code>.
 <img src="/img/aspdotnetcore/confplanner/3/33.png" alt="" />
    <blockquote>
      <p>This can be done from the command line using <code class="language-plaintext highlighter-rouge">dotnet add package System.ComponentModel.Annotations --version 4.6.0</code></p>
    </blockquote>
  </li>
  <li>When the package restore completes, you should see that your data annotations are now resolved.</li>
  <li>Go back to the <em>BackEnd</em> application and modify the code in <code class="language-plaintext highlighter-rouge">Speaker.cs</code> as shown:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Speaker</span> <span class="p">:</span> <span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">Speaker</span>
<span class="p">{</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p><img src="/img/aspdotnetcore/confplanner/3/34.png" alt="" /></p>
  </li>
  <li>Run the application and view the Speakers data using the Swagger UI to verify everything still works.</li>
</ol>

<h2 id="adding-the-remaining-models-to-conferencedto">Adding the remaining models to ConferenceDTO</h2>

<p>We‚Äôve got several more models to add, and unfortunately it‚Äôs a little mechanical. You can copy the following classes manually, or open the completed solution which is shown at the end.</p>

<ol>
  <li>Create an <code class="language-plaintext highlighter-rouge">Attendee.cs</code> class in the <em>ConferenceDTO</em> project with the following code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
   
<span class="k">namespace</span> <span class="nn">ConferenceDTO</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Attendee</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">StringLength</span><span class="p">(</span><span class="m">200</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">StringLength</span><span class="p">(</span><span class="m">200</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">StringLength</span><span class="p">(</span><span class="m">200</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
           
        <span class="p">[</span><span class="nf">StringLength</span><span class="p">(</span><span class="m">256</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Create a <code class="language-plaintext highlighter-rouge">Session.cs</code> class with the following code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
   
<span class="k">namespace</span> <span class="nn">ConferenceDTO</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Session</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">StringLength</span><span class="p">(</span><span class="m">200</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Title</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="p">[</span><span class="nf">StringLength</span><span class="p">(</span><span class="m">4000</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">string</span> <span class="n">Abstract</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="k">public</span> <span class="k">virtual</span> <span class="n">DateTimeOffset</span><span class="p">?</span> <span class="n">StartTime</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="k">public</span> <span class="k">virtual</span> <span class="n">DateTimeOffset</span><span class="p">?</span> <span class="n">EndTime</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="c1">// Bonus points to those who can figure out why this is written this way</span>
        <span class="k">public</span> <span class="n">TimeSpan</span> <span class="n">Duration</span> <span class="p">=&gt;</span> <span class="n">EndTime</span><span class="p">?.</span><span class="nf">Subtract</span><span class="p">(</span><span class="n">StartTime</span> <span class="p">??</span> <span class="n">EndTime</span> <span class="p">??</span> <span class="n">DateTimeOffset</span><span class="p">.</span><span class="n">MinValue</span><span class="p">)</span> <span class="p">??</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">Zero</span><span class="p">;</span>
   
        <span class="k">public</span> <span class="kt">int</span><span class="p">?</span> <span class="n">TrackId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Create a new <code class="language-plaintext highlighter-rouge">Track.cs</code> class with the following code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
   
<span class="k">namespace</span> <span class="nn">ConferenceDTO</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Track</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="p">[</span><span class="n">Required</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">StringLength</span><span class="p">(</span><span class="m">200</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="creating-derived-models-in-the-backend-project">Creating Derived Models in the BackEnd project</h2>
<p>We‚Äôre not going to create our EF models directly from the <code class="language-plaintext highlighter-rouge">ConferenceDTO</code> classes. Instead, we‚Äôll create some composite classes such as <code class="language-plaintext highlighter-rouge">SessionSpeaker</code>, since these will map more closely to what our application will be working with.</p>

<p>We‚Äôre also going to take this opportunity to rename the <code class="language-plaintext highlighter-rouge">Models</code> directory in the <em>BackEnd</em> project to <code class="language-plaintext highlighter-rouge">Data</code> since it no longer just contains models.</p>
<ol>
  <li>Right-click the <code class="language-plaintext highlighter-rouge">Models</code> directory and select <code class="language-plaintext highlighter-rouge">Rename</code>, changing the name to <code class="language-plaintext highlighter-rouge">Data</code>.
    <blockquote>
      <p>Note: If you are using Visual Studio, you can use refactoring to rename the namespace.</p>
    </blockquote>
  </li>
  <li>Add a <code class="language-plaintext highlighter-rouge">SessionSpeaker.cs</code> class to the <code class="language-plaintext highlighter-rouge">Data</code> directory with the following code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>
   
<span class="k">namespace</span> <span class="nn">BackEnd.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SessionSpeaker</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">SessionId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="k">public</span> <span class="n">Session</span> <span class="n">Session</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="k">public</span> <span class="kt">int</span> <span class="n">SpeakerId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="k">public</span> <span class="n">Speaker</span> <span class="n">Speaker</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Add an <code class="language-plaintext highlighter-rouge">SessionAttendee.cs</code> class with the following code:</p>

    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
 <span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
 <span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
 <span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

 <span class="k">namespace</span> <span class="nn">BackEnd.Data</span>
 <span class="p">{</span>
     <span class="k">public</span> <span class="k">class</span> <span class="nc">SessionAttendee</span>
     <span class="p">{</span>
         <span class="k">public</span> <span class="kt">int</span> <span class="n">SessionId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

         <span class="k">public</span> <span class="n">Session</span> <span class="n">Session</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

         <span class="k">public</span> <span class="kt">int</span> <span class="n">AttendeeId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

         <span class="k">public</span> <span class="n">Attendee</span> <span class="n">Attendee</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Add an <code class="language-plaintext highlighter-rouge">Attendee.cs</code> class with the following code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
   
<span class="k">namespace</span> <span class="nn">BackEnd.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Attendee</span> <span class="p">:</span> <span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">Attendee</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">SessionAttendee</span><span class="p">&gt;</span> <span class="n">SessionsAttendees</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Add a <code class="language-plaintext highlighter-rouge">Session.cs</code> class with the following code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
   
<span class="k">namespace</span> <span class="nn">BackEnd.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Session</span> <span class="p">:</span> <span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">Session</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">SessionSpeaker</span><span class="p">&gt;</span> <span class="n">SessionSpeakers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="k">virtual</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">SessionAttendee</span><span class="p">&gt;</span> <span class="n">SessionAttendees</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
   
        <span class="k">public</span> <span class="n">Track</span> <span class="n">Track</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Add a <code class="language-plaintext highlighter-rouge">Track.cs</code> class with the following code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BackEnd.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Track</span> <span class="p">:</span> <span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">Track</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">Session</span><span class="p">&gt;</span> <span class="n">Sessions</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Modify the <code class="language-plaintext highlighter-rouge">Speaker.cs</code> class we wrote previously to make the following two changes: update to the namespace to match our directory rename, and add a referece to the <code class="language-plaintext highlighter-rouge">SessionSpeaker</code> composite class:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
   
<span class="k">namespace</span> <span class="nn">BackEnd.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Speaker</span> <span class="p">:</span> <span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">Speaker</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">SessionSpeaker</span><span class="p">&gt;</span> <span class="n">SessionSpeakers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">SessionSpeaker</span><span class="p">&gt;();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="update-the-applicationdbcontext">Update the ApplicationDbContext</h2>
<p>Okay, now we need to update our <code class="language-plaintext highlighter-rouge">ApplicationDbContext</code> so Entity Framework knows about our new models.</p>

<ol>
  <li>Update <code class="language-plaintext highlighter-rouge">ApplicationDbContext.cs</code> to use the following code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.EntityFrameworkCore</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BackEnd.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApplicationDbContext</span> <span class="p">:</span> <span class="n">DbContext</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ApplicationDbContext</span><span class="p">(</span><span class="n">DbContextOptions</span><span class="p">&lt;</span><span class="n">ApplicationDbContext</span><span class="p">&gt;</span> <span class="n">options</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnModelCreating</span><span class="p">(</span><span class="n">ModelBuilder</span> <span class="n">modelBuilder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">modelBuilder</span><span class="p">.</span><span class="n">Entity</span><span class="p">&lt;</span><span class="n">Attendee</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="nf">HasIndex</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">UserName</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IsUnique</span><span class="p">();</span>

             <span class="c1">// Many-to-many: Session &lt;-&gt; Attendee</span>
             <span class="n">modelBuilder</span><span class="p">.</span><span class="n">Entity</span><span class="p">&lt;</span><span class="n">SessionAttendee</span><span class="p">&gt;()</span>
                 <span class="p">.</span><span class="nf">HasKey</span><span class="p">(</span><span class="n">ca</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">ca</span><span class="p">.</span><span class="n">SessionId</span><span class="p">,</span> <span class="n">ca</span><span class="p">.</span><span class="n">AttendeeId</span> <span class="p">});</span>

             <span class="c1">// Many-to-many: Speaker &lt;-&gt; Session</span>
             <span class="n">modelBuilder</span><span class="p">.</span><span class="n">Entity</span><span class="p">&lt;</span><span class="n">SessionSpeaker</span><span class="p">&gt;()</span>
                 <span class="p">.</span><span class="nf">HasKey</span><span class="p">(</span><span class="n">ss</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">ss</span><span class="p">.</span><span class="n">SessionId</span><span class="p">,</span> <span class="n">ss</span><span class="p">.</span><span class="n">SpeakerId</span> <span class="p">});</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Session</span><span class="p">&gt;</span> <span class="n">Sessions</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Track</span><span class="p">&gt;</span> <span class="n">Tracks</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Speaker</span><span class="p">&gt;</span> <span class="n">Speakers</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DbSet</span><span class="p">&lt;</span><span class="n">Attendee</span><span class="p">&gt;</span> <span class="n">Attendees</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Fix errors due to the rename from <code class="language-plaintext highlighter-rouge">BackEnd.Models</code> to <code class="language-plaintext highlighter-rouge">BackEnd.Data</code>. You can either do this using a find / replace (replacing ‚ÄúBackEnd.Models‚Äù with ‚ÄúBackEnd.Data‚Äù) or you can do a build and fix errors.</li>
  <li>Ensure that the application builds now.</li>
</ol>

<h2 id="add-a-new-database-migration">Add a new database migration</h2>

<h3 id="visual-studio-package-manager-console">Visual Studio: Package Manager Console</h3>
<ol>
  <li>Run the following commands in the Package Manager Console (specify the <code class="language-plaintext highlighter-rouge">BackEnd</code> project)
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">Add-Migration Refactor
Update-Database
</span></code></pre></div>    </div>
    <p><img src="/img/aspdotnetcore/confplanner/3/37.png" alt="" /></p>
    <h3 id="command-line">Command line</h3>
  </li>
  <li>Run the following commands in the command prompt in the <code class="language-plaintext highlighter-rouge">BackEnd</code> project directory:
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">dotnet ef migrations add Refactor
dotnet ef database update
</span></code></pre></div>    </div>
  </li>
  <li>Now take a deep breath and run the application and navigate to <code class="language-plaintext highlighter-rouge">/swagger</code>. You should see the Swagger UI.</li>
</ol>

<h2 id="updating-the-speakers-api-controller">Updating the Speakers API controller</h2>

<ol>
  <li>Modify the query for the <code class="language-plaintext highlighter-rouge">GetSpeakers()</code> method as shown below:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">speakers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Speakers</span><span class="p">.</span><span class="nf">AsNoTracking</span><span class="p">()</span>
                        <span class="p">.</span><span class="nf">Include</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">SessionSpeakers</span><span class="p">)</span>
                            <span class="p">.</span><span class="nf">ThenInclude</span><span class="p">(</span><span class="n">ss</span> <span class="p">=&gt;</span> <span class="n">ss</span><span class="p">.</span><span class="n">Session</span><span class="p">)</span>
                        <span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
<span class="k">return</span> <span class="n">speakers</span><span class="p">;</span>
</code></pre></div>    </div>
    <p><img src="/img/aspdotnetcore/confplanner/3/39.png" alt="" /></p>
  </li>
  <li>While the above will work, this is directly returning our model class. A better practice is to return an output model class. Create a <code class="language-plaintext highlighter-rouge">SpeakerResponse.cs</code> class in the <code class="language-plaintext highlighter-rouge">ConferenceDTO</code> project with the following code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConferenceDTO</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">SpeakerResponse</span> <span class="p">:</span> <span class="n">Speaker</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">Session</span><span class="p">&gt;</span> <span class="n">Sessions</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Session</span><span class="p">&gt;();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Now we‚Äôll add a utility method to map between these classes. In the <em>BackEnd</em> project, create an <code class="language-plaintext highlighter-rouge">Infrastructure</code> directory. Add a class named <code class="language-plaintext highlighter-rouge">EntityExtensions.cs</code> with the following mapping code:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">BackEnd.Data</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BackEnd.Data</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">EntityExtensions</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">SpeakerResponse</span> <span class="nf">MapSpeakerResponse</span><span class="p">(</span><span class="k">this</span> <span class="n">Speaker</span> <span class="n">speaker</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="k">new</span> <span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">SpeakerResponse</span>
            <span class="p">{</span>
                <span class="n">Id</span> <span class="p">=</span> <span class="n">speaker</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span>
                <span class="n">Name</span> <span class="p">=</span> <span class="n">speaker</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
                <span class="n">Bio</span> <span class="p">=</span> <span class="n">speaker</span><span class="p">.</span><span class="n">Bio</span><span class="p">,</span>
                <span class="n">WebSite</span> <span class="p">=</span> <span class="n">speaker</span><span class="p">.</span><span class="n">WebSite</span><span class="p">,</span>
                <span class="n">Sessions</span> <span class="p">=</span> <span class="n">speaker</span><span class="p">.</span><span class="n">SessionSpeakers</span><span class="p">?</span>
                    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">ss</span> <span class="p">=&gt;</span>
                        <span class="k">new</span> <span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">Session</span>
                        <span class="p">{</span>
                            <span class="n">Id</span> <span class="p">=</span> <span class="n">ss</span><span class="p">.</span><span class="n">SessionId</span><span class="p">,</span>
                            <span class="n">Title</span> <span class="p">=</span> <span class="n">ss</span><span class="p">.</span><span class="n">Session</span><span class="p">.</span><span class="n">Title</span>
                        <span class="p">})</span>
                    <span class="p">.</span><span class="nf">ToList</span><span class="p">()</span>
            <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Now we can update the <code class="language-plaintext highlighter-rouge">GetSpeakers()</code> method of the <em>SpeakersController</em> so that it returns our response model. Update the last few lines so that the method reads as follows:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">SpeakerResponse</span><span class="p">&gt;&gt;&gt;</span> <span class="nf">GetSpeakers</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">speakers</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Speakers</span><span class="p">.</span><span class="nf">AsNoTracking</span><span class="p">()</span>
                                    <span class="p">.</span><span class="nf">Include</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">SessionSpeakers</span><span class="p">)</span>
                                        <span class="p">.</span><span class="nf">ThenInclude</span><span class="p">(</span><span class="n">ss</span> <span class="p">=&gt;</span> <span class="n">ss</span><span class="p">.</span><span class="n">Session</span><span class="p">)</span>
                                    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">MapSpeakerResponse</span><span class="p">())</span>
                                    <span class="p">.</span><span class="nf">ToListAsync</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">speakers</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>Update the <code class="language-plaintext highlighter-rouge">GetSpeaker()</code> method to use our mapped response models as follows:
    <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nf">HttpGet</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">ConferenceDTO</span><span class="p">.</span><span class="n">SpeakerResponse</span><span class="p">&gt;&gt;</span> <span class="nf">GetSpeaker</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">speaker</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_context</span><span class="p">.</span><span class="n">Speakers</span><span class="p">.</span><span class="nf">AsNoTracking</span><span class="p">()</span>
                                    <span class="p">.</span><span class="nf">Include</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">SessionSpeakers</span><span class="p">)</span>
                                        <span class="p">.</span><span class="nf">ThenInclude</span><span class="p">(</span><span class="n">ss</span> <span class="p">=&gt;</span> <span class="n">ss</span><span class="p">.</span><span class="n">Session</span><span class="p">)</span>
                                    <span class="p">.</span><span class="nf">SingleOrDefaultAsync</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">speaker</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">speaker</span><span class="p">.</span><span class="nf">MapSpeakerResponse</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p><img src="/img/aspdotnetcore/confplanner/3/40.png" alt="" /></p>
  </li>
  <li>Remove the other actions (<code class="language-plaintext highlighter-rouge">PutSpeaker</code>, <code class="language-plaintext highlighter-rouge">PostSpeaker</code>, <code class="language-plaintext highlighter-rouge">DeleteSpeaker</code>), on the <code class="language-plaintext highlighter-rouge">SpeakersController</code>.</li>
</ol>

<h2 id="adding-the-remaining-api-controllers-and-dtos">Adding the remaining API Controllers and DTOs</h2>

<ol>
  <li>Add the following response DTO classes from <a href="https://github.com/girishgodage/confplanerapp/tree/master/save-points/2-BackEnd-completed/ConferencePlanner/ConferenceDTO">the save point folder</a>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">AttendeeResponse</code></li>
      <li><code class="language-plaintext highlighter-rouge">SessionResponse</code></li>
      <li><code class="language-plaintext highlighter-rouge">ConferenceResponse</code></li>
      <li><code class="language-plaintext highlighter-rouge">TrackResponse</code></li>
      <li><code class="language-plaintext highlighter-rouge">TagResponse</code></li>
    </ul>
  </li>
  <li>Update the <code class="language-plaintext highlighter-rouge">EntityExtensions</code> class with the <code class="language-plaintext highlighter-rouge">MapSessionResponse</code> and <code class="language-plaintext highlighter-rouge">MapAttendeeResponse</code> methods from <a href="https://github.com/girishgodage/confplanerapp/tree/master/save-points/2b-BackEnd-completed/ConferencePlanner/BackEnd/Infrastructure">the save point folder</a></li>
  <li>Copy the following controllers from <a href="https://github.com/girishgodage/confplanerapp/tree/master/save-points/2b-BackEnd-completed/ConferencePlanner/BackEnd/Controllers">the save point folder</a> into the current project‚Äôs <code class="language-plaintext highlighter-rouge">BackEnd/Controllers</code> directory:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">SessionsController</code></li>
      <li><code class="language-plaintext highlighter-rouge">AttendeesController</code></li>
    </ul>
  </li>
</ol>

<h2 id="adding-conference-upload-support">Adding Conference Upload support</h2>
<ol>
  <li>Copy the <code class="language-plaintext highlighter-rouge">DataLoader.cs</code> class from <a href="https://github.com/girishgodage/confplanerapp/tree/master/ConferencePlanner/BackEnd/Data/DataLoader.cs">here</a> into the <code class="language-plaintext highlighter-rouge">Data</code> directory of the <code class="language-plaintext highlighter-rouge">BackEnd</code> project.</li>
  <li>Copy the <code class="language-plaintext highlighter-rouge">SessionizeLoader.cs</code> and <code class="language-plaintext highlighter-rouge">DevIntersectionLoader.cs</code> classes from <a href="https://github.com/girishgodage/confplanerapp/tree/master/ConferencePlanner/BackEnd/Data/">here</a> into the current project‚Äôs <code class="language-plaintext highlighter-rouge">/src/BackEnd/Data/</code> directory.
    <blockquote>
      <p>Note: We have data loaders from the two conference series where this workshop has been presented most; you can update this to plug in your own conference file format.</p>
    </blockquote>
  </li>
  <li>To improve the UI for upload, turn on the option to display enums as strings by changing <code class="language-plaintext highlighter-rouge">AddSwaggerGen</code> in <code class="language-plaintext highlighter-rouge">Startup.cs</code> to the following:
    <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">services</span><span class="p">.</span><span class="nf">AddSwaggerGen</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
 <span class="p">{</span>
     <span class="n">options</span><span class="p">.</span><span class="nf">SwaggerDoc</span><span class="p">(</span><span class="s">"v1"</span><span class="p">,</span> <span class="k">new</span> <span class="n">OpenApiInfo</span> <span class="p">{</span> <span class="n">Title</span> <span class="p">=</span> <span class="s">"Conference Planner API"</span><span class="p">,</span> <span class="n">Version</span> <span class="p">=</span> <span class="s">"v1"</span> <span class="p">});</span>
     <span class="n">options</span><span class="p">.</span><span class="nf">DescribeAllEnumsAsStrings</span><span class="p">();</span>
 <span class="p">});</span>
</code></pre></div>    </div>
  </li>
  <li>Run the application to see the updated data via Swagger UI.
<img src="/img/aspdotnetcore/confplanner/3/41.png" alt="" /></li>
  <li>Use the Swagger UI to upload <a href="https://github.com/girishgodage/confplanerapp/tree/master/ConferencePlanner/BackEnd/Data/Import/NDC_Sydney_2019.json">NDC_Sydney_2019.json</a> to the <code class="language-plaintext highlighter-rouge">/api/Sessions/upload</code> API.</li>
</ol>

<p><img src="/img/aspdotnetcore/confplanner/3/42.png" alt="" />
<img src="/img/aspdotnetcore/confplanner/3/43.png" alt="" />
‚Äî</p>
<h2 id="sessions">Sessions</h2>

<p>This is series of articles on Building Conf planner app with Asp.net Core:</p>

<ul>
  <li><a href="/blog/CreateBackEndAPIproject" target="_blank">1 - Build the back-end API with basic EF model</a></li>
  <li><a href="/blog/BuildoutBackEndandRefactor" target="_blank">2 - Finish the back-end API and EF model, refactor into view modelsl</a></li>
  <li><a href="/blog/Addfront-endrenderagendasetupfront-endmodels" target="_blank">3 - Add front-end, render agenda, set up front-end models</a></li>
  <li><a href="/blog/Addauthfeatures" target="_blank">4 - Add authentication, add admin policy, allow editing sessions, users can sign-in with Identity, custom auth tag helper</a></li>
  <li><a href="/blog/Addpersonalagenda" target="_blank">5 - Add user association and personal agenda</a></li>
  <li><a href="/blog/ProductionReadinessandDeployment" target="_blank">6 - Deployment, Azure and other production environments, configuring environments, diagnostics</a></li>
  <li><a href="/blog/Challenges" target="_blank">7 - Challenges</a></li>
  <li><a href="/blog/SPAFrontEnd" target="_blank">8 - SPA front-end </a></li>
</ul>

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/CreateBackEndAPIproject" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/Addfront-endrenderagendasetupfront-endmodels" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET