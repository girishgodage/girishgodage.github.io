I"½×<h2 id="spring-boot-and-ibatis-with-h2">Spring Boot and iBatis with H2</h2>
<p>This guide will help you create a simple project with Spring Boot. You will add code to the project to connect to H2 Database using myBatis. You will learn to write all the basic CRUD methods using myBatis.</p>

<h2 id="you-will-learn">You will learn</h2>
<ul>
  <li>How to connect a Spring Boot project to database using myBatis?</li>
  <li>How to write a simple repository class with all the CRUD methods to execute queries using myBatis?</li>
  <li>How to execute basic queries using myBatis?</li>
  <li>How to create a project using Spring Boot, myBatis and H2?</li>
  <li>What are the basics of an in memory database?</li>
</ul>

<h2 id="project-code-structure">Project Code Structure</h2>

<p>Following screenshot shows the structure of the project we will create.</p>

<p><img src="/images/SpringBootwithmyBatis-ProjectStructure.png" alt="Image" title="Spring Boot with myBatis - Project Structure" /></p>

<p>A few details:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Student.java</code> - The bean to store student details.</li>
  <li><code class="language-plaintext highlighter-rouge">StudentMyBatisRepository.java</code> - Contains all the methods to store and retrieve student details to the H2 database.</li>
  <li><code class="language-plaintext highlighter-rouge">schema.sql</code> - Since we are using an in memory database, we define the tables as part of our application code in this file.</li>
  <li><code class="language-plaintext highlighter-rouge">data.sql</code> - We use data.sql to populate the initial student data.</li>
  <li>SpringBoot2MyBatisWithH2Application.java - The main Spring Boot Application class which is used to launch up the application. We will extend <code class="language-plaintext highlighter-rouge">CommandLineRunner</code> interface and implement <code class="language-plaintext highlighter-rouge">public void run(String... args)</code> method to launch the spring jdbc code when the server launches up.</li>
  <li><code class="language-plaintext highlighter-rouge">pom.xml</code> - Contains all the dependencies needed to build this project. We will use Spring Boot Starter myBatis and Web other than Developer Tools and H2 as in memory database.</li>
</ul>

<h2 id="tools-you-will-need">Tools you will need</h2>
<ul>
  <li>Maven 3.0+ is your build tool</li>
  <li>Your favorite IDE. We use Eclipse.</li>
  <li>JDK 1.8+</li>
</ul>

<h2 id="complete-maven-project-with-code-examples">Complete Maven Project With Code Examples</h2>
<blockquote>
  <p>Our Github repository has all the code examples - https://github.com/girishgodage/spring-boot-examples/tree/master/spring-boot-2-myBatis-with-h2</p>
</blockquote>

<h2 id="a-little-bit-of-theory">A little bit of Theory</h2>

<p>JDBC</p>
<ul>
  <li>JDBC stands for Java Database Connectivity</li>
  <li>It used concepts like Statement, PreparedStatement and ResultSet</li>
  <li>In the example below, the query used is <code class="language-plaintext highlighter-rouge">Update todo set user=?, desc=?, target_date=?, is_done=? where id=?</code></li>
  <li>The values needed to execute the query are set into the query using different set methods on the PreparedStatement</li>
  <li>Results from the query are populated into the ResultSet. We had to write code to liquidate the ResultSet into objects.</li>
</ul>

<h4 id="update-todo">Update Todo</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">datasource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>

<span class="nc">PreparedStatement</span> <span class="n">st</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span>
		<span class="s">"Update todo set user=?, desc=?, target_date=?, is_done=? where id=?"</span><span class="o">);</span>

<span class="n">st</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">todo</span><span class="o">.</span><span class="na">getUser</span><span class="o">());</span>
<span class="n">st</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">todo</span><span class="o">.</span><span class="na">getDesc</span><span class="o">());</span>
<span class="n">st</span><span class="o">.</span><span class="na">setTimestamp</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Timestamp</span><span class="o">(</span>
		<span class="n">todo</span><span class="o">.</span><span class="na">getTargetDate</span><span class="o">().</span><span class="na">getTime</span><span class="o">()));</span>
<span class="n">st</span><span class="o">.</span><span class="na">setBoolean</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">todo</span><span class="o">.</span><span class="na">isDone</span><span class="o">());</span>
<span class="n">st</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">todo</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

<span class="n">st</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>

<span class="n">st</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>

<span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<h3 id="spring-jdbc">Spring JDBC</h3>

<ul>
  <li>Spring JDBC provides a layer on top of JDBC</li>
  <li>It used concepts like JDBCTemplate</li>
  <li>Typically needs lesser number of lines compared to JDBC as following are simplified
    <ul>
      <li>mapping parameters to queries</li>
      <li>liquidating resultsets to beans</li>
      <li>zero exception handling needed because all exceptions are converted to RuntimeExceptions.</li>
    </ul>
  </li>
</ul>

<h3 id="mybatis">myBatis</h3>

<p>MyBatis removes the need for manually writing code to set parameters and retrieve results. It provides simple XML or Annotation based configuration to map Java POJOs to database.</p>

<p>We compare the approaches used to write queries below:</p>

<ul>
  <li>JDBC or Spring JDBC - <code class="language-plaintext highlighter-rouge">Update todo set user=?, desc=?, target_date=?, is_done=? where id=?</code></li>
  <li>myBatis - <code class="language-plaintext highlighter-rouge">Update todo set user=#{user}, desc=#{desc}, target_date=#{targetDate}, is_done=#{isDone} where id=#{id}</code></li>
</ul>

<h4 id="update-todo-and-retrieve-todo">Update Todo and Retrieve Todo</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">TodoMybatisService</span>
		<span class="kd">extends</span> <span class="nc">TodoDataService</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="nd">@Update</span><span class="o">(</span><span class="s">"Update todo set user=#{user}, desc=#{desc}, target_date=#{targetDate}, is_done=#{isDone} where id=#{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateTodo</span><span class="o">(</span><span class="nc">Todo</span> <span class="n">todo</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SQLException</span><span class="o">;</span>

	<span class="nd">@Override</span>
	<span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM TODO WHERE id = #{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">Todo</span> <span class="nf">retrieveTodo</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SQLException</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="creating-the-project-with-spring-initializr">Creating the Project with Spring Initializr</h2>

<p>Creating a REST service with Spring Initializr is a cake walk. We will use Spring Web MVC as our web framework.</p>

<p>Spring Initializr <a href="http://start.spring.io/" target="_blank">http://start.spring.io/</a> is great tool to bootstrap your Spring Boot projects.</p>

<p><img src="/images/spring-initializer-web-h2-devtools-jdbc.png" alt="Image" title="Web, JDBC,H2 and Developer Tools" /></p>

<p>As shown in the image above, following steps have to be done</p>

<ul>
  <li>Launch Spring Initializr and choose the following
    <ul>
      <li>Choose <code class="language-plaintext highlighter-rouge">com.girishgodage.springboot.rest.example</code> as Group</li>
      <li>Choose <code class="language-plaintext highlighter-rouge">spring-boot-2-jdbc-with-h2</code> as Artifact</li>
      <li>Choose following dependencies
        <ul>
          <li>Web</li>
          <li>H2</li>
          <li>DevTools</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Click Generate Project.</li>
  <li>Import the project into Eclipse. File -&gt; Import -&gt; Existing Maven Project.</li>
  <li>If you want to understand all the files that are part of this project, you can go here TODO.</li>
</ul>

<h2 id="add-the-mybatis-starter-to-pomxml">Add the myBatis starter to pom.xml</h2>

<p>myBatis is not a standard Spring Boot Starter project. We would need to add it manually to pom.xml.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
	&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
	&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
	&lt;version&gt;1.2.1&lt;/version&gt;
&lt;/dependency&gt;

</code></pre></div></div>

<p>Rebuild the project to see all the dependencies related to myBatis.</p>

<p><img src="/images/myBatisDependencies.png" alt="Image" title="my Batis Dependencies" /></p>

<h2 id="initialize-h2-in-memory-database-with-the-schema">Initialize H2 in-memory database with the schema</h2>

<p>We will use H2 as the database.</p>

<p>H2 provides a web interface called H2 Console to see the data. Letâs enable h2 console in the application.properties</p>

<p>/src/main/resources/application.properties</p>
<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enabling H2 Console
</span><span class="py">spring.h2.console.enabled</span><span class="p">=</span><span class="s">true</span>
</code></pre></div></div>
<p>When you reload the application, you can launch up H2 Console at http://localhost:8080/h2-console.</p>

<p><img src="/images/H2-Console-Login-Page.png" alt="Image" title="H2 Console Login PAge" /></p>

<blockquote>
  <p>Tip - Make sure that you use <code class="language-plaintext highlighter-rouge">jdbc:h2:mem:testdb</code> as JDBC URL.</p>
</blockquote>

<p>When you use the right JDBC URL given above, you should see an empty schema when you click <code class="language-plaintext highlighter-rouge">Connect</code> button.
<img src="/images/H2-Console-Empty-Schema.png" alt="Image" title="H2 Console Empty Page" /></p>

<h3 id="create-schema-using-schemasql-and-data-using-datasql">Create Schema using schema.sql and Data using data.sql</h3>

<p>We will create a table called student with few simple columns. We can initialize a schema by create a <code class="language-plaintext highlighter-rouge">schema.sql</code> file in the resources.</p>

<p>/src/main/resources/schema.sql</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create table student
(
   id integer not null,
   name varchar(255) not null,
   passport_number varchar(255) not null,
   primary key(id)
);
</code></pre></div></div>

<p>Letâs also populate some data into the student table.</p>

<p>/src/main/resources/data.sql</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>insert into student
values(10001,'Ranga', 'E1234567');

insert into student
values(10002,'Ravi', 'A1234568');
</code></pre></div></div>

<p>When the application reloads you would see following statements in the log indicating that the sql files are picked up</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Executing SQL script from URL [file:PATH/schema.sql]
Executing SQL script from URL [file:PATH/data.sql]
</code></pre></div></div>

<p>When you login to H2 Console (http://localhost:8080/h2-console) you can see that the student table is created and the data is populated.
<img src="/images/H2-Console-With-Student.png" alt="Image" title="H2 Console With Student" /></p>

<h2 id="creating-student-bean">Creating Student Bean</h2>

<p>Lets create a simple Student bean with basic student information along with getters, setters and a toString method.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.jdbc.h2.example.student</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">passportNumber</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">passportNumber</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passportNumber</span> <span class="o">=</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">passportNumber</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passportNumber</span> <span class="o">=</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassportNumber</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassportNumber</span><span class="o">(</span><span class="nc">String</span> <span class="n">passportNumber</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passportNumber</span> <span class="o">=</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Student [id=%s, name=%s, passportNumber=%s]"</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">passportNumber</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<h2 id="create-repository-method-to-read-student-information">Create Repository method to Read Student information</h2>

<p>We would want to start with creating a simple repository. <code class="language-plaintext highlighter-rouge">@Mapper</code> indicates that this is an myBatis mapper class.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StudentMyBatisRepository</span> <span class="o">{</span>

<span class="o">}</span>

</code></pre></div></div>
<blockquote>
  <p>Spring Boot Auto Configuration sees H2 in the classpath. It understands that we would want to talk to an in memory database. It auto configures a datasource and also a JdbcTemplate connecting to that datasource.</p>
</blockquote>

<p>Letâs create the findById method to retrieve a student by id in StudentJdbcRepository.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM student WHERE id = #{id}"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Student</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">);</span>
</code></pre></div></div>

<p>Notes</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Select("SELECT * FROM student WHERE id = #{id}")</code> - <code class="language-plaintext highlighter-rouge">@Select</code> highlights that this is a select query. <code class="language-plaintext highlighter-rouge">#{id}</code> is used to indicate that id is a parameter to this query.</li>
  <li>You can observe that are defining a simple interface method without the implementation.</li>
</ul>

<p>We would want to execute findById method. To keep things simple we will make the SpringBoot2MyBatisWithH2Application class implement CommandLineRunner and implement run method to call the findById method on the repository.</p>

<p>/src/main/java/com/girishgodage/springboot/jdbc/h2/example/SpringBoot2JdbcWithH2Application.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBoot2MyBatisWithH2Application</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>

	<span class="nd">@Autowired</span>
	<span class="nc">StudentMyBatisRepository</span> <span class="n">repository</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringBoot2MyBatisWithH2Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>

		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Student id 10001 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">10001L</span><span class="o">));</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Notes</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Autowired StudentMyBatisRepository repository;</code> - We will autowire StudentMyBatisRepository we created earlier.</li>
  <li><code class="language-plaintext highlighter-rouge">public void run(String... args) throws Exception {</code> - Implement the run method defined in the CommandLineRunner interface. This method is executed as soon as the application is launched up.</li>
  <li><code class="language-plaintext highlighter-rouge">logger.info("Student id 10001 -&gt; {}", repository.findById(10001L))</code> - Log all the information about student id 10001.</li>
</ul>

<p>When the application reloads you will see this in the log.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Student id 10001 -&gt; Student [id=10001, name=Ranga, passportNumber=E1234567]
</code></pre></div></div>
<blockquote>
  <p>Congratulations on executing the first myBatis method! You can see how easy it is with Spring Boot.</p>
</blockquote>

<p>Letâs now add another method to retrieve details of all the students to StudentJdbcRepository.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Select</span><span class="o">(</span><span class="s">"select * from student"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</code></pre></div></div>
<p>Notes</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Select("select * from student")</code> - Since we want to return a list of students, we do not need to pass any parameters. Its a simple <code class="language-plaintext highlighter-rouge">@Select</code> query.</li>
</ul>

<p>We can add a call to find all method in the run method of <code class="language-plaintext highlighter-rouge">SpringBoot2MyBatisWithH2Application.java</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"All users 1 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">());</span>

</code></pre></div></div>

<p>You can see following output in the log when the project reloads.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>All users 1 -&gt; [Student [id=10001, name=Ranga, passportNumber=E1234567], Student [id=10002, name=Ravi, passportNumber=A1234568]]
</code></pre></div></div>

<h2 id="implementing-mybatis-delete-insert-and-update-methods">Implementing myBatis delete, insert and update methods</h2>

<p>The code below shows the delete, insert and update methods.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nd">@Delete</span><span class="o">(</span><span class="s">"DELETE FROM student WHERE id = #{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">);</span>

	<span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO student(id, name, passport) VALUES (#{id}, #{name}, #{passport})"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nc">Student</span> <span class="n">student</span><span class="o">);</span>

	<span class="nd">@Update</span><span class="o">(</span><span class="s">"Update student set name=#{name}, passport=#{passport} where id=#{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="nc">Student</span> <span class="n">student</span><span class="o">);</span>


</code></pre></div></div>

<p>Notes</p>
<ul>
  <li>These methods are relatively straight forward.</li>
  <li>All methods use the appropriate annotation with the query and highlight the necessary parameters.</li>
</ul>

<p>We can add a call to all the above methods in the run method of <code class="language-plaintext highlighter-rouge">SpringBoot2MyBatisWithH2Application.java</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Inserting -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="mi">10010L</span><span class="o">,</span> <span class="s">"John"</span><span class="o">,</span> <span class="s">"A1234657"</span><span class="o">)));</span>

<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Update 10001 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="mi">10001L</span><span class="o">,</span> <span class="s">"Name-Updated"</span><span class="o">,</span> <span class="s">"New-Passport"</span><span class="o">)));</span>

<span class="n">repository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="mi">10002L</span><span class="o">);</span>

<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"All users 2 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">());</span>

</code></pre></div></div>

<p>You can see following output in the log when the project reloads.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Inserting -&gt; 1
Update 10001 -&gt; 1
All users 2 -&gt; [Student [id=10001, name=Name-Updated, passportNumber=New-Passport], Student [id=10010, name=John, passportNumber=A1234657]]
</code></pre></div></div>
<blockquote>
  <p>Awesome ! Youâve implemented all the CRUD methods using iBatis and Spring Boot.</p>
</blockquote>

<h2 id="complete-code-example">Complete Code Example</h2>

<h3 id="pomxml">/pom.xml</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

	<span class="nt">&lt;groupId&gt;</span>com.girishgodage.springboot.rest.example<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-boot-2-myBatis-with-h2<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
	<span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>

	<span class="nt">&lt;name&gt;</span>spring-boot-2-myBatis-with-h2<span class="nt">&lt;/name&gt;</span>
	<span class="nt">&lt;description&gt;</span>Spring Boot 2, myBatis and H2 - Example Project<span class="nt">&lt;/description&gt;</span>

	<span class="nt">&lt;parent&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;version&gt;</span>2.0.0.RELEASE<span class="nt">&lt;/version&gt;</span>
		<span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
	<span class="nt">&lt;/parent&gt;</span>

	<span class="nt">&lt;properties&gt;</span>
		<span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
		<span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
		<span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
	<span class="nt">&lt;/properties&gt;</span>

	<span class="nt">&lt;dependencies&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;version&gt;</span>1.2.1<span class="nt">&lt;/version&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>

		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>com.h2database<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>h2<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;/dependencies&gt;</span>

	<span class="nt">&lt;build&gt;</span>
		<span class="nt">&lt;plugins&gt;</span>
			<span class="nt">&lt;plugin&gt;</span>
				<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
				<span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;/plugin&gt;</span>
		<span class="nt">&lt;/plugins&gt;</span>
	<span class="nt">&lt;/build&gt;</span>

	<span class="nt">&lt;repositories&gt;</span>
		<span class="nt">&lt;repository&gt;</span>
			<span class="nt">&lt;id&gt;</span>spring-snapshots<span class="nt">&lt;/id&gt;</span>
			<span class="nt">&lt;name&gt;</span>Spring Snapshots<span class="nt">&lt;/name&gt;</span>
			<span class="nt">&lt;url&gt;</span>https://repo.spring.io/snapshot<span class="nt">&lt;/url&gt;</span>
			<span class="nt">&lt;snapshots&gt;</span>
				<span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
			<span class="nt">&lt;/snapshots&gt;</span>
		<span class="nt">&lt;/repository&gt;</span>
		<span class="nt">&lt;repository&gt;</span>
			<span class="nt">&lt;id&gt;</span>spring-milestones<span class="nt">&lt;/id&gt;</span>
			<span class="nt">&lt;name&gt;</span>Spring Milestones<span class="nt">&lt;/name&gt;</span>
			<span class="nt">&lt;url&gt;</span>https://repo.spring.io/milestone<span class="nt">&lt;/url&gt;</span>
			<span class="nt">&lt;snapshots&gt;</span>
				<span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
			<span class="nt">&lt;/snapshots&gt;</span>
		<span class="nt">&lt;/repository&gt;</span>
	<span class="nt">&lt;/repositories&gt;</span>

	<span class="nt">&lt;pluginRepositories&gt;</span>
		<span class="nt">&lt;pluginRepository&gt;</span>
			<span class="nt">&lt;id&gt;</span>spring-snapshots<span class="nt">&lt;/id&gt;</span>
			<span class="nt">&lt;name&gt;</span>Spring Snapshots<span class="nt">&lt;/name&gt;</span>
			<span class="nt">&lt;url&gt;</span>https://repo.spring.io/snapshot<span class="nt">&lt;/url&gt;</span>
			<span class="nt">&lt;snapshots&gt;</span>
				<span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
			<span class="nt">&lt;/snapshots&gt;</span>
		<span class="nt">&lt;/pluginRepository&gt;</span>
		<span class="nt">&lt;pluginRepository&gt;</span>
			<span class="nt">&lt;id&gt;</span>spring-milestones<span class="nt">&lt;/id&gt;</span>
			<span class="nt">&lt;name&gt;</span>Spring Milestones<span class="nt">&lt;/name&gt;</span>
			<span class="nt">&lt;url&gt;</span>https://repo.spring.io/milestone<span class="nt">&lt;/url&gt;</span>
			<span class="nt">&lt;snapshots&gt;</span>
				<span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
			<span class="nt">&lt;/snapshots&gt;</span>
		<span class="nt">&lt;/pluginRepository&gt;</span>
	<span class="nt">&lt;/pluginRepositories&gt;</span>


<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainjavacomgirishgodagespringbootmybatish2examplespringboot2mybatiswithh2applicationjava">/src/main/java/com/girishgodage/springboot/mybatis/h2/example/SpringBoot2MyBatisWithH2Application.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.mybatis.h2.example</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.girishgodage.springboot.mybatis.h2.example.student.Student</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.girishgodage.springboot.mybatis.h2.example.student.StudentMyBatisRepository</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBoot2MyBatisWithH2Application</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>

	<span class="nd">@Autowired</span>
	<span class="nc">StudentMyBatisRepository</span> <span class="n">repository</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringBoot2MyBatisWithH2Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>

		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Student id 10001 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">10001L</span><span class="o">));</span>

		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"All users 1 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">());</span>
		
		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Inserting -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="mi">10010L</span><span class="o">,</span> <span class="s">"John"</span><span class="o">,</span> <span class="s">"A1234657"</span><span class="o">)));</span>

		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Update 10001 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="mi">10001L</span><span class="o">,</span> <span class="s">"Name-Updated"</span><span class="o">,</span> <span class="s">"New-Passport"</span><span class="o">)));</span>

		<span class="n">repository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="mi">10002L</span><span class="o">);</span>
		
		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"All users 2 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainjavacomgirishgodagespringbootmybatish2examplestudentstudentjava">/src/main/java/com/girishgodage/springboot/mybatis/h2/example/student/Student.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.mybatis.h2.example.student</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">passport</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">passport</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passport</span> <span class="o">=</span> <span class="n">passport</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">passport</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passport</span> <span class="o">=</span> <span class="n">passport</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassport</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">passport</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassport</span><span class="o">(</span><span class="nc">String</span> <span class="n">passport</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passport</span> <span class="o">=</span> <span class="n">passport</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Student [id=%s, name=%s, passport=%s]"</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">passport</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainjavacomgirishgodagespringbootmybatish2examplestudentstudentmybatisrepositoryjava">/src/main/java/com/girishgodage/springboot/mybatis/h2/example/student/StudentMyBatisRepository.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.mybatis.h2.example.student</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Delete</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Insert</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Mapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Select</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.ibatis.annotations.Update</span><span class="o">;</span>

<span class="nd">@Mapper</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StudentMyBatisRepository</span> <span class="o">{</span>
	<span class="nd">@Select</span><span class="o">(</span><span class="s">"select * from student"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>

	<span class="nd">@Select</span><span class="o">(</span><span class="s">"SELECT * FROM student WHERE id = #{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="nc">Student</span> <span class="nf">findById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">);</span>

	<span class="nd">@Delete</span><span class="o">(</span><span class="s">"DELETE FROM student WHERE id = #{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">deleteById</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">);</span>

	<span class="nd">@Insert</span><span class="o">(</span><span class="s">"INSERT INTO student(id, name, passport) VALUES (#{id}, #{name}, #{passport})"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">insert</span><span class="o">(</span><span class="nc">Student</span> <span class="n">student</span><span class="o">);</span>

	<span class="nd">@Update</span><span class="o">(</span><span class="s">"Update student set name=#{name}, passport=#{passport} where id=#{id}"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="nc">Student</span> <span class="n">student</span><span class="o">);</span>

<span class="o">}</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainresourcesapplicationproperties">/src/main/resources/application.properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enabling H2 Console
</span><span class="py">spring.h2.console.enabled</span><span class="p">=</span><span class="s">true</span>
<span class="c">#Turn Statistics on
</span><span class="py">spring.jpa.properties.hibernate.generate_statistics</span><span class="p">=</span><span class="s">true</span>
<span class="py">logging.level.org.hibernate.stat</span><span class="p">=</span><span class="s">debug</span>
<span class="c"># Show all queries
</span><span class="py">spring.jpa.show-sql</span><span class="p">=</span><span class="s">true</span>
<span class="py">spring.jpa.properties.hibernate.format_sql</span><span class="p">=</span><span class="s">true</span>
<span class="py">logging.level.org.hibernate.type</span><span class="p">=</span><span class="s">trace</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainresourcesdatasql">/src/main/resources/data.sql</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>insert into student
values(10001,'Ranga', 'E1234567');

insert into student
values(10002,'Ravi', 'A1234568');
</code></pre></div></div>
<hr />

<h3 id="srcmainresourcesschemasql">/src/main/resources/schema.sql</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create table student
(
   id integer not null,
   name varchar(255) not null,
   passport varchar(255) not null,
   primary key(id)
);
</code></pre></div></div>
<hr />

<h3 id="srctestjavacomgirishgodagespringbootmybatish2examplespringboot2mybatiswithh2applicationtestsjava">/src/test/java/com/girishgodage/springboot/mybatis/h2/example/SpringBoot2MyBatisWithH2ApplicationTests.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.mybatis.h2.example</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.test.context.SpringBootTest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringRunner</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@SpringBootTest</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBoot2MyBatisWithH2ApplicationTests</span> <span class="o">{</span>

	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextLoads</span><span class="o">()</span> <span class="o">{</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<hr />

<hr />

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/hibernate-jpa-tutorial-with-spring-boot-starter-jpa" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/spring-boot-and-h2-in-memory-database" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET