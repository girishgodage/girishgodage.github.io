I"<p>Open Closed Principle is one of the SOLID Principles. You want your code to be extensible. How do you achieve it with minimum fuss? Let’s get started.</p>

<h3 id="we-learn">We learn</h3>
<ul>
  <li>What is the Open Closed Principle?</li>
  <li>How do you apply this principle in developing and designing software applications?</li>
</ul>

<h2 id="open-closed-principle">Open Closed Principle</h2>

<blockquote>
  <p>Your classes should be open to extension, but closed to modification</p>
</blockquote>

<p>What does this mean? Let’s look at a simple example to understand what this means.</p>

<h3 id="an-example-of-poor-design">An example of Poor Design</h3>

<p>Let’s take a quick look at the calculateArea method in the Shape class.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Shape {
	public double calculateArea(Shape[] shapes) {
		double area = 0;
		for(Shape shape:shapes) {
			if(shape instanceof Rectangle) {
				//Calculate Area of Rectange
			}
			else if(shape instanceof Circle) {
				//Calculate Area of Circle
			}
		}
		return area;
	}
}

class Rectangle extends Shape {
	
}

class Circle extends Shape {
	
	
}

</code></pre></div></div>

<p>Is there a problem with <code class="language-plaintext highlighter-rouge">calculateArea()</code> method?</p>

<p>What if we add a new shape? What if we remove a shape? What if we want to change the area algorithm for one of the shapes.</p>

<p>For all these modifications, <code class="language-plaintext highlighter-rouge">calculateArea()</code> method needs to change.</p>

<p>How can we make it better?</p>

<blockquote>
  <p>Parts of the above code below pseudo code, for ease of explanation</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
abstract class Shape {

	
    abstract double area();
}

class Rectangle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

class Circle extends Shape {

	@Override
	double area() {
		// Area implementation for Rectangle
		return 0;
	}
	
}

</code></pre></div></div>

<p>A better solution would be to allow each of the shapes, to define their own <code class="language-plaintext highlighter-rouge">area()</code> method. We have created an abstract class called <code class="language-plaintext highlighter-rouge">Shape</code> (which could also have been an interface), and have each of the different shapes extend it. Each shape also overrides <code class="language-plaintext highlighter-rouge">Shape</code>’s abstract <code class="language-plaintext highlighter-rouge">area()</code> method, to compute its specific area.</p>

<p>The standalone <code class="language-plaintext highlighter-rouge">calculateArea()</code> method would now look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>abstract class Shape {
	
	
	public double calculateArea(Shape[] shapes)
	{
		double area = 0;
		for(Shape shape:shapes) {
			area += shape.area();
		}
		return area;
	}
	
    abstract double area();
}

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">calculateArea()</code> is now responsible just for looping around the shapes, and invoking the <code class="language-plaintext highlighter-rouge">area()</code> method of individual shapes.</p>

<p>This is a very good example of the OCP.</p>

<p>If you now want to add another shape, then you need to extend the <code class="language-plaintext highlighter-rouge">Shape</code> class, and override its <code class="language-plaintext highlighter-rouge">area()</code> method:. That’s it.</p>

<p>Here, <code class="language-plaintext highlighter-rouge">Shape</code> class is open to extension, and <code class="language-plaintext highlighter-rouge">calculateArea()</code> is closed to modification.</p>

<h3 id="summary">Summary</h3>

<p>In this article, we focused on Open Closed Principle.</p>

<p>Design should be open for extension, but closed for modification.</p>

<hr />

<h3 id="software-design-principles">Software Design Principles</h3>

<p>This is the article in a series of articles on important Software Design Principles:</p>

<ul>
  <li><a href="/blog/four-principles-of-simple-design" target="_blank">1 - Introduction to Four Principles Of Simple Design</a></li>
  <li><a href="/blog/software-design-seperation-of-concerns-with-examples" target="_blank">2 - Software Design - Separation Of Concerns - with examples</a></li>
  <li><a href="/blog/software-design-solid-principles" target="_blank">3 - Object Oriented Software Design - Solid Principles - with examples</a></li>
  <li><a href="/blog/software-design-single-responsibility-principle" target="_blank">4 - Software Design - Single Responsibility Principle - with examples</a></li>
  <li><a href="/blog/software-design-open-closed-principle" target="_blank">5 - Software Design - Open Closed Principle - with examples</a></li>
  <li><a href="/blog/software-design-dependency-inversion-principle" target="_blank">6 - Software Design - What is Dependency Inversion Principle?</a></li>
</ul>

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/software-design-single-responsibility-principle" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/software-design-dependency-inversion-principle" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET