I"	ê<h2 id="outputformatter">OutputFormatter</h2>

<p>In this seventh chapter I want to write about, how to send your data in different formats and types to the client. By default the ASP.NET Core Web API sends the data as JSON, but there are some more ways to send the data.</p>

<h2 id="about-outputformatters">About OutputFormatters</h2>

<p>OutputFormatters are classes that turn your data into a different format to sent them trough HTTP to the clients. Web API uses a default OutputFormatter to turn objects into JSON, which is the default format to send data in a structured way. Other built-in formatters are a XML formatter and a plain text formatter.</p>

<p>With the - so called - content negotiation the client is able to decide which format he wants to retrieve .The client needs to specify the content type of the format in the Accept-Header. The content negotiation is implemented in the ObjectResult.</p>

<p>By default the Web API always returns JSON, even if you accept <code class="language-plaintext highlighter-rouge">text/xml</code> in the header. This is why the build in XML formatter is not registered by default. There are two ways to add a <code class="language-plaintext highlighter-rouge">XmlSerializerOutputFormatter</code> to ASP.NET Core:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AddXmlSerializerFormatters</span><span class="p">();</span>
</code></pre></div></div>

<p>or</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AddMvcOptions</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">options</span><span class="p">.</span><span class="n">OutputFormatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">XmlSerializerOutputFormatter</span><span class="p">());</span>
    <span class="p">});</span>
</code></pre></div></div>

<blockquote>
  <p>There is also a XmlDataContractSerializerOutputFormatter available.</p>
</blockquote>

<p>Also any Accept header gets turned into <code class="language-plaintext highlighter-rouge">application/json</code>. If you want to allow the clients to accept different headers, you need to switch that translation off:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">services.AddControllers()</span><span class="w">
    </span><span class="err">.AddMvcOptions(options</span><span class="w"> </span><span class="err">=&gt;</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="err">options.RespectBrowserAcceptHeader</span><span class="w"> </span><span class="err">=</span><span class="w"> </span><span class="kc">true</span><span class="err">;</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="err">by</span><span class="w"> </span><span class="err">default</span><span class="w">
    </span><span class="p">}</span><span class="err">);</span><span class="w">
</span></code></pre></div></div>

<p>Some third party components that don‚Äôt completely support ASP.NET Core 3.0, don‚Äôt write asynchronously to the response stream, but ASP.NET Core 3.0 doesn‚Äôt allow to write synchronously by default. To enable synchronous writing access you need to add these lines to the <code class="language-plaintext highlighter-rouge">ConfigureServices</code> method:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">services</span><span class="p">.</span><span class="n">Configure</span><span class="p">&lt;</span><span class="n">KestrelServerOptions</span><span class="p">&gt;(</span><span class="n">options</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">options</span><span class="p">.</span><span class="n">AllowSynchronousIO</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>To try the formatters let‚Äôs setup a small test project.</p>

<h2 id="prepare-a-test-project">Prepare a test project</h2>

<p>Using the console we will create a small ASP.NET Core Web API project. Execute the following commands line by line:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet new webapi <span class="nt">-n</span> OutputFormatterSample <span class="nt">-o</span> OutputFormatterSample
<span class="nb">cd </span>WebApiTest
dotnet add package GenFu
dotnet add package CsvHelper
</code></pre></div></div>

<p>This creates a new Web API projects and adds two NuGet packages to it. GenFu is an awesome library to easily create test data. The second one helps us to easily write CSV data.</p>

<p>Now open the project in Visual Studio or in Visual Studio Code and open the <code class="language-plaintext highlighter-rouge">ValuesController.cs</code> and change the <code class="language-plaintext highlighter-rouge">Get()</code> method like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
<span class="k">public</span> <span class="n">ActionResult</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;&gt;</span> <span class="nf">Get</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">var</span> <span class="n">persons</span> <span class="p">=</span> <span class="n">A</span><span class="p">.</span><span class="n">ListOf</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="m">25</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">persons</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This crates a list of 25 Persons using GenFu. The properties get automatically filled with almost realistic data. You‚Äôll see the magic of GenFu and the results later on.</p>

<p>In the models folder create a new file <code class="language-plaintext highlighter-rouge">Person.cs</code> with the the <code class="language-plaintext highlighter-rouge">Person</code> class inside:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Age</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Phone</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Open the <code class="language-plaintext highlighter-rouge">Startup.cs</code> as well and add the Xml formatters and allow other accept headers as described earlier:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AddMvcOptions</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="p">{</span>	
        <span class="n">options</span><span class="p">.</span><span class="n">RespectBrowserAcceptHeader</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span> <span class="c1">// false by default</span>
        <span class="n">options</span><span class="p">.</span><span class="n">OutputFormatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">XmlSerializerOutputFormatter</span><span class="p">());</span>
    <span class="p">});</span>
</code></pre></div></div>

<p>That‚Äôs it for now. Now you are able to retrieve the data from the Web API. Start the project by using the <code class="language-plaintext highlighter-rouge">dotnet run</code> command.</p>

<p>The best tools to test a web API are Fiddler or Postman. I prefer Postman because it is easy to use. At the end it doesn‚Äôt matter which tool you want to use. In these demos here I‚Äôm going to use Postman.</p>

<p>Inside Postman I create a new request. I write the API url into the address field, which is https://localhost:5001/api/values and I add a header with the key <code class="language-plaintext highlighter-rouge">Accept</code> and the Value <code class="language-plaintext highlighter-rouge">application/json</code>.</p>

<p>After I press send I will see the JSON result in the response body below:</p>

<p><img src="images/customize-aspnetcore/custom-formatter-json.PNG" alt="" /></p>

<p>Here you can see the auto generated values. GenFu puts the data in based on the property type and the property name. So it puts real first names and real last names as well as real cities and phone numbers into the Person‚Äôs properties.</p>

<p>Now let‚Äôs test the XML output formatter.</p>

<p>In postman change the Accept header form <code class="language-plaintext highlighter-rouge">application/json</code> to <code class="language-plaintext highlighter-rouge">text/xml</code> and press send:</p>

<p><img src="images/customize-aspnetcore/custom-formatter-xml.PNG" alt="" /></p>

<p>We now have an XML formatted output.</p>

<p>Now let‚Äôs go a step aheads and create some custom OutputFormatters.</p>

<h2 id="custom-outputformatters">Custom OutputFormatters</h2>

<p>The plan is to create an VCard output to be able to import the person‚Äôs contacts directly to outlook or any other contact database that supports VCards. Later in this section we also want to create a CSV output formatter.</p>

<p>Both are text based output formatters and will derive from <code class="language-plaintext highlighter-rouge">TextOutputFormatter</code>. Create a new class in a new file called <code class="language-plaintext highlighter-rouge">VcardOutputFormatter.cs</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">VcardOutputFormatter</span> <span class="p">:</span> <span class="n">TextOutputFormatter</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">ContentType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">VcardOutputFormatter</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">SupportedMediaTypes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">MediaTypeHeaderValue</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="s">"text/vcard"</span><span class="p">));</span>

        <span class="n">SupportedEncodings</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">);</span>
        <span class="n">SupportedEncodings</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// optional, but makes sense to restrict to a specific condition</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">CanWriteType</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Person</span><span class="p">).</span><span class="nf">IsAssignableFrom</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> 
            <span class="p">||</span> <span class="k">typeof</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;).</span><span class="nf">IsAssignableFrom</span><span class="p">(</span><span class="n">type</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="nf">CanWriteType</span><span class="p">(</span><span class="n">type</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// this needs to be overwritten</span>
    <span class="k">public</span> <span class="k">override</span> <span class="n">Task</span> <span class="nf">WriteResponseBodyAsync</span><span class="p">(</span>
    	<span class="n">OutputFormatterWriteContext</span> <span class="n">context</span><span class="p">,</span> 
    	<span class="n">Encoding</span> <span class="n">selectedEncoding</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">serviceProvider</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">RequestServices</span><span class="p">;</span>
        <span class="kt">var</span> <span class="n">logger</span> <span class="p">=</span> <span class="n">serviceProvider</span>
        	<span class="p">.</span><span class="nf">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">VcardOutputFormatter</span><span class="p">&gt;))</span> <span class="k">as</span> <span class="n">ILogger</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">buffer</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Object</span> <span class="k">is</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span>
        <span class="p">{</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">person</span> <span class="k">in</span> <span class="n">context</span><span class="p">.</span><span class="n">Object</span> <span class="k">as</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span>
            <span class="p">{</span>
                <span class="nf">FormatVcard</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">person</span><span class="p">,</span> <span class="n">logger</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Object</span> <span class="k">as</span> <span class="n">Person</span><span class="p">;</span>
            <span class="nf">FormatVcard</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">person</span><span class="p">,</span> <span class="n">logger</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="nf">WriteAsync</span><span class="p">(</span><span class="n">buffer</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">FormatVcard</span><span class="p">(</span>
    	<span class="n">StringBuilder</span> <span class="n">buffer</span><span class="p">,</span> 
    	<span class="n">Person</span> <span class="n">person</span><span class="p">,</span> 
    	<span class="n">ILogger</span> <span class="n">logger</span><span class="p">)</span>
    <span class="p">{</span>
		<span class="n">buffer</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">"BEGIN:VCARD"</span><span class="p">);</span>
		<span class="n">buffer</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">"VERSION:2.1"</span><span class="p">);</span>
		<span class="n">buffer</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"FN:</span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">FirstName</span><span class="p">}</span><span class="s"> </span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">LastName</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
		<span class="n">buffer</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"N:</span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">LastName</span><span class="p">}</span><span class="s">;</span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">FirstName</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
		<span class="n">buffer</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"EMAIL:</span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
		<span class="n">buffer</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"TEL;TYPE=VOICE,HOME:</span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">Phone</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
		<span class="n">buffer</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"ADR;TYPE=home:;;</span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">Address</span><span class="p">}</span><span class="s">;</span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">City</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>            
		<span class="n">buffer</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">$"UID:</span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">Id</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
		<span class="n">buffer</span><span class="p">.</span><span class="nf">AppendLine</span><span class="p">(</span><span class="s">"END:VCARD"</span><span class="p">);</span>
		<span class="n">logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">$"Writing </span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">FirstName</span><span class="p">}</span><span class="s"> </span><span class="p">{</span><span class="n">person</span><span class="p">.</span><span class="n">LastName</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the constructor we need to specify the supported media types and encodings. In the method <code class="language-plaintext highlighter-rouge">CanWriteType()</code> we need to check whether the current type is supported within this output formatters. Here we only want to format a single <code class="language-plaintext highlighter-rouge">Person</code> or a list of <code class="language-plaintext highlighter-rouge">Persons</code>.</p>

<p>The method <code class="language-plaintext highlighter-rouge">WriteResponseBodyAsync()</code> then actually writes the list of persons out to the response stream via a <code class="language-plaintext highlighter-rouge">StringBuilder</code>.</p>

<p>At least we need to register the new <code class="language-plaintext highlighter-rouge">VcardOutputFormatter</code> in the <code class="language-plaintext highlighter-rouge">Startup.cs</code>:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AddMvcOptions</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">options</span><span class="p">.</span><span class="n">RespectBrowserAcceptHeader</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span> <span class="c1">// false by default</span>
        <span class="n">options</span><span class="p">.</span><span class="n">OutputFormatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">XmlSerializerOutputFormatter</span><span class="p">());</span>

        <span class="c1">// register the VcardOutputFormatter</span>
        <span class="n">options</span><span class="p">.</span><span class="n">OutputFormatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">VcardOutputFormatter</span><span class="p">());</span> 
    <span class="p">});</span>

</code></pre></div></div>

<p>Start the app again using <code class="language-plaintext highlighter-rouge">dotnet run</code>. Now change the Accept header to <code class="language-plaintext highlighter-rouge">text/vcard</code> and let‚Äôs see what happens:</p>

<p><img src="images/customize-aspnetcore/custom-formatter-vcard.PNG" alt="" /></p>

<p>We now should see our date in the VCard format.</p>

<p>Let‚Äôs do the same for a CSV output. We already added the CsvHelper library to the project, so you can just copy the next snippet into your project:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">CsvOutputFormatter</span> <span class="p">:</span> <span class="n">TextOutputFormatter</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">ContentType</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">CsvOutputFormatter</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">SupportedMediaTypes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">MediaTypeHeaderValue</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="s">"text/csv"</span><span class="p">));</span>

        <span class="n">SupportedEncodings</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">);</span>
        <span class="n">SupportedEncodings</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// optional, but makes sense to restrict to a specific condition</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">CanWriteType</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Person</span><span class="p">).</span><span class="nf">IsAssignableFrom</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
            <span class="p">||</span> <span class="k">typeof</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;).</span><span class="nf">IsAssignableFrom</span><span class="p">(</span><span class="n">type</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="nf">CanWriteType</span><span class="p">(</span><span class="n">type</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// this needs to be overwritten</span>
    <span class="k">public</span> <span class="k">override</span> <span class="n">Task</span> <span class="nf">WriteResponseBodyAsync</span><span class="p">(</span>
    	<span class="n">OutputFormatterWriteContext</span> <span class="n">context</span><span class="p">,</span> 
    	<span class="n">Encoding</span> <span class="n">selectedEncoding</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">serviceProvider</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">RequestServices</span><span class="p">;</span>
        <span class="kt">var</span> <span class="n">logger</span> <span class="p">=</span> <span class="n">serviceProvider</span>
        	<span class="p">.</span><span class="nf">GetService</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">CsvOutputFormatter</span><span class="p">&gt;))</span> <span class="k">as</span> <span class="n">ILogger</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">csv</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CsvWriter</span><span class="p">(</span><span class="k">new</span> <span class="nf">StreamWriter</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">Body</span><span class="p">));</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Object</span> <span class="k">is</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">persons</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Object</span> <span class="k">as</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;;</span>
            <span class="n">csv</span><span class="p">.</span><span class="nf">WriteRecords</span><span class="p">(</span><span class="n">persons</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Object</span> <span class="k">as</span> <span class="n">Person</span><span class="p">;</span>
            <span class="n">csv</span><span class="p">.</span><span class="n">WriteRecord</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">person</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This almost works the same way. We can pass the response stream via a <code class="language-plaintext highlighter-rouge">StreamWriter</code> directly into the <code class="language-plaintext highlighter-rouge">CsvWriter</code>. After that we are able to feed the writer with the persons or the list of persons. That‚Äôs it.</p>

<p>We also need to register the <code class="language-plaintext highlighter-rouge">CsvOutputFormatter</code> before we can test it.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AddMvcOptions</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">options</span><span class="p">.</span><span class="n">RespectBrowserAcceptHeader</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span> <span class="c1">// false by default</span>
        <span class="n">options</span><span class="p">.</span><span class="n">OutputFormatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">XmlSerializerOutputFormatter</span><span class="p">());</span>

        <span class="c1">// register the VcardOutputFormatter</span>
        <span class="n">options</span><span class="p">.</span><span class="n">OutputFormatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">VcardOutputFormatter</span><span class="p">());</span> 
        <span class="c1">// register the CsvOutputFormatter</span>
        <span class="n">options</span><span class="p">.</span><span class="n">OutputFormatters</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">CsvOutputFormatter</span><span class="p">());</span> 
    <span class="p">});</span>
</code></pre></div></div>

<p>In Postman change the <code class="language-plaintext highlighter-rouge">Accept</code> header to <code class="language-plaintext highlighter-rouge">text/csv</code> and press send again:</p>

<p><img src="images/customize-aspnetcore/custom-formatter-csv.PNG" alt="" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>Isn‚Äôt that cool? I really like the way to change the format based on the except header. This way you are able to create an Web API for many different clients and one that accepts many different formats. There are still a lot of potential clients out there which don‚Äôt use JSON and prefer XML or CSV.</p>

<p>The other way around would be an option to consume CSV or any other format inside the Web API. Let‚Äôs assume your client would send you a list of persons in CSV format. How would you solve this? Parsing the string manually in the action method would work, but it‚Äôs not a nice option. This is what <strong>ModelBinders</strong> can do for us. Let‚Äôs see how this works in the next chapter.</p>

<hr />
<h2 id="sessions">Sessions</h2>

<p>This is series of articles on Building Conf planner app with Asp.net Core:</p>

<ul>
  <li><a href="/blog/customize-logging" target="_blank">1 - Logging</a></li>
  <li><a href="/blog/customize-configuration" target="_blank">2 - Configuration</a></li>
  <li><a href="/blog/customize-dependency-injection" target="_blank">3 - Dependency Injection</a></li>
  <li><a href="/blog/customize-https" target="_blank">4 - Https</a></li>
  <li><a href="/blog/customize-hostedservices" target="_blank">5 - Hostedservices</a></li>
  <li><a href="/blog/customize-middleware" target="_blank">6 - Middlewares</a></li>
  <li><a href="/blog/customize-outputformatter" target="_blank">7 - Outputformatter</a></li>
  <li><a href="/blog/customize-modelbinders" target="_blank">8 - Modelbinders </a></li>
  <li><a href="/blog/customize-actionfilters" target="_blank">9 - Actionfilters</a></li>
  <li><a href="/blog/customize-taghelpers" target="_blank">10 - Taghelpers</a></li>
  <li><a href="/blog/customize-webhostbuilder" target="_blank">11 - Webhostbuilder</a></li>
  <li><a href="/blog/customize-hosting" target="_blank">12 - Hosting </a></li>
</ul>

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/customize-middleware" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/customize-modelbinders" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET