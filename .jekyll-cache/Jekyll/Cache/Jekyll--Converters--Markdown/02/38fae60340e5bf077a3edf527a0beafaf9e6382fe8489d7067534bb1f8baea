I"Rú<h2 id="integrating-hibernate-and-jpa-with-spring-boot">Integrating Hibernate and JPA with Spring Boot</h2>
<p>This guide will help you create a simple project with Spring Boot and connect to a database using Hibernate/JPA. We will use Spring Boot Starter JPA and in memory database H2.</p>

<h2 id="project-code-structure">Project Code Structure</h2>

<p>Following screenshot shows the structure of the project we will create.</p>

<p><img src="/images/SpringBootwithJPA-ProjectStructure.png" alt="Image" title="Spring Boot with JPA - Project Structure" /></p>

<p>A few details:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Student.java</code> - Entity bean to store student details.</li>
  <li><code class="language-plaintext highlighter-rouge">StudentRepository.java</code> - Extends JpaRepository. Acts as a repository to update/retrieve Student entities.</li>
  <li><code class="language-plaintext highlighter-rouge">data.sql</code> - We use data.sql to populate the initial student data.</li>
  <li>SpringBoot2JPAWithHibernateAndH2Application.java - The main Spring Boot Application class which is used to launch up the application. We will extend <code class="language-plaintext highlighter-rouge">CommandLineRunner</code> interface and implement <code class="language-plaintext highlighter-rouge">public void run(String... args)</code> method to launch the spring jpa repository methods when the server launches up.</li>
  <li><code class="language-plaintext highlighter-rouge">pom.xml</code> - Contains all the dependencies needed to build this project. We will use Spring Boot Starter JPA and Web other than Developer Tools and H2 as in memory database.</li>
</ul>

<h2 id="tools-you-will-need">Tools you will need</h2>
<ul>
  <li>Maven 3.0+ is your build tool</li>
  <li>Your favorite IDE. We use Eclipse.</li>
  <li>JDK 1.8+</li>
</ul>

<h2 id="complete-maven-project-with-code-examples">Complete Maven Project With Code Examples</h2>
<blockquote>
  <p>Our Github repository has all the code examples - https://github.com/girishgodage/spring-boot-examples/tree/master/spring-boot-2-jpa-with-hibernate-and-h2</p>
</blockquote>

<h2 id="how-does-jpahibernate-work">How does JPA/Hibernate Work?</h2>

<p>Databases are designed with Tables/Relations. Java objects are designed using OOPS. We would want to store the data from objects into tables and vice-versa.</p>

<p>Earlier approaches involved writing SQL Queries. JDBC, Spring JDBC and myBatis were popular approaches.</p>

<p>However, JPA evolved as a result of a different thought process.</p>

<blockquote>
  <p>How about mapping the objects directly to tables/relationships?</p>
</blockquote>

<p>This Mapping is also called ORM - Object Relational Mapping. Before JPA, ORM was the term more commonly used to refer to these frameworks. Thats one of the reasons, Hibernate is called a ORM framework.</p>

<h2 id="important-concepts-in-jpa">Important Concepts in JPA</h2>

<p><img src="/images/JPA_02_Architecture.png" alt="Image" title="JPA Architecuture" /></p>

<p>JPA allows to map application classes to tables in database.</p>
<ul>
  <li>Entity Manager - Once the mappings are defined, entity manager can manage your entities. Entity Manager handles all interactions with the database</li>
  <li>JPQL (Java Persistence Query Language) - Provides ways to write queries to execute searches against entities. Important thing to understand is the these are different from SQL queries. JPQL queries already understand the mappings that are defined between entities. We can add additional conditions as needed.</li>
  <li>Criteria API defines a Java based API to execute searches against databases.</li>
</ul>

<h2 id="jpa-vs-hibernate">JPA vs Hibernate</h2>

<p>Hibernate is one of the most popular ORM frameworks.</p>

<p>JPA defines the specification. It is an API.</p>
<ul>
  <li>How do you define entities?</li>
  <li>How do you map attributes?</li>
  <li>How do you map relationships between entities?</li>
  <li>Who manages the entities?</li>
</ul>

<p>Hibernate is one of the popular implementations of JPA.</p>
<ul>
  <li>Hibernate understands the mappings that we add between objects and tables. It ensures that data is stored/retrieved from the database based on the mappings.</li>
  <li>Hibernate also provides additional features on top of JPA. But depending on them would mean a lock in to Hibernate. You cannot move to other JPA implementations like Toplink.</li>
</ul>

<h2 id="creating-the-project-with-spring-initializr">Creating the Project with Spring Initializr</h2>

<p>Spring Initializr <a href="http://start.spring.io/" target="_blank">http://start.spring.io/</a> is great tool to bootstrap your Spring Boot projects.</p>

<p><img src="/images/spring-initializer-web-h2-devtools-jpa.png" alt="Image" title="Web, JPA, H2 and Developer Tools" /></p>

<p>As shown in the image above, following steps have to be done</p>

<ul>
  <li>Launch Spring Initializr and choose the following
    <ul>
      <li>Choose <code class="language-plaintext highlighter-rouge">com.girishgodage.springboot.rest.example</code> as Group</li>
      <li>Choose <code class="language-plaintext highlighter-rouge">spring-boot-2-jpa-with-hibernate-and-h2</code> as Artifact</li>
      <li>Choose following dependencies
        <ul>
          <li>Web</li>
          <li>JPA</li>
          <li>H2</li>
          <li>DevTools</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Click Generate Project.</li>
  <li>Import the project into Eclipse. File -&gt; Import -&gt; Existing Maven Project.</li>
</ul>

<h2 id="starter-projects-in-pomxml">Starter Projects in pom.xml</h2>

<p>Below is the list of starter projects in pom.xml.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-jpa&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
			&lt;scope&gt;runtime&lt;/scope&gt;
		&lt;/dependency&gt;
		
		&lt;dependency&gt;
			&lt;groupId&gt;com.h2database&lt;/groupId&gt;
			&lt;artifactId&gt;h2&lt;/artifactId&gt;
			&lt;scope&gt;runtime&lt;/scope&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;
</code></pre></div></div>
<h2 id="understanding-spring-boot-starter-jpa">Understanding Spring Boot Starter JPA</h2>

<p>Below picture highlights some of the dependencies that are part of the imported JPA project.
<img src="/images/spring-boot-starter-jpa-dependencies.png" alt="Image" title="Spring Boot Starter JPA Dependencies" /></p>

<blockquote>
  <p>Key Question : How did all these dependencies come in?</p>
</blockquote>

<p>All these dependencies are defined in spring-boot-starter-jpa. As soon as we include Spring Boot Starter JPA in our project (pom.xml), we get the following features from a wide variety of dependencies</p>
<ul>
  <li>AOP</li>
  <li>Transaction Management</li>
  <li>JPA API</li>
  <li>JPA Implementation - Default Hibernate</li>
  <li>JDBC</li>
</ul>

<p>Extract below shows some code from pom.xml of spring-boot-starter-jpa.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;
  &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;
  &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;
  &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;
  &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
  &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;
  &lt;version&gt;5.2.12.Final&lt;/version&gt;
  &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
  &lt;artifactId&gt;javax.transaction-api&lt;/artifactId&gt;
  &lt;version&gt;1.2&lt;/version&gt;
  &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
  &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;
  &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;
  &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;
  &lt;version&gt;5.0.1.RELEASE&lt;/version&gt;
  &lt;scope&gt;compile&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<h2 id="enable-h2-console">Enable H2 Console</h2>

<p>We will use H2 as the database.</p>

<p>H2 provides a web interface called H2 Console to see the data. Letâ€™s enable h2 console in the application.properties.</p>

<p>/src/main/resources/application.properties</p>
<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enabling H2 Console
</span><span class="py">spring.h2.console.enabled</span><span class="p">=</span><span class="s">true</span>
</code></pre></div></div>

<p>When you reload the application, you can launch up H2 Console at http://localhost:8080/h2-console.</p>

<p><img src="/images/H2-Console-Login-Page.png" alt="Image" title="H2 Console Login PAge" /></p>

<blockquote>
  <p>Tip - Make sure that you use <code class="language-plaintext highlighter-rouge">jdbc:h2:mem:testdb</code> as JDBC URL.</p>
</blockquote>

<p>When you use the right JDBC URL given above, you should see an empty schema when you click <code class="language-plaintext highlighter-rouge">Connect</code> button.
<img src="/images/H2-Console-Empty-Schema.png" alt="Image" title="H2 Console Empty Page" /></p>

<h3 id="create-your-first-jpa-entity">Create Your First JPA Entity</h3>

<p>The first step is to create a JPA Entity. Lets create a simple Student Entity with a primary key id.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.jpa.hibernate.h2.example.student</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
	<span class="nd">@Id</span>
	<span class="nd">@GeneratedValue</span>
	<span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">passportNumber</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">passportNumber</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passportNumber</span> <span class="o">=</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">passportNumber</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passportNumber</span> <span class="o">=</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassportNumber</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassportNumber</span><span class="o">(</span><span class="nc">String</span> <span class="n">passportNumber</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passportNumber</span> <span class="o">=</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Student [id=%s, name=%s, passportNumber=%s]"</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">passportNumber</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Important things to note:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">@Entity</code>: Specifies that the class is an entity. This annotation is applied to the entity class.</li>
  <li><code class="language-plaintext highlighter-rouge">@Id</code>: Specifies the primary key of an entity.</li>
  <li><code class="language-plaintext highlighter-rouge">@GeneratedValue</code>: Provides for the specification of generation strategies for the values of primary keys.</li>
  <li><code class="language-plaintext highlighter-rouge">public Student()</code>: Default constructor to make JPA Happy</li>
</ul>

<p>When the application reloads, you can launch H2 console at http://localhost:8080/h2-console.</p>

<p>You will see that a new table called â€˜studentâ€™ is created in H2 Console.</p>

<blockquote>
  <p>How did the Student table get created?</p>
</blockquote>

<p>Its because of Spring Boot Auto Configuration. We will talk about this a little later.</p>

<p>Letâ€™s now populate some data into the student table.</p>

<p>/src/main/resources/data.sql</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>insert into student
values(10001,'Ranga', 'E1234567');

insert into student
values(10002,'Ravi', 'A1234568');
</code></pre></div></div>

<p>When the application reloads you would see following statements in the log indicating that the sql files are picked up.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Executing SQL script from URL [file:/girishgodage/git/spring-boot-examples/spring-boot-2-jdbc-with-h2/target/classes/data.sql]
</code></pre></div></div>

<p>After App Reload, When you login to H2 Console (http://localhost:8080/h2-console) you can see that the student table is created and the data is populated.</p>

<p><img src="/images/H2-Console-With-Student.png" alt="Image" title="H2 Console With Student" /></p>

<h2 id="create-repository-class-to-read-student-information">Create Repository class to Read Student information</h2>

<p>/src/main/java/com/girishgodage/springboot/jpa/hibernate/h2/example/student/StudentRepository.java</p>

<p>We create a simple interface StudentRepository extending JpaRepository.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.jpa.hibernate.h2.example.student</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StudentRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;{</span>

<span class="o">}</span>
</code></pre></div></div>
<p>Notes</p>
<ul>
  <li>We will talk about all the methods in the JpaRepository a little later.</li>
  <li><code class="language-plaintext highlighter-rouge">public interface StudentRepository extends JpaRepository&lt;Student, Long&gt;</code> - We are extending JpaRepository using two generics - Student &amp; Long. Student is the entity that is being managed and the primary key of Student is Long.</li>
</ul>

<h3 id="jparepository">JpaRepository</h3>

<p>JpaRepository (Defined in Spring Data JPA) is the JPA specific Repository interface.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">ID</span> <span class="kd">extends</span> <span class="nc">Serializable</span><span class="o">&gt;</span>
		<span class="kd">extends</span> <span class="nc">PagingAndSortingRepository</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">ID</span><span class="o">&gt;,</span> <span class="nc">QueryByExampleExecutor</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
</code></pre></div></div>

<blockquote>
  <p>JpaRepository extends PagingAndSortingRepository which in turn extends CrudRepository interface. So, JpaRepository inherits all the methods from the two interfaces shown below.</p>
</blockquote>

<p>PagingAndSortingRepository</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">interface</span> <span class="nc">PagingAndSortingRepository</span> <span class="kd">extends</span> <span class="nc">CrudRepository</span> <span class="o">{</span>
  
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">Iterable</span> <span class="nf">findAll</span><span class="o">(</span><span class="nc">Sort</span> <span class="n">arg0</span><span class="o">);</span>
  
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">Page</span> <span class="nf">findAll</span><span class="o">(</span><span class="nc">Pageable</span> <span class="n">arg0</span><span class="o">);</span>

<span class="o">}</span>
</code></pre></div></div>

<p>CrudRepository</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">ID</span> <span class="kd">extends</span> <span class="nc">Serializable</span><span class="o">&gt;</span>
    <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">ID</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="o">&lt;</span><span class="no">S</span> <span class="kd">extends</span> <span class="no">T</span><span class="o">&gt;</span> <span class="no">S</span> <span class="nf">save</span><span class="o">(</span><span class="no">S</span> <span class="n">entity</span><span class="o">);</span>

    <span class="no">T</span> <span class="nf">findOne</span><span class="o">(</span><span class="no">ID</span> <span class="n">primaryKey</span><span class="o">);</span>       

    <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>          

    <span class="nc">Long</span> <span class="nf">count</span><span class="o">();</span>                   

    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="no">T</span> <span class="n">entity</span><span class="o">);</span>          

    <span class="kt">boolean</span> <span class="nf">exists</span><span class="o">(</span><span class="no">ID</span> <span class="n">primaryKey</span><span class="o">);</span>  

    <span class="c1">// â€¦ more functionality omitted.</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="enable-debug-logging-for-hibernate-and-queries">Enable Debug Logging for Hibernate and Queries</h2>

<p>Before we go any further, letâ€™s enable logging for all queries generated by Hibernate. We also enable statistics and format generated sql statements.</p>

<h3 id="srcmainresourcesapplicationproperties">/src/main/resources/application.properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Turn Statistics on
</span><span class="py">spring.jpa.properties.hibernate.generate_statistics</span><span class="p">=</span><span class="s">true</span>
<span class="py">logging.level.org.hibernate.stat</span><span class="p">=</span><span class="s">debug</span>
<span class="c"># Show all queries
</span><span class="py">spring.jpa.show-sql</span><span class="p">=</span><span class="s">true</span>
<span class="py">spring.jpa.properties.hibernate.format_sql</span><span class="p">=</span><span class="s">true</span>
<span class="py">logging.level.org.hibernate.type</span><span class="p">=</span><span class="s">trace</span>
</code></pre></div></div>

<p>Some of the log that is generated (later when we execute queries) when we turn statistics on is shown below.</p>

<p>Session Level Metrics</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>i.StatisticalLoggingSessionEventListener : Session Metrics {
    23004 nanoseconds spent acquiring 1 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    41930 nanoseconds spent preparing 1 JDBC statements;
    174065 nanoseconds spent executing 1 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    5125 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)
</code></pre></div></div>

<p>Queries and Parameters</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hibernate: 
    select
        student0_.id as id1_0_,
        student0_.name as name2_0_,
        student0_.passport_number as passport3_0_ 
    from
        student student0_
2017-12-05 10:20:59.457 TRACE 26877 --- [  restartedMain] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([id1_0_] : [BIGINT]) - [1]
2017-12-05 10:20:59.458 TRACE 26877 --- [  restartedMain] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([name2_0_] : [VARCHAR]) - [John]
2017-12-05 10:20:59.458 TRACE 26877 --- [  restartedMain] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([passport3_0_] : [VARCHAR]) - [A1234657]
2017-12-05 10:20:59.458 TRACE 26877 --- [  restartedMain] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([id1_0_] : [BIGINT]) - [10001]
2017-12-05 10:20:59.458 TRACE 26877 --- [  restartedMain] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([name2_0_] : [VARCHAR]) - [Name-Updated]
2017-12-05 10:20:59.458 TRACE 26877 --- [  restartedMain] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([passport3_0_] : [VARCHAR]) - [New-Passport]
2017-12-05 10:20:59.458 DEBUG 26877 --- [  restartedMain] o.h.s.internal.ConcurrentStatisticsImpl  : HHH000117: HQL: select generatedAlias0 from Student as generatedAlias0, time: 1ms, rows: 2

</code></pre></div></div>

<h2 id="exploring-jparepository-methods">Exploring JpaRepository methods</h2>

<p>Code belows shows the SpringBoot2JPAWithHibernateAndH2Application class extended to execute some of the StudentRepository methods.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBoot2JPAWithHibernateAndH2Application</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>

	<span class="nd">@Autowired</span>
	<span class="nc">StudentRepository</span> <span class="n">repository</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringBoot2JPAWithHibernateAndH2Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="c1">//Code to run at application startup</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<blockquote>
  <p>Spring Boot Auto Configuration sees H2 in the classpath. It understands that we would want to talk to an in memory database. It auto configures a datasource and also a JdbcTemplate connecting to that datasource.</p>
</blockquote>

<p>Important Things To Note</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">SpringBoot2JPAWithHibernateAndH2Application implements CommandLineRunner</code> - Implementing CommandLineRunner helps to execute the repository methods at start of the application.</li>
  <li><code class="language-plaintext highlighter-rouge">public void run(String... args) throws Exception {</code> - Implement the run method defined in the CommandLineRunner interface. This method is executed as soon as the application is launched up.</li>
</ul>

<p>Letâ€™s extend the <code class="language-plaintext highlighter-rouge">run</code> method to execute a few methods on the student repository.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>

	<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Student id 10001 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">10001L</span><span class="o">));</span>
	
	<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"All users 1 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">());</span>
	
	<span class="c1">//Insert</span>
	<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Inserting -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="s">"John"</span><span class="o">,</span> <span class="s">"A1234657"</span><span class="o">)));</span>

	<span class="c1">//Update</span>
	<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Update 10001 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="mi">10001L</span><span class="o">,</span> <span class="s">"Name-Updated"</span><span class="o">,</span> <span class="s">"New-Passport"</span><span class="o">)));</span>

	<span class="n">repository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="mi">10002L</span><span class="o">);</span>
	
	<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"All users 2 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">());</span>
<span class="o">}</span>

</code></pre></div></div>

<p>Important points to Note:</p>
<ul>
  <li>findById, findAll, deleteById methods are self explanatory.</li>
  <li>`saveâ€™ method is used for both insertion and updates. If the entity is already present in the database, it is updated. Else, it is inserted.</li>
</ul>

<p>Output from above statements when the code is run is shown below:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Student id 10001 -&gt; Optional[Student [id=10001, name=Ranga, passportNumber=E1234567]]
All users 1 -&gt; [Student [id=10001, name=Ranga, passportNumber=E1234567], Student [id=10002, name=Ravi, passportNumber=A1234568]]
Inserting -&gt; Student [id=1, name=John, passportNumber=A1234657]
Update 10001 -&gt; Student [id=10001, name=Name-Updated, passportNumber=New-Passport]
All users 2 -&gt; [Student [id=1, name=John, passportNumber=A1234657], Student [id=10001, name=Name-Updated, passportNumber=New-Passport]]

</code></pre></div></div>

<h2 id="few-more-advanced-jpahibernate-orm-mappings">Few more advanced JPA/Hibernate ORM Mappings</h2>

<p>Lets look at a few more examples to understand how JPA can be used to map objects to tables.</p>

<h4 id="example-1---relationships-manytomany">Example 1 - Relationships @ManyToMany</h4>

<p>Relationships between objects are expressed in a different way compared to relationship between tables.</p>

<p>Each Employee can have multiple Tasks. Each Task can be shared by multiple Employees. There is a Many to Many relationship between them. We use @ManyToMany annotation to establish the relationship.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
   
     <span class="c1">//Some other code</span>
	
	<span class="nd">@ManyToMany</span>
	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Task</span><span class="o">&gt;</span> <span class="n">tasks</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Task</span> <span class="o">{</span>

     <span class="c1">//Some other code</span>

	<span class="nd">@ManyToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"tasks"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">&gt;</span> <span class="n">employees</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">employee</span> 
  <span class="p">(</span> 
     <span class="n">id</span>            <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> 
     <span class="n">OTHER_COLUMNS</span>
  <span class="p">)</span> 


  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">employee_tasks</span> 
  <span class="p">(</span> 
     <span class="n">employees_id</span> <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> 
     <span class="n">tasks_id</span>     <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span> 
  <span class="p">)</span> 

  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">task</span> 
  <span class="p">(</span> 
     <span class="n">id</span>          <span class="nb">INTEGER</span> <span class="k">GENERATED</span> <span class="k">BY</span> <span class="k">DEFAULT</span> <span class="k">AS</span> <span class="k">IDENTITY</span><span class="p">,</span> 
     <span class="n">OTHER_COLUMNS</span>
  <span class="p">)</span> 

</code></pre></div></div>

<h4 id="example-2---inheritance-startegies---inheritancetypesingle_table">Example 2 - Inheritance Startegies - InheritanceType.SINGLE_TABLE</h4>

<p>Some times multiple classes are mapped to a single table and vice-versa. In these situations, we define a inheritance strategy. In this example, we use a strategy of InheritanceType.SINGLE_TABLE.</p>

<p>Objects</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Inheritance</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">InheritanceType</span><span class="o">.</span><span class="na">SINGLE_TABLE</span><span class="o">)</span>
<span class="nd">@DiscriminatorColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"EMPLOYEE_TYPE"</span><span class="o">)</span>
<span class="kd">public</span>  <span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>	
    <span class="c1">//Other Employee Attributes</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FullTimeEmployee</span> <span class="kd">extends</span> <span class="nc">Employee</span> <span class="o">{</span>
	<span class="kd">protected</span> <span class="nc">Integer</span> <span class="n">salary</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PartTimeEmployee</span> <span class="kd">extends</span> <span class="nc">Employee</span> <span class="o">{</span>
	<span class="kd">protected</span> <span class="nc">Float</span> <span class="n">hourlyWage</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Tables</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">employee</span> 
  <span class="p">(</span> 
     <span class="n">employee_type</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">31</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> 
     <span class="n">id</span>            <span class="nb">BIGINT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> 
     <span class="n">city</span>          <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> 
     <span class="k">state</span>         <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> 
     <span class="n">street</span>        <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> 
     <span class="n">zip</span>           <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span> 

     <span class="n">hourly_wage</span>   <span class="nb">FLOAT</span><span class="p">,</span>  <span class="c1">--PartTimeEmployee</span>

     <span class="n">salary</span>        <span class="nb">INTEGER</span><span class="p">,</span> <span class="c1">--FullTimeEmployee</span>

     <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span> 
  <span class="p">)</span> 

</code></pre></div></div>
<h2 id="complete-code-example">Complete Code Example</h2>

<h3 id="pomxml">/pom.xml</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/POM/4.0.0"</span> <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>

	<span class="nt">&lt;groupId&gt;</span>com.girishgodage.springboot.rest.example<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-boot-2-jpa-with-hibernate-and-h2<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
	<span class="nt">&lt;packaging&gt;</span>jar<span class="nt">&lt;/packaging&gt;</span>

	<span class="nt">&lt;name&gt;</span>spring-boot-2-jpa-with-hibernate-and-h2<span class="nt">&lt;/name&gt;</span>
	<span class="nt">&lt;description&gt;</span>Spring Boot 2, Hibernate, JPA and H2 - Example Project<span class="nt">&lt;/description&gt;</span>

	<span class="nt">&lt;parent&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;version&gt;</span>2.0.0.RELEASE<span class="nt">&lt;/version&gt;</span>
		<span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
	<span class="nt">&lt;/parent&gt;</span>

	<span class="nt">&lt;properties&gt;</span>
		<span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
		<span class="nt">&lt;project.reporting.outputEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.reporting.outputEncoding&gt;</span>
		<span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
	<span class="nt">&lt;/properties&gt;</span>

	<span class="nt">&lt;dependencies&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>

		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>com.h2database<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>h2<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
		<span class="nt">&lt;dependency&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
		<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;/dependencies&gt;</span>

	<span class="nt">&lt;build&gt;</span>
		<span class="nt">&lt;plugins&gt;</span>
			<span class="nt">&lt;plugin&gt;</span>
				<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
				<span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;/plugin&gt;</span>
		<span class="nt">&lt;/plugins&gt;</span>
	<span class="nt">&lt;/build&gt;</span>

	<span class="nt">&lt;repositories&gt;</span>
		<span class="nt">&lt;repository&gt;</span>
			<span class="nt">&lt;id&gt;</span>spring-snapshots<span class="nt">&lt;/id&gt;</span>
			<span class="nt">&lt;name&gt;</span>Spring Snapshots<span class="nt">&lt;/name&gt;</span>
			<span class="nt">&lt;url&gt;</span>https://repo.spring.io/snapshot<span class="nt">&lt;/url&gt;</span>
			<span class="nt">&lt;snapshots&gt;</span>
				<span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
			<span class="nt">&lt;/snapshots&gt;</span>
		<span class="nt">&lt;/repository&gt;</span>
		<span class="nt">&lt;repository&gt;</span>
			<span class="nt">&lt;id&gt;</span>spring-milestones<span class="nt">&lt;/id&gt;</span>
			<span class="nt">&lt;name&gt;</span>Spring Milestones<span class="nt">&lt;/name&gt;</span>
			<span class="nt">&lt;url&gt;</span>https://repo.spring.io/milestone<span class="nt">&lt;/url&gt;</span>
			<span class="nt">&lt;snapshots&gt;</span>
				<span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
			<span class="nt">&lt;/snapshots&gt;</span>
		<span class="nt">&lt;/repository&gt;</span>
	<span class="nt">&lt;/repositories&gt;</span>

	<span class="nt">&lt;pluginRepositories&gt;</span>
		<span class="nt">&lt;pluginRepository&gt;</span>
			<span class="nt">&lt;id&gt;</span>spring-snapshots<span class="nt">&lt;/id&gt;</span>
			<span class="nt">&lt;name&gt;</span>Spring Snapshots<span class="nt">&lt;/name&gt;</span>
			<span class="nt">&lt;url&gt;</span>https://repo.spring.io/snapshot<span class="nt">&lt;/url&gt;</span>
			<span class="nt">&lt;snapshots&gt;</span>
				<span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
			<span class="nt">&lt;/snapshots&gt;</span>
		<span class="nt">&lt;/pluginRepository&gt;</span>
		<span class="nt">&lt;pluginRepository&gt;</span>
			<span class="nt">&lt;id&gt;</span>spring-milestones<span class="nt">&lt;/id&gt;</span>
			<span class="nt">&lt;name&gt;</span>Spring Milestones<span class="nt">&lt;/name&gt;</span>
			<span class="nt">&lt;url&gt;</span>https://repo.spring.io/milestone<span class="nt">&lt;/url&gt;</span>
			<span class="nt">&lt;snapshots&gt;</span>
				<span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
			<span class="nt">&lt;/snapshots&gt;</span>
		<span class="nt">&lt;/pluginRepository&gt;</span>
	<span class="nt">&lt;/pluginRepositories&gt;</span>


<span class="nt">&lt;/project&gt;</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainjavacomgirishgodagespringbootjpahibernateh2examplespringboot2jpawithhibernateandh2applicationjava">/src/main/java/com/girishgodage/springboot/jpa/hibernate/h2/example/SpringBoot2JPAWithHibernateAndH2Application.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.jpa.hibernate.h2.example</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.CommandLineRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.girishgodage.springboot.jpa.hibernate.h2.example.student.Student</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.girishgodage.springboot.jpa.hibernate.h2.example.student.StudentRepository</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBoot2JPAWithHibernateAndH2Application</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>

	<span class="nd">@Autowired</span>
	<span class="nc">StudentRepository</span> <span class="n">repository</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringBoot2JPAWithHibernateAndH2Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>

		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Student id 10001 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">10001L</span><span class="o">));</span>
		
		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"All users 1 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">());</span>
		
		<span class="c1">//Insert</span>
		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Inserting -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="s">"John"</span><span class="o">,</span> <span class="s">"A1234657"</span><span class="o">)));</span>

		<span class="c1">//Update</span>
		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Update 10001 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="nc">Student</span><span class="o">(</span><span class="mi">10001L</span><span class="o">,</span> <span class="s">"Name-Updated"</span><span class="o">,</span> <span class="s">"New-Passport"</span><span class="o">)));</span>

		<span class="n">repository</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="mi">10002L</span><span class="o">);</span>
		
		<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"All users 2 -&gt; {}"</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainjavacomgirishgodagespringbootjpahibernateh2examplestudentstudentjava">/src/main/java/com/girishgodage/springboot/jpa/hibernate/h2/example/student/Student.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.jpa.hibernate.h2.example.student</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
	<span class="nd">@Id</span>
	<span class="nd">@GeneratedValue</span>
	<span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">passportNumber</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">()</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">passportNumber</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passportNumber</span> <span class="o">=</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">Student</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">passportNumber</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passportNumber</span> <span class="o">=</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassportNumber</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassportNumber</span><span class="o">(</span><span class="nc">String</span> <span class="n">passportNumber</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">passportNumber</span> <span class="o">=</span> <span class="n">passportNumber</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Student [id=%s, name=%s, passportNumber=%s]"</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">passportNumber</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainjavacomgirishgodagespringbootjpahibernateh2examplestudentstudentrepositoryjava">/src/main/java/com/girishgodage/springboot/jpa/hibernate/h2/example/student/StudentRepository.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.jpa.hibernate.h2.example.student</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">StudentRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Student</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;{</span>

<span class="o">}</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainresourcesapplicationproperties-1">/src/main/resources/application.properties</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enabling H2 Console
</span><span class="py">spring.h2.console.enabled</span><span class="p">=</span><span class="s">true</span>
<span class="c">#Turn Statistics on
</span><span class="py">spring.jpa.properties.hibernate.generate_statistics</span><span class="p">=</span><span class="s">true</span>
<span class="py">logging.level.org.hibernate.stat</span><span class="p">=</span><span class="s">debug</span>
<span class="c"># Show all queries
</span><span class="py">spring.jpa.show-sql</span><span class="p">=</span><span class="s">true</span>
<span class="py">spring.jpa.properties.hibernate.format_sql</span><span class="p">=</span><span class="s">true</span>
<span class="py">logging.level.org.hibernate.type</span><span class="p">=</span><span class="s">trace</span>
</code></pre></div></div>
<hr />

<h3 id="srcmainresourcesdatasql">/src/main/resources/data.sql</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>insert into student
values(10001,'Ranga', 'E1234567');

insert into student
values(10002,'Ravi', 'A1234568');
</code></pre></div></div>
<hr />

<h3 id="srctestjavacomgirishgodagespringbootjpahibernateh2examplespringboot2jpawithhibernateandh2applicationtestsjava">/src/test/java/com/girishgodage/springboot/jpa/hibernate/h2/example/SpringBoot2JPAWithHibernateAndH2ApplicationTests.java</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.girishgodage.springboot.jpa.hibernate.h2.example</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.test.context.SpringBootTest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringRunner</span><span class="o">;</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@SpringBootTest</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBoot2JPAWithHibernateAndH2ApplicationTests</span> <span class="o">{</span>

	<span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">contextLoads</span><span class="o">()</span> <span class="o">{</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<hr />

<hr />

<!--Section: Lesson UI-->
<section class="text-center">
    <hr />
   
    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/hibernate-jpa-tutorial-with-spring-boot-starter-jpa" class="btn  btn-sm" id="round-button">
                <i class="fas fa-arrow-left mr-2"></i>Previous Lesson
            </a>
        </div>
     
        <div class="col-lg-4 col-md-6 col-sm-6">
            <a target="_blank" href="/blog/spring-boot-and-iBatis-with-h2-tutorial" class="btn btn-sm" id="round-button">Next Lesson
                <i class="fas fa-arrow-right ml-2"></i>
            </a>
        </div>       
    </div>

</section>

:ET